
LAB-03_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028b0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08002ab0  08002ab0  00012ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b68  08002b68  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002b68  08002b68  00012b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b70  08002b70  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b70  08002b70  00012b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b74  08002b74  00012b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000070  08002be8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  200001b0  08002be8  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a848  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001872  00000000  00000000  0002a8e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000630  00000000  00000000  0002c158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e8  00000000  00000000  0002c788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c2a2  00000000  00000000  0002cd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009488  00000000  00000000  00059012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010bcc9  00000000  00000000  0006249a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016e163  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001798  00000000  00000000  0016e1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003758  00000000  00000000  0016f950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         0000006c  00000000  00000000  001730a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000000e3  00000000  00000000  00173114  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08002a98 	.word	0x08002a98

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08002a98 	.word	0x08002a98

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
UART_HandleTypeDef U6; //Handle type structure for USART6
char input; //For storing user inputs
//char end_message[] = "Program Has Halted\r\n";

// Main Execution Loop
int main(void) {
 80005d8:	b508      	push	{r3, lr}
	//Initialize the system
	Sys_Init();
 80005da:	f000 f8a7 	bl	800072c <Sys_Init>
	HAL_Init();
 80005de:	f000 f9ab 	bl	8000938 <HAL_Init>

	initUart(&USB_UART, 115200, USART1);
 80005e2:	4c12      	ldr	r4, [pc, #72]	; (800062c <main+0x54>)
 80005e4:	4a12      	ldr	r2, [pc, #72]	; (8000630 <main+0x58>)
 80005e6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80005ea:	4620      	mov	r0, r4
 80005ec:	f000 f91e 	bl	800082c <initUart>
	HAL_UART_MspInit(&USB_UART);
 80005f0:	4620      	mov	r0, r4
 80005f2:	f000 f8b1 	bl	8000758 <HAL_UART_MspInit>

	initUart(&U6, 38400, USART6); //Initialize UART with 38400 Baud and Instance USART6
 80005f6:	4c0f      	ldr	r4, [pc, #60]	; (8000634 <main+0x5c>)
 80005f8:	4a0f      	ldr	r2, [pc, #60]	; (8000638 <main+0x60>)
 80005fa:	f44f 4116 	mov.w	r1, #38400	; 0x9600
 80005fe:	4620      	mov	r0, r4
 8000600:	f000 f914 	bl	800082c <initUart>
	HAL_UART_MspInit(&U6); //Initialize GPIOs for USART6
 8000604:	4620      	mov	r0, r4
 8000606:	f000 f8a7 	bl	8000758 <HAL_UART_MspInit>
	//HAL_UART_Receive(&U6, (uint8_t*) &input, 1, 1000);
	//HAL_UART_Transmit(&U6, (uint8_t*) &input, 1, 1000);
	while (1){
		HAL_Delay(1000);
 800060a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060e:	f000 f9bb 	bl	8000988 <HAL_Delay>
		HAL_UART_Receive(&USB_UART, (uint8_t*) &input, 1, 1000);
 8000612:	4c0a      	ldr	r4, [pc, #40]	; (800063c <main+0x64>)
 8000614:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000618:	2201      	movs	r2, #1
 800061a:	4621      	mov	r1, r4
 800061c:	4803      	ldr	r0, [pc, #12]	; (800062c <main+0x54>)
 800061e:	f001 f990 	bl	8001942 <HAL_UART_Receive>
		printf("%c\n\r", input);
 8000622:	7821      	ldrb	r1, [r4, #0]
 8000624:	4806      	ldr	r0, [pc, #24]	; (8000640 <main+0x68>)
 8000626:	f001 fab3 	bl	8001b90 <iprintf>
	while (1){
 800062a:	e7ee      	b.n	800060a <main+0x32>
 800062c:	2000009c 	.word	0x2000009c
 8000630:	40011000 	.word	0x40011000
 8000634:	2000011c 	.word	0x2000011c
 8000638:	40011400 	.word	0x40011400
 800063c:	20000098 	.word	0x20000098
 8000640:	08002ac8 	.word	0x08002ac8

08000644 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 8000644:	b500      	push	{lr}
 8000646:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2301      	movs	r3, #1
 800064a:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000650:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800065a:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 800065c:	2219      	movs	r2, #25
 800065e:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000660:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8000664:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000666:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000668:	2309      	movs	r3, #9
 800066a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 800066c:	2307      	movs	r3, #7
 800066e:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000670:	4668      	mov	r0, sp
 8000672:	f000 fb25 	bl	8000cc0 <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 8000676:	b100      	cbz	r0, 800067a <SystemClock_Config+0x36>
    while(1) { ; }
 8000678:	e7fe      	b.n	8000678 <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 800067a:	f000 fae3 	bl	8000c44 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 800067e:	b100      	cbz	r0, 8000682 <SystemClock_Config+0x3e>
    while(1) { ; }
 8000680:	e7fe      	b.n	8000680 <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000682:	230f      	movs	r3, #15
 8000684:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2302      	movs	r3, #2
 8000688:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000692:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000698:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800069a:	2107      	movs	r1, #7
 800069c:	a80d      	add	r0, sp, #52	; 0x34
 800069e:	f000 fd81 	bl	80011a4 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 80006a2:	b100      	cbz	r0, 80006a6 <SystemClock_Config+0x62>
    while(1) { ; }
 80006a4:	e7fe      	b.n	80006a4 <SystemClock_Config+0x60>
  }
}
 80006a6:	b013      	add	sp, #76	; 0x4c
 80006a8:	f85d fb04 	ldr.w	pc, [sp], #4

080006ac <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 80006ac:	b410      	push	{r4}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006b2:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006b6:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <CPU_CACHE_Enable+0x7c>)
 80006b8:	2100      	movs	r1, #0
 80006ba:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006c2:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006c6:	695a      	ldr	r2, [r3, #20]
 80006c8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80006cc:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006d2:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80006d6:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006da:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006de:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006e2:	f3c0 324e 	ubfx	r2, r0, #13, #15
 80006e6:	e000      	b.n	80006ea <CPU_CACHE_Enable+0x3e>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 80006e8:	461a      	mov	r2, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006ea:	f3c0 01c9 	ubfx	r1, r0, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006ee:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80006f2:	ea03 1342 	and.w	r3, r3, r2, lsl #5
 80006f6:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 80006fa:	4c0b      	ldr	r4, [pc, #44]	; (8000728 <CPU_CACHE_Enable+0x7c>)
 80006fc:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways-- != 0U);
 8000700:	460b      	mov	r3, r1
 8000702:	3901      	subs	r1, #1
 8000704:	2b00      	cmp	r3, #0
 8000706:	d1f2      	bne.n	80006ee <CPU_CACHE_Enable+0x42>
    } while(sets-- != 0U);
 8000708:	1e53      	subs	r3, r2, #1
 800070a:	2a00      	cmp	r2, #0
 800070c:	d1ec      	bne.n	80006e8 <CPU_CACHE_Enable+0x3c>
 800070e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000712:	6963      	ldr	r3, [r4, #20]
 8000714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000718:	6163      	str	r3, [r4, #20]
 800071a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800071e:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8000722:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <Sys_Init>:

// Unified System Initialization (equivalent of current MPS Sys_Init())
void Sys_Init(void) {
 800072c:	b508      	push	{r3, lr}
	//Initialize the system
	CPU_CACHE_Enable();		// Enable CPU Caching
 800072e:	f7ff ffbd 	bl	80006ac <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 8000732:	f000 f901 	bl	8000938 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 8000736:	f7ff ff85 	bl	8000644 <SystemClock_Config>
		- Stop Bit = No Stop bits
		- Parity = None
		- BaudRate = 115200 baud
		- Hardware flow control disabled (RTS and CTS signals)
	*/
	initUart(&USB_UART, 115200, USART1);
 800073a:	4a03      	ldr	r2, [pc, #12]	; (8000748 <Sys_Init+0x1c>)
 800073c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000740:	4802      	ldr	r0, [pc, #8]	; (800074c <Sys_Init+0x20>)
 8000742:	f000 f873 	bl	800082c <initUart>
}
 8000746:	bd08      	pop	{r3, pc}
 8000748:	40011000 	.word	0x40011000
 800074c:	2000009c 	.word	0x2000009c

08000750 <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 8000750:	b508      	push	{r3, lr}
  HAL_IncTick();
 8000752:	f000 f907 	bl	8000964 <HAL_IncTick>
}
 8000756:	bd08      	pop	{r3, pc}

08000758 <HAL_UART_MspInit>:
#include "uart.h"

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 800075c:	6803      	ldr	r3, [r0, #0]
 800075e:	4a2e      	ldr	r2, [pc, #184]	; (8000818 <HAL_UART_MspInit+0xc0>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d004      	beq.n	800076e <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 8000764:	4a2d      	ldr	r2, [pc, #180]	; (800081c <HAL_UART_MspInit+0xc4>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d02c      	beq.n	80007c4 <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 800076a:	b00b      	add	sp, #44	; 0x2c
 800076c:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 800076e:	4c2c      	ldr	r4, [pc, #176]	; (8000820 <HAL_UART_MspInit+0xc8>)
 8000770:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000772:	f043 0301 	orr.w	r3, r3, #1
 8000776:	6323      	str	r3, [r4, #48]	; 0x30
 8000778:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	9301      	str	r3, [sp, #4]
 8000780:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8000782:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000786:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800078c:	2301      	movs	r3, #1
 800078e:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000790:	2303      	movs	r3, #3
 8000792:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000794:	2307      	movs	r3, #7
 8000796:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 8000798:	4d22      	ldr	r5, [pc, #136]	; (8000824 <HAL_UART_MspInit+0xcc>)
 800079a:	a905      	add	r1, sp, #20
 800079c:	4628      	mov	r0, r5
 800079e:	f000 f961 	bl	8000a64 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a6:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 80007a8:	a905      	add	r1, sp, #20
 80007aa:	4628      	mov	r0, r5
 80007ac:	f000 f95a 	bl	8000a64 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 80007b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	6463      	str	r3, [r4, #68]	; 0x44
 80007b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007ba:	f003 0310 	and.w	r3, r3, #16
 80007be:	9302      	str	r3, [sp, #8]
 80007c0:	9b02      	ldr	r3, [sp, #8]
 80007c2:	e7d2      	b.n	800076a <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 80007c4:	4c16      	ldr	r4, [pc, #88]	; (8000820 <HAL_UART_MspInit+0xc8>)
 80007c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6323      	str	r3, [r4, #48]	; 0x30
 80007ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007d0:	f003 0304 	and.w	r3, r3, #4
 80007d4:	9303      	str	r3, [sp, #12]
 80007d6:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 80007d8:	2340      	movs	r3, #64	; 0x40
 80007da:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80007dc:	2302      	movs	r3, #2
 80007de:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 80007e4:	2303      	movs	r3, #3
 80007e6:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80007e8:	2308      	movs	r3, #8
 80007ea:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 80007ec:	4d0e      	ldr	r5, [pc, #56]	; (8000828 <HAL_UART_MspInit+0xd0>)
 80007ee:	a905      	add	r1, sp, #20
 80007f0:	4628      	mov	r0, r5
 80007f2:	f000 f937 	bl	8000a64 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007f6:	2380      	movs	r3, #128	; 0x80
 80007f8:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 80007fa:	a905      	add	r1, sp, #20
 80007fc:	4628      	mov	r0, r5
 80007fe:	f000 f931 	bl	8000a64 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 8000802:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000804:	f043 0320 	orr.w	r3, r3, #32
 8000808:	6463      	str	r3, [r4, #68]	; 0x44
 800080a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800080c:	f003 0320 	and.w	r3, r3, #32
 8000810:	9304      	str	r3, [sp, #16]
 8000812:	9b04      	ldr	r3, [sp, #16]
}
 8000814:	e7a9      	b.n	800076a <HAL_UART_MspInit+0x12>
 8000816:	bf00      	nop
 8000818:	40011000 	.word	0x40011000
 800081c:	40011400 	.word	0x40011400
 8000820:	40023800 	.word	0x40023800
 8000824:	40020000 	.word	0x40020000
 8000828:	40020800 	.word	0x40020800

0800082c <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 800082c:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 800082e:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 8000830:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	2200      	movs	r2, #0
 8000834:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 8000836:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 8000838:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 800083a:	210c      	movs	r1, #12
 800083c:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800083e:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 8000840:	f001 f948 	bl	8001ad4 <HAL_UART_Init>
}
 8000844:	bd08      	pop	{r3, pc}
	...

08000848 <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 8000848:	b510      	push	{r4, lr}
 800084a:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 800084c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000850:	b292      	uxth	r2, r2
 8000852:	4802      	ldr	r0, [pc, #8]	; (800085c <_write+0x14>)
 8000854:	f001 f808 	bl	8001868 <HAL_UART_Transmit>
	return len;
}
 8000858:	4620      	mov	r0, r4
 800085a:	bd10      	pop	{r4, pc}
 800085c:	2000009c 	.word	0x2000009c

08000860 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 8000860:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 8000862:	2200      	movs	r2, #0
 8000864:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000866:	f04f 33ff 	mov.w	r3, #4294967295
 800086a:	2201      	movs	r2, #1
 800086c:	4802      	ldr	r0, [pc, #8]	; (8000878 <_read+0x18>)
 800086e:	f001 f868 	bl	8001942 <HAL_UART_Receive>
	return len;
}
 8000872:	2001      	movs	r0, #1
 8000874:	bd08      	pop	{r3, pc}
 8000876:	bf00      	nop
 8000878:	2000009c 	.word	0x2000009c

0800087c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800087c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000880:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000882:	e003      	b.n	800088c <LoopCopyDataInit>

08000884 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000886:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000888:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800088a:	3104      	adds	r1, #4

0800088c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800088c:	480b      	ldr	r0, [pc, #44]	; (80008bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000890:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000892:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000894:	d3f6      	bcc.n	8000884 <CopyDataInit>
  ldr  r2, =_sbss
 8000896:	4a0b      	ldr	r2, [pc, #44]	; (80008c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000898:	e002      	b.n	80008a0 <LoopFillZerobss>

0800089a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800089a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800089c:	f842 3b04 	str.w	r3, [r2], #4

080008a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80008a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80008a4:	d3f9      	bcc.n	800089a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008a6:	f000 f813 	bl	80008d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008aa:	f001 f945 	bl	8001b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ae:	f7ff fe93 	bl	80005d8 <main>
  bx  lr    
 80008b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008b4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80008b8:	08002b78 	.word	0x08002b78
  ldr  r0, =_sdata
 80008bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80008c0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80008c4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80008c8:	200001b0 	.word	0x200001b0

080008cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008cc:	e7fe      	b.n	80008cc <ADC_IRQHandler>
	...

080008d0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <SystemInit+0x18>)
 80008d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80008d6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80008da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008e2:	609a      	str	r2, [r3, #8]
#endif
}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80008ec:	4770      	bx	lr
	...

080008f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f0:	b510      	push	{r4, lr}
 80008f2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <HAL_InitTick+0x40>)
 80008f6:	7818      	ldrb	r0, [r3, #0]
 80008f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008fc:	fbb3 f3f0 	udiv	r3, r3, r0
 8000900:	4a0c      	ldr	r2, [pc, #48]	; (8000934 <HAL_InitTick+0x44>)
 8000902:	6810      	ldr	r0, [r2, #0]
 8000904:	fbb0 f0f3 	udiv	r0, r0, r3
 8000908:	f000 f896 	bl	8000a38 <HAL_SYSTICK_Config>
 800090c:	b968      	cbnz	r0, 800092a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800090e:	2c0f      	cmp	r4, #15
 8000910:	d901      	bls.n	8000916 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000912:	2001      	movs	r0, #1
 8000914:	e00a      	b.n	800092c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000916:	2200      	movs	r2, #0
 8000918:	4621      	mov	r1, r4
 800091a:	f04f 30ff 	mov.w	r0, #4294967295
 800091e:	f000 f859 	bl	80009d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000922:	4b03      	ldr	r3, [pc, #12]	; (8000930 <HAL_InitTick+0x40>)
 8000924:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000926:	2000      	movs	r0, #0
 8000928:	e000      	b.n	800092c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800092a:	2001      	movs	r0, #1
}
 800092c:	bd10      	pop	{r4, pc}
 800092e:	bf00      	nop
 8000930:	20000004 	.word	0x20000004
 8000934:	20000000 	.word	0x20000000

08000938 <HAL_Init>:
{
 8000938:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_Init+0x28>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000942:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800094a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094c:	2003      	movs	r0, #3
 800094e:	f000 f82f 	bl	80009b0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000952:	200f      	movs	r0, #15
 8000954:	f7ff ffcc 	bl	80008f0 <HAL_InitTick>
  HAL_MspInit();
 8000958:	f7ff ffc8 	bl	80008ec <HAL_MspInit>
}
 800095c:	2000      	movs	r0, #0
 800095e:	bd08      	pop	{r3, pc}
 8000960:	40023c00 	.word	0x40023c00

08000964 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000964:	4a03      	ldr	r2, [pc, #12]	; (8000974 <HAL_IncTick+0x10>)
 8000966:	6811      	ldr	r1, [r2, #0]
 8000968:	4b03      	ldr	r3, [pc, #12]	; (8000978 <HAL_IncTick+0x14>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	440b      	add	r3, r1
 800096e:	6013      	str	r3, [r2, #0]
}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	2000019c 	.word	0x2000019c
 8000978:	20000004 	.word	0x20000004

0800097c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800097c:	4b01      	ldr	r3, [pc, #4]	; (8000984 <HAL_GetTick+0x8>)
 800097e:	6818      	ldr	r0, [r3, #0]
}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	2000019c 	.word	0x2000019c

08000988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000988:	b538      	push	{r3, r4, r5, lr}
 800098a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800098c:	f7ff fff6 	bl	800097c <HAL_GetTick>
 8000990:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000992:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000996:	d002      	beq.n	800099e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <HAL_Delay+0x24>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800099e:	f7ff ffed 	bl	800097c <HAL_GetTick>
 80009a2:	1b40      	subs	r0, r0, r5
 80009a4:	42a0      	cmp	r0, r4
 80009a6:	d3fa      	bcc.n	800099e <HAL_Delay+0x16>
  {
  }
}
 80009a8:	bd38      	pop	{r3, r4, r5, pc}
 80009aa:	bf00      	nop
 80009ac:	20000004 	.word	0x20000004

080009b0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b0:	4906      	ldr	r1, [pc, #24]	; (80009cc <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80009b2:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009b8:	041b      	lsls	r3, r3, #16
 80009ba:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009bc:	0200      	lsls	r0, r0, #8
 80009be:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80009c4:	4a02      	ldr	r2, [pc, #8]	; (80009d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80009c6:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80009c8:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80009ca:	4770      	bx	lr
 80009cc:	e000ed00 	.word	0xe000ed00
 80009d0:	05fa0000 	.word	0x05fa0000

080009d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009d4:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_NVIC_SetPriority+0x58>)
 80009d8:	68db      	ldr	r3, [r3, #12]
 80009da:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009de:	f1c3 0407 	rsb	r4, r3, #7
 80009e2:	2c04      	cmp	r4, #4
 80009e4:	bf28      	it	cs
 80009e6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e8:	1d1d      	adds	r5, r3, #4
 80009ea:	2d06      	cmp	r5, #6
 80009ec:	d914      	bls.n	8000a18 <HAL_NVIC_SetPriority+0x44>
 80009ee:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f0:	f04f 35ff 	mov.w	r5, #4294967295
 80009f4:	fa05 f404 	lsl.w	r4, r5, r4
 80009f8:	ea21 0104 	bic.w	r1, r1, r4
 80009fc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009fe:	fa05 f303 	lsl.w	r3, r5, r3
 8000a02:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a06:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000a08:	2800      	cmp	r0, #0
 8000a0a:	db07      	blt.n	8000a1c <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0c:	0109      	lsls	r1, r1, #4
 8000a0e:	b2c9      	uxtb	r1, r1
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <HAL_NVIC_SetPriority+0x5c>)
 8000a12:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000a14:	bc30      	pop	{r4, r5}
 8000a16:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a18:	2300      	movs	r3, #0
 8000a1a:	e7e9      	b.n	80009f0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1c:	f000 000f 	and.w	r0, r0, #15
 8000a20:	0109      	lsls	r1, r1, #4
 8000a22:	b2c9      	uxtb	r1, r1
 8000a24:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <HAL_NVIC_SetPriority+0x60>)
 8000a26:	5419      	strb	r1, [r3, r0]
 8000a28:	e7f4      	b.n	8000a14 <HAL_NVIC_SetPriority+0x40>
 8000a2a:	bf00      	nop
 8000a2c:	e000ed00 	.word	0xe000ed00
 8000a30:	e000e400 	.word	0xe000e400
 8000a34:	e000ed14 	.word	0xe000ed14

08000a38 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a38:	3801      	subs	r0, #1
 8000a3a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a3e:	d20a      	bcs.n	8000a56 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_SYSTICK_Config+0x24>)
 8000a42:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a44:	4a06      	ldr	r2, [pc, #24]	; (8000a60 <HAL_SYSTICK_Config+0x28>)
 8000a46:	21f0      	movs	r1, #240	; 0xf0
 8000a48:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a50:	2207      	movs	r2, #7
 8000a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a54:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a56:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000e010 	.word	0xe000e010
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a64:	2300      	movs	r3, #0
 8000a66:	2b0f      	cmp	r3, #15
 8000a68:	f200 80e3 	bhi.w	8000c32 <HAL_GPIO_Init+0x1ce>
{
 8000a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	e039      	b.n	8000ae6 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a72:	2209      	movs	r2, #9
 8000a74:	e000      	b.n	8000a78 <HAL_GPIO_Init+0x14>
 8000a76:	2200      	movs	r2, #0
 8000a78:	40b2      	lsls	r2, r6
 8000a7a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a7c:	3402      	adds	r4, #2
 8000a7e:	4e6d      	ldr	r6, [pc, #436]	; (8000c34 <HAL_GPIO_Init+0x1d0>)
 8000a80:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a84:	4a6c      	ldr	r2, [pc, #432]	; (8000c38 <HAL_GPIO_Init+0x1d4>)
 8000a86:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000a88:	43ea      	mvns	r2, r5
 8000a8a:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a8e:	684f      	ldr	r7, [r1, #4]
 8000a90:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000a94:	d001      	beq.n	8000a9a <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8000a96:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8000a9a:	4c67      	ldr	r4, [pc, #412]	; (8000c38 <HAL_GPIO_Init+0x1d4>)
 8000a9c:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000a9e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000aa0:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aa4:	684f      	ldr	r7, [r1, #4]
 8000aa6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000aaa:	d001      	beq.n	8000ab0 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8000aac:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8000ab0:	4c61      	ldr	r4, [pc, #388]	; (8000c38 <HAL_GPIO_Init+0x1d4>)
 8000ab2:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ab4:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000ab6:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aba:	684f      	ldr	r7, [r1, #4]
 8000abc:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000ac0:	d001      	beq.n	8000ac6 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8000ac2:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8000ac6:	4c5c      	ldr	r4, [pc, #368]	; (8000c38 <HAL_GPIO_Init+0x1d4>)
 8000ac8:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000aca:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000acc:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ace:	684e      	ldr	r6, [r1, #4]
 8000ad0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000ad4:	d001      	beq.n	8000ada <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8000ad6:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000ada:	4c57      	ldr	r4, [pc, #348]	; (8000c38 <HAL_GPIO_Init+0x1d4>)
 8000adc:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ade:	3301      	adds	r3, #1
 8000ae0:	2b0f      	cmp	r3, #15
 8000ae2:	f200 80a4 	bhi.w	8000c2e <HAL_GPIO_Init+0x1ca>
    ioposition = ((uint32_t)0x01) << position;
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aea:	680c      	ldr	r4, [r1, #0]
 8000aec:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000af0:	ea32 0404 	bics.w	r4, r2, r4
 8000af4:	d1f3      	bne.n	8000ade <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000af6:	684c      	ldr	r4, [r1, #4]
 8000af8:	1e66      	subs	r6, r4, #1
 8000afa:	2c11      	cmp	r4, #17
 8000afc:	bf18      	it	ne
 8000afe:	2e01      	cmpne	r6, #1
 8000b00:	d901      	bls.n	8000b06 <HAL_GPIO_Init+0xa2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b02:	2c12      	cmp	r4, #18
 8000b04:	d112      	bne.n	8000b2c <HAL_GPIO_Init+0xc8>
        temp = GPIOx->OSPEEDR; 
 8000b06:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b08:	005f      	lsls	r7, r3, #1
 8000b0a:	2403      	movs	r4, #3
 8000b0c:	40bc      	lsls	r4, r7
 8000b0e:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8000b12:	68cc      	ldr	r4, [r1, #12]
 8000b14:	40bc      	lsls	r4, r7
 8000b16:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000b18:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b1a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b1c:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000b20:	684c      	ldr	r4, [r1, #4]
 8000b22:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8000b26:	409a      	lsls	r2, r3
 8000b28:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8000b2a:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b2c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b2e:	005e      	lsls	r6, r3, #1
 8000b30:	2403      	movs	r4, #3
 8000b32:	40b4      	lsls	r4, r6
 8000b34:	43e2      	mvns	r2, r4
 8000b36:	ea27 0704 	bic.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000b3a:	688c      	ldr	r4, [r1, #8]
 8000b3c:	40b4      	lsls	r4, r6
 8000b3e:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8000b40:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b42:	684c      	ldr	r4, [r1, #4]
 8000b44:	2c12      	cmp	r4, #18
 8000b46:	bf18      	it	ne
 8000b48:	2c02      	cmpne	r4, #2
 8000b4a:	d113      	bne.n	8000b74 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3];
 8000b4c:	08df      	lsrs	r7, r3, #3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b54:	f003 0407 	and.w	r4, r3, #7
 8000b58:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8000b5c:	240f      	movs	r4, #15
 8000b5e:	fa04 f40c 	lsl.w	r4, r4, ip
 8000b62:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000b66:	690c      	ldr	r4, [r1, #16]
 8000b68:	fa04 f40c 	lsl.w	r4, r4, ip
 8000b6c:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 8000b70:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 8000b74:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b76:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b78:	684a      	ldr	r2, [r1, #4]
 8000b7a:	f002 0203 	and.w	r2, r2, #3
 8000b7e:	40b2      	lsls	r2, r6
 8000b80:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000b82:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b84:	684a      	ldr	r2, [r1, #4]
 8000b86:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000b8a:	d0a8      	beq.n	8000ade <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8c:	4a2b      	ldr	r2, [pc, #172]	; (8000c3c <HAL_GPIO_Init+0x1d8>)
 8000b8e:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000b90:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000b94:	6454      	str	r4, [r2, #68]	; 0x44
 8000b96:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000b98:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000b9c:	9201      	str	r2, [sp, #4]
 8000b9e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000ba0:	089c      	lsrs	r4, r3, #2
 8000ba2:	1ca6      	adds	r6, r4, #2
 8000ba4:	4a23      	ldr	r2, [pc, #140]	; (8000c34 <HAL_GPIO_Init+0x1d0>)
 8000ba6:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000baa:	f003 0203 	and.w	r2, r3, #3
 8000bae:	0096      	lsls	r6, r2, #2
 8000bb0:	220f      	movs	r2, #15
 8000bb2:	40b2      	lsls	r2, r6
 8000bb4:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bb8:	4a21      	ldr	r2, [pc, #132]	; (8000c40 <HAL_GPIO_Init+0x1dc>)
 8000bba:	4290      	cmp	r0, r2
 8000bbc:	f43f af5b 	beq.w	8000a76 <HAL_GPIO_Init+0x12>
 8000bc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bc4:	4290      	cmp	r0, r2
 8000bc6:	d022      	beq.n	8000c0e <HAL_GPIO_Init+0x1aa>
 8000bc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bcc:	4290      	cmp	r0, r2
 8000bce:	d020      	beq.n	8000c12 <HAL_GPIO_Init+0x1ae>
 8000bd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bd4:	4290      	cmp	r0, r2
 8000bd6:	d01e      	beq.n	8000c16 <HAL_GPIO_Init+0x1b2>
 8000bd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bdc:	4290      	cmp	r0, r2
 8000bde:	d01c      	beq.n	8000c1a <HAL_GPIO_Init+0x1b6>
 8000be0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000be4:	4290      	cmp	r0, r2
 8000be6:	d01a      	beq.n	8000c1e <HAL_GPIO_Init+0x1ba>
 8000be8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bec:	4290      	cmp	r0, r2
 8000bee:	d018      	beq.n	8000c22 <HAL_GPIO_Init+0x1be>
 8000bf0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bf4:	4290      	cmp	r0, r2
 8000bf6:	d016      	beq.n	8000c26 <HAL_GPIO_Init+0x1c2>
 8000bf8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bfc:	4290      	cmp	r0, r2
 8000bfe:	d014      	beq.n	8000c2a <HAL_GPIO_Init+0x1c6>
 8000c00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c04:	4290      	cmp	r0, r2
 8000c06:	f43f af34 	beq.w	8000a72 <HAL_GPIO_Init+0xe>
 8000c0a:	220a      	movs	r2, #10
 8000c0c:	e734      	b.n	8000a78 <HAL_GPIO_Init+0x14>
 8000c0e:	2201      	movs	r2, #1
 8000c10:	e732      	b.n	8000a78 <HAL_GPIO_Init+0x14>
 8000c12:	2202      	movs	r2, #2
 8000c14:	e730      	b.n	8000a78 <HAL_GPIO_Init+0x14>
 8000c16:	2203      	movs	r2, #3
 8000c18:	e72e      	b.n	8000a78 <HAL_GPIO_Init+0x14>
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	e72c      	b.n	8000a78 <HAL_GPIO_Init+0x14>
 8000c1e:	2205      	movs	r2, #5
 8000c20:	e72a      	b.n	8000a78 <HAL_GPIO_Init+0x14>
 8000c22:	2206      	movs	r2, #6
 8000c24:	e728      	b.n	8000a78 <HAL_GPIO_Init+0x14>
 8000c26:	2207      	movs	r2, #7
 8000c28:	e726      	b.n	8000a78 <HAL_GPIO_Init+0x14>
 8000c2a:	2208      	movs	r2, #8
 8000c2c:	e724      	b.n	8000a78 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000c2e:	b003      	add	sp, #12
 8000c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c32:	4770      	bx	lr
 8000c34:	40013800 	.word	0x40013800
 8000c38:	40013c00 	.word	0x40013c00
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020000 	.word	0x40020000

08000c44 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000c44:	b510      	push	{r4, lr}
 8000c46:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <HAL_PWREx_EnableOverDrive+0x74>)
 8000c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c50:	641a      	str	r2, [r3, #64]	; 0x40
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c58:	9301      	str	r3, [sp, #4]
 8000c5a:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000c5c:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <HAL_PWREx_EnableOverDrive+0x78>)
 8000c5e:	6813      	ldr	r3, [r2, #0]
 8000c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c64:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c66:	f7ff fe89 	bl	800097c <HAL_GetTick>
 8000c6a:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000c6c:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <HAL_PWREx_EnableOverDrive+0x78>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000c74:	d108      	bne.n	8000c88 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c76:	f7ff fe81 	bl	800097c <HAL_GetTick>
 8000c7a:	1b00      	subs	r0, r0, r4
 8000c7c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c80:	d9f4      	bls.n	8000c6c <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8000c82:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8000c84:	b002      	add	sp, #8
 8000c86:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000c88:	4a0c      	ldr	r2, [pc, #48]	; (8000cbc <HAL_PWREx_EnableOverDrive+0x78>)
 8000c8a:	6813      	ldr	r3, [r2, #0]
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c90:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8000c92:	f7ff fe73 	bl	800097c <HAL_GetTick>
 8000c96:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_PWREx_EnableOverDrive+0x78>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000ca0:	d107      	bne.n	8000cb2 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ca2:	f7ff fe6b 	bl	800097c <HAL_GetTick>
 8000ca6:	1b00      	subs	r0, r0, r4
 8000ca8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000cac:	d9f4      	bls.n	8000c98 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8000cae:	2003      	movs	r0, #3
 8000cb0:	e7e8      	b.n	8000c84 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	e7e6      	b.n	8000c84 <HAL_PWREx_EnableOverDrive+0x40>
 8000cb6:	bf00      	nop
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40007000 	.word	0x40007000

08000cc0 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cc0:	2800      	cmp	r0, #0
 8000cc2:	f000 8206 	beq.w	80010d2 <HAL_RCC_OscConfig+0x412>
{
 8000cc6:	b570      	push	{r4, r5, r6, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ccc:	6803      	ldr	r3, [r0, #0]
 8000cce:	f013 0f01 	tst.w	r3, #1
 8000cd2:	d029      	beq.n	8000d28 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cd4:	4ba7      	ldr	r3, [pc, #668]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	f003 030c 	and.w	r3, r3, #12
 8000cdc:	2b04      	cmp	r3, #4
 8000cde:	d01a      	beq.n	8000d16 <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ce0:	4ba4      	ldr	r3, [pc, #656]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	f003 030c 	and.w	r3, r3, #12
 8000ce8:	2b08      	cmp	r3, #8
 8000cea:	d00f      	beq.n	8000d0c <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cec:	6863      	ldr	r3, [r4, #4]
 8000cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cf2:	d040      	beq.n	8000d76 <HAL_RCC_OscConfig+0xb6>
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d154      	bne.n	8000da2 <HAL_RCC_OscConfig+0xe2>
 8000cf8:	4b9e      	ldr	r3, [pc, #632]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	e039      	b.n	8000d80 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d0c:	4b99      	ldr	r3, [pc, #612]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000d14:	d0ea      	beq.n	8000cec <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d16:	4b97      	ldr	r3, [pc, #604]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d1e:	d003      	beq.n	8000d28 <HAL_RCC_OscConfig+0x68>
 8000d20:	6863      	ldr	r3, [r4, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f000 81d7 	beq.w	80010d6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d28:	6823      	ldr	r3, [r4, #0]
 8000d2a:	f013 0f02 	tst.w	r3, #2
 8000d2e:	d074      	beq.n	8000e1a <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d30:	4b90      	ldr	r3, [pc, #576]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	f013 0f0c 	tst.w	r3, #12
 8000d38:	d05e      	beq.n	8000df8 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d3a:	4b8e      	ldr	r3, [pc, #568]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	f003 030c 	and.w	r3, r3, #12
 8000d42:	2b08      	cmp	r3, #8
 8000d44:	d053      	beq.n	8000dee <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000d46:	68e3      	ldr	r3, [r4, #12]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f000 8089 	beq.w	8000e60 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d4e:	4a89      	ldr	r2, [pc, #548]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000d50:	6813      	ldr	r3, [r2, #0]
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d58:	f7ff fe10 	bl	800097c <HAL_GetTick>
 8000d5c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d5e:	4b85      	ldr	r3, [pc, #532]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f013 0f02 	tst.w	r3, #2
 8000d66:	d172      	bne.n	8000e4e <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d68:	f7ff fe08 	bl	800097c <HAL_GetTick>
 8000d6c:	1b40      	subs	r0, r0, r5
 8000d6e:	2802      	cmp	r0, #2
 8000d70:	d9f5      	bls.n	8000d5e <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8000d72:	2003      	movs	r0, #3
 8000d74:	e1b4      	b.n	80010e0 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d76:	4a7f      	ldr	r2, [pc, #508]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000d78:	6813      	ldr	r3, [r2, #0]
 8000d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d7e:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d80:	6863      	ldr	r3, [r4, #4]
 8000d82:	b32b      	cbz	r3, 8000dd0 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8000d84:	f7ff fdfa 	bl	800097c <HAL_GetTick>
 8000d88:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d8a:	4b7a      	ldr	r3, [pc, #488]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d92:	d1c9      	bne.n	8000d28 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d94:	f7ff fdf2 	bl	800097c <HAL_GetTick>
 8000d98:	1b40      	subs	r0, r0, r5
 8000d9a:	2864      	cmp	r0, #100	; 0x64
 8000d9c:	d9f5      	bls.n	8000d8a <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8000d9e:	2003      	movs	r0, #3
 8000da0:	e19e      	b.n	80010e0 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000da2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000da6:	d009      	beq.n	8000dbc <HAL_RCC_OscConfig+0xfc>
 8000da8:	4b72      	ldr	r3, [pc, #456]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	e7e1      	b.n	8000d80 <HAL_RCC_OscConfig+0xc0>
 8000dbc:	4b6d      	ldr	r3, [pc, #436]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	e7d7      	b.n	8000d80 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8000dd0:	f7ff fdd4 	bl	800097c <HAL_GetTick>
 8000dd4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dd6:	4b67      	ldr	r3, [pc, #412]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000dde:	d0a3      	beq.n	8000d28 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000de0:	f7ff fdcc 	bl	800097c <HAL_GetTick>
 8000de4:	1b40      	subs	r0, r0, r5
 8000de6:	2864      	cmp	r0, #100	; 0x64
 8000de8:	d9f5      	bls.n	8000dd6 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8000dea:	2003      	movs	r0, #3
 8000dec:	e178      	b.n	80010e0 <HAL_RCC_OscConfig+0x420>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dee:	4b61      	ldr	r3, [pc, #388]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000df6:	d1a6      	bne.n	8000d46 <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000df8:	4b5e      	ldr	r3, [pc, #376]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f013 0f02 	tst.w	r3, #2
 8000e00:	d003      	beq.n	8000e0a <HAL_RCC_OscConfig+0x14a>
 8000e02:	68e3      	ldr	r3, [r4, #12]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	f040 8168 	bne.w	80010da <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e0a:	4a5a      	ldr	r2, [pc, #360]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000e0c:	6813      	ldr	r3, [r2, #0]
 8000e0e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e12:	6921      	ldr	r1, [r4, #16]
 8000e14:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e18:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e1a:	6823      	ldr	r3, [r4, #0]
 8000e1c:	f013 0f08 	tst.w	r3, #8
 8000e20:	d046      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000e22:	6963      	ldr	r3, [r4, #20]
 8000e24:	b383      	cbz	r3, 8000e88 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e26:	4a53      	ldr	r2, [pc, #332]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000e28:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e30:	f7ff fda4 	bl	800097c <HAL_GetTick>
 8000e34:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e36:	4b4f      	ldr	r3, [pc, #316]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e3a:	f013 0f02 	tst.w	r3, #2
 8000e3e:	d137      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e40:	f7ff fd9c 	bl	800097c <HAL_GetTick>
 8000e44:	1b40      	subs	r0, r0, r5
 8000e46:	2802      	cmp	r0, #2
 8000e48:	d9f5      	bls.n	8000e36 <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 8000e4a:	2003      	movs	r0, #3
 8000e4c:	e148      	b.n	80010e0 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e4e:	4a49      	ldr	r2, [pc, #292]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000e50:	6813      	ldr	r3, [r2, #0]
 8000e52:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e56:	6921      	ldr	r1, [r4, #16]
 8000e58:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e5c:	6013      	str	r3, [r2, #0]
 8000e5e:	e7dc      	b.n	8000e1a <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8000e60:	4a44      	ldr	r2, [pc, #272]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000e62:	6813      	ldr	r3, [r2, #0]
 8000e64:	f023 0301 	bic.w	r3, r3, #1
 8000e68:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000e6a:	f7ff fd87 	bl	800097c <HAL_GetTick>
 8000e6e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e70:	4b40      	ldr	r3, [pc, #256]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f013 0f02 	tst.w	r3, #2
 8000e78:	d0cf      	beq.n	8000e1a <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e7a:	f7ff fd7f 	bl	800097c <HAL_GetTick>
 8000e7e:	1b40      	subs	r0, r0, r5
 8000e80:	2802      	cmp	r0, #2
 8000e82:	d9f5      	bls.n	8000e70 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 8000e84:	2003      	movs	r0, #3
 8000e86:	e12b      	b.n	80010e0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e88:	4a3a      	ldr	r2, [pc, #232]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000e8a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000e8c:	f023 0301 	bic.w	r3, r3, #1
 8000e90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e92:	f7ff fd73 	bl	800097c <HAL_GetTick>
 8000e96:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e98:	4b36      	ldr	r3, [pc, #216]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e9c:	f013 0f02 	tst.w	r3, #2
 8000ea0:	d006      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ea2:	f7ff fd6b 	bl	800097c <HAL_GetTick>
 8000ea6:	1b40      	subs	r0, r0, r5
 8000ea8:	2802      	cmp	r0, #2
 8000eaa:	d9f5      	bls.n	8000e98 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8000eac:	2003      	movs	r0, #3
 8000eae:	e117      	b.n	80010e0 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eb0:	6823      	ldr	r3, [r4, #0]
 8000eb2:	f013 0f04 	tst.w	r3, #4
 8000eb6:	d07d      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eb8:	4b2e      	ldr	r3, [pc, #184]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000ec0:	d10b      	bne.n	8000eda <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ec2:	4b2c      	ldr	r3, [pc, #176]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000ec4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ec6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000eca:	641a      	str	r2, [r3, #64]	; 0x40
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	9301      	str	r3, [sp, #4]
 8000ed4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000ed6:	2501      	movs	r5, #1
 8000ed8:	e000      	b.n	8000edc <HAL_RCC_OscConfig+0x21c>
  FlagStatus pwrclkchanged = RESET;
 8000eda:	2500      	movs	r5, #0
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000edc:	4b26      	ldr	r3, [pc, #152]	; (8000f78 <HAL_RCC_OscConfig+0x2b8>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000ee4:	d00e      	beq.n	8000f04 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ee6:	68a3      	ldr	r3, [r4, #8]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d01f      	beq.n	8000f2c <HAL_RCC_OscConfig+0x26c>
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d135      	bne.n	8000f5c <HAL_RCC_OscConfig+0x29c>
 8000ef0:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000ef2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000ef4:	f022 0201 	bic.w	r2, r2, #1
 8000ef8:	671a      	str	r2, [r3, #112]	; 0x70
 8000efa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000efc:	f022 0204 	bic.w	r2, r2, #4
 8000f00:	671a      	str	r2, [r3, #112]	; 0x70
 8000f02:	e018      	b.n	8000f36 <HAL_RCC_OscConfig+0x276>
      PWR->CR1 |= PWR_CR1_DBP;
 8000f04:	4a1c      	ldr	r2, [pc, #112]	; (8000f78 <HAL_RCC_OscConfig+0x2b8>)
 8000f06:	6813      	ldr	r3, [r2, #0]
 8000f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000f0e:	f7ff fd35 	bl	800097c <HAL_GetTick>
 8000f12:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f14:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <HAL_RCC_OscConfig+0x2b8>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000f1c:	d1e3      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x226>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f1e:	f7ff fd2d 	bl	800097c <HAL_GetTick>
 8000f22:	1b80      	subs	r0, r0, r6
 8000f24:	2864      	cmp	r0, #100	; 0x64
 8000f26:	d9f5      	bls.n	8000f14 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 8000f28:	2003      	movs	r0, #3
 8000f2a:	e0d9      	b.n	80010e0 <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f2c:	4a11      	ldr	r2, [pc, #68]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000f2e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f36:	68a3      	ldr	r3, [r4, #8]
 8000f38:	b353      	cbz	r3, 8000f90 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f3a:	f7ff fd1f 	bl	800097c <HAL_GetTick>
 8000f3e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f44:	f013 0f02 	tst.w	r3, #2
 8000f48:	d133      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f4a:	f7ff fd17 	bl	800097c <HAL_GetTick>
 8000f4e:	1b80      	subs	r0, r0, r6
 8000f50:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f54:	4298      	cmp	r0, r3
 8000f56:	d9f3      	bls.n	8000f40 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8000f58:	2003      	movs	r0, #3
 8000f5a:	e0c1      	b.n	80010e0 <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f5c:	2b05      	cmp	r3, #5
 8000f5e:	d00d      	beq.n	8000f7c <HAL_RCC_OscConfig+0x2bc>
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <HAL_RCC_OscConfig+0x2b4>)
 8000f62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f64:	f022 0201 	bic.w	r2, r2, #1
 8000f68:	671a      	str	r2, [r3, #112]	; 0x70
 8000f6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f6c:	f022 0204 	bic.w	r2, r2, #4
 8000f70:	671a      	str	r2, [r3, #112]	; 0x70
 8000f72:	e7e0      	b.n	8000f36 <HAL_RCC_OscConfig+0x276>
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40007000 	.word	0x40007000
 8000f7c:	4b60      	ldr	r3, [pc, #384]	; (8001100 <HAL_RCC_OscConfig+0x440>)
 8000f7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f80:	f042 0204 	orr.w	r2, r2, #4
 8000f84:	671a      	str	r2, [r3, #112]	; 0x70
 8000f86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f88:	f042 0201 	orr.w	r2, r2, #1
 8000f8c:	671a      	str	r2, [r3, #112]	; 0x70
 8000f8e:	e7d2      	b.n	8000f36 <HAL_RCC_OscConfig+0x276>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f90:	f7ff fcf4 	bl	800097c <HAL_GetTick>
 8000f94:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f96:	4b5a      	ldr	r3, [pc, #360]	; (8001100 <HAL_RCC_OscConfig+0x440>)
 8000f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f9a:	f013 0f02 	tst.w	r3, #2
 8000f9e:	d008      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fa0:	f7ff fcec 	bl	800097c <HAL_GetTick>
 8000fa4:	1b80      	subs	r0, r0, r6
 8000fa6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000faa:	4298      	cmp	r0, r3
 8000fac:	d9f3      	bls.n	8000f96 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8000fae:	2003      	movs	r0, #3
 8000fb0:	e096      	b.n	80010e0 <HAL_RCC_OscConfig+0x420>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000fb2:	b9fd      	cbnz	r5, 8000ff4 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fb4:	69a3      	ldr	r3, [r4, #24]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 8091 	beq.w	80010de <HAL_RCC_OscConfig+0x41e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fbc:	4a50      	ldr	r2, [pc, #320]	; (8001100 <HAL_RCC_OscConfig+0x440>)
 8000fbe:	6892      	ldr	r2, [r2, #8]
 8000fc0:	f002 020c 	and.w	r2, r2, #12
 8000fc4:	2a08      	cmp	r2, #8
 8000fc6:	d059      	beq.n	800107c <HAL_RCC_OscConfig+0x3bc>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d019      	beq.n	8001000 <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fcc:	4a4c      	ldr	r2, [pc, #304]	; (8001100 <HAL_RCC_OscConfig+0x440>)
 8000fce:	6813      	ldr	r3, [r2, #0]
 8000fd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd6:	f7ff fcd1 	bl	800097c <HAL_GetTick>
 8000fda:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fdc:	4b48      	ldr	r3, [pc, #288]	; (8001100 <HAL_RCC_OscConfig+0x440>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000fe4:	d048      	beq.n	8001078 <HAL_RCC_OscConfig+0x3b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fe6:	f7ff fcc9 	bl	800097c <HAL_GetTick>
 8000fea:	1b00      	subs	r0, r0, r4
 8000fec:	2802      	cmp	r0, #2
 8000fee:	d9f5      	bls.n	8000fdc <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8000ff0:	2003      	movs	r0, #3
 8000ff2:	e075      	b.n	80010e0 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ff4:	4a42      	ldr	r2, [pc, #264]	; (8001100 <HAL_RCC_OscConfig+0x440>)
 8000ff6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffe:	e7d9      	b.n	8000fb4 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8001000:	4a3f      	ldr	r2, [pc, #252]	; (8001100 <HAL_RCC_OscConfig+0x440>)
 8001002:	6813      	ldr	r3, [r2, #0]
 8001004:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001008:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800100a:	f7ff fcb7 	bl	800097c <HAL_GetTick>
 800100e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001010:	4b3b      	ldr	r3, [pc, #236]	; (8001100 <HAL_RCC_OscConfig+0x440>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001018:	d006      	beq.n	8001028 <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800101a:	f7ff fcaf 	bl	800097c <HAL_GetTick>
 800101e:	1b40      	subs	r0, r0, r5
 8001020:	2802      	cmp	r0, #2
 8001022:	d9f5      	bls.n	8001010 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 8001024:	2003      	movs	r0, #3
 8001026:	e05b      	b.n	80010e0 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001028:	69e3      	ldr	r3, [r4, #28]
 800102a:	6a22      	ldr	r2, [r4, #32]
 800102c:	4313      	orrs	r3, r2
 800102e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001030:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001034:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001036:	0852      	lsrs	r2, r2, #1
 8001038:	3a01      	subs	r2, #1
 800103a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800103e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001040:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001044:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001046:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800104a:	4a2d      	ldr	r2, [pc, #180]	; (8001100 <HAL_RCC_OscConfig+0x440>)
 800104c:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800104e:	6813      	ldr	r3, [r2, #0]
 8001050:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001054:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001056:	f7ff fc91 	bl	800097c <HAL_GetTick>
 800105a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800105c:	4b28      	ldr	r3, [pc, #160]	; (8001100 <HAL_RCC_OscConfig+0x440>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001064:	d106      	bne.n	8001074 <HAL_RCC_OscConfig+0x3b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001066:	f7ff fc89 	bl	800097c <HAL_GetTick>
 800106a:	1b00      	subs	r0, r0, r4
 800106c:	2802      	cmp	r0, #2
 800106e:	d9f5      	bls.n	800105c <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 8001070:	2003      	movs	r0, #3
 8001072:	e035      	b.n	80010e0 <HAL_RCC_OscConfig+0x420>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001074:	2000      	movs	r0, #0
 8001076:	e033      	b.n	80010e0 <HAL_RCC_OscConfig+0x420>
 8001078:	2000      	movs	r0, #0
 800107a:	e031      	b.n	80010e0 <HAL_RCC_OscConfig+0x420>
      pll_config = RCC->PLLCFGR;
 800107c:	4a20      	ldr	r2, [pc, #128]	; (8001100 <HAL_RCC_OscConfig+0x440>)
 800107e:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001080:	2b01      	cmp	r3, #1
 8001082:	d02f      	beq.n	80010e4 <HAL_RCC_OscConfig+0x424>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001084:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8001088:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800108a:	428b      	cmp	r3, r1
 800108c:	d12c      	bne.n	80010e8 <HAL_RCC_OscConfig+0x428>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800108e:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8001092:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001094:	428b      	cmp	r3, r1
 8001096:	d129      	bne.n	80010ec <HAL_RCC_OscConfig+0x42c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001098:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800109a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800109e:	4013      	ands	r3, r2
 80010a0:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 80010a4:	d124      	bne.n	80010f0 <HAL_RCC_OscConfig+0x430>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80010a6:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 80010aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010ac:	085b      	lsrs	r3, r3, #1
 80010ae:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80010b0:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 80010b4:	d11e      	bne.n	80010f4 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80010b6:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 80010ba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80010bc:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 80010c0:	d11a      	bne.n	80010f8 <HAL_RCC_OscConfig+0x438>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80010c2:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80010c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80010c8:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 80010cc:	d116      	bne.n	80010fc <HAL_RCC_OscConfig+0x43c>
  return HAL_OK;
 80010ce:	2000      	movs	r0, #0
 80010d0:	e006      	b.n	80010e0 <HAL_RCC_OscConfig+0x420>
    return HAL_ERROR;
 80010d2:	2001      	movs	r0, #1
}
 80010d4:	4770      	bx	lr
        return HAL_ERROR;
 80010d6:	2001      	movs	r0, #1
 80010d8:	e002      	b.n	80010e0 <HAL_RCC_OscConfig+0x420>
        return HAL_ERROR;
 80010da:	2001      	movs	r0, #1
 80010dc:	e000      	b.n	80010e0 <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 80010de:	2000      	movs	r0, #0
}
 80010e0:	b002      	add	sp, #8
 80010e2:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80010e4:	2001      	movs	r0, #1
 80010e6:	e7fb      	b.n	80010e0 <HAL_RCC_OscConfig+0x420>
 80010e8:	2001      	movs	r0, #1
 80010ea:	e7f9      	b.n	80010e0 <HAL_RCC_OscConfig+0x420>
 80010ec:	2001      	movs	r0, #1
 80010ee:	e7f7      	b.n	80010e0 <HAL_RCC_OscConfig+0x420>
 80010f0:	2001      	movs	r0, #1
 80010f2:	e7f5      	b.n	80010e0 <HAL_RCC_OscConfig+0x420>
 80010f4:	2001      	movs	r0, #1
 80010f6:	e7f3      	b.n	80010e0 <HAL_RCC_OscConfig+0x420>
 80010f8:	2001      	movs	r0, #1
 80010fa:	e7f1      	b.n	80010e0 <HAL_RCC_OscConfig+0x420>
 80010fc:	2001      	movs	r0, #1
 80010fe:	e7ef      	b.n	80010e0 <HAL_RCC_OscConfig+0x420>
 8001100:	40023800 	.word	0x40023800

08001104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001106:	4b24      	ldr	r3, [pc, #144]	; (8001198 <HAL_RCC_GetSysClockFreq+0x94>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 030c 	and.w	r3, r3, #12
 800110e:	2b04      	cmp	r3, #4
 8001110:	d03d      	beq.n	800118e <HAL_RCC_GetSysClockFreq+0x8a>
 8001112:	2b08      	cmp	r3, #8
 8001114:	d13d      	bne.n	8001192 <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001116:	4b20      	ldr	r3, [pc, #128]	; (8001198 <HAL_RCC_GetSysClockFreq+0x94>)
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001124:	d012      	beq.n	800114c <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001126:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <HAL_RCC_GetSysClockFreq+0x94>)
 8001128:	6859      	ldr	r1, [r3, #4]
 800112a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800112e:	2300      	movs	r3, #0
 8001130:	481a      	ldr	r0, [pc, #104]	; (800119c <HAL_RCC_GetSysClockFreq+0x98>)
 8001132:	fba1 0100 	umull	r0, r1, r1, r0
 8001136:	f7ff f8d3 	bl	80002e0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800113a:	4b17      	ldr	r3, [pc, #92]	; (8001198 <HAL_RCC_GetSysClockFreq+0x94>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001142:	3301      	adds	r3, #1
 8001144:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001146:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800114a:	e023      	b.n	8001194 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_RCC_GetSysClockFreq+0x94>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001154:	015c      	lsls	r4, r3, #5
 8001156:	2500      	movs	r5, #0
 8001158:	1ae4      	subs	r4, r4, r3
 800115a:	f165 0500 	sbc.w	r5, r5, #0
 800115e:	01ae      	lsls	r6, r5, #6
 8001160:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8001164:	01a7      	lsls	r7, r4, #6
 8001166:	1b38      	subs	r0, r7, r4
 8001168:	eb66 0105 	sbc.w	r1, r6, r5
 800116c:	00cc      	lsls	r4, r1, #3
 800116e:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8001172:	00c5      	lsls	r5, r0, #3
 8001174:	18e8      	adds	r0, r5, r3
 8001176:	f144 0100 	adc.w	r1, r4, #0
 800117a:	028b      	lsls	r3, r1, #10
 800117c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001180:	0284      	lsls	r4, r0, #10
 8001182:	4620      	mov	r0, r4
 8001184:	4619      	mov	r1, r3
 8001186:	2300      	movs	r3, #0
 8001188:	f7ff f8aa 	bl	80002e0 <__aeabi_uldivmod>
 800118c:	e7d5      	b.n	800113a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 800118e:	4803      	ldr	r0, [pc, #12]	; (800119c <HAL_RCC_GetSysClockFreq+0x98>)
 8001190:	e000      	b.n	8001194 <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001192:	4803      	ldr	r0, [pc, #12]	; (80011a0 <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800
 800119c:	017d7840 	.word	0x017d7840
 80011a0:	00f42400 	.word	0x00f42400

080011a4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80011a4:	2800      	cmp	r0, #0
 80011a6:	f000 80a0 	beq.w	80012ea <HAL_RCC_ClockConfig+0x146>
{
 80011aa:	b570      	push	{r4, r5, r6, lr}
 80011ac:	460d      	mov	r5, r1
 80011ae:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011b0:	4b52      	ldr	r3, [pc, #328]	; (80012fc <HAL_RCC_ClockConfig+0x158>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 030f 	and.w	r3, r3, #15
 80011b8:	428b      	cmp	r3, r1
 80011ba:	d20b      	bcs.n	80011d4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011bc:	4a4f      	ldr	r2, [pc, #316]	; (80012fc <HAL_RCC_ClockConfig+0x158>)
 80011be:	6813      	ldr	r3, [r2, #0]
 80011c0:	f023 030f 	bic.w	r3, r3, #15
 80011c4:	430b      	orrs	r3, r1
 80011c6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011c8:	6813      	ldr	r3, [r2, #0]
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	428b      	cmp	r3, r1
 80011d0:	f040 808d 	bne.w	80012ee <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011d4:	6823      	ldr	r3, [r4, #0]
 80011d6:	f013 0f02 	tst.w	r3, #2
 80011da:	d017      	beq.n	800120c <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011dc:	f013 0f04 	tst.w	r3, #4
 80011e0:	d004      	beq.n	80011ec <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011e2:	4a47      	ldr	r2, [pc, #284]	; (8001300 <HAL_RCC_ClockConfig+0x15c>)
 80011e4:	6893      	ldr	r3, [r2, #8]
 80011e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011ea:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	f013 0f08 	tst.w	r3, #8
 80011f2:	d004      	beq.n	80011fe <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011f4:	4a42      	ldr	r2, [pc, #264]	; (8001300 <HAL_RCC_ClockConfig+0x15c>)
 80011f6:	6893      	ldr	r3, [r2, #8]
 80011f8:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011fc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011fe:	4a40      	ldr	r2, [pc, #256]	; (8001300 <HAL_RCC_ClockConfig+0x15c>)
 8001200:	6893      	ldr	r3, [r2, #8]
 8001202:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001206:	68a1      	ldr	r1, [r4, #8]
 8001208:	430b      	orrs	r3, r1
 800120a:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800120c:	6823      	ldr	r3, [r4, #0]
 800120e:	f013 0f01 	tst.w	r3, #1
 8001212:	d031      	beq.n	8001278 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001214:	6863      	ldr	r3, [r4, #4]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d020      	beq.n	800125c <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800121a:	2b02      	cmp	r3, #2
 800121c:	d025      	beq.n	800126a <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121e:	4a38      	ldr	r2, [pc, #224]	; (8001300 <HAL_RCC_ClockConfig+0x15c>)
 8001220:	6812      	ldr	r2, [r2, #0]
 8001222:	f012 0f02 	tst.w	r2, #2
 8001226:	d064      	beq.n	80012f2 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001228:	4935      	ldr	r1, [pc, #212]	; (8001300 <HAL_RCC_ClockConfig+0x15c>)
 800122a:	688a      	ldr	r2, [r1, #8]
 800122c:	f022 0203 	bic.w	r2, r2, #3
 8001230:	4313      	orrs	r3, r2
 8001232:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001234:	f7ff fba2 	bl	800097c <HAL_GetTick>
 8001238:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800123a:	4b31      	ldr	r3, [pc, #196]	; (8001300 <HAL_RCC_ClockConfig+0x15c>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 030c 	and.w	r3, r3, #12
 8001242:	6862      	ldr	r2, [r4, #4]
 8001244:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001248:	d016      	beq.n	8001278 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800124a:	f7ff fb97 	bl	800097c <HAL_GetTick>
 800124e:	1b80      	subs	r0, r0, r6
 8001250:	f241 3388 	movw	r3, #5000	; 0x1388
 8001254:	4298      	cmp	r0, r3
 8001256:	d9f0      	bls.n	800123a <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8001258:	2003      	movs	r0, #3
 800125a:	e045      	b.n	80012e8 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125c:	4a28      	ldr	r2, [pc, #160]	; (8001300 <HAL_RCC_ClockConfig+0x15c>)
 800125e:	6812      	ldr	r2, [r2, #0]
 8001260:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001264:	d1e0      	bne.n	8001228 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001266:	2001      	movs	r0, #1
 8001268:	e03e      	b.n	80012e8 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800126a:	4a25      	ldr	r2, [pc, #148]	; (8001300 <HAL_RCC_ClockConfig+0x15c>)
 800126c:	6812      	ldr	r2, [r2, #0]
 800126e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001272:	d1d9      	bne.n	8001228 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001274:	2001      	movs	r0, #1
 8001276:	e037      	b.n	80012e8 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001278:	4b20      	ldr	r3, [pc, #128]	; (80012fc <HAL_RCC_ClockConfig+0x158>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 030f 	and.w	r3, r3, #15
 8001280:	42ab      	cmp	r3, r5
 8001282:	d90a      	bls.n	800129a <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001284:	4a1d      	ldr	r2, [pc, #116]	; (80012fc <HAL_RCC_ClockConfig+0x158>)
 8001286:	6813      	ldr	r3, [r2, #0]
 8001288:	f023 030f 	bic.w	r3, r3, #15
 800128c:	432b      	orrs	r3, r5
 800128e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001290:	6813      	ldr	r3, [r2, #0]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	42ab      	cmp	r3, r5
 8001298:	d12d      	bne.n	80012f6 <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800129a:	6823      	ldr	r3, [r4, #0]
 800129c:	f013 0f04 	tst.w	r3, #4
 80012a0:	d006      	beq.n	80012b0 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012a2:	4a17      	ldr	r2, [pc, #92]	; (8001300 <HAL_RCC_ClockConfig+0x15c>)
 80012a4:	6893      	ldr	r3, [r2, #8]
 80012a6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80012aa:	68e1      	ldr	r1, [r4, #12]
 80012ac:	430b      	orrs	r3, r1
 80012ae:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b0:	6823      	ldr	r3, [r4, #0]
 80012b2:	f013 0f08 	tst.w	r3, #8
 80012b6:	d007      	beq.n	80012c8 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012b8:	4a11      	ldr	r2, [pc, #68]	; (8001300 <HAL_RCC_ClockConfig+0x15c>)
 80012ba:	6893      	ldr	r3, [r2, #8]
 80012bc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80012c0:	6921      	ldr	r1, [r4, #16]
 80012c2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80012c6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012c8:	f7ff ff1c 	bl	8001104 <HAL_RCC_GetSysClockFreq>
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <HAL_RCC_ClockConfig+0x15c>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80012d4:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <HAL_RCC_ClockConfig+0x160>)
 80012d6:	5cd3      	ldrb	r3, [r2, r3]
 80012d8:	40d8      	lsrs	r0, r3
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <HAL_RCC_ClockConfig+0x164>)
 80012dc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_RCC_ClockConfig+0x168>)
 80012e0:	6818      	ldr	r0, [r3, #0]
 80012e2:	f7ff fb05 	bl	80008f0 <HAL_InitTick>
  return HAL_OK;
 80012e6:	2000      	movs	r0, #0
}
 80012e8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80012ea:	2001      	movs	r0, #1
}
 80012ec:	4770      	bx	lr
      return HAL_ERROR;
 80012ee:	2001      	movs	r0, #1
 80012f0:	e7fa      	b.n	80012e8 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 80012f2:	2001      	movs	r0, #1
 80012f4:	e7f8      	b.n	80012e8 <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 80012f6:	2001      	movs	r0, #1
 80012f8:	e7f6      	b.n	80012e8 <HAL_RCC_ClockConfig+0x144>
 80012fa:	bf00      	nop
 80012fc:	40023c00 	.word	0x40023c00
 8001300:	40023800 	.word	0x40023800
 8001304:	08002ab0 	.word	0x08002ab0
 8001308:	20000000 	.word	0x20000000
 800130c:	20000008 	.word	0x20000008

08001310 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001310:	4b01      	ldr	r3, [pc, #4]	; (8001318 <HAL_RCC_GetHCLKFreq+0x8>)
 8001312:	6818      	ldr	r0, [r3, #0]
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000000 	.word	0x20000000

0800131c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800131c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800131e:	f7ff fff7 	bl	8001310 <HAL_RCC_GetHCLKFreq>
 8001322:	4b04      	ldr	r3, [pc, #16]	; (8001334 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800132a:	4a03      	ldr	r2, [pc, #12]	; (8001338 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800132c:	5cd3      	ldrb	r3, [r2, r3]
}
 800132e:	40d8      	lsrs	r0, r3
 8001330:	bd08      	pop	{r3, pc}
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800
 8001338:	08002ac0 	.word	0x08002ac0

0800133c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800133c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800133e:	f7ff ffe7 	bl	8001310 <HAL_RCC_GetHCLKFreq>
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800134a:	4a03      	ldr	r2, [pc, #12]	; (8001358 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800134c:	5cd3      	ldrb	r3, [r2, r3]
}
 800134e:	40d8      	lsrs	r0, r3
 8001350:	bd08      	pop	{r3, pc}
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800
 8001358:	08002ac0 	.word	0x08002ac0

0800135c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800135c:	b538      	push	{r3, r4, r5, lr}
 800135e:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001360:	6883      	ldr	r3, [r0, #8]
 8001362:	6902      	ldr	r2, [r0, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	6942      	ldr	r2, [r0, #20]
 8001368:	4313      	orrs	r3, r2
 800136a:	69c2      	ldr	r2, [r0, #28]
 800136c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800136e:	6801      	ldr	r1, [r0, #0]
 8001370:	6808      	ldr	r0, [r1, #0]
 8001372:	4a9f      	ldr	r2, [pc, #636]	; (80015f0 <UART_SetConfig+0x294>)
 8001374:	4002      	ands	r2, r0
 8001376:	4313      	orrs	r3, r2
 8001378:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800137a:	6822      	ldr	r2, [r4, #0]
 800137c:	6853      	ldr	r3, [r2, #4]
 800137e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001382:	68e1      	ldr	r1, [r4, #12]
 8001384:	430b      	orrs	r3, r1
 8001386:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001388:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 800138a:	6a23      	ldr	r3, [r4, #32]
 800138c:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800138e:	6821      	ldr	r1, [r4, #0]
 8001390:	688b      	ldr	r3, [r1, #8]
 8001392:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001396:	4313      	orrs	r3, r2
 8001398:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800139a:	6823      	ldr	r3, [r4, #0]
 800139c:	4a95      	ldr	r2, [pc, #596]	; (80015f4 <UART_SetConfig+0x298>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d019      	beq.n	80013d6 <UART_SetConfig+0x7a>
 80013a2:	4a95      	ldr	r2, [pc, #596]	; (80015f8 <UART_SetConfig+0x29c>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d029      	beq.n	80013fc <UART_SetConfig+0xa0>
 80013a8:	4a94      	ldr	r2, [pc, #592]	; (80015fc <UART_SetConfig+0x2a0>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d03e      	beq.n	800142c <UART_SetConfig+0xd0>
 80013ae:	4a94      	ldr	r2, [pc, #592]	; (8001600 <UART_SetConfig+0x2a4>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d062      	beq.n	800147a <UART_SetConfig+0x11e>
 80013b4:	4a93      	ldr	r2, [pc, #588]	; (8001604 <UART_SetConfig+0x2a8>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d071      	beq.n	800149e <UART_SetConfig+0x142>
 80013ba:	4a93      	ldr	r2, [pc, #588]	; (8001608 <UART_SetConfig+0x2ac>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	f000 8083 	beq.w	80014c8 <UART_SetConfig+0x16c>
 80013c2:	4a92      	ldr	r2, [pc, #584]	; (800160c <UART_SetConfig+0x2b0>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	f000 8094 	beq.w	80014f2 <UART_SetConfig+0x196>
 80013ca:	4a91      	ldr	r2, [pc, #580]	; (8001610 <UART_SetConfig+0x2b4>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	f000 80a5 	beq.w	800151c <UART_SetConfig+0x1c0>
 80013d2:	2510      	movs	r5, #16
 80013d4:	e03a      	b.n	800144c <UART_SetConfig+0xf0>
 80013d6:	4b8f      	ldr	r3, [pc, #572]	; (8001614 <UART_SetConfig+0x2b8>)
 80013d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	d809      	bhi.n	80013f8 <UART_SetConfig+0x9c>
 80013e4:	e8df f003 	tbb	[pc, r3]
 80013e8:	06ae0402 	.word	0x06ae0402
 80013ec:	2501      	movs	r5, #1
 80013ee:	e02d      	b.n	800144c <UART_SetConfig+0xf0>
 80013f0:	2504      	movs	r5, #4
 80013f2:	e02b      	b.n	800144c <UART_SetConfig+0xf0>
 80013f4:	2508      	movs	r5, #8
 80013f6:	e029      	b.n	800144c <UART_SetConfig+0xf0>
 80013f8:	2510      	movs	r5, #16
 80013fa:	e027      	b.n	800144c <UART_SetConfig+0xf0>
 80013fc:	4b85      	ldr	r3, [pc, #532]	; (8001614 <UART_SetConfig+0x2b8>)
 80013fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b0c      	cmp	r3, #12
 8001408:	d80e      	bhi.n	8001428 <UART_SetConfig+0xcc>
 800140a:	e8df f003 	tbb	[pc, r3]
 800140e:	0d07      	.short	0x0d07
 8001410:	0d090d0d 	.word	0x0d090d0d
 8001414:	0d9d0d0d 	.word	0x0d9d0d0d
 8001418:	0d0d      	.short	0x0d0d
 800141a:	0b          	.byte	0x0b
 800141b:	00          	.byte	0x00
 800141c:	2500      	movs	r5, #0
 800141e:	e015      	b.n	800144c <UART_SetConfig+0xf0>
 8001420:	2504      	movs	r5, #4
 8001422:	e013      	b.n	800144c <UART_SetConfig+0xf0>
 8001424:	2508      	movs	r5, #8
 8001426:	e011      	b.n	800144c <UART_SetConfig+0xf0>
 8001428:	2510      	movs	r5, #16
 800142a:	e00f      	b.n	800144c <UART_SetConfig+0xf0>
 800142c:	4b79      	ldr	r3, [pc, #484]	; (8001614 <UART_SetConfig+0x2b8>)
 800142e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001432:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001436:	2b20      	cmp	r3, #32
 8001438:	f000 8088 	beq.w	800154c <UART_SetConfig+0x1f0>
 800143c:	d819      	bhi.n	8001472 <UART_SetConfig+0x116>
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 8086 	beq.w	8001550 <UART_SetConfig+0x1f4>
 8001444:	2b10      	cmp	r3, #16
 8001446:	f040 8085 	bne.w	8001554 <UART_SetConfig+0x1f8>
 800144a:	2504      	movs	r5, #4

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800144c:	69e3      	ldr	r3, [r4, #28]
 800144e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001452:	f000 80ab 	beq.w	80015ac <UART_SetConfig+0x250>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8001456:	2d08      	cmp	r5, #8
 8001458:	f200 8140 	bhi.w	80016dc <UART_SetConfig+0x380>
 800145c:	e8df f015 	tbh	[pc, r5, lsl #1]
 8001460:	01180107 	.word	0x01180107
 8001464:	013e0122 	.word	0x013e0122
 8001468:	013e012b 	.word	0x013e012b
 800146c:	013e013e 	.word	0x013e013e
 8001470:	0135      	.short	0x0135
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001472:	2b30      	cmp	r3, #48	; 0x30
 8001474:	d170      	bne.n	8001558 <UART_SetConfig+0x1fc>
 8001476:	2508      	movs	r5, #8
 8001478:	e7e8      	b.n	800144c <UART_SetConfig+0xf0>
 800147a:	4b66      	ldr	r3, [pc, #408]	; (8001614 <UART_SetConfig+0x2b8>)
 800147c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001480:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001484:	2b80      	cmp	r3, #128	; 0x80
 8001486:	d069      	beq.n	800155c <UART_SetConfig+0x200>
 8001488:	d805      	bhi.n	8001496 <UART_SetConfig+0x13a>
 800148a:	2b00      	cmp	r3, #0
 800148c:	d068      	beq.n	8001560 <UART_SetConfig+0x204>
 800148e:	2b40      	cmp	r3, #64	; 0x40
 8001490:	d168      	bne.n	8001564 <UART_SetConfig+0x208>
 8001492:	2504      	movs	r5, #4
 8001494:	e7da      	b.n	800144c <UART_SetConfig+0xf0>
 8001496:	2bc0      	cmp	r3, #192	; 0xc0
 8001498:	d166      	bne.n	8001568 <UART_SetConfig+0x20c>
 800149a:	2508      	movs	r5, #8
 800149c:	e7d6      	b.n	800144c <UART_SetConfig+0xf0>
 800149e:	4b5d      	ldr	r3, [pc, #372]	; (8001614 <UART_SetConfig+0x2b8>)
 80014a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014ac:	d05e      	beq.n	800156c <UART_SetConfig+0x210>
 80014ae:	d806      	bhi.n	80014be <UART_SetConfig+0x162>
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d05d      	beq.n	8001570 <UART_SetConfig+0x214>
 80014b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014b8:	d15c      	bne.n	8001574 <UART_SetConfig+0x218>
 80014ba:	2504      	movs	r5, #4
 80014bc:	e7c6      	b.n	800144c <UART_SetConfig+0xf0>
 80014be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80014c2:	d159      	bne.n	8001578 <UART_SetConfig+0x21c>
 80014c4:	2508      	movs	r5, #8
 80014c6:	e7c1      	b.n	800144c <UART_SetConfig+0xf0>
 80014c8:	4b52      	ldr	r3, [pc, #328]	; (8001614 <UART_SetConfig+0x2b8>)
 80014ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014d6:	d051      	beq.n	800157c <UART_SetConfig+0x220>
 80014d8:	d806      	bhi.n	80014e8 <UART_SetConfig+0x18c>
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d050      	beq.n	8001580 <UART_SetConfig+0x224>
 80014de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014e2:	d14f      	bne.n	8001584 <UART_SetConfig+0x228>
 80014e4:	2504      	movs	r5, #4
 80014e6:	e7b1      	b.n	800144c <UART_SetConfig+0xf0>
 80014e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80014ec:	d14c      	bne.n	8001588 <UART_SetConfig+0x22c>
 80014ee:	2508      	movs	r5, #8
 80014f0:	e7ac      	b.n	800144c <UART_SetConfig+0xf0>
 80014f2:	4b48      	ldr	r3, [pc, #288]	; (8001614 <UART_SetConfig+0x2b8>)
 80014f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014f8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80014fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001500:	d044      	beq.n	800158c <UART_SetConfig+0x230>
 8001502:	d806      	bhi.n	8001512 <UART_SetConfig+0x1b6>
 8001504:	2b00      	cmp	r3, #0
 8001506:	d043      	beq.n	8001590 <UART_SetConfig+0x234>
 8001508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800150c:	d142      	bne.n	8001594 <UART_SetConfig+0x238>
 800150e:	2504      	movs	r5, #4
 8001510:	e79c      	b.n	800144c <UART_SetConfig+0xf0>
 8001512:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001516:	d13f      	bne.n	8001598 <UART_SetConfig+0x23c>
 8001518:	2508      	movs	r5, #8
 800151a:	e797      	b.n	800144c <UART_SetConfig+0xf0>
 800151c:	4b3d      	ldr	r3, [pc, #244]	; (8001614 <UART_SetConfig+0x2b8>)
 800151e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001522:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800152a:	d037      	beq.n	800159c <UART_SetConfig+0x240>
 800152c:	d805      	bhi.n	800153a <UART_SetConfig+0x1de>
 800152e:	b3bb      	cbz	r3, 80015a0 <UART_SetConfig+0x244>
 8001530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001534:	d136      	bne.n	80015a4 <UART_SetConfig+0x248>
 8001536:	2504      	movs	r5, #4
 8001538:	e788      	b.n	800144c <UART_SetConfig+0xf0>
 800153a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800153e:	d133      	bne.n	80015a8 <UART_SetConfig+0x24c>
 8001540:	2508      	movs	r5, #8
 8001542:	e783      	b.n	800144c <UART_SetConfig+0xf0>
 8001544:	2502      	movs	r5, #2
 8001546:	e781      	b.n	800144c <UART_SetConfig+0xf0>
 8001548:	2502      	movs	r5, #2
 800154a:	e77f      	b.n	800144c <UART_SetConfig+0xf0>
 800154c:	2502      	movs	r5, #2
 800154e:	e77d      	b.n	800144c <UART_SetConfig+0xf0>
 8001550:	2500      	movs	r5, #0
 8001552:	e77b      	b.n	800144c <UART_SetConfig+0xf0>
 8001554:	2510      	movs	r5, #16
 8001556:	e779      	b.n	800144c <UART_SetConfig+0xf0>
 8001558:	2510      	movs	r5, #16
 800155a:	e777      	b.n	800144c <UART_SetConfig+0xf0>
 800155c:	2502      	movs	r5, #2
 800155e:	e775      	b.n	800144c <UART_SetConfig+0xf0>
 8001560:	2500      	movs	r5, #0
 8001562:	e773      	b.n	800144c <UART_SetConfig+0xf0>
 8001564:	2510      	movs	r5, #16
 8001566:	e771      	b.n	800144c <UART_SetConfig+0xf0>
 8001568:	2510      	movs	r5, #16
 800156a:	e76f      	b.n	800144c <UART_SetConfig+0xf0>
 800156c:	2502      	movs	r5, #2
 800156e:	e76d      	b.n	800144c <UART_SetConfig+0xf0>
 8001570:	2500      	movs	r5, #0
 8001572:	e76b      	b.n	800144c <UART_SetConfig+0xf0>
 8001574:	2510      	movs	r5, #16
 8001576:	e769      	b.n	800144c <UART_SetConfig+0xf0>
 8001578:	2510      	movs	r5, #16
 800157a:	e767      	b.n	800144c <UART_SetConfig+0xf0>
 800157c:	2502      	movs	r5, #2
 800157e:	e765      	b.n	800144c <UART_SetConfig+0xf0>
 8001580:	2501      	movs	r5, #1
 8001582:	e763      	b.n	800144c <UART_SetConfig+0xf0>
 8001584:	2510      	movs	r5, #16
 8001586:	e761      	b.n	800144c <UART_SetConfig+0xf0>
 8001588:	2510      	movs	r5, #16
 800158a:	e75f      	b.n	800144c <UART_SetConfig+0xf0>
 800158c:	2502      	movs	r5, #2
 800158e:	e75d      	b.n	800144c <UART_SetConfig+0xf0>
 8001590:	2500      	movs	r5, #0
 8001592:	e75b      	b.n	800144c <UART_SetConfig+0xf0>
 8001594:	2510      	movs	r5, #16
 8001596:	e759      	b.n	800144c <UART_SetConfig+0xf0>
 8001598:	2510      	movs	r5, #16
 800159a:	e757      	b.n	800144c <UART_SetConfig+0xf0>
 800159c:	2502      	movs	r5, #2
 800159e:	e755      	b.n	800144c <UART_SetConfig+0xf0>
 80015a0:	2500      	movs	r5, #0
 80015a2:	e753      	b.n	800144c <UART_SetConfig+0xf0>
 80015a4:	2510      	movs	r5, #16
 80015a6:	e751      	b.n	800144c <UART_SetConfig+0xf0>
 80015a8:	2510      	movs	r5, #16
 80015aa:	e74f      	b.n	800144c <UART_SetConfig+0xf0>
    switch (clocksource)
 80015ac:	2d08      	cmp	r5, #8
 80015ae:	d85b      	bhi.n	8001668 <UART_SetConfig+0x30c>
 80015b0:	e8df f005 	tbb	[pc, r5]
 80015b4:	5a3d3205 	.word	0x5a3d3205
 80015b8:	5a5a5a46 	.word	0x5a5a5a46
 80015bc:	51          	.byte	0x51
 80015bd:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 80015be:	f7ff fead 	bl	800131c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80015c2:	6862      	ldr	r2, [r4, #4]
 80015c4:	0853      	lsrs	r3, r2, #1
 80015c6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80015ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80015ce:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80015d0:	f1a3 0110 	sub.w	r1, r3, #16
 80015d4:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80015d8:	4291      	cmp	r1, r2
 80015da:	f200 8082 	bhi.w	80016e2 <UART_SetConfig+0x386>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80015de:	b29a      	uxth	r2, r3
 80015e0:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80015e4:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80015e8:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 80015ea:	6822      	ldr	r2, [r4, #0]
 80015ec:	60d3      	str	r3, [r2, #12]
 80015ee:	e07b      	b.n	80016e8 <UART_SetConfig+0x38c>
 80015f0:	efff69f3 	.word	0xefff69f3
 80015f4:	40011000 	.word	0x40011000
 80015f8:	40004400 	.word	0x40004400
 80015fc:	40004800 	.word	0x40004800
 8001600:	40004c00 	.word	0x40004c00
 8001604:	40005000 	.word	0x40005000
 8001608:	40011400 	.word	0x40011400
 800160c:	40007800 	.word	0x40007800
 8001610:	40007c00 	.word	0x40007c00
 8001614:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK2Freq();
 8001618:	f7ff fe90 	bl	800133c <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800161c:	6862      	ldr	r2, [r4, #4]
 800161e:	0853      	lsrs	r3, r2, #1
 8001620:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001624:	fbb3 f3f2 	udiv	r3, r3, r2
 8001628:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800162a:	2500      	movs	r5, #0
        break;
 800162c:	e7d0      	b.n	80015d0 <UART_SetConfig+0x274>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800162e:	6862      	ldr	r2, [r4, #4]
 8001630:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <UART_SetConfig+0x398>)
 8001632:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8001636:	fbb3 f3f2 	udiv	r3, r3, r2
 800163a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800163c:	2500      	movs	r5, #0
        break;
 800163e:	e7c7      	b.n	80015d0 <UART_SetConfig+0x274>
        pclk = HAL_RCC_GetSysClockFreq();
 8001640:	f7ff fd60 	bl	8001104 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001644:	6862      	ldr	r2, [r4, #4]
 8001646:	0853      	lsrs	r3, r2, #1
 8001648:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800164c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001650:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001652:	2500      	movs	r5, #0
        break;
 8001654:	e7bc      	b.n	80015d0 <UART_SetConfig+0x274>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001656:	6862      	ldr	r2, [r4, #4]
 8001658:	0853      	lsrs	r3, r2, #1
 800165a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800165e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001662:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001664:	2500      	movs	r5, #0
        break;
 8001666:	e7b3      	b.n	80015d0 <UART_SetConfig+0x274>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001668:	2501      	movs	r5, #1
 800166a:	2300      	movs	r3, #0
 800166c:	e7b0      	b.n	80015d0 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800166e:	f7ff fe55 	bl	800131c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001672:	6862      	ldr	r2, [r4, #4]
 8001674:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001678:	fbb3 f3f2 	udiv	r3, r3, r2
 800167c:	b29b      	uxth	r3, r3
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800167e:	f1a3 0110 	sub.w	r1, r3, #16
 8001682:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001686:	4291      	cmp	r1, r2
 8001688:	d82d      	bhi.n	80016e6 <UART_SetConfig+0x38a>
    {
      huart->Instance->BRR = usartdiv;
 800168a:	6822      	ldr	r2, [r4, #0]
 800168c:	60d3      	str	r3, [r2, #12]
 800168e:	e02b      	b.n	80016e8 <UART_SetConfig+0x38c>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001690:	f7ff fe54 	bl	800133c <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001694:	6862      	ldr	r2, [r4, #4]
 8001696:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800169a:	fbb3 f3f2 	udiv	r3, r3, r2
 800169e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80016a0:	2500      	movs	r5, #0
        break;
 80016a2:	e7ec      	b.n	800167e <UART_SetConfig+0x322>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80016a4:	6862      	ldr	r2, [r4, #4]
 80016a6:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <UART_SetConfig+0x39c>)
 80016a8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80016ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80016b0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80016b2:	2500      	movs	r5, #0
        break;
 80016b4:	e7e3      	b.n	800167e <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetSysClockFreq();
 80016b6:	f7ff fd25 	bl	8001104 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80016ba:	6862      	ldr	r2, [r4, #4]
 80016bc:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80016c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80016c4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80016c6:	2500      	movs	r5, #0
        break;
 80016c8:	e7d9      	b.n	800167e <UART_SetConfig+0x322>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80016ca:	6862      	ldr	r2, [r4, #4]
 80016cc:	0853      	lsrs	r3, r2, #1
 80016ce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80016d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80016d6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80016d8:	2500      	movs	r5, #0
        break;
 80016da:	e7d0      	b.n	800167e <UART_SetConfig+0x322>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016dc:	2501      	movs	r5, #1
 80016de:	2300      	movs	r3, #0
 80016e0:	e7cd      	b.n	800167e <UART_SetConfig+0x322>
      ret = HAL_ERROR;
 80016e2:	2501      	movs	r5, #1
 80016e4:	e000      	b.n	80016e8 <UART_SetConfig+0x38c>
    }
    else
    {
      ret = HAL_ERROR;
 80016e6:	2501      	movs	r5, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80016ec:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 80016ee:	4628      	mov	r0, r5
 80016f0:	bd38      	pop	{r3, r4, r5, pc}
 80016f2:	bf00      	nop
 80016f4:	01e84800 	.word	0x01e84800
 80016f8:	00f42400 	.word	0x00f42400

080016fc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80016fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80016fe:	f013 0f01 	tst.w	r3, #1
 8001702:	d006      	beq.n	8001712 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001704:	6802      	ldr	r2, [r0, #0]
 8001706:	6853      	ldr	r3, [r2, #4]
 8001708:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800170c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800170e:	430b      	orrs	r3, r1
 8001710:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001712:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001714:	f013 0f02 	tst.w	r3, #2
 8001718:	d006      	beq.n	8001728 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800171a:	6802      	ldr	r2, [r0, #0]
 800171c:	6853      	ldr	r3, [r2, #4]
 800171e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001722:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001724:	430b      	orrs	r3, r1
 8001726:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001728:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800172a:	f013 0f04 	tst.w	r3, #4
 800172e:	d006      	beq.n	800173e <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001730:	6802      	ldr	r2, [r0, #0]
 8001732:	6853      	ldr	r3, [r2, #4]
 8001734:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001738:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800173a:	430b      	orrs	r3, r1
 800173c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800173e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001740:	f013 0f08 	tst.w	r3, #8
 8001744:	d006      	beq.n	8001754 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001746:	6802      	ldr	r2, [r0, #0]
 8001748:	6853      	ldr	r3, [r2, #4]
 800174a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800174e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001750:	430b      	orrs	r3, r1
 8001752:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001754:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001756:	f013 0f10 	tst.w	r3, #16
 800175a:	d006      	beq.n	800176a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800175c:	6802      	ldr	r2, [r0, #0]
 800175e:	6893      	ldr	r3, [r2, #8]
 8001760:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001764:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001766:	430b      	orrs	r3, r1
 8001768:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800176a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800176c:	f013 0f20 	tst.w	r3, #32
 8001770:	d006      	beq.n	8001780 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001772:	6802      	ldr	r2, [r0, #0]
 8001774:	6893      	ldr	r3, [r2, #8]
 8001776:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800177a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800177c:	430b      	orrs	r3, r1
 800177e:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001780:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001782:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001786:	d00a      	beq.n	800179e <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001788:	6802      	ldr	r2, [r0, #0]
 800178a:	6853      	ldr	r3, [r2, #4]
 800178c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001790:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001792:	430b      	orrs	r3, r1
 8001794:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001796:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001798:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800179c:	d00b      	beq.n	80017b6 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800179e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80017a4:	d006      	beq.n	80017b4 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80017a6:	6802      	ldr	r2, [r0, #0]
 80017a8:	6853      	ldr	r3, [r2, #4]
 80017aa:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80017ae:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80017b0:	430b      	orrs	r3, r1
 80017b2:	6053      	str	r3, [r2, #4]
  }
}
 80017b4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80017b6:	6802      	ldr	r2, [r0, #0]
 80017b8:	6853      	ldr	r3, [r2, #4]
 80017ba:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80017be:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80017c0:	430b      	orrs	r3, r1
 80017c2:	6053      	str	r3, [r2, #4]
 80017c4:	e7eb      	b.n	800179e <UART_AdvFeatureConfig+0xa2>

080017c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80017c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017ca:	4605      	mov	r5, r0
 80017cc:	460f      	mov	r7, r1
 80017ce:	4616      	mov	r6, r2
 80017d0:	4699      	mov	r9, r3
 80017d2:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017d6:	682c      	ldr	r4, [r5, #0]
 80017d8:	69e4      	ldr	r4, [r4, #28]
 80017da:	ea37 0304 	bics.w	r3, r7, r4
 80017de:	bf0c      	ite	eq
 80017e0:	2401      	moveq	r4, #1
 80017e2:	2400      	movne	r4, #0
 80017e4:	42b4      	cmp	r4, r6
 80017e6:	d13c      	bne.n	8001862 <UART_WaitOnFlagUntilTimeout+0x9c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017e8:	f1b8 3fff 	cmp.w	r8, #4294967295
 80017ec:	d0f3      	beq.n	80017d6 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017ee:	f7ff f8c5 	bl	800097c <HAL_GetTick>
 80017f2:	eba0 0009 	sub.w	r0, r0, r9
 80017f6:	4540      	cmp	r0, r8
 80017f8:	d821      	bhi.n	800183e <UART_WaitOnFlagUntilTimeout+0x78>
 80017fa:	f1b8 0f00 	cmp.w	r8, #0
 80017fe:	d01e      	beq.n	800183e <UART_WaitOnFlagUntilTimeout+0x78>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001800:	682b      	ldr	r3, [r5, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	f012 0f04 	tst.w	r2, #4
 8001808:	d0e5      	beq.n	80017d6 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800180a:	69da      	ldr	r2, [r3, #28]
 800180c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001810:	d0e1      	beq.n	80017d6 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001812:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001816:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001818:	682a      	ldr	r2, [r5, #0]
 800181a:	6813      	ldr	r3, [r2, #0]
 800181c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001820:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001822:	682a      	ldr	r2, [r5, #0]
 8001824:	6893      	ldr	r3, [r2, #8]
 8001826:	f023 0301 	bic.w	r3, r3, #1
 800182a:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 800182c:	2320      	movs	r3, #32
 800182e:	676b      	str	r3, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001830:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001832:	67eb      	str	r3, [r5, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001834:	2300      	movs	r3, #0
 8001836:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800183a:	2003      	movs	r0, #3
 800183c:	e012      	b.n	8001864 <UART_WaitOnFlagUntilTimeout+0x9e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800183e:	682a      	ldr	r2, [r5, #0]
 8001840:	6813      	ldr	r3, [r2, #0]
 8001842:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001846:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001848:	682a      	ldr	r2, [r5, #0]
 800184a:	6893      	ldr	r3, [r2, #8]
 800184c:	f023 0301 	bic.w	r3, r3, #1
 8001850:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001852:	2320      	movs	r3, #32
 8001854:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001856:	67ab      	str	r3, [r5, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8001858:	2300      	movs	r3, #0
 800185a:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
        return HAL_TIMEOUT;
 800185e:	2003      	movs	r0, #3
 8001860:	e000      	b.n	8001864 <UART_WaitOnFlagUntilTimeout+0x9e>
        }
      }
    }
  }
  return HAL_OK;
 8001862:	2000      	movs	r0, #0
}
 8001864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001868 <HAL_UART_Transmit>:
{
 8001868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001870:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001872:	2b20      	cmp	r3, #32
 8001874:	d159      	bne.n	800192a <HAL_UART_Transmit+0xc2>
 8001876:	4604      	mov	r4, r0
 8001878:	460d      	mov	r5, r1
 800187a:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800187c:	fab2 f382 	clz	r3, r2
 8001880:	095b      	lsrs	r3, r3, #5
 8001882:	2900      	cmp	r1, #0
 8001884:	bf08      	it	eq
 8001886:	2301      	moveq	r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	d152      	bne.n	8001932 <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 800188c:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001890:	2b01      	cmp	r3, #1
 8001892:	d050      	beq.n	8001936 <HAL_UART_Transmit+0xce>
 8001894:	2301      	movs	r3, #1
 8001896:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800189a:	2300      	movs	r3, #0
 800189c:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800189e:	2321      	movs	r3, #33	; 0x21
 80018a0:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 80018a2:	f7ff f86b 	bl	800097c <HAL_GetTick>
 80018a6:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80018a8:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80018ac:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018b0:	68a3      	ldr	r3, [r4, #8]
 80018b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018b6:	d005      	beq.n	80018c4 <HAL_UART_Transmit+0x5c>
      pdata16bits = NULL;
 80018b8:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 80018bc:	2300      	movs	r3, #0
 80018be:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 80018c2:	e014      	b.n	80018ee <HAL_UART_Transmit+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018c4:	6923      	ldr	r3, [r4, #16]
 80018c6:	b113      	cbz	r3, 80018ce <HAL_UART_Transmit+0x66>
      pdata16bits = NULL;
 80018c8:	f04f 0800 	mov.w	r8, #0
 80018cc:	e7f6      	b.n	80018bc <HAL_UART_Transmit+0x54>
      pdata16bits = (uint16_t *) pData;
 80018ce:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80018d0:	2500      	movs	r5, #0
 80018d2:	e7f3      	b.n	80018bc <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80018d4:	f838 3b02 	ldrh.w	r3, [r8], #2
 80018d8:	6822      	ldr	r2, [r4, #0]
 80018da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018de:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80018e0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80018e4:	b292      	uxth	r2, r2
 80018e6:	3a01      	subs	r2, #1
 80018e8:	b292      	uxth	r2, r2
 80018ea:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80018ee:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	b173      	cbz	r3, 8001914 <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018f6:	9600      	str	r6, [sp, #0]
 80018f8:	463b      	mov	r3, r7
 80018fa:	2200      	movs	r2, #0
 80018fc:	2180      	movs	r1, #128	; 0x80
 80018fe:	4620      	mov	r0, r4
 8001900:	f7ff ff61 	bl	80017c6 <UART_WaitOnFlagUntilTimeout>
 8001904:	b9c8      	cbnz	r0, 800193a <HAL_UART_Transmit+0xd2>
      if (pdata8bits == NULL)
 8001906:	2d00      	cmp	r5, #0
 8001908:	d0e4      	beq.n	80018d4 <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800190a:	f815 2b01 	ldrb.w	r2, [r5], #1
 800190e:	6823      	ldr	r3, [r4, #0]
 8001910:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001912:	e7e5      	b.n	80018e0 <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001914:	9600      	str	r6, [sp, #0]
 8001916:	463b      	mov	r3, r7
 8001918:	2200      	movs	r2, #0
 800191a:	2140      	movs	r1, #64	; 0x40
 800191c:	4620      	mov	r0, r4
 800191e:	f7ff ff52 	bl	80017c6 <UART_WaitOnFlagUntilTimeout>
 8001922:	b960      	cbnz	r0, 800193e <HAL_UART_Transmit+0xd6>
    huart->gState = HAL_UART_STATE_READY;
 8001924:	2320      	movs	r3, #32
 8001926:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8001928:	e000      	b.n	800192c <HAL_UART_Transmit+0xc4>
    return HAL_BUSY;
 800192a:	2002      	movs	r0, #2
}
 800192c:	b002      	add	sp, #8
 800192e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001932:	2001      	movs	r0, #1
 8001934:	e7fa      	b.n	800192c <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8001936:	2002      	movs	r0, #2
 8001938:	e7f8      	b.n	800192c <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 800193a:	2003      	movs	r0, #3
 800193c:	e7f6      	b.n	800192c <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 800193e:	2003      	movs	r0, #3
 8001940:	e7f4      	b.n	800192c <HAL_UART_Transmit+0xc4>

08001942 <HAL_UART_Receive>:
{
 8001942:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001946:	b083      	sub	sp, #12
 8001948:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800194a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800194c:	2b20      	cmp	r3, #32
 800194e:	f040 8081 	bne.w	8001a54 <HAL_UART_Receive+0x112>
 8001952:	4604      	mov	r4, r0
 8001954:	460d      	mov	r5, r1
 8001956:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001958:	fab2 f382 	clz	r3, r2
 800195c:	095b      	lsrs	r3, r3, #5
 800195e:	2900      	cmp	r1, #0
 8001960:	bf08      	it	eq
 8001962:	2301      	moveq	r3, #1
 8001964:	2b00      	cmp	r3, #0
 8001966:	d179      	bne.n	8001a5c <HAL_UART_Receive+0x11a>
    __HAL_LOCK(huart);
 8001968:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800196c:	2b01      	cmp	r3, #1
 800196e:	d077      	beq.n	8001a60 <HAL_UART_Receive+0x11e>
 8001970:	2301      	movs	r3, #1
 8001972:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001976:	2300      	movs	r3, #0
 8001978:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800197a:	2322      	movs	r3, #34	; 0x22
 800197c:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 800197e:	f7fe fffd 	bl	800097c <HAL_GetTick>
 8001982:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 8001984:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 8001988:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800198c:	68a3      	ldr	r3, [r4, #8]
 800198e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001992:	d006      	beq.n	80019a2 <HAL_UART_Receive+0x60>
 8001994:	b9a3      	cbnz	r3, 80019c0 <HAL_UART_Receive+0x7e>
 8001996:	6922      	ldr	r2, [r4, #16]
 8001998:	b972      	cbnz	r2, 80019b8 <HAL_UART_Receive+0x76>
 800199a:	22ff      	movs	r2, #255	; 0xff
 800199c:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80019a0:	e014      	b.n	80019cc <HAL_UART_Receive+0x8a>
 80019a2:	6922      	ldr	r2, [r4, #16]
 80019a4:	b922      	cbnz	r2, 80019b0 <HAL_UART_Receive+0x6e>
 80019a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80019aa:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80019ae:	e00d      	b.n	80019cc <HAL_UART_Receive+0x8a>
 80019b0:	22ff      	movs	r2, #255	; 0xff
 80019b2:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80019b6:	e009      	b.n	80019cc <HAL_UART_Receive+0x8a>
 80019b8:	227f      	movs	r2, #127	; 0x7f
 80019ba:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80019be:	e005      	b.n	80019cc <HAL_UART_Receive+0x8a>
 80019c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019c4:	d00d      	beq.n	80019e2 <HAL_UART_Receive+0xa0>
 80019c6:	2200      	movs	r2, #0
 80019c8:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 80019cc:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019d4:	d00f      	beq.n	80019f6 <HAL_UART_Receive+0xb4>
      pdata16bits = NULL;
 80019d6:	f04f 0900 	mov.w	r9, #0
    __HAL_UNLOCK(huart);
 80019da:	2300      	movs	r3, #0
 80019dc:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->RxXferCount > 0U)
 80019e0:	e01e      	b.n	8001a20 <HAL_UART_Receive+0xde>
    UART_MASK_COMPUTATION(huart);
 80019e2:	6922      	ldr	r2, [r4, #16]
 80019e4:	b91a      	cbnz	r2, 80019ee <HAL_UART_Receive+0xac>
 80019e6:	227f      	movs	r2, #127	; 0x7f
 80019e8:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80019ec:	e7ee      	b.n	80019cc <HAL_UART_Receive+0x8a>
 80019ee:	223f      	movs	r2, #63	; 0x3f
 80019f0:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80019f4:	e7ea      	b.n	80019cc <HAL_UART_Receive+0x8a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019f6:	6923      	ldr	r3, [r4, #16]
 80019f8:	b113      	cbz	r3, 8001a00 <HAL_UART_Receive+0xbe>
      pdata16bits = NULL;
 80019fa:	f04f 0900 	mov.w	r9, #0
 80019fe:	e7ec      	b.n	80019da <HAL_UART_Receive+0x98>
      pdata16bits = (uint16_t *) pData;
 8001a00:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8001a02:	2500      	movs	r5, #0
 8001a04:	e7e9      	b.n	80019da <HAL_UART_Receive+0x98>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001a06:	6823      	ldr	r3, [r4, #0]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	ea08 0303 	and.w	r3, r8, r3
 8001a0e:	f829 3b02 	strh.w	r3, [r9], #2
      huart->RxXferCount--;
 8001a12:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8001a16:	b292      	uxth	r2, r2
 8001a18:	3a01      	subs	r2, #1
 8001a1a:	b292      	uxth	r2, r2
 8001a1c:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8001a20:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	b18b      	cbz	r3, 8001a4c <HAL_UART_Receive+0x10a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001a28:	9600      	str	r6, [sp, #0]
 8001a2a:	463b      	mov	r3, r7
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2120      	movs	r1, #32
 8001a30:	4620      	mov	r0, r4
 8001a32:	f7ff fec8 	bl	80017c6 <UART_WaitOnFlagUntilTimeout>
 8001a36:	b9a8      	cbnz	r0, 8001a64 <HAL_UART_Receive+0x122>
      if (pdata8bits == NULL)
 8001a38:	2d00      	cmp	r5, #0
 8001a3a:	d0e4      	beq.n	8001a06 <HAL_UART_Receive+0xc4>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001a3c:	6823      	ldr	r3, [r4, #0]
 8001a3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a40:	fa5f f388 	uxtb.w	r3, r8
 8001a44:	4013      	ands	r3, r2
 8001a46:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 8001a4a:	e7e2      	b.n	8001a12 <HAL_UART_Receive+0xd0>
    huart->RxState = HAL_UART_STATE_READY;
 8001a4c:	2320      	movs	r3, #32
 8001a4e:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8001a50:	2000      	movs	r0, #0
 8001a52:	e000      	b.n	8001a56 <HAL_UART_Receive+0x114>
    return HAL_BUSY;
 8001a54:	2002      	movs	r0, #2
}
 8001a56:	b003      	add	sp, #12
 8001a58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	e7fa      	b.n	8001a56 <HAL_UART_Receive+0x114>
    __HAL_LOCK(huart);
 8001a60:	2002      	movs	r0, #2
 8001a62:	e7f8      	b.n	8001a56 <HAL_UART_Receive+0x114>
        return HAL_TIMEOUT;
 8001a64:	2003      	movs	r0, #3
 8001a66:	e7f6      	b.n	8001a56 <HAL_UART_Receive+0x114>

08001a68 <UART_CheckIdleState>:
{
 8001a68:	b530      	push	{r4, r5, lr}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001a72:	f7fe ff83 	bl	800097c <HAL_GetTick>
 8001a76:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a78:	6823      	ldr	r3, [r4, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f013 0f08 	tst.w	r3, #8
 8001a80:	d10c      	bne.n	8001a9c <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001a82:	6823      	ldr	r3, [r4, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f013 0f04 	tst.w	r3, #4
 8001a8a:	d115      	bne.n	8001ab8 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8001a8c:	2320      	movs	r3, #32
 8001a8e:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001a90:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001a92:	2000      	movs	r0, #0
 8001a94:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8001a98:	b003      	add	sp, #12
 8001a9a:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f7ff fe8b 	bl	80017c6 <UART_WaitOnFlagUntilTimeout>
 8001ab0:	2800      	cmp	r0, #0
 8001ab2:	d0e6      	beq.n	8001a82 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8001ab4:	2003      	movs	r0, #3
 8001ab6:	e7ef      	b.n	8001a98 <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001ab8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	462b      	mov	r3, r5
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	f7ff fe7d 	bl	80017c6 <UART_WaitOnFlagUntilTimeout>
 8001acc:	2800      	cmp	r0, #0
 8001ace:	d0dd      	beq.n	8001a8c <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	e7e1      	b.n	8001a98 <UART_CheckIdleState+0x30>

08001ad4 <HAL_UART_Init>:
  if (huart == NULL)
 8001ad4:	b368      	cbz	r0, 8001b32 <HAL_UART_Init+0x5e>
{
 8001ad6:	b510      	push	{r4, lr}
 8001ad8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001ada:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001adc:	b303      	cbz	r3, 8001b20 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8001ade:	2324      	movs	r3, #36	; 0x24
 8001ae0:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001ae2:	6822      	ldr	r2, [r4, #0]
 8001ae4:	6813      	ldr	r3, [r2, #0]
 8001ae6:	f023 0301 	bic.w	r3, r3, #1
 8001aea:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001aec:	4620      	mov	r0, r4
 8001aee:	f7ff fc35 	bl	800135c <UART_SetConfig>
 8001af2:	2801      	cmp	r0, #1
 8001af4:	d013      	beq.n	8001b1e <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001af6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001af8:	b9bb      	cbnz	r3, 8001b2a <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001afa:	6822      	ldr	r2, [r4, #0]
 8001afc:	6853      	ldr	r3, [r2, #4]
 8001afe:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001b02:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b04:	6822      	ldr	r2, [r4, #0]
 8001b06:	6893      	ldr	r3, [r2, #8]
 8001b08:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001b0c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001b0e:	6822      	ldr	r2, [r4, #0]
 8001b10:	6813      	ldr	r3, [r2, #0]
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001b18:	4620      	mov	r0, r4
 8001b1a:	f7ff ffa5 	bl	8001a68 <UART_CheckIdleState>
}
 8001b1e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001b20:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001b24:	f7fe fe18 	bl	8000758 <HAL_UART_MspInit>
 8001b28:	e7d9      	b.n	8001ade <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	f7ff fde6 	bl	80016fc <UART_AdvFeatureConfig>
 8001b30:	e7e3      	b.n	8001afa <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8001b32:	2001      	movs	r0, #1
}
 8001b34:	4770      	bx	lr
	...

08001b38 <__libc_init_array>:
 8001b38:	b570      	push	{r4, r5, r6, lr}
 8001b3a:	4d0d      	ldr	r5, [pc, #52]	; (8001b70 <__libc_init_array+0x38>)
 8001b3c:	4c0d      	ldr	r4, [pc, #52]	; (8001b74 <__libc_init_array+0x3c>)
 8001b3e:	1b64      	subs	r4, r4, r5
 8001b40:	10a4      	asrs	r4, r4, #2
 8001b42:	2600      	movs	r6, #0
 8001b44:	42a6      	cmp	r6, r4
 8001b46:	d109      	bne.n	8001b5c <__libc_init_array+0x24>
 8001b48:	4d0b      	ldr	r5, [pc, #44]	; (8001b78 <__libc_init_array+0x40>)
 8001b4a:	4c0c      	ldr	r4, [pc, #48]	; (8001b7c <__libc_init_array+0x44>)
 8001b4c:	f000 ffa4 	bl	8002a98 <_init>
 8001b50:	1b64      	subs	r4, r4, r5
 8001b52:	10a4      	asrs	r4, r4, #2
 8001b54:	2600      	movs	r6, #0
 8001b56:	42a6      	cmp	r6, r4
 8001b58:	d105      	bne.n	8001b66 <__libc_init_array+0x2e>
 8001b5a:	bd70      	pop	{r4, r5, r6, pc}
 8001b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b60:	4798      	blx	r3
 8001b62:	3601      	adds	r6, #1
 8001b64:	e7ee      	b.n	8001b44 <__libc_init_array+0xc>
 8001b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b6a:	4798      	blx	r3
 8001b6c:	3601      	adds	r6, #1
 8001b6e:	e7f2      	b.n	8001b56 <__libc_init_array+0x1e>
 8001b70:	08002b70 	.word	0x08002b70
 8001b74:	08002b70 	.word	0x08002b70
 8001b78:	08002b70 	.word	0x08002b70
 8001b7c:	08002b74 	.word	0x08002b74

08001b80 <memset>:
 8001b80:	4402      	add	r2, r0
 8001b82:	4603      	mov	r3, r0
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d100      	bne.n	8001b8a <memset+0xa>
 8001b88:	4770      	bx	lr
 8001b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8001b8e:	e7f9      	b.n	8001b84 <memset+0x4>

08001b90 <iprintf>:
 8001b90:	b40f      	push	{r0, r1, r2, r3}
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <iprintf+0x2c>)
 8001b94:	b513      	push	{r0, r1, r4, lr}
 8001b96:	681c      	ldr	r4, [r3, #0]
 8001b98:	b124      	cbz	r4, 8001ba4 <iprintf+0x14>
 8001b9a:	69a3      	ldr	r3, [r4, #24]
 8001b9c:	b913      	cbnz	r3, 8001ba4 <iprintf+0x14>
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	f000 f866 	bl	8001c70 <__sinit>
 8001ba4:	ab05      	add	r3, sp, #20
 8001ba6:	9a04      	ldr	r2, [sp, #16]
 8001ba8:	68a1      	ldr	r1, [r4, #8]
 8001baa:	9301      	str	r3, [sp, #4]
 8001bac:	4620      	mov	r0, r4
 8001bae:	f000 f983 	bl	8001eb8 <_vfiprintf_r>
 8001bb2:	b002      	add	sp, #8
 8001bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001bb8:	b004      	add	sp, #16
 8001bba:	4770      	bx	lr
 8001bbc:	2000000c 	.word	0x2000000c

08001bc0 <std>:
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	b510      	push	{r4, lr}
 8001bc4:	4604      	mov	r4, r0
 8001bc6:	e9c0 3300 	strd	r3, r3, [r0]
 8001bca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001bce:	6083      	str	r3, [r0, #8]
 8001bd0:	8181      	strh	r1, [r0, #12]
 8001bd2:	6643      	str	r3, [r0, #100]	; 0x64
 8001bd4:	81c2      	strh	r2, [r0, #14]
 8001bd6:	6183      	str	r3, [r0, #24]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	2208      	movs	r2, #8
 8001bdc:	305c      	adds	r0, #92	; 0x5c
 8001bde:	f7ff ffcf 	bl	8001b80 <memset>
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <std+0x38>)
 8001be4:	6263      	str	r3, [r4, #36]	; 0x24
 8001be6:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <std+0x3c>)
 8001be8:	62a3      	str	r3, [r4, #40]	; 0x28
 8001bea:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <std+0x40>)
 8001bec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001bee:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <std+0x44>)
 8001bf0:	6224      	str	r4, [r4, #32]
 8001bf2:	6323      	str	r3, [r4, #48]	; 0x30
 8001bf4:	bd10      	pop	{r4, pc}
 8001bf6:	bf00      	nop
 8001bf8:	08002461 	.word	0x08002461
 8001bfc:	08002483 	.word	0x08002483
 8001c00:	080024bb 	.word	0x080024bb
 8001c04:	080024df 	.word	0x080024df

08001c08 <_cleanup_r>:
 8001c08:	4901      	ldr	r1, [pc, #4]	; (8001c10 <_cleanup_r+0x8>)
 8001c0a:	f000 b8af 	b.w	8001d6c <_fwalk_reent>
 8001c0e:	bf00      	nop
 8001c10:	080027b9 	.word	0x080027b9

08001c14 <__sfmoreglue>:
 8001c14:	b570      	push	{r4, r5, r6, lr}
 8001c16:	1e4a      	subs	r2, r1, #1
 8001c18:	2568      	movs	r5, #104	; 0x68
 8001c1a:	4355      	muls	r5, r2
 8001c1c:	460e      	mov	r6, r1
 8001c1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001c22:	f000 f8c5 	bl	8001db0 <_malloc_r>
 8001c26:	4604      	mov	r4, r0
 8001c28:	b140      	cbz	r0, 8001c3c <__sfmoreglue+0x28>
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	e9c0 1600 	strd	r1, r6, [r0]
 8001c30:	300c      	adds	r0, #12
 8001c32:	60a0      	str	r0, [r4, #8]
 8001c34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001c38:	f7ff ffa2 	bl	8001b80 <memset>
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	bd70      	pop	{r4, r5, r6, pc}

08001c40 <__sfp_lock_acquire>:
 8001c40:	4801      	ldr	r0, [pc, #4]	; (8001c48 <__sfp_lock_acquire+0x8>)
 8001c42:	f000 b8b3 	b.w	8001dac <__retarget_lock_acquire_recursive>
 8001c46:	bf00      	nop
 8001c48:	200001a8 	.word	0x200001a8

08001c4c <__sfp_lock_release>:
 8001c4c:	4801      	ldr	r0, [pc, #4]	; (8001c54 <__sfp_lock_release+0x8>)
 8001c4e:	f000 b8ae 	b.w	8001dae <__retarget_lock_release_recursive>
 8001c52:	bf00      	nop
 8001c54:	200001a8 	.word	0x200001a8

08001c58 <__sinit_lock_acquire>:
 8001c58:	4801      	ldr	r0, [pc, #4]	; (8001c60 <__sinit_lock_acquire+0x8>)
 8001c5a:	f000 b8a7 	b.w	8001dac <__retarget_lock_acquire_recursive>
 8001c5e:	bf00      	nop
 8001c60:	200001a3 	.word	0x200001a3

08001c64 <__sinit_lock_release>:
 8001c64:	4801      	ldr	r0, [pc, #4]	; (8001c6c <__sinit_lock_release+0x8>)
 8001c66:	f000 b8a2 	b.w	8001dae <__retarget_lock_release_recursive>
 8001c6a:	bf00      	nop
 8001c6c:	200001a3 	.word	0x200001a3

08001c70 <__sinit>:
 8001c70:	b510      	push	{r4, lr}
 8001c72:	4604      	mov	r4, r0
 8001c74:	f7ff fff0 	bl	8001c58 <__sinit_lock_acquire>
 8001c78:	69a3      	ldr	r3, [r4, #24]
 8001c7a:	b11b      	cbz	r3, 8001c84 <__sinit+0x14>
 8001c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c80:	f7ff bff0 	b.w	8001c64 <__sinit_lock_release>
 8001c84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001c88:	6523      	str	r3, [r4, #80]	; 0x50
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <__sinit+0x68>)
 8001c8c:	4a13      	ldr	r2, [pc, #76]	; (8001cdc <__sinit+0x6c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	62a2      	str	r2, [r4, #40]	; 0x28
 8001c92:	42a3      	cmp	r3, r4
 8001c94:	bf04      	itt	eq
 8001c96:	2301      	moveq	r3, #1
 8001c98:	61a3      	streq	r3, [r4, #24]
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	f000 f820 	bl	8001ce0 <__sfp>
 8001ca0:	6060      	str	r0, [r4, #4]
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	f000 f81c 	bl	8001ce0 <__sfp>
 8001ca8:	60a0      	str	r0, [r4, #8]
 8001caa:	4620      	mov	r0, r4
 8001cac:	f000 f818 	bl	8001ce0 <__sfp>
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	60e0      	str	r0, [r4, #12]
 8001cb4:	2104      	movs	r1, #4
 8001cb6:	6860      	ldr	r0, [r4, #4]
 8001cb8:	f7ff ff82 	bl	8001bc0 <std>
 8001cbc:	68a0      	ldr	r0, [r4, #8]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	2109      	movs	r1, #9
 8001cc2:	f7ff ff7d 	bl	8001bc0 <std>
 8001cc6:	68e0      	ldr	r0, [r4, #12]
 8001cc8:	2202      	movs	r2, #2
 8001cca:	2112      	movs	r1, #18
 8001ccc:	f7ff ff78 	bl	8001bc0 <std>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	61a3      	str	r3, [r4, #24]
 8001cd4:	e7d2      	b.n	8001c7c <__sinit+0xc>
 8001cd6:	bf00      	nop
 8001cd8:	08002ad0 	.word	0x08002ad0
 8001cdc:	08001c09 	.word	0x08001c09

08001ce0 <__sfp>:
 8001ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ce2:	4607      	mov	r7, r0
 8001ce4:	f7ff ffac 	bl	8001c40 <__sfp_lock_acquire>
 8001ce8:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <__sfp+0x84>)
 8001cea:	681e      	ldr	r6, [r3, #0]
 8001cec:	69b3      	ldr	r3, [r6, #24]
 8001cee:	b913      	cbnz	r3, 8001cf6 <__sfp+0x16>
 8001cf0:	4630      	mov	r0, r6
 8001cf2:	f7ff ffbd 	bl	8001c70 <__sinit>
 8001cf6:	3648      	adds	r6, #72	; 0x48
 8001cf8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	d503      	bpl.n	8001d08 <__sfp+0x28>
 8001d00:	6833      	ldr	r3, [r6, #0]
 8001d02:	b30b      	cbz	r3, 8001d48 <__sfp+0x68>
 8001d04:	6836      	ldr	r6, [r6, #0]
 8001d06:	e7f7      	b.n	8001cf8 <__sfp+0x18>
 8001d08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001d0c:	b9d5      	cbnz	r5, 8001d44 <__sfp+0x64>
 8001d0e:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <__sfp+0x88>)
 8001d10:	60e3      	str	r3, [r4, #12]
 8001d12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001d16:	6665      	str	r5, [r4, #100]	; 0x64
 8001d18:	f000 f847 	bl	8001daa <__retarget_lock_init_recursive>
 8001d1c:	f7ff ff96 	bl	8001c4c <__sfp_lock_release>
 8001d20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001d24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001d28:	6025      	str	r5, [r4, #0]
 8001d2a:	61a5      	str	r5, [r4, #24]
 8001d2c:	2208      	movs	r2, #8
 8001d2e:	4629      	mov	r1, r5
 8001d30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001d34:	f7ff ff24 	bl	8001b80 <memset>
 8001d38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001d3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001d40:	4620      	mov	r0, r4
 8001d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d44:	3468      	adds	r4, #104	; 0x68
 8001d46:	e7d9      	b.n	8001cfc <__sfp+0x1c>
 8001d48:	2104      	movs	r1, #4
 8001d4a:	4638      	mov	r0, r7
 8001d4c:	f7ff ff62 	bl	8001c14 <__sfmoreglue>
 8001d50:	4604      	mov	r4, r0
 8001d52:	6030      	str	r0, [r6, #0]
 8001d54:	2800      	cmp	r0, #0
 8001d56:	d1d5      	bne.n	8001d04 <__sfp+0x24>
 8001d58:	f7ff ff78 	bl	8001c4c <__sfp_lock_release>
 8001d5c:	230c      	movs	r3, #12
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	e7ee      	b.n	8001d40 <__sfp+0x60>
 8001d62:	bf00      	nop
 8001d64:	08002ad0 	.word	0x08002ad0
 8001d68:	ffff0001 	.word	0xffff0001

08001d6c <_fwalk_reent>:
 8001d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d70:	4606      	mov	r6, r0
 8001d72:	4688      	mov	r8, r1
 8001d74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001d78:	2700      	movs	r7, #0
 8001d7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001d7e:	f1b9 0901 	subs.w	r9, r9, #1
 8001d82:	d505      	bpl.n	8001d90 <_fwalk_reent+0x24>
 8001d84:	6824      	ldr	r4, [r4, #0]
 8001d86:	2c00      	cmp	r4, #0
 8001d88:	d1f7      	bne.n	8001d7a <_fwalk_reent+0xe>
 8001d8a:	4638      	mov	r0, r7
 8001d8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d90:	89ab      	ldrh	r3, [r5, #12]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d907      	bls.n	8001da6 <_fwalk_reent+0x3a>
 8001d96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	d003      	beq.n	8001da6 <_fwalk_reent+0x3a>
 8001d9e:	4629      	mov	r1, r5
 8001da0:	4630      	mov	r0, r6
 8001da2:	47c0      	blx	r8
 8001da4:	4307      	orrs	r7, r0
 8001da6:	3568      	adds	r5, #104	; 0x68
 8001da8:	e7e9      	b.n	8001d7e <_fwalk_reent+0x12>

08001daa <__retarget_lock_init_recursive>:
 8001daa:	4770      	bx	lr

08001dac <__retarget_lock_acquire_recursive>:
 8001dac:	4770      	bx	lr

08001dae <__retarget_lock_release_recursive>:
 8001dae:	4770      	bx	lr

08001db0 <_malloc_r>:
 8001db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001db2:	1ccd      	adds	r5, r1, #3
 8001db4:	f025 0503 	bic.w	r5, r5, #3
 8001db8:	3508      	adds	r5, #8
 8001dba:	2d0c      	cmp	r5, #12
 8001dbc:	bf38      	it	cc
 8001dbe:	250c      	movcc	r5, #12
 8001dc0:	2d00      	cmp	r5, #0
 8001dc2:	4606      	mov	r6, r0
 8001dc4:	db01      	blt.n	8001dca <_malloc_r+0x1a>
 8001dc6:	42a9      	cmp	r1, r5
 8001dc8:	d903      	bls.n	8001dd2 <_malloc_r+0x22>
 8001dca:	230c      	movs	r3, #12
 8001dcc:	6033      	str	r3, [r6, #0]
 8001dce:	2000      	movs	r0, #0
 8001dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dd2:	f000 fda3 	bl	800291c <__malloc_lock>
 8001dd6:	4921      	ldr	r1, [pc, #132]	; (8001e5c <_malloc_r+0xac>)
 8001dd8:	680a      	ldr	r2, [r1, #0]
 8001dda:	4614      	mov	r4, r2
 8001ddc:	b99c      	cbnz	r4, 8001e06 <_malloc_r+0x56>
 8001dde:	4f20      	ldr	r7, [pc, #128]	; (8001e60 <_malloc_r+0xb0>)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	b923      	cbnz	r3, 8001dee <_malloc_r+0x3e>
 8001de4:	4621      	mov	r1, r4
 8001de6:	4630      	mov	r0, r6
 8001de8:	f000 fb2a 	bl	8002440 <_sbrk_r>
 8001dec:	6038      	str	r0, [r7, #0]
 8001dee:	4629      	mov	r1, r5
 8001df0:	4630      	mov	r0, r6
 8001df2:	f000 fb25 	bl	8002440 <_sbrk_r>
 8001df6:	1c43      	adds	r3, r0, #1
 8001df8:	d123      	bne.n	8001e42 <_malloc_r+0x92>
 8001dfa:	230c      	movs	r3, #12
 8001dfc:	6033      	str	r3, [r6, #0]
 8001dfe:	4630      	mov	r0, r6
 8001e00:	f000 fd92 	bl	8002928 <__malloc_unlock>
 8001e04:	e7e3      	b.n	8001dce <_malloc_r+0x1e>
 8001e06:	6823      	ldr	r3, [r4, #0]
 8001e08:	1b5b      	subs	r3, r3, r5
 8001e0a:	d417      	bmi.n	8001e3c <_malloc_r+0x8c>
 8001e0c:	2b0b      	cmp	r3, #11
 8001e0e:	d903      	bls.n	8001e18 <_malloc_r+0x68>
 8001e10:	6023      	str	r3, [r4, #0]
 8001e12:	441c      	add	r4, r3
 8001e14:	6025      	str	r5, [r4, #0]
 8001e16:	e004      	b.n	8001e22 <_malloc_r+0x72>
 8001e18:	6863      	ldr	r3, [r4, #4]
 8001e1a:	42a2      	cmp	r2, r4
 8001e1c:	bf0c      	ite	eq
 8001e1e:	600b      	streq	r3, [r1, #0]
 8001e20:	6053      	strne	r3, [r2, #4]
 8001e22:	4630      	mov	r0, r6
 8001e24:	f000 fd80 	bl	8002928 <__malloc_unlock>
 8001e28:	f104 000b 	add.w	r0, r4, #11
 8001e2c:	1d23      	adds	r3, r4, #4
 8001e2e:	f020 0007 	bic.w	r0, r0, #7
 8001e32:	1ac2      	subs	r2, r0, r3
 8001e34:	d0cc      	beq.n	8001dd0 <_malloc_r+0x20>
 8001e36:	1a1b      	subs	r3, r3, r0
 8001e38:	50a3      	str	r3, [r4, r2]
 8001e3a:	e7c9      	b.n	8001dd0 <_malloc_r+0x20>
 8001e3c:	4622      	mov	r2, r4
 8001e3e:	6864      	ldr	r4, [r4, #4]
 8001e40:	e7cc      	b.n	8001ddc <_malloc_r+0x2c>
 8001e42:	1cc4      	adds	r4, r0, #3
 8001e44:	f024 0403 	bic.w	r4, r4, #3
 8001e48:	42a0      	cmp	r0, r4
 8001e4a:	d0e3      	beq.n	8001e14 <_malloc_r+0x64>
 8001e4c:	1a21      	subs	r1, r4, r0
 8001e4e:	4630      	mov	r0, r6
 8001e50:	f000 faf6 	bl	8002440 <_sbrk_r>
 8001e54:	3001      	adds	r0, #1
 8001e56:	d1dd      	bne.n	8001e14 <_malloc_r+0x64>
 8001e58:	e7cf      	b.n	8001dfa <_malloc_r+0x4a>
 8001e5a:	bf00      	nop
 8001e5c:	2000008c 	.word	0x2000008c
 8001e60:	20000090 	.word	0x20000090

08001e64 <__sfputc_r>:
 8001e64:	6893      	ldr	r3, [r2, #8]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	b410      	push	{r4}
 8001e6c:	6093      	str	r3, [r2, #8]
 8001e6e:	da08      	bge.n	8001e82 <__sfputc_r+0x1e>
 8001e70:	6994      	ldr	r4, [r2, #24]
 8001e72:	42a3      	cmp	r3, r4
 8001e74:	db01      	blt.n	8001e7a <__sfputc_r+0x16>
 8001e76:	290a      	cmp	r1, #10
 8001e78:	d103      	bne.n	8001e82 <__sfputc_r+0x1e>
 8001e7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e7e:	f000 bb33 	b.w	80024e8 <__swbuf_r>
 8001e82:	6813      	ldr	r3, [r2, #0]
 8001e84:	1c58      	adds	r0, r3, #1
 8001e86:	6010      	str	r0, [r2, #0]
 8001e88:	7019      	strb	r1, [r3, #0]
 8001e8a:	4608      	mov	r0, r1
 8001e8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <__sfputs_r>:
 8001e92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e94:	4606      	mov	r6, r0
 8001e96:	460f      	mov	r7, r1
 8001e98:	4614      	mov	r4, r2
 8001e9a:	18d5      	adds	r5, r2, r3
 8001e9c:	42ac      	cmp	r4, r5
 8001e9e:	d101      	bne.n	8001ea4 <__sfputs_r+0x12>
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	e007      	b.n	8001eb4 <__sfputs_r+0x22>
 8001ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ea8:	463a      	mov	r2, r7
 8001eaa:	4630      	mov	r0, r6
 8001eac:	f7ff ffda 	bl	8001e64 <__sfputc_r>
 8001eb0:	1c43      	adds	r3, r0, #1
 8001eb2:	d1f3      	bne.n	8001e9c <__sfputs_r+0xa>
 8001eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001eb8 <_vfiprintf_r>:
 8001eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ebc:	460d      	mov	r5, r1
 8001ebe:	b09d      	sub	sp, #116	; 0x74
 8001ec0:	4614      	mov	r4, r2
 8001ec2:	4698      	mov	r8, r3
 8001ec4:	4606      	mov	r6, r0
 8001ec6:	b118      	cbz	r0, 8001ed0 <_vfiprintf_r+0x18>
 8001ec8:	6983      	ldr	r3, [r0, #24]
 8001eca:	b90b      	cbnz	r3, 8001ed0 <_vfiprintf_r+0x18>
 8001ecc:	f7ff fed0 	bl	8001c70 <__sinit>
 8001ed0:	4b89      	ldr	r3, [pc, #548]	; (80020f8 <_vfiprintf_r+0x240>)
 8001ed2:	429d      	cmp	r5, r3
 8001ed4:	d11b      	bne.n	8001f0e <_vfiprintf_r+0x56>
 8001ed6:	6875      	ldr	r5, [r6, #4]
 8001ed8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001eda:	07d9      	lsls	r1, r3, #31
 8001edc:	d405      	bmi.n	8001eea <_vfiprintf_r+0x32>
 8001ede:	89ab      	ldrh	r3, [r5, #12]
 8001ee0:	059a      	lsls	r2, r3, #22
 8001ee2:	d402      	bmi.n	8001eea <_vfiprintf_r+0x32>
 8001ee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001ee6:	f7ff ff61 	bl	8001dac <__retarget_lock_acquire_recursive>
 8001eea:	89ab      	ldrh	r3, [r5, #12]
 8001eec:	071b      	lsls	r3, r3, #28
 8001eee:	d501      	bpl.n	8001ef4 <_vfiprintf_r+0x3c>
 8001ef0:	692b      	ldr	r3, [r5, #16]
 8001ef2:	b9eb      	cbnz	r3, 8001f30 <_vfiprintf_r+0x78>
 8001ef4:	4629      	mov	r1, r5
 8001ef6:	4630      	mov	r0, r6
 8001ef8:	f000 fb5a 	bl	80025b0 <__swsetup_r>
 8001efc:	b1c0      	cbz	r0, 8001f30 <_vfiprintf_r+0x78>
 8001efe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001f00:	07dc      	lsls	r4, r3, #31
 8001f02:	d50e      	bpl.n	8001f22 <_vfiprintf_r+0x6a>
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295
 8001f08:	b01d      	add	sp, #116	; 0x74
 8001f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f0e:	4b7b      	ldr	r3, [pc, #492]	; (80020fc <_vfiprintf_r+0x244>)
 8001f10:	429d      	cmp	r5, r3
 8001f12:	d101      	bne.n	8001f18 <_vfiprintf_r+0x60>
 8001f14:	68b5      	ldr	r5, [r6, #8]
 8001f16:	e7df      	b.n	8001ed8 <_vfiprintf_r+0x20>
 8001f18:	4b79      	ldr	r3, [pc, #484]	; (8002100 <_vfiprintf_r+0x248>)
 8001f1a:	429d      	cmp	r5, r3
 8001f1c:	bf08      	it	eq
 8001f1e:	68f5      	ldreq	r5, [r6, #12]
 8001f20:	e7da      	b.n	8001ed8 <_vfiprintf_r+0x20>
 8001f22:	89ab      	ldrh	r3, [r5, #12]
 8001f24:	0598      	lsls	r0, r3, #22
 8001f26:	d4ed      	bmi.n	8001f04 <_vfiprintf_r+0x4c>
 8001f28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001f2a:	f7ff ff40 	bl	8001dae <__retarget_lock_release_recursive>
 8001f2e:	e7e9      	b.n	8001f04 <_vfiprintf_r+0x4c>
 8001f30:	2300      	movs	r3, #0
 8001f32:	9309      	str	r3, [sp, #36]	; 0x24
 8001f34:	2320      	movs	r3, #32
 8001f36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f3e:	2330      	movs	r3, #48	; 0x30
 8001f40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002104 <_vfiprintf_r+0x24c>
 8001f44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f48:	f04f 0901 	mov.w	r9, #1
 8001f4c:	4623      	mov	r3, r4
 8001f4e:	469a      	mov	sl, r3
 8001f50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f54:	b10a      	cbz	r2, 8001f5a <_vfiprintf_r+0xa2>
 8001f56:	2a25      	cmp	r2, #37	; 0x25
 8001f58:	d1f9      	bne.n	8001f4e <_vfiprintf_r+0x96>
 8001f5a:	ebba 0b04 	subs.w	fp, sl, r4
 8001f5e:	d00b      	beq.n	8001f78 <_vfiprintf_r+0xc0>
 8001f60:	465b      	mov	r3, fp
 8001f62:	4622      	mov	r2, r4
 8001f64:	4629      	mov	r1, r5
 8001f66:	4630      	mov	r0, r6
 8001f68:	f7ff ff93 	bl	8001e92 <__sfputs_r>
 8001f6c:	3001      	adds	r0, #1
 8001f6e:	f000 80aa 	beq.w	80020c6 <_vfiprintf_r+0x20e>
 8001f72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f74:	445a      	add	r2, fp
 8001f76:	9209      	str	r2, [sp, #36]	; 0x24
 8001f78:	f89a 3000 	ldrb.w	r3, [sl]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 80a2 	beq.w	80020c6 <_vfiprintf_r+0x20e>
 8001f82:	2300      	movs	r3, #0
 8001f84:	f04f 32ff 	mov.w	r2, #4294967295
 8001f88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f8c:	f10a 0a01 	add.w	sl, sl, #1
 8001f90:	9304      	str	r3, [sp, #16]
 8001f92:	9307      	str	r3, [sp, #28]
 8001f94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001f98:	931a      	str	r3, [sp, #104]	; 0x68
 8001f9a:	4654      	mov	r4, sl
 8001f9c:	2205      	movs	r2, #5
 8001f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fa2:	4858      	ldr	r0, [pc, #352]	; (8002104 <_vfiprintf_r+0x24c>)
 8001fa4:	f7fe f94c 	bl	8000240 <memchr>
 8001fa8:	9a04      	ldr	r2, [sp, #16]
 8001faa:	b9d8      	cbnz	r0, 8001fe4 <_vfiprintf_r+0x12c>
 8001fac:	06d1      	lsls	r1, r2, #27
 8001fae:	bf44      	itt	mi
 8001fb0:	2320      	movmi	r3, #32
 8001fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001fb6:	0713      	lsls	r3, r2, #28
 8001fb8:	bf44      	itt	mi
 8001fba:	232b      	movmi	r3, #43	; 0x2b
 8001fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8001fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8001fc6:	d015      	beq.n	8001ff4 <_vfiprintf_r+0x13c>
 8001fc8:	9a07      	ldr	r2, [sp, #28]
 8001fca:	4654      	mov	r4, sl
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f04f 0c0a 	mov.w	ip, #10
 8001fd2:	4621      	mov	r1, r4
 8001fd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001fd8:	3b30      	subs	r3, #48	; 0x30
 8001fda:	2b09      	cmp	r3, #9
 8001fdc:	d94e      	bls.n	800207c <_vfiprintf_r+0x1c4>
 8001fde:	b1b0      	cbz	r0, 800200e <_vfiprintf_r+0x156>
 8001fe0:	9207      	str	r2, [sp, #28]
 8001fe2:	e014      	b.n	800200e <_vfiprintf_r+0x156>
 8001fe4:	eba0 0308 	sub.w	r3, r0, r8
 8001fe8:	fa09 f303 	lsl.w	r3, r9, r3
 8001fec:	4313      	orrs	r3, r2
 8001fee:	9304      	str	r3, [sp, #16]
 8001ff0:	46a2      	mov	sl, r4
 8001ff2:	e7d2      	b.n	8001f9a <_vfiprintf_r+0xe2>
 8001ff4:	9b03      	ldr	r3, [sp, #12]
 8001ff6:	1d19      	adds	r1, r3, #4
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	9103      	str	r1, [sp, #12]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bfbb      	ittet	lt
 8002000:	425b      	neglt	r3, r3
 8002002:	f042 0202 	orrlt.w	r2, r2, #2
 8002006:	9307      	strge	r3, [sp, #28]
 8002008:	9307      	strlt	r3, [sp, #28]
 800200a:	bfb8      	it	lt
 800200c:	9204      	strlt	r2, [sp, #16]
 800200e:	7823      	ldrb	r3, [r4, #0]
 8002010:	2b2e      	cmp	r3, #46	; 0x2e
 8002012:	d10c      	bne.n	800202e <_vfiprintf_r+0x176>
 8002014:	7863      	ldrb	r3, [r4, #1]
 8002016:	2b2a      	cmp	r3, #42	; 0x2a
 8002018:	d135      	bne.n	8002086 <_vfiprintf_r+0x1ce>
 800201a:	9b03      	ldr	r3, [sp, #12]
 800201c:	1d1a      	adds	r2, r3, #4
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	9203      	str	r2, [sp, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	bfb8      	it	lt
 8002026:	f04f 33ff 	movlt.w	r3, #4294967295
 800202a:	3402      	adds	r4, #2
 800202c:	9305      	str	r3, [sp, #20]
 800202e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002114 <_vfiprintf_r+0x25c>
 8002032:	7821      	ldrb	r1, [r4, #0]
 8002034:	2203      	movs	r2, #3
 8002036:	4650      	mov	r0, sl
 8002038:	f7fe f902 	bl	8000240 <memchr>
 800203c:	b140      	cbz	r0, 8002050 <_vfiprintf_r+0x198>
 800203e:	2340      	movs	r3, #64	; 0x40
 8002040:	eba0 000a 	sub.w	r0, r0, sl
 8002044:	fa03 f000 	lsl.w	r0, r3, r0
 8002048:	9b04      	ldr	r3, [sp, #16]
 800204a:	4303      	orrs	r3, r0
 800204c:	3401      	adds	r4, #1
 800204e:	9304      	str	r3, [sp, #16]
 8002050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002054:	482c      	ldr	r0, [pc, #176]	; (8002108 <_vfiprintf_r+0x250>)
 8002056:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800205a:	2206      	movs	r2, #6
 800205c:	f7fe f8f0 	bl	8000240 <memchr>
 8002060:	2800      	cmp	r0, #0
 8002062:	d03f      	beq.n	80020e4 <_vfiprintf_r+0x22c>
 8002064:	4b29      	ldr	r3, [pc, #164]	; (800210c <_vfiprintf_r+0x254>)
 8002066:	bb1b      	cbnz	r3, 80020b0 <_vfiprintf_r+0x1f8>
 8002068:	9b03      	ldr	r3, [sp, #12]
 800206a:	3307      	adds	r3, #7
 800206c:	f023 0307 	bic.w	r3, r3, #7
 8002070:	3308      	adds	r3, #8
 8002072:	9303      	str	r3, [sp, #12]
 8002074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002076:	443b      	add	r3, r7
 8002078:	9309      	str	r3, [sp, #36]	; 0x24
 800207a:	e767      	b.n	8001f4c <_vfiprintf_r+0x94>
 800207c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002080:	460c      	mov	r4, r1
 8002082:	2001      	movs	r0, #1
 8002084:	e7a5      	b.n	8001fd2 <_vfiprintf_r+0x11a>
 8002086:	2300      	movs	r3, #0
 8002088:	3401      	adds	r4, #1
 800208a:	9305      	str	r3, [sp, #20]
 800208c:	4619      	mov	r1, r3
 800208e:	f04f 0c0a 	mov.w	ip, #10
 8002092:	4620      	mov	r0, r4
 8002094:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002098:	3a30      	subs	r2, #48	; 0x30
 800209a:	2a09      	cmp	r2, #9
 800209c:	d903      	bls.n	80020a6 <_vfiprintf_r+0x1ee>
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0c5      	beq.n	800202e <_vfiprintf_r+0x176>
 80020a2:	9105      	str	r1, [sp, #20]
 80020a4:	e7c3      	b.n	800202e <_vfiprintf_r+0x176>
 80020a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80020aa:	4604      	mov	r4, r0
 80020ac:	2301      	movs	r3, #1
 80020ae:	e7f0      	b.n	8002092 <_vfiprintf_r+0x1da>
 80020b0:	ab03      	add	r3, sp, #12
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	462a      	mov	r2, r5
 80020b6:	4b16      	ldr	r3, [pc, #88]	; (8002110 <_vfiprintf_r+0x258>)
 80020b8:	a904      	add	r1, sp, #16
 80020ba:	4630      	mov	r0, r6
 80020bc:	f3af 8000 	nop.w
 80020c0:	4607      	mov	r7, r0
 80020c2:	1c78      	adds	r0, r7, #1
 80020c4:	d1d6      	bne.n	8002074 <_vfiprintf_r+0x1bc>
 80020c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80020c8:	07d9      	lsls	r1, r3, #31
 80020ca:	d405      	bmi.n	80020d8 <_vfiprintf_r+0x220>
 80020cc:	89ab      	ldrh	r3, [r5, #12]
 80020ce:	059a      	lsls	r2, r3, #22
 80020d0:	d402      	bmi.n	80020d8 <_vfiprintf_r+0x220>
 80020d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80020d4:	f7ff fe6b 	bl	8001dae <__retarget_lock_release_recursive>
 80020d8:	89ab      	ldrh	r3, [r5, #12]
 80020da:	065b      	lsls	r3, r3, #25
 80020dc:	f53f af12 	bmi.w	8001f04 <_vfiprintf_r+0x4c>
 80020e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80020e2:	e711      	b.n	8001f08 <_vfiprintf_r+0x50>
 80020e4:	ab03      	add	r3, sp, #12
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	462a      	mov	r2, r5
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <_vfiprintf_r+0x258>)
 80020ec:	a904      	add	r1, sp, #16
 80020ee:	4630      	mov	r0, r6
 80020f0:	f000 f880 	bl	80021f4 <_printf_i>
 80020f4:	e7e4      	b.n	80020c0 <_vfiprintf_r+0x208>
 80020f6:	bf00      	nop
 80020f8:	08002af4 	.word	0x08002af4
 80020fc:	08002b14 	.word	0x08002b14
 8002100:	08002ad4 	.word	0x08002ad4
 8002104:	08002b34 	.word	0x08002b34
 8002108:	08002b3e 	.word	0x08002b3e
 800210c:	00000000 	.word	0x00000000
 8002110:	08001e93 	.word	0x08001e93
 8002114:	08002b3a 	.word	0x08002b3a

08002118 <_printf_common>:
 8002118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800211c:	4616      	mov	r6, r2
 800211e:	4699      	mov	r9, r3
 8002120:	688a      	ldr	r2, [r1, #8]
 8002122:	690b      	ldr	r3, [r1, #16]
 8002124:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002128:	4293      	cmp	r3, r2
 800212a:	bfb8      	it	lt
 800212c:	4613      	movlt	r3, r2
 800212e:	6033      	str	r3, [r6, #0]
 8002130:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002134:	4607      	mov	r7, r0
 8002136:	460c      	mov	r4, r1
 8002138:	b10a      	cbz	r2, 800213e <_printf_common+0x26>
 800213a:	3301      	adds	r3, #1
 800213c:	6033      	str	r3, [r6, #0]
 800213e:	6823      	ldr	r3, [r4, #0]
 8002140:	0699      	lsls	r1, r3, #26
 8002142:	bf42      	ittt	mi
 8002144:	6833      	ldrmi	r3, [r6, #0]
 8002146:	3302      	addmi	r3, #2
 8002148:	6033      	strmi	r3, [r6, #0]
 800214a:	6825      	ldr	r5, [r4, #0]
 800214c:	f015 0506 	ands.w	r5, r5, #6
 8002150:	d106      	bne.n	8002160 <_printf_common+0x48>
 8002152:	f104 0a19 	add.w	sl, r4, #25
 8002156:	68e3      	ldr	r3, [r4, #12]
 8002158:	6832      	ldr	r2, [r6, #0]
 800215a:	1a9b      	subs	r3, r3, r2
 800215c:	42ab      	cmp	r3, r5
 800215e:	dc26      	bgt.n	80021ae <_printf_common+0x96>
 8002160:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002164:	1e13      	subs	r3, r2, #0
 8002166:	6822      	ldr	r2, [r4, #0]
 8002168:	bf18      	it	ne
 800216a:	2301      	movne	r3, #1
 800216c:	0692      	lsls	r2, r2, #26
 800216e:	d42b      	bmi.n	80021c8 <_printf_common+0xb0>
 8002170:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002174:	4649      	mov	r1, r9
 8002176:	4638      	mov	r0, r7
 8002178:	47c0      	blx	r8
 800217a:	3001      	adds	r0, #1
 800217c:	d01e      	beq.n	80021bc <_printf_common+0xa4>
 800217e:	6823      	ldr	r3, [r4, #0]
 8002180:	68e5      	ldr	r5, [r4, #12]
 8002182:	6832      	ldr	r2, [r6, #0]
 8002184:	f003 0306 	and.w	r3, r3, #6
 8002188:	2b04      	cmp	r3, #4
 800218a:	bf08      	it	eq
 800218c:	1aad      	subeq	r5, r5, r2
 800218e:	68a3      	ldr	r3, [r4, #8]
 8002190:	6922      	ldr	r2, [r4, #16]
 8002192:	bf0c      	ite	eq
 8002194:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002198:	2500      	movne	r5, #0
 800219a:	4293      	cmp	r3, r2
 800219c:	bfc4      	itt	gt
 800219e:	1a9b      	subgt	r3, r3, r2
 80021a0:	18ed      	addgt	r5, r5, r3
 80021a2:	2600      	movs	r6, #0
 80021a4:	341a      	adds	r4, #26
 80021a6:	42b5      	cmp	r5, r6
 80021a8:	d11a      	bne.n	80021e0 <_printf_common+0xc8>
 80021aa:	2000      	movs	r0, #0
 80021ac:	e008      	b.n	80021c0 <_printf_common+0xa8>
 80021ae:	2301      	movs	r3, #1
 80021b0:	4652      	mov	r2, sl
 80021b2:	4649      	mov	r1, r9
 80021b4:	4638      	mov	r0, r7
 80021b6:	47c0      	blx	r8
 80021b8:	3001      	adds	r0, #1
 80021ba:	d103      	bne.n	80021c4 <_printf_common+0xac>
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021c4:	3501      	adds	r5, #1
 80021c6:	e7c6      	b.n	8002156 <_printf_common+0x3e>
 80021c8:	18e1      	adds	r1, r4, r3
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	2030      	movs	r0, #48	; 0x30
 80021ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80021d2:	4422      	add	r2, r4
 80021d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80021d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80021dc:	3302      	adds	r3, #2
 80021de:	e7c7      	b.n	8002170 <_printf_common+0x58>
 80021e0:	2301      	movs	r3, #1
 80021e2:	4622      	mov	r2, r4
 80021e4:	4649      	mov	r1, r9
 80021e6:	4638      	mov	r0, r7
 80021e8:	47c0      	blx	r8
 80021ea:	3001      	adds	r0, #1
 80021ec:	d0e6      	beq.n	80021bc <_printf_common+0xa4>
 80021ee:	3601      	adds	r6, #1
 80021f0:	e7d9      	b.n	80021a6 <_printf_common+0x8e>
	...

080021f4 <_printf_i>:
 80021f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80021f8:	460c      	mov	r4, r1
 80021fa:	4691      	mov	r9, r2
 80021fc:	7e27      	ldrb	r7, [r4, #24]
 80021fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002200:	2f78      	cmp	r7, #120	; 0x78
 8002202:	4680      	mov	r8, r0
 8002204:	469a      	mov	sl, r3
 8002206:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800220a:	d807      	bhi.n	800221c <_printf_i+0x28>
 800220c:	2f62      	cmp	r7, #98	; 0x62
 800220e:	d80a      	bhi.n	8002226 <_printf_i+0x32>
 8002210:	2f00      	cmp	r7, #0
 8002212:	f000 80d8 	beq.w	80023c6 <_printf_i+0x1d2>
 8002216:	2f58      	cmp	r7, #88	; 0x58
 8002218:	f000 80a3 	beq.w	8002362 <_printf_i+0x16e>
 800221c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002220:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002224:	e03a      	b.n	800229c <_printf_i+0xa8>
 8002226:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800222a:	2b15      	cmp	r3, #21
 800222c:	d8f6      	bhi.n	800221c <_printf_i+0x28>
 800222e:	a001      	add	r0, pc, #4	; (adr r0, 8002234 <_printf_i+0x40>)
 8002230:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002234:	0800228d 	.word	0x0800228d
 8002238:	080022a1 	.word	0x080022a1
 800223c:	0800221d 	.word	0x0800221d
 8002240:	0800221d 	.word	0x0800221d
 8002244:	0800221d 	.word	0x0800221d
 8002248:	0800221d 	.word	0x0800221d
 800224c:	080022a1 	.word	0x080022a1
 8002250:	0800221d 	.word	0x0800221d
 8002254:	0800221d 	.word	0x0800221d
 8002258:	0800221d 	.word	0x0800221d
 800225c:	0800221d 	.word	0x0800221d
 8002260:	080023ad 	.word	0x080023ad
 8002264:	080022d1 	.word	0x080022d1
 8002268:	0800238f 	.word	0x0800238f
 800226c:	0800221d 	.word	0x0800221d
 8002270:	0800221d 	.word	0x0800221d
 8002274:	080023cf 	.word	0x080023cf
 8002278:	0800221d 	.word	0x0800221d
 800227c:	080022d1 	.word	0x080022d1
 8002280:	0800221d 	.word	0x0800221d
 8002284:	0800221d 	.word	0x0800221d
 8002288:	08002397 	.word	0x08002397
 800228c:	680b      	ldr	r3, [r1, #0]
 800228e:	1d1a      	adds	r2, r3, #4
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	600a      	str	r2, [r1, #0]
 8002294:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002298:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800229c:	2301      	movs	r3, #1
 800229e:	e0a3      	b.n	80023e8 <_printf_i+0x1f4>
 80022a0:	6825      	ldr	r5, [r4, #0]
 80022a2:	6808      	ldr	r0, [r1, #0]
 80022a4:	062e      	lsls	r6, r5, #24
 80022a6:	f100 0304 	add.w	r3, r0, #4
 80022aa:	d50a      	bpl.n	80022c2 <_printf_i+0xce>
 80022ac:	6805      	ldr	r5, [r0, #0]
 80022ae:	600b      	str	r3, [r1, #0]
 80022b0:	2d00      	cmp	r5, #0
 80022b2:	da03      	bge.n	80022bc <_printf_i+0xc8>
 80022b4:	232d      	movs	r3, #45	; 0x2d
 80022b6:	426d      	negs	r5, r5
 80022b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022bc:	485e      	ldr	r0, [pc, #376]	; (8002438 <_printf_i+0x244>)
 80022be:	230a      	movs	r3, #10
 80022c0:	e019      	b.n	80022f6 <_printf_i+0x102>
 80022c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80022c6:	6805      	ldr	r5, [r0, #0]
 80022c8:	600b      	str	r3, [r1, #0]
 80022ca:	bf18      	it	ne
 80022cc:	b22d      	sxthne	r5, r5
 80022ce:	e7ef      	b.n	80022b0 <_printf_i+0xbc>
 80022d0:	680b      	ldr	r3, [r1, #0]
 80022d2:	6825      	ldr	r5, [r4, #0]
 80022d4:	1d18      	adds	r0, r3, #4
 80022d6:	6008      	str	r0, [r1, #0]
 80022d8:	0628      	lsls	r0, r5, #24
 80022da:	d501      	bpl.n	80022e0 <_printf_i+0xec>
 80022dc:	681d      	ldr	r5, [r3, #0]
 80022de:	e002      	b.n	80022e6 <_printf_i+0xf2>
 80022e0:	0669      	lsls	r1, r5, #25
 80022e2:	d5fb      	bpl.n	80022dc <_printf_i+0xe8>
 80022e4:	881d      	ldrh	r5, [r3, #0]
 80022e6:	4854      	ldr	r0, [pc, #336]	; (8002438 <_printf_i+0x244>)
 80022e8:	2f6f      	cmp	r7, #111	; 0x6f
 80022ea:	bf0c      	ite	eq
 80022ec:	2308      	moveq	r3, #8
 80022ee:	230a      	movne	r3, #10
 80022f0:	2100      	movs	r1, #0
 80022f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80022f6:	6866      	ldr	r6, [r4, #4]
 80022f8:	60a6      	str	r6, [r4, #8]
 80022fa:	2e00      	cmp	r6, #0
 80022fc:	bfa2      	ittt	ge
 80022fe:	6821      	ldrge	r1, [r4, #0]
 8002300:	f021 0104 	bicge.w	r1, r1, #4
 8002304:	6021      	strge	r1, [r4, #0]
 8002306:	b90d      	cbnz	r5, 800230c <_printf_i+0x118>
 8002308:	2e00      	cmp	r6, #0
 800230a:	d04d      	beq.n	80023a8 <_printf_i+0x1b4>
 800230c:	4616      	mov	r6, r2
 800230e:	fbb5 f1f3 	udiv	r1, r5, r3
 8002312:	fb03 5711 	mls	r7, r3, r1, r5
 8002316:	5dc7      	ldrb	r7, [r0, r7]
 8002318:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800231c:	462f      	mov	r7, r5
 800231e:	42bb      	cmp	r3, r7
 8002320:	460d      	mov	r5, r1
 8002322:	d9f4      	bls.n	800230e <_printf_i+0x11a>
 8002324:	2b08      	cmp	r3, #8
 8002326:	d10b      	bne.n	8002340 <_printf_i+0x14c>
 8002328:	6823      	ldr	r3, [r4, #0]
 800232a:	07df      	lsls	r7, r3, #31
 800232c:	d508      	bpl.n	8002340 <_printf_i+0x14c>
 800232e:	6923      	ldr	r3, [r4, #16]
 8002330:	6861      	ldr	r1, [r4, #4]
 8002332:	4299      	cmp	r1, r3
 8002334:	bfde      	ittt	le
 8002336:	2330      	movle	r3, #48	; 0x30
 8002338:	f806 3c01 	strble.w	r3, [r6, #-1]
 800233c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002340:	1b92      	subs	r2, r2, r6
 8002342:	6122      	str	r2, [r4, #16]
 8002344:	f8cd a000 	str.w	sl, [sp]
 8002348:	464b      	mov	r3, r9
 800234a:	aa03      	add	r2, sp, #12
 800234c:	4621      	mov	r1, r4
 800234e:	4640      	mov	r0, r8
 8002350:	f7ff fee2 	bl	8002118 <_printf_common>
 8002354:	3001      	adds	r0, #1
 8002356:	d14c      	bne.n	80023f2 <_printf_i+0x1fe>
 8002358:	f04f 30ff 	mov.w	r0, #4294967295
 800235c:	b004      	add	sp, #16
 800235e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002362:	4835      	ldr	r0, [pc, #212]	; (8002438 <_printf_i+0x244>)
 8002364:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002368:	6823      	ldr	r3, [r4, #0]
 800236a:	680e      	ldr	r6, [r1, #0]
 800236c:	061f      	lsls	r7, r3, #24
 800236e:	f856 5b04 	ldr.w	r5, [r6], #4
 8002372:	600e      	str	r6, [r1, #0]
 8002374:	d514      	bpl.n	80023a0 <_printf_i+0x1ac>
 8002376:	07d9      	lsls	r1, r3, #31
 8002378:	bf44      	itt	mi
 800237a:	f043 0320 	orrmi.w	r3, r3, #32
 800237e:	6023      	strmi	r3, [r4, #0]
 8002380:	b91d      	cbnz	r5, 800238a <_printf_i+0x196>
 8002382:	6823      	ldr	r3, [r4, #0]
 8002384:	f023 0320 	bic.w	r3, r3, #32
 8002388:	6023      	str	r3, [r4, #0]
 800238a:	2310      	movs	r3, #16
 800238c:	e7b0      	b.n	80022f0 <_printf_i+0xfc>
 800238e:	6823      	ldr	r3, [r4, #0]
 8002390:	f043 0320 	orr.w	r3, r3, #32
 8002394:	6023      	str	r3, [r4, #0]
 8002396:	2378      	movs	r3, #120	; 0x78
 8002398:	4828      	ldr	r0, [pc, #160]	; (800243c <_printf_i+0x248>)
 800239a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800239e:	e7e3      	b.n	8002368 <_printf_i+0x174>
 80023a0:	065e      	lsls	r6, r3, #25
 80023a2:	bf48      	it	mi
 80023a4:	b2ad      	uxthmi	r5, r5
 80023a6:	e7e6      	b.n	8002376 <_printf_i+0x182>
 80023a8:	4616      	mov	r6, r2
 80023aa:	e7bb      	b.n	8002324 <_printf_i+0x130>
 80023ac:	680b      	ldr	r3, [r1, #0]
 80023ae:	6826      	ldr	r6, [r4, #0]
 80023b0:	6960      	ldr	r0, [r4, #20]
 80023b2:	1d1d      	adds	r5, r3, #4
 80023b4:	600d      	str	r5, [r1, #0]
 80023b6:	0635      	lsls	r5, r6, #24
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	d501      	bpl.n	80023c0 <_printf_i+0x1cc>
 80023bc:	6018      	str	r0, [r3, #0]
 80023be:	e002      	b.n	80023c6 <_printf_i+0x1d2>
 80023c0:	0671      	lsls	r1, r6, #25
 80023c2:	d5fb      	bpl.n	80023bc <_printf_i+0x1c8>
 80023c4:	8018      	strh	r0, [r3, #0]
 80023c6:	2300      	movs	r3, #0
 80023c8:	6123      	str	r3, [r4, #16]
 80023ca:	4616      	mov	r6, r2
 80023cc:	e7ba      	b.n	8002344 <_printf_i+0x150>
 80023ce:	680b      	ldr	r3, [r1, #0]
 80023d0:	1d1a      	adds	r2, r3, #4
 80023d2:	600a      	str	r2, [r1, #0]
 80023d4:	681e      	ldr	r6, [r3, #0]
 80023d6:	6862      	ldr	r2, [r4, #4]
 80023d8:	2100      	movs	r1, #0
 80023da:	4630      	mov	r0, r6
 80023dc:	f7fd ff30 	bl	8000240 <memchr>
 80023e0:	b108      	cbz	r0, 80023e6 <_printf_i+0x1f2>
 80023e2:	1b80      	subs	r0, r0, r6
 80023e4:	6060      	str	r0, [r4, #4]
 80023e6:	6863      	ldr	r3, [r4, #4]
 80023e8:	6123      	str	r3, [r4, #16]
 80023ea:	2300      	movs	r3, #0
 80023ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023f0:	e7a8      	b.n	8002344 <_printf_i+0x150>
 80023f2:	6923      	ldr	r3, [r4, #16]
 80023f4:	4632      	mov	r2, r6
 80023f6:	4649      	mov	r1, r9
 80023f8:	4640      	mov	r0, r8
 80023fa:	47d0      	blx	sl
 80023fc:	3001      	adds	r0, #1
 80023fe:	d0ab      	beq.n	8002358 <_printf_i+0x164>
 8002400:	6823      	ldr	r3, [r4, #0]
 8002402:	079b      	lsls	r3, r3, #30
 8002404:	d413      	bmi.n	800242e <_printf_i+0x23a>
 8002406:	68e0      	ldr	r0, [r4, #12]
 8002408:	9b03      	ldr	r3, [sp, #12]
 800240a:	4298      	cmp	r0, r3
 800240c:	bfb8      	it	lt
 800240e:	4618      	movlt	r0, r3
 8002410:	e7a4      	b.n	800235c <_printf_i+0x168>
 8002412:	2301      	movs	r3, #1
 8002414:	4632      	mov	r2, r6
 8002416:	4649      	mov	r1, r9
 8002418:	4640      	mov	r0, r8
 800241a:	47d0      	blx	sl
 800241c:	3001      	adds	r0, #1
 800241e:	d09b      	beq.n	8002358 <_printf_i+0x164>
 8002420:	3501      	adds	r5, #1
 8002422:	68e3      	ldr	r3, [r4, #12]
 8002424:	9903      	ldr	r1, [sp, #12]
 8002426:	1a5b      	subs	r3, r3, r1
 8002428:	42ab      	cmp	r3, r5
 800242a:	dcf2      	bgt.n	8002412 <_printf_i+0x21e>
 800242c:	e7eb      	b.n	8002406 <_printf_i+0x212>
 800242e:	2500      	movs	r5, #0
 8002430:	f104 0619 	add.w	r6, r4, #25
 8002434:	e7f5      	b.n	8002422 <_printf_i+0x22e>
 8002436:	bf00      	nop
 8002438:	08002b45 	.word	0x08002b45
 800243c:	08002b56 	.word	0x08002b56

08002440 <_sbrk_r>:
 8002440:	b538      	push	{r3, r4, r5, lr}
 8002442:	4d06      	ldr	r5, [pc, #24]	; (800245c <_sbrk_r+0x1c>)
 8002444:	2300      	movs	r3, #0
 8002446:	4604      	mov	r4, r0
 8002448:	4608      	mov	r0, r1
 800244a:	602b      	str	r3, [r5, #0]
 800244c:	f000 fb16 	bl	8002a7c <_sbrk>
 8002450:	1c43      	adds	r3, r0, #1
 8002452:	d102      	bne.n	800245a <_sbrk_r+0x1a>
 8002454:	682b      	ldr	r3, [r5, #0]
 8002456:	b103      	cbz	r3, 800245a <_sbrk_r+0x1a>
 8002458:	6023      	str	r3, [r4, #0]
 800245a:	bd38      	pop	{r3, r4, r5, pc}
 800245c:	200001ac 	.word	0x200001ac

08002460 <__sread>:
 8002460:	b510      	push	{r4, lr}
 8002462:	460c      	mov	r4, r1
 8002464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002468:	f000 fab4 	bl	80029d4 <_read_r>
 800246c:	2800      	cmp	r0, #0
 800246e:	bfab      	itete	ge
 8002470:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002472:	89a3      	ldrhlt	r3, [r4, #12]
 8002474:	181b      	addge	r3, r3, r0
 8002476:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800247a:	bfac      	ite	ge
 800247c:	6563      	strge	r3, [r4, #84]	; 0x54
 800247e:	81a3      	strhlt	r3, [r4, #12]
 8002480:	bd10      	pop	{r4, pc}

08002482 <__swrite>:
 8002482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002486:	461f      	mov	r7, r3
 8002488:	898b      	ldrh	r3, [r1, #12]
 800248a:	05db      	lsls	r3, r3, #23
 800248c:	4605      	mov	r5, r0
 800248e:	460c      	mov	r4, r1
 8002490:	4616      	mov	r6, r2
 8002492:	d505      	bpl.n	80024a0 <__swrite+0x1e>
 8002494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002498:	2302      	movs	r3, #2
 800249a:	2200      	movs	r2, #0
 800249c:	f000 f9c8 	bl	8002830 <_lseek_r>
 80024a0:	89a3      	ldrh	r3, [r4, #12]
 80024a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024aa:	81a3      	strh	r3, [r4, #12]
 80024ac:	4632      	mov	r2, r6
 80024ae:	463b      	mov	r3, r7
 80024b0:	4628      	mov	r0, r5
 80024b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024b6:	f000 b869 	b.w	800258c <_write_r>

080024ba <__sseek>:
 80024ba:	b510      	push	{r4, lr}
 80024bc:	460c      	mov	r4, r1
 80024be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024c2:	f000 f9b5 	bl	8002830 <_lseek_r>
 80024c6:	1c43      	adds	r3, r0, #1
 80024c8:	89a3      	ldrh	r3, [r4, #12]
 80024ca:	bf15      	itete	ne
 80024cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80024ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80024d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80024d6:	81a3      	strheq	r3, [r4, #12]
 80024d8:	bf18      	it	ne
 80024da:	81a3      	strhne	r3, [r4, #12]
 80024dc:	bd10      	pop	{r4, pc}

080024de <__sclose>:
 80024de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024e2:	f000 b8d3 	b.w	800268c <_close_r>
	...

080024e8 <__swbuf_r>:
 80024e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ea:	460e      	mov	r6, r1
 80024ec:	4614      	mov	r4, r2
 80024ee:	4605      	mov	r5, r0
 80024f0:	b118      	cbz	r0, 80024fa <__swbuf_r+0x12>
 80024f2:	6983      	ldr	r3, [r0, #24]
 80024f4:	b90b      	cbnz	r3, 80024fa <__swbuf_r+0x12>
 80024f6:	f7ff fbbb 	bl	8001c70 <__sinit>
 80024fa:	4b21      	ldr	r3, [pc, #132]	; (8002580 <__swbuf_r+0x98>)
 80024fc:	429c      	cmp	r4, r3
 80024fe:	d12b      	bne.n	8002558 <__swbuf_r+0x70>
 8002500:	686c      	ldr	r4, [r5, #4]
 8002502:	69a3      	ldr	r3, [r4, #24]
 8002504:	60a3      	str	r3, [r4, #8]
 8002506:	89a3      	ldrh	r3, [r4, #12]
 8002508:	071a      	lsls	r2, r3, #28
 800250a:	d52f      	bpl.n	800256c <__swbuf_r+0x84>
 800250c:	6923      	ldr	r3, [r4, #16]
 800250e:	b36b      	cbz	r3, 800256c <__swbuf_r+0x84>
 8002510:	6923      	ldr	r3, [r4, #16]
 8002512:	6820      	ldr	r0, [r4, #0]
 8002514:	1ac0      	subs	r0, r0, r3
 8002516:	6963      	ldr	r3, [r4, #20]
 8002518:	b2f6      	uxtb	r6, r6
 800251a:	4283      	cmp	r3, r0
 800251c:	4637      	mov	r7, r6
 800251e:	dc04      	bgt.n	800252a <__swbuf_r+0x42>
 8002520:	4621      	mov	r1, r4
 8002522:	4628      	mov	r0, r5
 8002524:	f000 f948 	bl	80027b8 <_fflush_r>
 8002528:	bb30      	cbnz	r0, 8002578 <__swbuf_r+0x90>
 800252a:	68a3      	ldr	r3, [r4, #8]
 800252c:	3b01      	subs	r3, #1
 800252e:	60a3      	str	r3, [r4, #8]
 8002530:	6823      	ldr	r3, [r4, #0]
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	6022      	str	r2, [r4, #0]
 8002536:	701e      	strb	r6, [r3, #0]
 8002538:	6963      	ldr	r3, [r4, #20]
 800253a:	3001      	adds	r0, #1
 800253c:	4283      	cmp	r3, r0
 800253e:	d004      	beq.n	800254a <__swbuf_r+0x62>
 8002540:	89a3      	ldrh	r3, [r4, #12]
 8002542:	07db      	lsls	r3, r3, #31
 8002544:	d506      	bpl.n	8002554 <__swbuf_r+0x6c>
 8002546:	2e0a      	cmp	r6, #10
 8002548:	d104      	bne.n	8002554 <__swbuf_r+0x6c>
 800254a:	4621      	mov	r1, r4
 800254c:	4628      	mov	r0, r5
 800254e:	f000 f933 	bl	80027b8 <_fflush_r>
 8002552:	b988      	cbnz	r0, 8002578 <__swbuf_r+0x90>
 8002554:	4638      	mov	r0, r7
 8002556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002558:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <__swbuf_r+0x9c>)
 800255a:	429c      	cmp	r4, r3
 800255c:	d101      	bne.n	8002562 <__swbuf_r+0x7a>
 800255e:	68ac      	ldr	r4, [r5, #8]
 8002560:	e7cf      	b.n	8002502 <__swbuf_r+0x1a>
 8002562:	4b09      	ldr	r3, [pc, #36]	; (8002588 <__swbuf_r+0xa0>)
 8002564:	429c      	cmp	r4, r3
 8002566:	bf08      	it	eq
 8002568:	68ec      	ldreq	r4, [r5, #12]
 800256a:	e7ca      	b.n	8002502 <__swbuf_r+0x1a>
 800256c:	4621      	mov	r1, r4
 800256e:	4628      	mov	r0, r5
 8002570:	f000 f81e 	bl	80025b0 <__swsetup_r>
 8002574:	2800      	cmp	r0, #0
 8002576:	d0cb      	beq.n	8002510 <__swbuf_r+0x28>
 8002578:	f04f 37ff 	mov.w	r7, #4294967295
 800257c:	e7ea      	b.n	8002554 <__swbuf_r+0x6c>
 800257e:	bf00      	nop
 8002580:	08002af4 	.word	0x08002af4
 8002584:	08002b14 	.word	0x08002b14
 8002588:	08002ad4 	.word	0x08002ad4

0800258c <_write_r>:
 800258c:	b538      	push	{r3, r4, r5, lr}
 800258e:	4d07      	ldr	r5, [pc, #28]	; (80025ac <_write_r+0x20>)
 8002590:	4604      	mov	r4, r0
 8002592:	4608      	mov	r0, r1
 8002594:	4611      	mov	r1, r2
 8002596:	2200      	movs	r2, #0
 8002598:	602a      	str	r2, [r5, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	f7fe f954 	bl	8000848 <_write>
 80025a0:	1c43      	adds	r3, r0, #1
 80025a2:	d102      	bne.n	80025aa <_write_r+0x1e>
 80025a4:	682b      	ldr	r3, [r5, #0]
 80025a6:	b103      	cbz	r3, 80025aa <_write_r+0x1e>
 80025a8:	6023      	str	r3, [r4, #0]
 80025aa:	bd38      	pop	{r3, r4, r5, pc}
 80025ac:	200001ac 	.word	0x200001ac

080025b0 <__swsetup_r>:
 80025b0:	4b32      	ldr	r3, [pc, #200]	; (800267c <__swsetup_r+0xcc>)
 80025b2:	b570      	push	{r4, r5, r6, lr}
 80025b4:	681d      	ldr	r5, [r3, #0]
 80025b6:	4606      	mov	r6, r0
 80025b8:	460c      	mov	r4, r1
 80025ba:	b125      	cbz	r5, 80025c6 <__swsetup_r+0x16>
 80025bc:	69ab      	ldr	r3, [r5, #24]
 80025be:	b913      	cbnz	r3, 80025c6 <__swsetup_r+0x16>
 80025c0:	4628      	mov	r0, r5
 80025c2:	f7ff fb55 	bl	8001c70 <__sinit>
 80025c6:	4b2e      	ldr	r3, [pc, #184]	; (8002680 <__swsetup_r+0xd0>)
 80025c8:	429c      	cmp	r4, r3
 80025ca:	d10f      	bne.n	80025ec <__swsetup_r+0x3c>
 80025cc:	686c      	ldr	r4, [r5, #4]
 80025ce:	89a3      	ldrh	r3, [r4, #12]
 80025d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80025d4:	0719      	lsls	r1, r3, #28
 80025d6:	d42c      	bmi.n	8002632 <__swsetup_r+0x82>
 80025d8:	06dd      	lsls	r5, r3, #27
 80025da:	d411      	bmi.n	8002600 <__swsetup_r+0x50>
 80025dc:	2309      	movs	r3, #9
 80025de:	6033      	str	r3, [r6, #0]
 80025e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80025e4:	81a3      	strh	r3, [r4, #12]
 80025e6:	f04f 30ff 	mov.w	r0, #4294967295
 80025ea:	e03e      	b.n	800266a <__swsetup_r+0xba>
 80025ec:	4b25      	ldr	r3, [pc, #148]	; (8002684 <__swsetup_r+0xd4>)
 80025ee:	429c      	cmp	r4, r3
 80025f0:	d101      	bne.n	80025f6 <__swsetup_r+0x46>
 80025f2:	68ac      	ldr	r4, [r5, #8]
 80025f4:	e7eb      	b.n	80025ce <__swsetup_r+0x1e>
 80025f6:	4b24      	ldr	r3, [pc, #144]	; (8002688 <__swsetup_r+0xd8>)
 80025f8:	429c      	cmp	r4, r3
 80025fa:	bf08      	it	eq
 80025fc:	68ec      	ldreq	r4, [r5, #12]
 80025fe:	e7e6      	b.n	80025ce <__swsetup_r+0x1e>
 8002600:	0758      	lsls	r0, r3, #29
 8002602:	d512      	bpl.n	800262a <__swsetup_r+0x7a>
 8002604:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002606:	b141      	cbz	r1, 800261a <__swsetup_r+0x6a>
 8002608:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800260c:	4299      	cmp	r1, r3
 800260e:	d002      	beq.n	8002616 <__swsetup_r+0x66>
 8002610:	4630      	mov	r0, r6
 8002612:	f000 f98f 	bl	8002934 <_free_r>
 8002616:	2300      	movs	r3, #0
 8002618:	6363      	str	r3, [r4, #52]	; 0x34
 800261a:	89a3      	ldrh	r3, [r4, #12]
 800261c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002620:	81a3      	strh	r3, [r4, #12]
 8002622:	2300      	movs	r3, #0
 8002624:	6063      	str	r3, [r4, #4]
 8002626:	6923      	ldr	r3, [r4, #16]
 8002628:	6023      	str	r3, [r4, #0]
 800262a:	89a3      	ldrh	r3, [r4, #12]
 800262c:	f043 0308 	orr.w	r3, r3, #8
 8002630:	81a3      	strh	r3, [r4, #12]
 8002632:	6923      	ldr	r3, [r4, #16]
 8002634:	b94b      	cbnz	r3, 800264a <__swsetup_r+0x9a>
 8002636:	89a3      	ldrh	r3, [r4, #12]
 8002638:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800263c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002640:	d003      	beq.n	800264a <__swsetup_r+0x9a>
 8002642:	4621      	mov	r1, r4
 8002644:	4630      	mov	r0, r6
 8002646:	f000 f929 	bl	800289c <__smakebuf_r>
 800264a:	89a0      	ldrh	r0, [r4, #12]
 800264c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002650:	f010 0301 	ands.w	r3, r0, #1
 8002654:	d00a      	beq.n	800266c <__swsetup_r+0xbc>
 8002656:	2300      	movs	r3, #0
 8002658:	60a3      	str	r3, [r4, #8]
 800265a:	6963      	ldr	r3, [r4, #20]
 800265c:	425b      	negs	r3, r3
 800265e:	61a3      	str	r3, [r4, #24]
 8002660:	6923      	ldr	r3, [r4, #16]
 8002662:	b943      	cbnz	r3, 8002676 <__swsetup_r+0xc6>
 8002664:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002668:	d1ba      	bne.n	80025e0 <__swsetup_r+0x30>
 800266a:	bd70      	pop	{r4, r5, r6, pc}
 800266c:	0781      	lsls	r1, r0, #30
 800266e:	bf58      	it	pl
 8002670:	6963      	ldrpl	r3, [r4, #20]
 8002672:	60a3      	str	r3, [r4, #8]
 8002674:	e7f4      	b.n	8002660 <__swsetup_r+0xb0>
 8002676:	2000      	movs	r0, #0
 8002678:	e7f7      	b.n	800266a <__swsetup_r+0xba>
 800267a:	bf00      	nop
 800267c:	2000000c 	.word	0x2000000c
 8002680:	08002af4 	.word	0x08002af4
 8002684:	08002b14 	.word	0x08002b14
 8002688:	08002ad4 	.word	0x08002ad4

0800268c <_close_r>:
 800268c:	b538      	push	{r3, r4, r5, lr}
 800268e:	4d06      	ldr	r5, [pc, #24]	; (80026a8 <_close_r+0x1c>)
 8002690:	2300      	movs	r3, #0
 8002692:	4604      	mov	r4, r0
 8002694:	4608      	mov	r0, r1
 8002696:	602b      	str	r3, [r5, #0]
 8002698:	f000 f9d0 	bl	8002a3c <_close>
 800269c:	1c43      	adds	r3, r0, #1
 800269e:	d102      	bne.n	80026a6 <_close_r+0x1a>
 80026a0:	682b      	ldr	r3, [r5, #0]
 80026a2:	b103      	cbz	r3, 80026a6 <_close_r+0x1a>
 80026a4:	6023      	str	r3, [r4, #0]
 80026a6:	bd38      	pop	{r3, r4, r5, pc}
 80026a8:	200001ac 	.word	0x200001ac

080026ac <__sflush_r>:
 80026ac:	898a      	ldrh	r2, [r1, #12]
 80026ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026b2:	4605      	mov	r5, r0
 80026b4:	0710      	lsls	r0, r2, #28
 80026b6:	460c      	mov	r4, r1
 80026b8:	d458      	bmi.n	800276c <__sflush_r+0xc0>
 80026ba:	684b      	ldr	r3, [r1, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	dc05      	bgt.n	80026cc <__sflush_r+0x20>
 80026c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	dc02      	bgt.n	80026cc <__sflush_r+0x20>
 80026c6:	2000      	movs	r0, #0
 80026c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80026ce:	2e00      	cmp	r6, #0
 80026d0:	d0f9      	beq.n	80026c6 <__sflush_r+0x1a>
 80026d2:	2300      	movs	r3, #0
 80026d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80026d8:	682f      	ldr	r7, [r5, #0]
 80026da:	602b      	str	r3, [r5, #0]
 80026dc:	d032      	beq.n	8002744 <__sflush_r+0x98>
 80026de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80026e0:	89a3      	ldrh	r3, [r4, #12]
 80026e2:	075a      	lsls	r2, r3, #29
 80026e4:	d505      	bpl.n	80026f2 <__sflush_r+0x46>
 80026e6:	6863      	ldr	r3, [r4, #4]
 80026e8:	1ac0      	subs	r0, r0, r3
 80026ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80026ec:	b10b      	cbz	r3, 80026f2 <__sflush_r+0x46>
 80026ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026f0:	1ac0      	subs	r0, r0, r3
 80026f2:	2300      	movs	r3, #0
 80026f4:	4602      	mov	r2, r0
 80026f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80026f8:	6a21      	ldr	r1, [r4, #32]
 80026fa:	4628      	mov	r0, r5
 80026fc:	47b0      	blx	r6
 80026fe:	1c43      	adds	r3, r0, #1
 8002700:	89a3      	ldrh	r3, [r4, #12]
 8002702:	d106      	bne.n	8002712 <__sflush_r+0x66>
 8002704:	6829      	ldr	r1, [r5, #0]
 8002706:	291d      	cmp	r1, #29
 8002708:	d82c      	bhi.n	8002764 <__sflush_r+0xb8>
 800270a:	4a2a      	ldr	r2, [pc, #168]	; (80027b4 <__sflush_r+0x108>)
 800270c:	40ca      	lsrs	r2, r1
 800270e:	07d6      	lsls	r6, r2, #31
 8002710:	d528      	bpl.n	8002764 <__sflush_r+0xb8>
 8002712:	2200      	movs	r2, #0
 8002714:	6062      	str	r2, [r4, #4]
 8002716:	04d9      	lsls	r1, r3, #19
 8002718:	6922      	ldr	r2, [r4, #16]
 800271a:	6022      	str	r2, [r4, #0]
 800271c:	d504      	bpl.n	8002728 <__sflush_r+0x7c>
 800271e:	1c42      	adds	r2, r0, #1
 8002720:	d101      	bne.n	8002726 <__sflush_r+0x7a>
 8002722:	682b      	ldr	r3, [r5, #0]
 8002724:	b903      	cbnz	r3, 8002728 <__sflush_r+0x7c>
 8002726:	6560      	str	r0, [r4, #84]	; 0x54
 8002728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800272a:	602f      	str	r7, [r5, #0]
 800272c:	2900      	cmp	r1, #0
 800272e:	d0ca      	beq.n	80026c6 <__sflush_r+0x1a>
 8002730:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002734:	4299      	cmp	r1, r3
 8002736:	d002      	beq.n	800273e <__sflush_r+0x92>
 8002738:	4628      	mov	r0, r5
 800273a:	f000 f8fb 	bl	8002934 <_free_r>
 800273e:	2000      	movs	r0, #0
 8002740:	6360      	str	r0, [r4, #52]	; 0x34
 8002742:	e7c1      	b.n	80026c8 <__sflush_r+0x1c>
 8002744:	6a21      	ldr	r1, [r4, #32]
 8002746:	2301      	movs	r3, #1
 8002748:	4628      	mov	r0, r5
 800274a:	47b0      	blx	r6
 800274c:	1c41      	adds	r1, r0, #1
 800274e:	d1c7      	bne.n	80026e0 <__sflush_r+0x34>
 8002750:	682b      	ldr	r3, [r5, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0c4      	beq.n	80026e0 <__sflush_r+0x34>
 8002756:	2b1d      	cmp	r3, #29
 8002758:	d001      	beq.n	800275e <__sflush_r+0xb2>
 800275a:	2b16      	cmp	r3, #22
 800275c:	d101      	bne.n	8002762 <__sflush_r+0xb6>
 800275e:	602f      	str	r7, [r5, #0]
 8002760:	e7b1      	b.n	80026c6 <__sflush_r+0x1a>
 8002762:	89a3      	ldrh	r3, [r4, #12]
 8002764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002768:	81a3      	strh	r3, [r4, #12]
 800276a:	e7ad      	b.n	80026c8 <__sflush_r+0x1c>
 800276c:	690f      	ldr	r7, [r1, #16]
 800276e:	2f00      	cmp	r7, #0
 8002770:	d0a9      	beq.n	80026c6 <__sflush_r+0x1a>
 8002772:	0793      	lsls	r3, r2, #30
 8002774:	680e      	ldr	r6, [r1, #0]
 8002776:	bf08      	it	eq
 8002778:	694b      	ldreq	r3, [r1, #20]
 800277a:	600f      	str	r7, [r1, #0]
 800277c:	bf18      	it	ne
 800277e:	2300      	movne	r3, #0
 8002780:	eba6 0807 	sub.w	r8, r6, r7
 8002784:	608b      	str	r3, [r1, #8]
 8002786:	f1b8 0f00 	cmp.w	r8, #0
 800278a:	dd9c      	ble.n	80026c6 <__sflush_r+0x1a>
 800278c:	6a21      	ldr	r1, [r4, #32]
 800278e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002790:	4643      	mov	r3, r8
 8002792:	463a      	mov	r2, r7
 8002794:	4628      	mov	r0, r5
 8002796:	47b0      	blx	r6
 8002798:	2800      	cmp	r0, #0
 800279a:	dc06      	bgt.n	80027aa <__sflush_r+0xfe>
 800279c:	89a3      	ldrh	r3, [r4, #12]
 800279e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027a2:	81a3      	strh	r3, [r4, #12]
 80027a4:	f04f 30ff 	mov.w	r0, #4294967295
 80027a8:	e78e      	b.n	80026c8 <__sflush_r+0x1c>
 80027aa:	4407      	add	r7, r0
 80027ac:	eba8 0800 	sub.w	r8, r8, r0
 80027b0:	e7e9      	b.n	8002786 <__sflush_r+0xda>
 80027b2:	bf00      	nop
 80027b4:	20400001 	.word	0x20400001

080027b8 <_fflush_r>:
 80027b8:	b538      	push	{r3, r4, r5, lr}
 80027ba:	690b      	ldr	r3, [r1, #16]
 80027bc:	4605      	mov	r5, r0
 80027be:	460c      	mov	r4, r1
 80027c0:	b913      	cbnz	r3, 80027c8 <_fflush_r+0x10>
 80027c2:	2500      	movs	r5, #0
 80027c4:	4628      	mov	r0, r5
 80027c6:	bd38      	pop	{r3, r4, r5, pc}
 80027c8:	b118      	cbz	r0, 80027d2 <_fflush_r+0x1a>
 80027ca:	6983      	ldr	r3, [r0, #24]
 80027cc:	b90b      	cbnz	r3, 80027d2 <_fflush_r+0x1a>
 80027ce:	f7ff fa4f 	bl	8001c70 <__sinit>
 80027d2:	4b14      	ldr	r3, [pc, #80]	; (8002824 <_fflush_r+0x6c>)
 80027d4:	429c      	cmp	r4, r3
 80027d6:	d11b      	bne.n	8002810 <_fflush_r+0x58>
 80027d8:	686c      	ldr	r4, [r5, #4]
 80027da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0ef      	beq.n	80027c2 <_fflush_r+0xa>
 80027e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80027e4:	07d0      	lsls	r0, r2, #31
 80027e6:	d404      	bmi.n	80027f2 <_fflush_r+0x3a>
 80027e8:	0599      	lsls	r1, r3, #22
 80027ea:	d402      	bmi.n	80027f2 <_fflush_r+0x3a>
 80027ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027ee:	f7ff fadd 	bl	8001dac <__retarget_lock_acquire_recursive>
 80027f2:	4628      	mov	r0, r5
 80027f4:	4621      	mov	r1, r4
 80027f6:	f7ff ff59 	bl	80026ac <__sflush_r>
 80027fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027fc:	07da      	lsls	r2, r3, #31
 80027fe:	4605      	mov	r5, r0
 8002800:	d4e0      	bmi.n	80027c4 <_fflush_r+0xc>
 8002802:	89a3      	ldrh	r3, [r4, #12]
 8002804:	059b      	lsls	r3, r3, #22
 8002806:	d4dd      	bmi.n	80027c4 <_fflush_r+0xc>
 8002808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800280a:	f7ff fad0 	bl	8001dae <__retarget_lock_release_recursive>
 800280e:	e7d9      	b.n	80027c4 <_fflush_r+0xc>
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <_fflush_r+0x70>)
 8002812:	429c      	cmp	r4, r3
 8002814:	d101      	bne.n	800281a <_fflush_r+0x62>
 8002816:	68ac      	ldr	r4, [r5, #8]
 8002818:	e7df      	b.n	80027da <_fflush_r+0x22>
 800281a:	4b04      	ldr	r3, [pc, #16]	; (800282c <_fflush_r+0x74>)
 800281c:	429c      	cmp	r4, r3
 800281e:	bf08      	it	eq
 8002820:	68ec      	ldreq	r4, [r5, #12]
 8002822:	e7da      	b.n	80027da <_fflush_r+0x22>
 8002824:	08002af4 	.word	0x08002af4
 8002828:	08002b14 	.word	0x08002b14
 800282c:	08002ad4 	.word	0x08002ad4

08002830 <_lseek_r>:
 8002830:	b538      	push	{r3, r4, r5, lr}
 8002832:	4d07      	ldr	r5, [pc, #28]	; (8002850 <_lseek_r+0x20>)
 8002834:	4604      	mov	r4, r0
 8002836:	4608      	mov	r0, r1
 8002838:	4611      	mov	r1, r2
 800283a:	2200      	movs	r2, #0
 800283c:	602a      	str	r2, [r5, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	f000 f914 	bl	8002a6c <_lseek>
 8002844:	1c43      	adds	r3, r0, #1
 8002846:	d102      	bne.n	800284e <_lseek_r+0x1e>
 8002848:	682b      	ldr	r3, [r5, #0]
 800284a:	b103      	cbz	r3, 800284e <_lseek_r+0x1e>
 800284c:	6023      	str	r3, [r4, #0]
 800284e:	bd38      	pop	{r3, r4, r5, pc}
 8002850:	200001ac 	.word	0x200001ac

08002854 <__swhatbuf_r>:
 8002854:	b570      	push	{r4, r5, r6, lr}
 8002856:	460e      	mov	r6, r1
 8002858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800285c:	2900      	cmp	r1, #0
 800285e:	b096      	sub	sp, #88	; 0x58
 8002860:	4614      	mov	r4, r2
 8002862:	461d      	mov	r5, r3
 8002864:	da07      	bge.n	8002876 <__swhatbuf_r+0x22>
 8002866:	2300      	movs	r3, #0
 8002868:	602b      	str	r3, [r5, #0]
 800286a:	89b3      	ldrh	r3, [r6, #12]
 800286c:	061a      	lsls	r2, r3, #24
 800286e:	d410      	bmi.n	8002892 <__swhatbuf_r+0x3e>
 8002870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002874:	e00e      	b.n	8002894 <__swhatbuf_r+0x40>
 8002876:	466a      	mov	r2, sp
 8002878:	f000 f8be 	bl	80029f8 <_fstat_r>
 800287c:	2800      	cmp	r0, #0
 800287e:	dbf2      	blt.n	8002866 <__swhatbuf_r+0x12>
 8002880:	9a01      	ldr	r2, [sp, #4]
 8002882:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002886:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800288a:	425a      	negs	r2, r3
 800288c:	415a      	adcs	r2, r3
 800288e:	602a      	str	r2, [r5, #0]
 8002890:	e7ee      	b.n	8002870 <__swhatbuf_r+0x1c>
 8002892:	2340      	movs	r3, #64	; 0x40
 8002894:	2000      	movs	r0, #0
 8002896:	6023      	str	r3, [r4, #0]
 8002898:	b016      	add	sp, #88	; 0x58
 800289a:	bd70      	pop	{r4, r5, r6, pc}

0800289c <__smakebuf_r>:
 800289c:	898b      	ldrh	r3, [r1, #12]
 800289e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80028a0:	079d      	lsls	r5, r3, #30
 80028a2:	4606      	mov	r6, r0
 80028a4:	460c      	mov	r4, r1
 80028a6:	d507      	bpl.n	80028b8 <__smakebuf_r+0x1c>
 80028a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80028ac:	6023      	str	r3, [r4, #0]
 80028ae:	6123      	str	r3, [r4, #16]
 80028b0:	2301      	movs	r3, #1
 80028b2:	6163      	str	r3, [r4, #20]
 80028b4:	b002      	add	sp, #8
 80028b6:	bd70      	pop	{r4, r5, r6, pc}
 80028b8:	ab01      	add	r3, sp, #4
 80028ba:	466a      	mov	r2, sp
 80028bc:	f7ff ffca 	bl	8002854 <__swhatbuf_r>
 80028c0:	9900      	ldr	r1, [sp, #0]
 80028c2:	4605      	mov	r5, r0
 80028c4:	4630      	mov	r0, r6
 80028c6:	f7ff fa73 	bl	8001db0 <_malloc_r>
 80028ca:	b948      	cbnz	r0, 80028e0 <__smakebuf_r+0x44>
 80028cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028d0:	059a      	lsls	r2, r3, #22
 80028d2:	d4ef      	bmi.n	80028b4 <__smakebuf_r+0x18>
 80028d4:	f023 0303 	bic.w	r3, r3, #3
 80028d8:	f043 0302 	orr.w	r3, r3, #2
 80028dc:	81a3      	strh	r3, [r4, #12]
 80028de:	e7e3      	b.n	80028a8 <__smakebuf_r+0xc>
 80028e0:	4b0d      	ldr	r3, [pc, #52]	; (8002918 <__smakebuf_r+0x7c>)
 80028e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80028e4:	89a3      	ldrh	r3, [r4, #12]
 80028e6:	6020      	str	r0, [r4, #0]
 80028e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ec:	81a3      	strh	r3, [r4, #12]
 80028ee:	9b00      	ldr	r3, [sp, #0]
 80028f0:	6163      	str	r3, [r4, #20]
 80028f2:	9b01      	ldr	r3, [sp, #4]
 80028f4:	6120      	str	r0, [r4, #16]
 80028f6:	b15b      	cbz	r3, 8002910 <__smakebuf_r+0x74>
 80028f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028fc:	4630      	mov	r0, r6
 80028fe:	f000 f88d 	bl	8002a1c <_isatty_r>
 8002902:	b128      	cbz	r0, 8002910 <__smakebuf_r+0x74>
 8002904:	89a3      	ldrh	r3, [r4, #12]
 8002906:	f023 0303 	bic.w	r3, r3, #3
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	81a3      	strh	r3, [r4, #12]
 8002910:	89a0      	ldrh	r0, [r4, #12]
 8002912:	4305      	orrs	r5, r0
 8002914:	81a5      	strh	r5, [r4, #12]
 8002916:	e7cd      	b.n	80028b4 <__smakebuf_r+0x18>
 8002918:	08001c09 	.word	0x08001c09

0800291c <__malloc_lock>:
 800291c:	4801      	ldr	r0, [pc, #4]	; (8002924 <__malloc_lock+0x8>)
 800291e:	f7ff ba45 	b.w	8001dac <__retarget_lock_acquire_recursive>
 8002922:	bf00      	nop
 8002924:	200001a4 	.word	0x200001a4

08002928 <__malloc_unlock>:
 8002928:	4801      	ldr	r0, [pc, #4]	; (8002930 <__malloc_unlock+0x8>)
 800292a:	f7ff ba40 	b.w	8001dae <__retarget_lock_release_recursive>
 800292e:	bf00      	nop
 8002930:	200001a4 	.word	0x200001a4

08002934 <_free_r>:
 8002934:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002936:	2900      	cmp	r1, #0
 8002938:	d048      	beq.n	80029cc <_free_r+0x98>
 800293a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800293e:	9001      	str	r0, [sp, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	f1a1 0404 	sub.w	r4, r1, #4
 8002946:	bfb8      	it	lt
 8002948:	18e4      	addlt	r4, r4, r3
 800294a:	f7ff ffe7 	bl	800291c <__malloc_lock>
 800294e:	4a20      	ldr	r2, [pc, #128]	; (80029d0 <_free_r+0x9c>)
 8002950:	9801      	ldr	r0, [sp, #4]
 8002952:	6813      	ldr	r3, [r2, #0]
 8002954:	4615      	mov	r5, r2
 8002956:	b933      	cbnz	r3, 8002966 <_free_r+0x32>
 8002958:	6063      	str	r3, [r4, #4]
 800295a:	6014      	str	r4, [r2, #0]
 800295c:	b003      	add	sp, #12
 800295e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002962:	f7ff bfe1 	b.w	8002928 <__malloc_unlock>
 8002966:	42a3      	cmp	r3, r4
 8002968:	d90b      	bls.n	8002982 <_free_r+0x4e>
 800296a:	6821      	ldr	r1, [r4, #0]
 800296c:	1862      	adds	r2, r4, r1
 800296e:	4293      	cmp	r3, r2
 8002970:	bf04      	itt	eq
 8002972:	681a      	ldreq	r2, [r3, #0]
 8002974:	685b      	ldreq	r3, [r3, #4]
 8002976:	6063      	str	r3, [r4, #4]
 8002978:	bf04      	itt	eq
 800297a:	1852      	addeq	r2, r2, r1
 800297c:	6022      	streq	r2, [r4, #0]
 800297e:	602c      	str	r4, [r5, #0]
 8002980:	e7ec      	b.n	800295c <_free_r+0x28>
 8002982:	461a      	mov	r2, r3
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	b10b      	cbz	r3, 800298c <_free_r+0x58>
 8002988:	42a3      	cmp	r3, r4
 800298a:	d9fa      	bls.n	8002982 <_free_r+0x4e>
 800298c:	6811      	ldr	r1, [r2, #0]
 800298e:	1855      	adds	r5, r2, r1
 8002990:	42a5      	cmp	r5, r4
 8002992:	d10b      	bne.n	80029ac <_free_r+0x78>
 8002994:	6824      	ldr	r4, [r4, #0]
 8002996:	4421      	add	r1, r4
 8002998:	1854      	adds	r4, r2, r1
 800299a:	42a3      	cmp	r3, r4
 800299c:	6011      	str	r1, [r2, #0]
 800299e:	d1dd      	bne.n	800295c <_free_r+0x28>
 80029a0:	681c      	ldr	r4, [r3, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	6053      	str	r3, [r2, #4]
 80029a6:	4421      	add	r1, r4
 80029a8:	6011      	str	r1, [r2, #0]
 80029aa:	e7d7      	b.n	800295c <_free_r+0x28>
 80029ac:	d902      	bls.n	80029b4 <_free_r+0x80>
 80029ae:	230c      	movs	r3, #12
 80029b0:	6003      	str	r3, [r0, #0]
 80029b2:	e7d3      	b.n	800295c <_free_r+0x28>
 80029b4:	6825      	ldr	r5, [r4, #0]
 80029b6:	1961      	adds	r1, r4, r5
 80029b8:	428b      	cmp	r3, r1
 80029ba:	bf04      	itt	eq
 80029bc:	6819      	ldreq	r1, [r3, #0]
 80029be:	685b      	ldreq	r3, [r3, #4]
 80029c0:	6063      	str	r3, [r4, #4]
 80029c2:	bf04      	itt	eq
 80029c4:	1949      	addeq	r1, r1, r5
 80029c6:	6021      	streq	r1, [r4, #0]
 80029c8:	6054      	str	r4, [r2, #4]
 80029ca:	e7c7      	b.n	800295c <_free_r+0x28>
 80029cc:	b003      	add	sp, #12
 80029ce:	bd30      	pop	{r4, r5, pc}
 80029d0:	2000008c 	.word	0x2000008c

080029d4 <_read_r>:
 80029d4:	b538      	push	{r3, r4, r5, lr}
 80029d6:	4d07      	ldr	r5, [pc, #28]	; (80029f4 <_read_r+0x20>)
 80029d8:	4604      	mov	r4, r0
 80029da:	4608      	mov	r0, r1
 80029dc:	4611      	mov	r1, r2
 80029de:	2200      	movs	r2, #0
 80029e0:	602a      	str	r2, [r5, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	f7fd ff3c 	bl	8000860 <_read>
 80029e8:	1c43      	adds	r3, r0, #1
 80029ea:	d102      	bne.n	80029f2 <_read_r+0x1e>
 80029ec:	682b      	ldr	r3, [r5, #0]
 80029ee:	b103      	cbz	r3, 80029f2 <_read_r+0x1e>
 80029f0:	6023      	str	r3, [r4, #0]
 80029f2:	bd38      	pop	{r3, r4, r5, pc}
 80029f4:	200001ac 	.word	0x200001ac

080029f8 <_fstat_r>:
 80029f8:	b538      	push	{r3, r4, r5, lr}
 80029fa:	4d07      	ldr	r5, [pc, #28]	; (8002a18 <_fstat_r+0x20>)
 80029fc:	2300      	movs	r3, #0
 80029fe:	4604      	mov	r4, r0
 8002a00:	4608      	mov	r0, r1
 8002a02:	4611      	mov	r1, r2
 8002a04:	602b      	str	r3, [r5, #0]
 8002a06:	f000 f821 	bl	8002a4c <_fstat>
 8002a0a:	1c43      	adds	r3, r0, #1
 8002a0c:	d102      	bne.n	8002a14 <_fstat_r+0x1c>
 8002a0e:	682b      	ldr	r3, [r5, #0]
 8002a10:	b103      	cbz	r3, 8002a14 <_fstat_r+0x1c>
 8002a12:	6023      	str	r3, [r4, #0]
 8002a14:	bd38      	pop	{r3, r4, r5, pc}
 8002a16:	bf00      	nop
 8002a18:	200001ac 	.word	0x200001ac

08002a1c <_isatty_r>:
 8002a1c:	b538      	push	{r3, r4, r5, lr}
 8002a1e:	4d06      	ldr	r5, [pc, #24]	; (8002a38 <_isatty_r+0x1c>)
 8002a20:	2300      	movs	r3, #0
 8002a22:	4604      	mov	r4, r0
 8002a24:	4608      	mov	r0, r1
 8002a26:	602b      	str	r3, [r5, #0]
 8002a28:	f000 f818 	bl	8002a5c <_isatty>
 8002a2c:	1c43      	adds	r3, r0, #1
 8002a2e:	d102      	bne.n	8002a36 <_isatty_r+0x1a>
 8002a30:	682b      	ldr	r3, [r5, #0]
 8002a32:	b103      	cbz	r3, 8002a36 <_isatty_r+0x1a>
 8002a34:	6023      	str	r3, [r4, #0]
 8002a36:	bd38      	pop	{r3, r4, r5, pc}
 8002a38:	200001ac 	.word	0x200001ac

08002a3c <_close>:
 8002a3c:	4b02      	ldr	r3, [pc, #8]	; (8002a48 <_close+0xc>)
 8002a3e:	2258      	movs	r2, #88	; 0x58
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	f04f 30ff 	mov.w	r0, #4294967295
 8002a46:	4770      	bx	lr
 8002a48:	200001ac 	.word	0x200001ac

08002a4c <_fstat>:
 8002a4c:	4b02      	ldr	r3, [pc, #8]	; (8002a58 <_fstat+0xc>)
 8002a4e:	2258      	movs	r2, #88	; 0x58
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	f04f 30ff 	mov.w	r0, #4294967295
 8002a56:	4770      	bx	lr
 8002a58:	200001ac 	.word	0x200001ac

08002a5c <_isatty>:
 8002a5c:	4b02      	ldr	r3, [pc, #8]	; (8002a68 <_isatty+0xc>)
 8002a5e:	2258      	movs	r2, #88	; 0x58
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	2000      	movs	r0, #0
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	200001ac 	.word	0x200001ac

08002a6c <_lseek>:
 8002a6c:	4b02      	ldr	r3, [pc, #8]	; (8002a78 <_lseek+0xc>)
 8002a6e:	2258      	movs	r2, #88	; 0x58
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	f04f 30ff 	mov.w	r0, #4294967295
 8002a76:	4770      	bx	lr
 8002a78:	200001ac 	.word	0x200001ac

08002a7c <_sbrk>:
 8002a7c:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <_sbrk+0x14>)
 8002a7e:	6819      	ldr	r1, [r3, #0]
 8002a80:	4602      	mov	r2, r0
 8002a82:	b909      	cbnz	r1, 8002a88 <_sbrk+0xc>
 8002a84:	4903      	ldr	r1, [pc, #12]	; (8002a94 <_sbrk+0x18>)
 8002a86:	6019      	str	r1, [r3, #0]
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	4402      	add	r2, r0
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	4770      	bx	lr
 8002a90:	20000094 	.word	0x20000094
 8002a94:	200001b0 	.word	0x200001b0

08002a98 <_init>:
 8002a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a9a:	bf00      	nop
 8002a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a9e:	bc08      	pop	{r3}
 8002aa0:	469e      	mov	lr, r3
 8002aa2:	4770      	bx	lr

08002aa4 <_fini>:
 8002aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aa6:	bf00      	nop
 8002aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aaa:	bc08      	pop	{r3}
 8002aac:	469e      	mov	lr, r3
 8002aae:	4770      	bx	lr
