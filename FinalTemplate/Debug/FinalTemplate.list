
FinalTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000465c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08004860  08004860  00014860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c6c  08004c6c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08004c6c  08004c6c  00014c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c74  08004c74  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c74  08004c74  00014c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c78  08004c78  00014c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08004c7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  200001dc  08004e58  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  200002dc  08004e58  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101ae  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001da8  00000000  00000000  000303b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  00032160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  00032cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d9a3  00000000  00000000  000337e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb11  00000000  00000000  0006118b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a146  00000000  00000000  0006fc9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00189de2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e18  00000000  00000000  00189e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00008bda  00000000  00000000  0018cc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         0000009c  00000000  00000000  0019582c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000014f  00000000  00000000  001958c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	08004844 	.word	0x08004844

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	08004844 	.word	0x08004844

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <Init_Timer>:
		printf("Elapsed: %ld\n\r", elapsed);
	}

}

void Init_Timer() {
 80005e8:	b510      	push	{r4, lr}
 80005ea:	b082      	sub	sp, #8
	__HAL_RCC_TIM7_CLK_ENABLE(); //Enable the TIM7 peripheral
 80005ec:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <Init_Timer+0x40>)
 80005ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005f0:	f042 0220 	orr.w	r2, r2, #32
 80005f4:	641a      	str	r2, [r3, #64]	; 0x40
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	f003 0320 	and.w	r3, r3, #32
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	9b01      	ldr	r3, [sp, #4]

	htim7.Instance = TIM7;
 8000600:	4c0a      	ldr	r4, [pc, #40]	; (800062c <Init_Timer+0x44>)
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <Init_Timer+0x48>)
 8000604:	6023      	str	r3, [r4, #0]
	htim7.Init.Prescaler = 499;
 8000606:	f240 13f3 	movw	r3, #499	; 0x1f3
 800060a:	6063      	str	r3, [r4, #4]
	htim7.Init.Period = 21599; //.1sec
 800060c:	f245 435f 	movw	r3, #21599	; 0x545f
 8000610:	60e3      	str	r3, [r4, #12]

	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000612:	2037      	movs	r0, #55	; 0x37
 8000614:	f000 fa2a 	bl	8000a6c <HAL_NVIC_EnableIRQ>

	HAL_TIM_Base_Init(&htim7); //Configure the timer
 8000618:	4620      	mov	r0, r4
 800061a:	f001 f837 	bl	800168c <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim7); //Start the timer
 800061e:	4620      	mov	r0, r4
 8000620:	f000 fec6 	bl	80013b0 <HAL_TIM_Base_Start_IT>
}
 8000624:	b002      	add	sp, #8
 8000626:	bd10      	pop	{r4, pc}
 8000628:	40023800 	.word	0x40023800
 800062c:	20000288 	.word	0x20000288
 8000630:	40001400 	.word	0x40001400

08000634 <main>:
int main() {
 8000634:	b508      	push	{r3, lr}
	Sys_Init();
 8000636:	f000 f8a7 	bl	8000788 <Sys_Init>
	HAL_Init();
 800063a:	f000 f9ab 	bl	8000994 <HAL_Init>
	Init_Timer();
 800063e:	f7ff ffd3 	bl	80005e8 <Init_Timer>
	fflush(stdout);
 8000642:	4b05      	ldr	r3, [pc, #20]	; (8000658 <main+0x24>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	6898      	ldr	r0, [r3, #8]
 8000648:	f001 fcec 	bl	8002024 <fflush>
		printf("Elapsed: %ld\n\r", elapsed);
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <main+0x28>)
 800064e:	6819      	ldr	r1, [r3, #0]
 8000650:	4803      	ldr	r0, [pc, #12]	; (8000660 <main+0x2c>)
 8000652:	f002 fb0b 	bl	8002c6c <iprintf>
	while (1){
 8000656:	e7f9      	b.n	800064c <main+0x18>
 8000658:	2000000c 	.word	0x2000000c
 800065c:	200001f8 	.word	0x200001f8
 8000660:	08004878 	.word	0x08004878

08000664 <TIM7_IRQHandler>:


// -- ISRs (IRQs) -------------
//
void TIM7_IRQHandler() {
 8000664:	b508      	push	{r3, lr}
	elapsed++;  //increment the variable for time elapsed
 8000666:	4a04      	ldr	r2, [pc, #16]	; (8000678 <TIM7_IRQHandler+0x14>)
 8000668:	6813      	ldr	r3, [r2, #0]
 800066a:	3301      	adds	r3, #1
 800066c:	6013      	str	r3, [r2, #0]
	HAL_TIM_IRQHandler(&htim7);
 800066e:	4803      	ldr	r0, [pc, #12]	; (800067c <TIM7_IRQHandler+0x18>)
 8000670:	f000 feb8 	bl	80013e4 <HAL_TIM_IRQHandler>
}
 8000674:	bd08      	pop	{r3, pc}
 8000676:	bf00      	nop
 8000678:	200001f8 	.word	0x200001f8
 800067c:	20000288 	.word	0x20000288

08000680 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
// This callback is automatically called by the HAL on the UEV event
	if(htim->Instance == TIM7){
 8000680:	6802      	ldr	r2, [r0, #0]
 8000682:	4b04      	ldr	r3, [pc, #16]	; (8000694 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000684:	429a      	cmp	r2, r3
 8000686:	d000      	beq.n	800068a <HAL_TIM_PeriodElapsedCallback+0xa>
		elapsed++;  //increment the variable for time elapsed
	}

	}
 8000688:	4770      	bx	lr
		elapsed++;  //increment the variable for time elapsed
 800068a:	4a03      	ldr	r2, [pc, #12]	; (8000698 <HAL_TIM_PeriodElapsedCallback+0x18>)
 800068c:	6813      	ldr	r3, [r2, #0]
 800068e:	3301      	adds	r3, #1
 8000690:	6013      	str	r3, [r2, #0]
	}
 8000692:	e7f9      	b.n	8000688 <HAL_TIM_PeriodElapsedCallback+0x8>
 8000694:	40001400 	.word	0x40001400
 8000698:	200001f8 	.word	0x200001f8

0800069c <HAL_TIMEx_BreakCallback>:


void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim){}
 800069c:	4770      	bx	lr

0800069e <HAL_TIMEx_CommutCallback>:
void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim){}
 800069e:	4770      	bx	lr

080006a0 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 80006a0:	b500      	push	{lr}
 80006a2:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a4:	2301      	movs	r3, #1
 80006a6:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ac:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80006b6:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006b8:	2219      	movs	r2, #25
 80006ba:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 80006bc:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80006c0:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c2:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006c4:	2309      	movs	r3, #9
 80006c6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 80006c8:	2307      	movs	r3, #7
 80006ca:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80006cc:	4668      	mov	r0, sp
 80006ce:	f000 fb1f 	bl	8000d10 <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 80006d2:	b100      	cbz	r0, 80006d6 <SystemClock_Config+0x36>
    while(1) { ; }
 80006d4:	e7fe      	b.n	80006d4 <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 80006d6:	f000 fadd 	bl	8000c94 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 80006da:	b100      	cbz	r0, 80006de <SystemClock_Config+0x3e>
    while(1) { ; }
 80006dc:	e7fe      	b.n	80006dc <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80006de:	230f      	movs	r3, #15
 80006e0:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e2:	2302      	movs	r3, #2
 80006e4:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ee:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f4:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 80006f6:	2107      	movs	r1, #7
 80006f8:	a80d      	add	r0, sp, #52	; 0x34
 80006fa:	f000 fd7b 	bl	80011f4 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 80006fe:	b100      	cbz	r0, 8000702 <SystemClock_Config+0x62>
    while(1) { ; }
 8000700:	e7fe      	b.n	8000700 <SystemClock_Config+0x60>
  }
}
 8000702:	b013      	add	sp, #76	; 0x4c
 8000704:	f85d fb04 	ldr.w	pc, [sp], #4

08000708 <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 8000708:	b410      	push	{r4}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800070a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800070e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <CPU_CACHE_Enable+0x7c>)
 8000714:	2100      	movs	r1, #0
 8000716:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800071a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800071e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000722:	695a      	ldr	r2, [r3, #20]
 8000724:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000728:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800072a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800072e:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000732:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000736:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800073a:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800073e:	f3c0 324e 	ubfx	r2, r0, #13, #15
 8000742:	e000      	b.n	8000746 <CPU_CACHE_Enable+0x3e>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8000744:	461a      	mov	r2, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000746:	f3c0 01c9 	ubfx	r1, r0, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800074a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800074e:	ea03 1342 	and.w	r3, r3, r2, lsl #5
 8000752:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 8000756:	4c0b      	ldr	r4, [pc, #44]	; (8000784 <CPU_CACHE_Enable+0x7c>)
 8000758:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways-- != 0U);
 800075c:	460b      	mov	r3, r1
 800075e:	3901      	subs	r1, #1
 8000760:	2b00      	cmp	r3, #0
 8000762:	d1f2      	bne.n	800074a <CPU_CACHE_Enable+0x42>
    } while(sets-- != 0U);
 8000764:	1e53      	subs	r3, r2, #1
 8000766:	2a00      	cmp	r2, #0
 8000768:	d1ec      	bne.n	8000744 <CPU_CACHE_Enable+0x3c>
 800076a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800076e:	6963      	ldr	r3, [r4, #20]
 8000770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000774:	6163      	str	r3, [r4, #20]
 8000776:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800077a:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 800077e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <Sys_Init>:

// Unified System Initialization (equivalent of current MPS Sys_Init())
void Sys_Init(void) {
 8000788:	b508      	push	{r3, lr}
	//Initialize the system
	CPU_CACHE_Enable();		// Enable CPU Caching
 800078a:	f7ff ffbd 	bl	8000708 <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 800078e:	f000 f901 	bl	8000994 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 8000792:	f7ff ff85 	bl	80006a0 <SystemClock_Config>
		- Stop Bit = No Stop bits
		- Parity = None
		- BaudRate = 115200 baud
		- Hardware flow control disabled (RTS and CTS signals)
	*/
	initUart(&USB_UART, 115200, USART1);
 8000796:	4a03      	ldr	r2, [pc, #12]	; (80007a4 <Sys_Init+0x1c>)
 8000798:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800079c:	4802      	ldr	r0, [pc, #8]	; (80007a8 <Sys_Init+0x20>)
 800079e:	f000 f873 	bl	8000888 <initUart>
}
 80007a2:	bd08      	pop	{r3, pc}
 80007a4:	40011000 	.word	0x40011000
 80007a8:	20000208 	.word	0x20000208

080007ac <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 80007ac:	b508      	push	{r3, lr}
  HAL_IncTick();
 80007ae:	f000 f907 	bl	80009c0 <HAL_IncTick>
}
 80007b2:	bd08      	pop	{r3, pc}

080007b4 <HAL_UART_MspInit>:
#include "uart.h"

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 80007b4:	b530      	push	{r4, r5, lr}
 80007b6:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 80007b8:	6803      	ldr	r3, [r0, #0]
 80007ba:	4a2e      	ldr	r2, [pc, #184]	; (8000874 <HAL_UART_MspInit+0xc0>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d004      	beq.n	80007ca <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 80007c0:	4a2d      	ldr	r2, [pc, #180]	; (8000878 <HAL_UART_MspInit+0xc4>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d02c      	beq.n	8000820 <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 80007c6:	b00b      	add	sp, #44	; 0x2c
 80007c8:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 80007ca:	4c2c      	ldr	r4, [pc, #176]	; (800087c <HAL_UART_MspInit+0xc8>)
 80007cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	6323      	str	r3, [r4, #48]	; 0x30
 80007d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	9301      	str	r3, [sp, #4]
 80007dc:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 80007de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007e2:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007f0:	2307      	movs	r3, #7
 80007f2:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 80007f4:	4d22      	ldr	r5, [pc, #136]	; (8000880 <HAL_UART_MspInit+0xcc>)
 80007f6:	a905      	add	r1, sp, #20
 80007f8:	4628      	mov	r0, r5
 80007fa:	f000 f95b 	bl	8000ab4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000802:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 8000804:	a905      	add	r1, sp, #20
 8000806:	4628      	mov	r0, r5
 8000808:	f000 f954 	bl	8000ab4 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 800080c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800080e:	f043 0310 	orr.w	r3, r3, #16
 8000812:	6463      	str	r3, [r4, #68]	; 0x44
 8000814:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000816:	f003 0310 	and.w	r3, r3, #16
 800081a:	9302      	str	r3, [sp, #8]
 800081c:	9b02      	ldr	r3, [sp, #8]
 800081e:	e7d2      	b.n	80007c6 <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 8000820:	4c16      	ldr	r4, [pc, #88]	; (800087c <HAL_UART_MspInit+0xc8>)
 8000822:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6323      	str	r3, [r4, #48]	; 0x30
 800082a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800082c:	f003 0304 	and.w	r3, r3, #4
 8000830:	9303      	str	r3, [sp, #12]
 8000832:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 8000834:	2340      	movs	r3, #64	; 0x40
 8000836:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800083c:	2301      	movs	r3, #1
 800083e:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000840:	2303      	movs	r3, #3
 8000842:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000844:	2308      	movs	r3, #8
 8000846:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 8000848:	4d0e      	ldr	r5, [pc, #56]	; (8000884 <HAL_UART_MspInit+0xd0>)
 800084a:	a905      	add	r1, sp, #20
 800084c:	4628      	mov	r0, r5
 800084e:	f000 f931 	bl	8000ab4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000852:	2380      	movs	r3, #128	; 0x80
 8000854:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 8000856:	a905      	add	r1, sp, #20
 8000858:	4628      	mov	r0, r5
 800085a:	f000 f92b 	bl	8000ab4 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 800085e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000860:	f043 0320 	orr.w	r3, r3, #32
 8000864:	6463      	str	r3, [r4, #68]	; 0x44
 8000866:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000868:	f003 0320 	and.w	r3, r3, #32
 800086c:	9304      	str	r3, [sp, #16]
 800086e:	9b04      	ldr	r3, [sp, #16]
}
 8000870:	e7a9      	b.n	80007c6 <HAL_UART_MspInit+0x12>
 8000872:	bf00      	nop
 8000874:	40011000 	.word	0x40011000
 8000878:	40011400 	.word	0x40011400
 800087c:	40023800 	.word	0x40023800
 8000880:	40020000 	.word	0x40020000
 8000884:	40020800 	.word	0x40020800

08000888 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 8000888:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 800088a:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 800088c:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	2200      	movs	r2, #0
 8000890:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 8000892:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 8000894:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 8000896:	210c      	movs	r1, #12
 8000898:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800089a:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 800089c:	f001 face 	bl	8001e3c <HAL_UART_Init>
}
 80008a0:	bd08      	pop	{r3, pc}
	...

080008a4 <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 80008a4:	b510      	push	{r4, lr}
 80008a6:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 80008a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ac:	b292      	uxth	r2, r2
 80008ae:	4802      	ldr	r0, [pc, #8]	; (80008b8 <_write+0x14>)
 80008b0:	f001 f98e 	bl	8001bd0 <HAL_UART_Transmit>
	return len;
}
 80008b4:	4620      	mov	r0, r4
 80008b6:	bd10      	pop	{r4, pc}
 80008b8:	20000208 	.word	0x20000208

080008bc <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 80008bc:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 80008be:	2200      	movs	r2, #0
 80008c0:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80008c2:	f04f 33ff 	mov.w	r3, #4294967295
 80008c6:	2201      	movs	r2, #1
 80008c8:	4802      	ldr	r0, [pc, #8]	; (80008d4 <_read+0x18>)
 80008ca:	f001 f9ee 	bl	8001caa <HAL_UART_Receive>
	return len;
}
 80008ce:	2001      	movs	r0, #1
 80008d0:	bd08      	pop	{r3, pc}
 80008d2:	bf00      	nop
 80008d4:	20000208 	.word	0x20000208

080008d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008d8:	480d      	ldr	r0, [pc, #52]	; (8000910 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 80008dc:	480d      	ldr	r0, [pc, #52]	; (8000914 <LoopForever+0x6>)
  ldr r1, =_edata
 80008de:	490e      	ldr	r1, [pc, #56]	; (8000918 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e0:	4a0e      	ldr	r2, [pc, #56]	; (800091c <LoopForever+0xe>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e4:	e002      	b.n	80008ec <LoopCopyDataInit>

080008e6 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 80008e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ea:	3304      	adds	r3, #4

080008ec <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 80008ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ee:	428c      	cmp	r4, r1



  bcc CopyDataInit
 80008f0:	d3f9      	bcc.n	80008e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f2:	4a0b      	ldr	r2, [pc, #44]	; (8000920 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f4:	4c0b      	ldr	r4, [pc, #44]	; (8000924 <LoopForever+0x16>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f8:	e001      	b.n	80008fe <LoopFillZerobss>

080008fa <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 80008fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008fc:	3204      	adds	r2, #4

080008fe <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 80008fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000900:	d3fb      	bcc.n	80008fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000902:	f000 f813 	bl	800092c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000906:	f001 fc95 	bl	8002234 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800090a:	f7ff fe93 	bl	8000634 <main>

0800090e <LoopForever>:

LoopForever:
    b LoopForever
 800090e:	e7fe      	b.n	800090e <LoopForever>
  ldr   r0, =_estack
 8000910:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000918:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800091c:	08004c7c 	.word	0x08004c7c
  ldr r2, =_sbss
 8000920:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000924:	200002dc 	.word	0x200002dc

08000928 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000928:	e7fe      	b.n	8000928 <ADC_IRQHandler>
	...

0800092c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <SystemInit+0x18>)
 800092e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000932:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000936:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800093a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800093e:	609a      	str	r2, [r3, #8]
#endif
}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000948:	4770      	bx	lr
	...

0800094c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800094c:	b510      	push	{r4, lr}
 800094e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000950:	4b0e      	ldr	r3, [pc, #56]	; (800098c <HAL_InitTick+0x40>)
 8000952:	7818      	ldrb	r0, [r3, #0]
 8000954:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000958:	fbb3 f3f0 	udiv	r3, r3, r0
 800095c:	4a0c      	ldr	r2, [pc, #48]	; (8000990 <HAL_InitTick+0x44>)
 800095e:	6810      	ldr	r0, [r2, #0]
 8000960:	fbb0 f0f3 	udiv	r0, r0, r3
 8000964:	f000 f890 	bl	8000a88 <HAL_SYSTICK_Config>
 8000968:	b968      	cbnz	r0, 8000986 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096a:	2c0f      	cmp	r4, #15
 800096c:	d901      	bls.n	8000972 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800096e:	2001      	movs	r0, #1
 8000970:	e00a      	b.n	8000988 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000972:	2200      	movs	r2, #0
 8000974:	4621      	mov	r1, r4
 8000976:	f04f 30ff 	mov.w	r0, #4294967295
 800097a:	f000 f845 	bl	8000a08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800097e:	4b03      	ldr	r3, [pc, #12]	; (800098c <HAL_InitTick+0x40>)
 8000980:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000982:	2000      	movs	r0, #0
 8000984:	e000      	b.n	8000988 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000986:	2001      	movs	r0, #1
}
 8000988:	bd10      	pop	{r4, pc}
 800098a:	bf00      	nop
 800098c:	20000004 	.word	0x20000004
 8000990:	20000000 	.word	0x20000000

08000994 <HAL_Init>:
{
 8000994:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <HAL_Init+0x28>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800099e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80009a6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a8:	2003      	movs	r0, #3
 80009aa:	f000 f81b 	bl	80009e4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ae:	200f      	movs	r0, #15
 80009b0:	f7ff ffcc 	bl	800094c <HAL_InitTick>
  HAL_MspInit();
 80009b4:	f7ff ffc8 	bl	8000948 <HAL_MspInit>
}
 80009b8:	2000      	movs	r0, #0
 80009ba:	bd08      	pop	{r3, pc}
 80009bc:	40023c00 	.word	0x40023c00

080009c0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80009c0:	4a03      	ldr	r2, [pc, #12]	; (80009d0 <HAL_IncTick+0x10>)
 80009c2:	6811      	ldr	r1, [r2, #0]
 80009c4:	4b03      	ldr	r3, [pc, #12]	; (80009d4 <HAL_IncTick+0x14>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	440b      	add	r3, r1
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	200002c8 	.word	0x200002c8
 80009d4:	20000004 	.word	0x20000004

080009d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80009d8:	4b01      	ldr	r3, [pc, #4]	; (80009e0 <HAL_GetTick+0x8>)
 80009da:	6818      	ldr	r0, [r3, #0]
}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	200002c8 	.word	0x200002c8

080009e4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e4:	4906      	ldr	r1, [pc, #24]	; (8000a00 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80009e6:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009ec:	041b      	lsls	r3, r3, #16
 80009ee:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009f0:	0200      	lsls	r0, r0, #8
 80009f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80009f8:	4a02      	ldr	r2, [pc, #8]	; (8000a04 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80009fa:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80009fc:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80009fe:	4770      	bx	lr
 8000a00:	e000ed00 	.word	0xe000ed00
 8000a04:	05fa0000 	.word	0x05fa0000

08000a08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a08:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <HAL_NVIC_SetPriority+0x58>)
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a12:	f1c3 0407 	rsb	r4, r3, #7
 8000a16:	2c04      	cmp	r4, #4
 8000a18:	bf28      	it	cs
 8000a1a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a1c:	1d1d      	adds	r5, r3, #4
 8000a1e:	2d06      	cmp	r5, #6
 8000a20:	d914      	bls.n	8000a4c <HAL_NVIC_SetPriority+0x44>
 8000a22:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a24:	f04f 35ff 	mov.w	r5, #4294967295
 8000a28:	fa05 f404 	lsl.w	r4, r5, r4
 8000a2c:	ea21 0104 	bic.w	r1, r1, r4
 8000a30:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a32:	fa05 f303 	lsl.w	r3, r5, r3
 8000a36:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	db07      	blt.n	8000a50 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a40:	0109      	lsls	r1, r1, #4
 8000a42:	b2c9      	uxtb	r1, r1
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <HAL_NVIC_SetPriority+0x5c>)
 8000a46:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000a48:	bc30      	pop	{r4, r5}
 8000a4a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	e7e9      	b.n	8000a24 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a50:	f000 000f 	and.w	r0, r0, #15
 8000a54:	0109      	lsls	r1, r1, #4
 8000a56:	b2c9      	uxtb	r1, r1
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <HAL_NVIC_SetPriority+0x60>)
 8000a5a:	5419      	strb	r1, [r3, r0]
 8000a5c:	e7f4      	b.n	8000a48 <HAL_NVIC_SetPriority+0x40>
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00
 8000a64:	e000e400 	.word	0xe000e400
 8000a68:	e000ed14 	.word	0xe000ed14

08000a6c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000a6c:	2800      	cmp	r0, #0
 8000a6e:	db07      	blt.n	8000a80 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a70:	f000 021f 	and.w	r2, r0, #31
 8000a74:	0940      	lsrs	r0, r0, #5
 8000a76:	2301      	movs	r3, #1
 8000a78:	4093      	lsls	r3, r2
 8000a7a:	4a02      	ldr	r2, [pc, #8]	; (8000a84 <HAL_NVIC_EnableIRQ+0x18>)
 8000a7c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000e100 	.word	0xe000e100

08000a88 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a88:	3801      	subs	r0, #1
 8000a8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a8e:	d20a      	bcs.n	8000aa6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_SYSTICK_Config+0x24>)
 8000a92:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a94:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <HAL_SYSTICK_Config+0x28>)
 8000a96:	21f0      	movs	r1, #240	; 0xf0
 8000a98:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aa0:	2207      	movs	r2, #7
 8000aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000aa6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000e010 	.word	0xe000e010
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	2b0f      	cmp	r3, #15
 8000ab8:	f200 80e3 	bhi.w	8000c82 <HAL_GPIO_Init+0x1ce>
{
 8000abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	e039      	b.n	8000b36 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ac2:	2209      	movs	r2, #9
 8000ac4:	e000      	b.n	8000ac8 <HAL_GPIO_Init+0x14>
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	40b2      	lsls	r2, r6
 8000aca:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000acc:	3402      	adds	r4, #2
 8000ace:	4e6d      	ldr	r6, [pc, #436]	; (8000c84 <HAL_GPIO_Init+0x1d0>)
 8000ad0:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ad4:	4a6c      	ldr	r2, [pc, #432]	; (8000c88 <HAL_GPIO_Init+0x1d4>)
 8000ad6:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ad8:	43ea      	mvns	r2, r5
 8000ada:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ade:	684f      	ldr	r7, [r1, #4]
 8000ae0:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000ae4:	d001      	beq.n	8000aea <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8000ae6:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8000aea:	4c67      	ldr	r4, [pc, #412]	; (8000c88 <HAL_GPIO_Init+0x1d4>)
 8000aec:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000aee:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000af0:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000af4:	684f      	ldr	r7, [r1, #4]
 8000af6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000afa:	d001      	beq.n	8000b00 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8000afc:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8000b00:	4c61      	ldr	r4, [pc, #388]	; (8000c88 <HAL_GPIO_Init+0x1d4>)
 8000b02:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b04:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000b06:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b0a:	684f      	ldr	r7, [r1, #4]
 8000b0c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000b10:	d001      	beq.n	8000b16 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8000b12:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8000b16:	4c5c      	ldr	r4, [pc, #368]	; (8000c88 <HAL_GPIO_Init+0x1d4>)
 8000b18:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000b1a:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000b1c:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b1e:	684e      	ldr	r6, [r1, #4]
 8000b20:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000b24:	d001      	beq.n	8000b2a <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8000b26:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000b2a:	4c57      	ldr	r4, [pc, #348]	; (8000c88 <HAL_GPIO_Init+0x1d4>)
 8000b2c:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b2e:	3301      	adds	r3, #1
 8000b30:	2b0f      	cmp	r3, #15
 8000b32:	f200 80a4 	bhi.w	8000c7e <HAL_GPIO_Init+0x1ca>
    ioposition = ((uint32_t)0x01) << position;
 8000b36:	2201      	movs	r2, #1
 8000b38:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b3a:	680c      	ldr	r4, [r1, #0]
 8000b3c:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000b40:	ea32 0404 	bics.w	r4, r2, r4
 8000b44:	d1f3      	bne.n	8000b2e <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b46:	684c      	ldr	r4, [r1, #4]
 8000b48:	1e66      	subs	r6, r4, #1
 8000b4a:	2c11      	cmp	r4, #17
 8000b4c:	bf18      	it	ne
 8000b4e:	2e01      	cmpne	r6, #1
 8000b50:	d901      	bls.n	8000b56 <HAL_GPIO_Init+0xa2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b52:	2c12      	cmp	r4, #18
 8000b54:	d112      	bne.n	8000b7c <HAL_GPIO_Init+0xc8>
        temp = GPIOx->OSPEEDR; 
 8000b56:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b58:	005f      	lsls	r7, r3, #1
 8000b5a:	2403      	movs	r4, #3
 8000b5c:	40bc      	lsls	r4, r7
 8000b5e:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8000b62:	68cc      	ldr	r4, [r1, #12]
 8000b64:	40bc      	lsls	r4, r7
 8000b66:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000b68:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b6a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b6c:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000b70:	684c      	ldr	r4, [r1, #4]
 8000b72:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8000b76:	409a      	lsls	r2, r3
 8000b78:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8000b7a:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b7c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b7e:	005e      	lsls	r6, r3, #1
 8000b80:	2403      	movs	r4, #3
 8000b82:	40b4      	lsls	r4, r6
 8000b84:	43e2      	mvns	r2, r4
 8000b86:	ea27 0704 	bic.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000b8a:	688c      	ldr	r4, [r1, #8]
 8000b8c:	40b4      	lsls	r4, r6
 8000b8e:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8000b90:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b92:	684c      	ldr	r4, [r1, #4]
 8000b94:	2c12      	cmp	r4, #18
 8000b96:	bf18      	it	ne
 8000b98:	2c02      	cmpne	r4, #2
 8000b9a:	d113      	bne.n	8000bc4 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3];
 8000b9c:	08df      	lsrs	r7, r3, #3
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ba4:	f003 0407 	and.w	r4, r3, #7
 8000ba8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8000bac:	240f      	movs	r4, #15
 8000bae:	fa04 f40c 	lsl.w	r4, r4, ip
 8000bb2:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000bb6:	690c      	ldr	r4, [r1, #16]
 8000bb8:	fa04 f40c 	lsl.w	r4, r4, ip
 8000bbc:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 8000bc0:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 8000bc4:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000bc6:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000bc8:	684a      	ldr	r2, [r1, #4]
 8000bca:	f002 0203 	and.w	r2, r2, #3
 8000bce:	40b2      	lsls	r2, r6
 8000bd0:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000bd2:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bd4:	684a      	ldr	r2, [r1, #4]
 8000bd6:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000bda:	d0a8      	beq.n	8000b2e <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bdc:	4a2b      	ldr	r2, [pc, #172]	; (8000c8c <HAL_GPIO_Init+0x1d8>)
 8000bde:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000be0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000be4:	6454      	str	r4, [r2, #68]	; 0x44
 8000be6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000be8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000bec:	9201      	str	r2, [sp, #4]
 8000bee:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000bf0:	089c      	lsrs	r4, r3, #2
 8000bf2:	1ca6      	adds	r6, r4, #2
 8000bf4:	4a23      	ldr	r2, [pc, #140]	; (8000c84 <HAL_GPIO_Init+0x1d0>)
 8000bf6:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000bfa:	f003 0203 	and.w	r2, r3, #3
 8000bfe:	0096      	lsls	r6, r2, #2
 8000c00:	220f      	movs	r2, #15
 8000c02:	40b2      	lsls	r2, r6
 8000c04:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c08:	4a21      	ldr	r2, [pc, #132]	; (8000c90 <HAL_GPIO_Init+0x1dc>)
 8000c0a:	4290      	cmp	r0, r2
 8000c0c:	f43f af5b 	beq.w	8000ac6 <HAL_GPIO_Init+0x12>
 8000c10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c14:	4290      	cmp	r0, r2
 8000c16:	d022      	beq.n	8000c5e <HAL_GPIO_Init+0x1aa>
 8000c18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c1c:	4290      	cmp	r0, r2
 8000c1e:	d020      	beq.n	8000c62 <HAL_GPIO_Init+0x1ae>
 8000c20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c24:	4290      	cmp	r0, r2
 8000c26:	d01e      	beq.n	8000c66 <HAL_GPIO_Init+0x1b2>
 8000c28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c2c:	4290      	cmp	r0, r2
 8000c2e:	d01c      	beq.n	8000c6a <HAL_GPIO_Init+0x1b6>
 8000c30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c34:	4290      	cmp	r0, r2
 8000c36:	d01a      	beq.n	8000c6e <HAL_GPIO_Init+0x1ba>
 8000c38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c3c:	4290      	cmp	r0, r2
 8000c3e:	d018      	beq.n	8000c72 <HAL_GPIO_Init+0x1be>
 8000c40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c44:	4290      	cmp	r0, r2
 8000c46:	d016      	beq.n	8000c76 <HAL_GPIO_Init+0x1c2>
 8000c48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c4c:	4290      	cmp	r0, r2
 8000c4e:	d014      	beq.n	8000c7a <HAL_GPIO_Init+0x1c6>
 8000c50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c54:	4290      	cmp	r0, r2
 8000c56:	f43f af34 	beq.w	8000ac2 <HAL_GPIO_Init+0xe>
 8000c5a:	220a      	movs	r2, #10
 8000c5c:	e734      	b.n	8000ac8 <HAL_GPIO_Init+0x14>
 8000c5e:	2201      	movs	r2, #1
 8000c60:	e732      	b.n	8000ac8 <HAL_GPIO_Init+0x14>
 8000c62:	2202      	movs	r2, #2
 8000c64:	e730      	b.n	8000ac8 <HAL_GPIO_Init+0x14>
 8000c66:	2203      	movs	r2, #3
 8000c68:	e72e      	b.n	8000ac8 <HAL_GPIO_Init+0x14>
 8000c6a:	2204      	movs	r2, #4
 8000c6c:	e72c      	b.n	8000ac8 <HAL_GPIO_Init+0x14>
 8000c6e:	2205      	movs	r2, #5
 8000c70:	e72a      	b.n	8000ac8 <HAL_GPIO_Init+0x14>
 8000c72:	2206      	movs	r2, #6
 8000c74:	e728      	b.n	8000ac8 <HAL_GPIO_Init+0x14>
 8000c76:	2207      	movs	r2, #7
 8000c78:	e726      	b.n	8000ac8 <HAL_GPIO_Init+0x14>
 8000c7a:	2208      	movs	r2, #8
 8000c7c:	e724      	b.n	8000ac8 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000c7e:	b003      	add	sp, #12
 8000c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c82:	4770      	bx	lr
 8000c84:	40013800 	.word	0x40013800
 8000c88:	40013c00 	.word	0x40013c00
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020000 	.word	0x40020000

08000c94 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000c94:	b510      	push	{r4, lr}
 8000c96:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <HAL_PWREx_EnableOverDrive+0x74>)
 8000c9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ca0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca8:	9301      	str	r3, [sp, #4]
 8000caa:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000cac:	4a17      	ldr	r2, [pc, #92]	; (8000d0c <HAL_PWREx_EnableOverDrive+0x78>)
 8000cae:	6813      	ldr	r3, [r2, #0]
 8000cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cb6:	f7ff fe8f 	bl	80009d8 <HAL_GetTick>
 8000cba:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <HAL_PWREx_EnableOverDrive+0x78>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000cc4:	d108      	bne.n	8000cd8 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000cc6:	f7ff fe87 	bl	80009d8 <HAL_GetTick>
 8000cca:	1b00      	subs	r0, r0, r4
 8000ccc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000cd0:	d9f4      	bls.n	8000cbc <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8000cd2:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8000cd4:	b002      	add	sp, #8
 8000cd6:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000cd8:	4a0c      	ldr	r2, [pc, #48]	; (8000d0c <HAL_PWREx_EnableOverDrive+0x78>)
 8000cda:	6813      	ldr	r3, [r2, #0]
 8000cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce0:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8000ce2:	f7ff fe79 	bl	80009d8 <HAL_GetTick>
 8000ce6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <HAL_PWREx_EnableOverDrive+0x78>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000cf0:	d107      	bne.n	8000d02 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000cf2:	f7ff fe71 	bl	80009d8 <HAL_GetTick>
 8000cf6:	1b00      	subs	r0, r0, r4
 8000cf8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000cfc:	d9f4      	bls.n	8000ce8 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8000cfe:	2003      	movs	r0, #3
 8000d00:	e7e8      	b.n	8000cd4 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8000d02:	2000      	movs	r0, #0
 8000d04:	e7e6      	b.n	8000cd4 <HAL_PWREx_EnableOverDrive+0x40>
 8000d06:	bf00      	nop
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40007000 	.word	0x40007000

08000d10 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d10:	2800      	cmp	r0, #0
 8000d12:	f000 8206 	beq.w	8001122 <HAL_RCC_OscConfig+0x412>
{
 8000d16:	b570      	push	{r4, r5, r6, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d1c:	6803      	ldr	r3, [r0, #0]
 8000d1e:	f013 0f01 	tst.w	r3, #1
 8000d22:	d029      	beq.n	8000d78 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d24:	4ba7      	ldr	r3, [pc, #668]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	f003 030c 	and.w	r3, r3, #12
 8000d2c:	2b04      	cmp	r3, #4
 8000d2e:	d01a      	beq.n	8000d66 <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d30:	4ba4      	ldr	r3, [pc, #656]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	f003 030c 	and.w	r3, r3, #12
 8000d38:	2b08      	cmp	r3, #8
 8000d3a:	d00f      	beq.n	8000d5c <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d3c:	6863      	ldr	r3, [r4, #4]
 8000d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d42:	d040      	beq.n	8000dc6 <HAL_RCC_OscConfig+0xb6>
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d154      	bne.n	8000df2 <HAL_RCC_OscConfig+0xe2>
 8000d48:	4b9e      	ldr	r3, [pc, #632]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	e039      	b.n	8000dd0 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d5c:	4b99      	ldr	r3, [pc, #612]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000d64:	d0ea      	beq.n	8000d3c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d66:	4b97      	ldr	r3, [pc, #604]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d6e:	d003      	beq.n	8000d78 <HAL_RCC_OscConfig+0x68>
 8000d70:	6863      	ldr	r3, [r4, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f000 81d7 	beq.w	8001126 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d78:	6823      	ldr	r3, [r4, #0]
 8000d7a:	f013 0f02 	tst.w	r3, #2
 8000d7e:	d074      	beq.n	8000e6a <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d80:	4b90      	ldr	r3, [pc, #576]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	f013 0f0c 	tst.w	r3, #12
 8000d88:	d05e      	beq.n	8000e48 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d8a:	4b8e      	ldr	r3, [pc, #568]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	f003 030c 	and.w	r3, r3, #12
 8000d92:	2b08      	cmp	r3, #8
 8000d94:	d053      	beq.n	8000e3e <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000d96:	68e3      	ldr	r3, [r4, #12]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f000 8089 	beq.w	8000eb0 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d9e:	4a89      	ldr	r2, [pc, #548]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000da0:	6813      	ldr	r3, [r2, #0]
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000da8:	f7ff fe16 	bl	80009d8 <HAL_GetTick>
 8000dac:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dae:	4b85      	ldr	r3, [pc, #532]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f013 0f02 	tst.w	r3, #2
 8000db6:	d172      	bne.n	8000e9e <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000db8:	f7ff fe0e 	bl	80009d8 <HAL_GetTick>
 8000dbc:	1b40      	subs	r0, r0, r5
 8000dbe:	2802      	cmp	r0, #2
 8000dc0:	d9f5      	bls.n	8000dae <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8000dc2:	2003      	movs	r0, #3
 8000dc4:	e1b4      	b.n	8001130 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dc6:	4a7f      	ldr	r2, [pc, #508]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000dc8:	6813      	ldr	r3, [r2, #0]
 8000dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dce:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dd0:	6863      	ldr	r3, [r4, #4]
 8000dd2:	b32b      	cbz	r3, 8000e20 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8000dd4:	f7ff fe00 	bl	80009d8 <HAL_GetTick>
 8000dd8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dda:	4b7a      	ldr	r3, [pc, #488]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000de2:	d1c9      	bne.n	8000d78 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000de4:	f7ff fdf8 	bl	80009d8 <HAL_GetTick>
 8000de8:	1b40      	subs	r0, r0, r5
 8000dea:	2864      	cmp	r0, #100	; 0x64
 8000dec:	d9f5      	bls.n	8000dda <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8000dee:	2003      	movs	r0, #3
 8000df0:	e19e      	b.n	8001130 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000df2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000df6:	d009      	beq.n	8000e0c <HAL_RCC_OscConfig+0xfc>
 8000df8:	4b72      	ldr	r3, [pc, #456]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	e7e1      	b.n	8000dd0 <HAL_RCC_OscConfig+0xc0>
 8000e0c:	4b6d      	ldr	r3, [pc, #436]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	e7d7      	b.n	8000dd0 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8000e20:	f7ff fdda 	bl	80009d8 <HAL_GetTick>
 8000e24:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e26:	4b67      	ldr	r3, [pc, #412]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e2e:	d0a3      	beq.n	8000d78 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e30:	f7ff fdd2 	bl	80009d8 <HAL_GetTick>
 8000e34:	1b40      	subs	r0, r0, r5
 8000e36:	2864      	cmp	r0, #100	; 0x64
 8000e38:	d9f5      	bls.n	8000e26 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8000e3a:	2003      	movs	r0, #3
 8000e3c:	e178      	b.n	8001130 <HAL_RCC_OscConfig+0x420>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e3e:	4b61      	ldr	r3, [pc, #388]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000e46:	d1a6      	bne.n	8000d96 <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e48:	4b5e      	ldr	r3, [pc, #376]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f013 0f02 	tst.w	r3, #2
 8000e50:	d003      	beq.n	8000e5a <HAL_RCC_OscConfig+0x14a>
 8000e52:	68e3      	ldr	r3, [r4, #12]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	f040 8168 	bne.w	800112a <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e5a:	4a5a      	ldr	r2, [pc, #360]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000e5c:	6813      	ldr	r3, [r2, #0]
 8000e5e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e62:	6921      	ldr	r1, [r4, #16]
 8000e64:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e68:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e6a:	6823      	ldr	r3, [r4, #0]
 8000e6c:	f013 0f08 	tst.w	r3, #8
 8000e70:	d046      	beq.n	8000f00 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000e72:	6963      	ldr	r3, [r4, #20]
 8000e74:	b383      	cbz	r3, 8000ed8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e76:	4a53      	ldr	r2, [pc, #332]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000e78:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e80:	f7ff fdaa 	bl	80009d8 <HAL_GetTick>
 8000e84:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e86:	4b4f      	ldr	r3, [pc, #316]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e8a:	f013 0f02 	tst.w	r3, #2
 8000e8e:	d137      	bne.n	8000f00 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e90:	f7ff fda2 	bl	80009d8 <HAL_GetTick>
 8000e94:	1b40      	subs	r0, r0, r5
 8000e96:	2802      	cmp	r0, #2
 8000e98:	d9f5      	bls.n	8000e86 <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 8000e9a:	2003      	movs	r0, #3
 8000e9c:	e148      	b.n	8001130 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e9e:	4a49      	ldr	r2, [pc, #292]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000ea0:	6813      	ldr	r3, [r2, #0]
 8000ea2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ea6:	6921      	ldr	r1, [r4, #16]
 8000ea8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	e7dc      	b.n	8000e6a <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8000eb0:	4a44      	ldr	r2, [pc, #272]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000eb2:	6813      	ldr	r3, [r2, #0]
 8000eb4:	f023 0301 	bic.w	r3, r3, #1
 8000eb8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000eba:	f7ff fd8d 	bl	80009d8 <HAL_GetTick>
 8000ebe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ec0:	4b40      	ldr	r3, [pc, #256]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f013 0f02 	tst.w	r3, #2
 8000ec8:	d0cf      	beq.n	8000e6a <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eca:	f7ff fd85 	bl	80009d8 <HAL_GetTick>
 8000ece:	1b40      	subs	r0, r0, r5
 8000ed0:	2802      	cmp	r0, #2
 8000ed2:	d9f5      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	e12b      	b.n	8001130 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ed8:	4a3a      	ldr	r2, [pc, #232]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000eda:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000edc:	f023 0301 	bic.w	r3, r3, #1
 8000ee0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ee2:	f7ff fd79 	bl	80009d8 <HAL_GetTick>
 8000ee6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ee8:	4b36      	ldr	r3, [pc, #216]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000eec:	f013 0f02 	tst.w	r3, #2
 8000ef0:	d006      	beq.n	8000f00 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ef2:	f7ff fd71 	bl	80009d8 <HAL_GetTick>
 8000ef6:	1b40      	subs	r0, r0, r5
 8000ef8:	2802      	cmp	r0, #2
 8000efa:	d9f5      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8000efc:	2003      	movs	r0, #3
 8000efe:	e117      	b.n	8001130 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f00:	6823      	ldr	r3, [r4, #0]
 8000f02:	f013 0f04 	tst.w	r3, #4
 8000f06:	d07d      	beq.n	8001004 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f08:	4b2e      	ldr	r3, [pc, #184]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000f10:	d10b      	bne.n	8000f2a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f12:	4b2c      	ldr	r3, [pc, #176]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f16:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f1a:	641a      	str	r2, [r3, #64]	; 0x40
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f26:	2501      	movs	r5, #1
 8000f28:	e000      	b.n	8000f2c <HAL_RCC_OscConfig+0x21c>
  FlagStatus pwrclkchanged = RESET;
 8000f2a:	2500      	movs	r5, #0
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f2c:	4b26      	ldr	r3, [pc, #152]	; (8000fc8 <HAL_RCC_OscConfig+0x2b8>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000f34:	d00e      	beq.n	8000f54 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f36:	68a3      	ldr	r3, [r4, #8]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d01f      	beq.n	8000f7c <HAL_RCC_OscConfig+0x26c>
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d135      	bne.n	8000fac <HAL_RCC_OscConfig+0x29c>
 8000f40:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000f42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f44:	f022 0201 	bic.w	r2, r2, #1
 8000f48:	671a      	str	r2, [r3, #112]	; 0x70
 8000f4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f4c:	f022 0204 	bic.w	r2, r2, #4
 8000f50:	671a      	str	r2, [r3, #112]	; 0x70
 8000f52:	e018      	b.n	8000f86 <HAL_RCC_OscConfig+0x276>
      PWR->CR1 |= PWR_CR1_DBP;
 8000f54:	4a1c      	ldr	r2, [pc, #112]	; (8000fc8 <HAL_RCC_OscConfig+0x2b8>)
 8000f56:	6813      	ldr	r3, [r2, #0]
 8000f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000f5e:	f7ff fd3b 	bl	80009d8 <HAL_GetTick>
 8000f62:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f64:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <HAL_RCC_OscConfig+0x2b8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000f6c:	d1e3      	bne.n	8000f36 <HAL_RCC_OscConfig+0x226>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f6e:	f7ff fd33 	bl	80009d8 <HAL_GetTick>
 8000f72:	1b80      	subs	r0, r0, r6
 8000f74:	2864      	cmp	r0, #100	; 0x64
 8000f76:	d9f5      	bls.n	8000f64 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 8000f78:	2003      	movs	r0, #3
 8000f7a:	e0d9      	b.n	8001130 <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f7c:	4a11      	ldr	r2, [pc, #68]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000f7e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f86:	68a3      	ldr	r3, [r4, #8]
 8000f88:	b353      	cbz	r3, 8000fe0 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f8a:	f7ff fd25 	bl	80009d8 <HAL_GetTick>
 8000f8e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f94:	f013 0f02 	tst.w	r3, #2
 8000f98:	d133      	bne.n	8001002 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f9a:	f7ff fd1d 	bl	80009d8 <HAL_GetTick>
 8000f9e:	1b80      	subs	r0, r0, r6
 8000fa0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fa4:	4298      	cmp	r0, r3
 8000fa6:	d9f3      	bls.n	8000f90 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8000fa8:	2003      	movs	r0, #3
 8000faa:	e0c1      	b.n	8001130 <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fac:	2b05      	cmp	r3, #5
 8000fae:	d00d      	beq.n	8000fcc <HAL_RCC_OscConfig+0x2bc>
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000fb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000fb4:	f022 0201 	bic.w	r2, r2, #1
 8000fb8:	671a      	str	r2, [r3, #112]	; 0x70
 8000fba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000fbc:	f022 0204 	bic.w	r2, r2, #4
 8000fc0:	671a      	str	r2, [r3, #112]	; 0x70
 8000fc2:	e7e0      	b.n	8000f86 <HAL_RCC_OscConfig+0x276>
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40007000 	.word	0x40007000
 8000fcc:	4b60      	ldr	r3, [pc, #384]	; (8001150 <HAL_RCC_OscConfig+0x440>)
 8000fce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000fd0:	f042 0204 	orr.w	r2, r2, #4
 8000fd4:	671a      	str	r2, [r3, #112]	; 0x70
 8000fd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000fd8:	f042 0201 	orr.w	r2, r2, #1
 8000fdc:	671a      	str	r2, [r3, #112]	; 0x70
 8000fde:	e7d2      	b.n	8000f86 <HAL_RCC_OscConfig+0x276>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fe0:	f7ff fcfa 	bl	80009d8 <HAL_GetTick>
 8000fe4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fe6:	4b5a      	ldr	r3, [pc, #360]	; (8001150 <HAL_RCC_OscConfig+0x440>)
 8000fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fea:	f013 0f02 	tst.w	r3, #2
 8000fee:	d008      	beq.n	8001002 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ff0:	f7ff fcf2 	bl	80009d8 <HAL_GetTick>
 8000ff4:	1b80      	subs	r0, r0, r6
 8000ff6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ffa:	4298      	cmp	r0, r3
 8000ffc:	d9f3      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8000ffe:	2003      	movs	r0, #3
 8001000:	e096      	b.n	8001130 <HAL_RCC_OscConfig+0x420>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001002:	b9fd      	cbnz	r5, 8001044 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001004:	69a3      	ldr	r3, [r4, #24]
 8001006:	2b00      	cmp	r3, #0
 8001008:	f000 8091 	beq.w	800112e <HAL_RCC_OscConfig+0x41e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800100c:	4a50      	ldr	r2, [pc, #320]	; (8001150 <HAL_RCC_OscConfig+0x440>)
 800100e:	6892      	ldr	r2, [r2, #8]
 8001010:	f002 020c 	and.w	r2, r2, #12
 8001014:	2a08      	cmp	r2, #8
 8001016:	d059      	beq.n	80010cc <HAL_RCC_OscConfig+0x3bc>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001018:	2b02      	cmp	r3, #2
 800101a:	d019      	beq.n	8001050 <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800101c:	4a4c      	ldr	r2, [pc, #304]	; (8001150 <HAL_RCC_OscConfig+0x440>)
 800101e:	6813      	ldr	r3, [r2, #0]
 8001020:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001026:	f7ff fcd7 	bl	80009d8 <HAL_GetTick>
 800102a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800102c:	4b48      	ldr	r3, [pc, #288]	; (8001150 <HAL_RCC_OscConfig+0x440>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001034:	d048      	beq.n	80010c8 <HAL_RCC_OscConfig+0x3b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001036:	f7ff fccf 	bl	80009d8 <HAL_GetTick>
 800103a:	1b00      	subs	r0, r0, r4
 800103c:	2802      	cmp	r0, #2
 800103e:	d9f5      	bls.n	800102c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8001040:	2003      	movs	r0, #3
 8001042:	e075      	b.n	8001130 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001044:	4a42      	ldr	r2, [pc, #264]	; (8001150 <HAL_RCC_OscConfig+0x440>)
 8001046:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
 800104e:	e7d9      	b.n	8001004 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8001050:	4a3f      	ldr	r2, [pc, #252]	; (8001150 <HAL_RCC_OscConfig+0x440>)
 8001052:	6813      	ldr	r3, [r2, #0]
 8001054:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001058:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800105a:	f7ff fcbd 	bl	80009d8 <HAL_GetTick>
 800105e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001060:	4b3b      	ldr	r3, [pc, #236]	; (8001150 <HAL_RCC_OscConfig+0x440>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001068:	d006      	beq.n	8001078 <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800106a:	f7ff fcb5 	bl	80009d8 <HAL_GetTick>
 800106e:	1b40      	subs	r0, r0, r5
 8001070:	2802      	cmp	r0, #2
 8001072:	d9f5      	bls.n	8001060 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 8001074:	2003      	movs	r0, #3
 8001076:	e05b      	b.n	8001130 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001078:	69e3      	ldr	r3, [r4, #28]
 800107a:	6a22      	ldr	r2, [r4, #32]
 800107c:	4313      	orrs	r3, r2
 800107e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001080:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001084:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001086:	0852      	lsrs	r2, r2, #1
 8001088:	3a01      	subs	r2, #1
 800108a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800108e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001090:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001094:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001096:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800109a:	4a2d      	ldr	r2, [pc, #180]	; (8001150 <HAL_RCC_OscConfig+0x440>)
 800109c:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800109e:	6813      	ldr	r3, [r2, #0]
 80010a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010a4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80010a6:	f7ff fc97 	bl	80009d8 <HAL_GetTick>
 80010aa:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ac:	4b28      	ldr	r3, [pc, #160]	; (8001150 <HAL_RCC_OscConfig+0x440>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80010b4:	d106      	bne.n	80010c4 <HAL_RCC_OscConfig+0x3b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010b6:	f7ff fc8f 	bl	80009d8 <HAL_GetTick>
 80010ba:	1b00      	subs	r0, r0, r4
 80010bc:	2802      	cmp	r0, #2
 80010be:	d9f5      	bls.n	80010ac <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 80010c0:	2003      	movs	r0, #3
 80010c2:	e035      	b.n	8001130 <HAL_RCC_OscConfig+0x420>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80010c4:	2000      	movs	r0, #0
 80010c6:	e033      	b.n	8001130 <HAL_RCC_OscConfig+0x420>
 80010c8:	2000      	movs	r0, #0
 80010ca:	e031      	b.n	8001130 <HAL_RCC_OscConfig+0x420>
      pll_config = RCC->PLLCFGR;
 80010cc:	4a20      	ldr	r2, [pc, #128]	; (8001150 <HAL_RCC_OscConfig+0x440>)
 80010ce:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d02f      	beq.n	8001134 <HAL_RCC_OscConfig+0x424>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010d4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80010d8:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010da:	428b      	cmp	r3, r1
 80010dc:	d12c      	bne.n	8001138 <HAL_RCC_OscConfig+0x428>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80010de:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 80010e2:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010e4:	428b      	cmp	r3, r1
 80010e6:	d129      	bne.n	800113c <HAL_RCC_OscConfig+0x42c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80010e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80010ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010ee:	4013      	ands	r3, r2
 80010f0:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 80010f4:	d124      	bne.n	8001140 <HAL_RCC_OscConfig+0x430>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80010f6:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 80010fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010fc:	085b      	lsrs	r3, r3, #1
 80010fe:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001100:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8001104:	d11e      	bne.n	8001144 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001106:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 800110a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800110c:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 8001110:	d11a      	bne.n	8001148 <HAL_RCC_OscConfig+0x438>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001112:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001116:	6b23      	ldr	r3, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001118:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 800111c:	d116      	bne.n	800114c <HAL_RCC_OscConfig+0x43c>
  return HAL_OK;
 800111e:	2000      	movs	r0, #0
 8001120:	e006      	b.n	8001130 <HAL_RCC_OscConfig+0x420>
    return HAL_ERROR;
 8001122:	2001      	movs	r0, #1
}
 8001124:	4770      	bx	lr
        return HAL_ERROR;
 8001126:	2001      	movs	r0, #1
 8001128:	e002      	b.n	8001130 <HAL_RCC_OscConfig+0x420>
        return HAL_ERROR;
 800112a:	2001      	movs	r0, #1
 800112c:	e000      	b.n	8001130 <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 800112e:	2000      	movs	r0, #0
}
 8001130:	b002      	add	sp, #8
 8001132:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001134:	2001      	movs	r0, #1
 8001136:	e7fb      	b.n	8001130 <HAL_RCC_OscConfig+0x420>
 8001138:	2001      	movs	r0, #1
 800113a:	e7f9      	b.n	8001130 <HAL_RCC_OscConfig+0x420>
 800113c:	2001      	movs	r0, #1
 800113e:	e7f7      	b.n	8001130 <HAL_RCC_OscConfig+0x420>
 8001140:	2001      	movs	r0, #1
 8001142:	e7f5      	b.n	8001130 <HAL_RCC_OscConfig+0x420>
 8001144:	2001      	movs	r0, #1
 8001146:	e7f3      	b.n	8001130 <HAL_RCC_OscConfig+0x420>
 8001148:	2001      	movs	r0, #1
 800114a:	e7f1      	b.n	8001130 <HAL_RCC_OscConfig+0x420>
 800114c:	2001      	movs	r0, #1
 800114e:	e7ef      	b.n	8001130 <HAL_RCC_OscConfig+0x420>
 8001150:	40023800 	.word	0x40023800

08001154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001156:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 030c 	and.w	r3, r3, #12
 800115e:	2b04      	cmp	r3, #4
 8001160:	d03d      	beq.n	80011de <HAL_RCC_GetSysClockFreq+0x8a>
 8001162:	2b08      	cmp	r3, #8
 8001164:	d13d      	bne.n	80011e2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001166:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001174:	d012      	beq.n	800119c <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001178:	6859      	ldr	r1, [r3, #4]
 800117a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800117e:	2300      	movs	r3, #0
 8001180:	481a      	ldr	r0, [pc, #104]	; (80011ec <HAL_RCC_GetSysClockFreq+0x98>)
 8001182:	fba1 0100 	umull	r0, r1, r1, r0
 8001186:	f7ff f8b3 	bl	80002f0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800118a:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <HAL_RCC_GetSysClockFreq+0x94>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001192:	3301      	adds	r3, #1
 8001194:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001196:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800119a:	e023      	b.n	80011e4 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_RCC_GetSysClockFreq+0x94>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80011a4:	015c      	lsls	r4, r3, #5
 80011a6:	2500      	movs	r5, #0
 80011a8:	1ae4      	subs	r4, r4, r3
 80011aa:	f165 0500 	sbc.w	r5, r5, #0
 80011ae:	01ae      	lsls	r6, r5, #6
 80011b0:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 80011b4:	01a7      	lsls	r7, r4, #6
 80011b6:	1b38      	subs	r0, r7, r4
 80011b8:	eb66 0105 	sbc.w	r1, r6, r5
 80011bc:	00cc      	lsls	r4, r1, #3
 80011be:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 80011c2:	00c5      	lsls	r5, r0, #3
 80011c4:	18e8      	adds	r0, r5, r3
 80011c6:	f144 0100 	adc.w	r1, r4, #0
 80011ca:	028b      	lsls	r3, r1, #10
 80011cc:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80011d0:	0284      	lsls	r4, r0, #10
 80011d2:	4620      	mov	r0, r4
 80011d4:	4619      	mov	r1, r3
 80011d6:	2300      	movs	r3, #0
 80011d8:	f7ff f88a 	bl	80002f0 <__aeabi_uldivmod>
 80011dc:	e7d5      	b.n	800118a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 80011de:	4803      	ldr	r0, [pc, #12]	; (80011ec <HAL_RCC_GetSysClockFreq+0x98>)
 80011e0:	e000      	b.n	80011e4 <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011e2:	4803      	ldr	r0, [pc, #12]	; (80011f0 <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80011e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800
 80011ec:	017d7840 	.word	0x017d7840
 80011f0:	00f42400 	.word	0x00f42400

080011f4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80011f4:	2800      	cmp	r0, #0
 80011f6:	f000 80a0 	beq.w	800133a <HAL_RCC_ClockConfig+0x146>
{
 80011fa:	b570      	push	{r4, r5, r6, lr}
 80011fc:	460d      	mov	r5, r1
 80011fe:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001200:	4b52      	ldr	r3, [pc, #328]	; (800134c <HAL_RCC_ClockConfig+0x158>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 030f 	and.w	r3, r3, #15
 8001208:	428b      	cmp	r3, r1
 800120a:	d20b      	bcs.n	8001224 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800120c:	4a4f      	ldr	r2, [pc, #316]	; (800134c <HAL_RCC_ClockConfig+0x158>)
 800120e:	6813      	ldr	r3, [r2, #0]
 8001210:	f023 030f 	bic.w	r3, r3, #15
 8001214:	430b      	orrs	r3, r1
 8001216:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001218:	6813      	ldr	r3, [r2, #0]
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	428b      	cmp	r3, r1
 8001220:	f040 808d 	bne.w	800133e <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001224:	6823      	ldr	r3, [r4, #0]
 8001226:	f013 0f02 	tst.w	r3, #2
 800122a:	d017      	beq.n	800125c <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800122c:	f013 0f04 	tst.w	r3, #4
 8001230:	d004      	beq.n	800123c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001232:	4a47      	ldr	r2, [pc, #284]	; (8001350 <HAL_RCC_ClockConfig+0x15c>)
 8001234:	6893      	ldr	r3, [r2, #8]
 8001236:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800123a:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800123c:	6823      	ldr	r3, [r4, #0]
 800123e:	f013 0f08 	tst.w	r3, #8
 8001242:	d004      	beq.n	800124e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001244:	4a42      	ldr	r2, [pc, #264]	; (8001350 <HAL_RCC_ClockConfig+0x15c>)
 8001246:	6893      	ldr	r3, [r2, #8]
 8001248:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800124c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800124e:	4a40      	ldr	r2, [pc, #256]	; (8001350 <HAL_RCC_ClockConfig+0x15c>)
 8001250:	6893      	ldr	r3, [r2, #8]
 8001252:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001256:	68a1      	ldr	r1, [r4, #8]
 8001258:	430b      	orrs	r3, r1
 800125a:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800125c:	6823      	ldr	r3, [r4, #0]
 800125e:	f013 0f01 	tst.w	r3, #1
 8001262:	d031      	beq.n	80012c8 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001264:	6863      	ldr	r3, [r4, #4]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d020      	beq.n	80012ac <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800126a:	2b02      	cmp	r3, #2
 800126c:	d025      	beq.n	80012ba <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126e:	4a38      	ldr	r2, [pc, #224]	; (8001350 <HAL_RCC_ClockConfig+0x15c>)
 8001270:	6812      	ldr	r2, [r2, #0]
 8001272:	f012 0f02 	tst.w	r2, #2
 8001276:	d064      	beq.n	8001342 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001278:	4935      	ldr	r1, [pc, #212]	; (8001350 <HAL_RCC_ClockConfig+0x15c>)
 800127a:	688a      	ldr	r2, [r1, #8]
 800127c:	f022 0203 	bic.w	r2, r2, #3
 8001280:	4313      	orrs	r3, r2
 8001282:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001284:	f7ff fba8 	bl	80009d8 <HAL_GetTick>
 8001288:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800128a:	4b31      	ldr	r3, [pc, #196]	; (8001350 <HAL_RCC_ClockConfig+0x15c>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	6862      	ldr	r2, [r4, #4]
 8001294:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001298:	d016      	beq.n	80012c8 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800129a:	f7ff fb9d 	bl	80009d8 <HAL_GetTick>
 800129e:	1b80      	subs	r0, r0, r6
 80012a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80012a4:	4298      	cmp	r0, r3
 80012a6:	d9f0      	bls.n	800128a <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80012a8:	2003      	movs	r0, #3
 80012aa:	e045      	b.n	8001338 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ac:	4a28      	ldr	r2, [pc, #160]	; (8001350 <HAL_RCC_ClockConfig+0x15c>)
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80012b4:	d1e0      	bne.n	8001278 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80012b6:	2001      	movs	r0, #1
 80012b8:	e03e      	b.n	8001338 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ba:	4a25      	ldr	r2, [pc, #148]	; (8001350 <HAL_RCC_ClockConfig+0x15c>)
 80012bc:	6812      	ldr	r2, [r2, #0]
 80012be:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80012c2:	d1d9      	bne.n	8001278 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80012c4:	2001      	movs	r0, #1
 80012c6:	e037      	b.n	8001338 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012c8:	4b20      	ldr	r3, [pc, #128]	; (800134c <HAL_RCC_ClockConfig+0x158>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 030f 	and.w	r3, r3, #15
 80012d0:	42ab      	cmp	r3, r5
 80012d2:	d90a      	bls.n	80012ea <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012d4:	4a1d      	ldr	r2, [pc, #116]	; (800134c <HAL_RCC_ClockConfig+0x158>)
 80012d6:	6813      	ldr	r3, [r2, #0]
 80012d8:	f023 030f 	bic.w	r3, r3, #15
 80012dc:	432b      	orrs	r3, r5
 80012de:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012e0:	6813      	ldr	r3, [r2, #0]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	42ab      	cmp	r3, r5
 80012e8:	d12d      	bne.n	8001346 <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ea:	6823      	ldr	r3, [r4, #0]
 80012ec:	f013 0f04 	tst.w	r3, #4
 80012f0:	d006      	beq.n	8001300 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012f2:	4a17      	ldr	r2, [pc, #92]	; (8001350 <HAL_RCC_ClockConfig+0x15c>)
 80012f4:	6893      	ldr	r3, [r2, #8]
 80012f6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80012fa:	68e1      	ldr	r1, [r4, #12]
 80012fc:	430b      	orrs	r3, r1
 80012fe:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001300:	6823      	ldr	r3, [r4, #0]
 8001302:	f013 0f08 	tst.w	r3, #8
 8001306:	d007      	beq.n	8001318 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001308:	4a11      	ldr	r2, [pc, #68]	; (8001350 <HAL_RCC_ClockConfig+0x15c>)
 800130a:	6893      	ldr	r3, [r2, #8]
 800130c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001310:	6921      	ldr	r1, [r4, #16]
 8001312:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001316:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001318:	f7ff ff1c 	bl	8001154 <HAL_RCC_GetSysClockFreq>
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <HAL_RCC_ClockConfig+0x15c>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001324:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <HAL_RCC_ClockConfig+0x160>)
 8001326:	5cd3      	ldrb	r3, [r2, r3]
 8001328:	40d8      	lsrs	r0, r3
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_RCC_ClockConfig+0x164>)
 800132c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <HAL_RCC_ClockConfig+0x168>)
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	f7ff fb0b 	bl	800094c <HAL_InitTick>
  return HAL_OK;
 8001336:	2000      	movs	r0, #0
}
 8001338:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800133a:	2001      	movs	r0, #1
}
 800133c:	4770      	bx	lr
      return HAL_ERROR;
 800133e:	2001      	movs	r0, #1
 8001340:	e7fa      	b.n	8001338 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8001342:	2001      	movs	r0, #1
 8001344:	e7f8      	b.n	8001338 <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 8001346:	2001      	movs	r0, #1
 8001348:	e7f6      	b.n	8001338 <HAL_RCC_ClockConfig+0x144>
 800134a:	bf00      	nop
 800134c:	40023c00 	.word	0x40023c00
 8001350:	40023800 	.word	0x40023800
 8001354:	08004860 	.word	0x08004860
 8001358:	20000000 	.word	0x20000000
 800135c:	20000008 	.word	0x20000008

08001360 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001360:	4b01      	ldr	r3, [pc, #4]	; (8001368 <HAL_RCC_GetHCLKFreq+0x8>)
 8001362:	6818      	ldr	r0, [r3, #0]
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20000000 	.word	0x20000000

0800136c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800136c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800136e:	f7ff fff7 	bl	8001360 <HAL_RCC_GetHCLKFreq>
 8001372:	4b04      	ldr	r3, [pc, #16]	; (8001384 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800137a:	4a03      	ldr	r2, [pc, #12]	; (8001388 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800137c:	5cd3      	ldrb	r3, [r2, r3]
}
 800137e:	40d8      	lsrs	r0, r3
 8001380:	bd08      	pop	{r3, pc}
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800
 8001388:	08004870 	.word	0x08004870

0800138c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800138c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800138e:	f7ff ffe7 	bl	8001360 <HAL_RCC_GetHCLKFreq>
 8001392:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800139a:	4a03      	ldr	r2, [pc, #12]	; (80013a8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800139c:	5cd3      	ldrb	r3, [r2, r3]
}
 800139e:	40d8      	lsrs	r0, r3
 80013a0:	bd08      	pop	{r3, pc}
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800
 80013a8:	08004870 	.word	0x08004870

080013ac <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80013ac:	4770      	bx	lr
	...

080013b0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80013b0:	6802      	ldr	r2, [r0, #0]
 80013b2:	68d3      	ldr	r3, [r2, #12]
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80013ba:	6802      	ldr	r2, [r0, #0]
 80013bc:	6891      	ldr	r1, [r2, #8]
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_TIM_Base_Start_IT+0x28>)
 80013c0:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80013c2:	2b06      	cmp	r3, #6
 80013c4:	bf18      	it	ne
 80013c6:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 80013ca:	d003      	beq.n	80013d4 <HAL_TIM_Base_Start_IT+0x24>
  {
    __HAL_TIM_ENABLE(htim);
 80013cc:	6813      	ldr	r3, [r2, #0]
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6013      	str	r3, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80013d4:	2000      	movs	r0, #0
 80013d6:	4770      	bx	lr
 80013d8:	00010007 	.word	0x00010007

080013dc <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80013dc:	4770      	bx	lr

080013de <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80013de:	4770      	bx	lr

080013e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80013e0:	4770      	bx	lr

080013e2 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80013e2:	4770      	bx	lr

080013e4 <HAL_TIM_IRQHandler>:
{
 80013e4:	b510      	push	{r4, lr}
 80013e6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013e8:	6803      	ldr	r3, [r0, #0]
 80013ea:	691a      	ldr	r2, [r3, #16]
 80013ec:	f012 0f02 	tst.w	r2, #2
 80013f0:	d011      	beq.n	8001416 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	f012 0f02 	tst.w	r2, #2
 80013f8:	d00d      	beq.n	8001416 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80013fa:	f06f 0202 	mvn.w	r2, #2
 80013fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001400:	2301      	movs	r3, #1
 8001402:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001404:	6803      	ldr	r3, [r0, #0]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f013 0f03 	tst.w	r3, #3
 800140c:	d079      	beq.n	8001502 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800140e:	f7ff ffe6 	bl	80013de <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001412:	2300      	movs	r3, #0
 8001414:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001416:	6823      	ldr	r3, [r4, #0]
 8001418:	691a      	ldr	r2, [r3, #16]
 800141a:	f012 0f04 	tst.w	r2, #4
 800141e:	d012      	beq.n	8001446 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001420:	68da      	ldr	r2, [r3, #12]
 8001422:	f012 0f04 	tst.w	r2, #4
 8001426:	d00e      	beq.n	8001446 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001428:	f06f 0204 	mvn.w	r2, #4
 800142c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800142e:	2302      	movs	r3, #2
 8001430:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001432:	6823      	ldr	r3, [r4, #0]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	f413 7f40 	tst.w	r3, #768	; 0x300
 800143a:	d068      	beq.n	800150e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800143c:	4620      	mov	r0, r4
 800143e:	f7ff ffce 	bl	80013de <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001442:	2300      	movs	r3, #0
 8001444:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001446:	6823      	ldr	r3, [r4, #0]
 8001448:	691a      	ldr	r2, [r3, #16]
 800144a:	f012 0f08 	tst.w	r2, #8
 800144e:	d012      	beq.n	8001476 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001450:	68da      	ldr	r2, [r3, #12]
 8001452:	f012 0f08 	tst.w	r2, #8
 8001456:	d00e      	beq.n	8001476 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001458:	f06f 0208 	mvn.w	r2, #8
 800145c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800145e:	2304      	movs	r3, #4
 8001460:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001462:	6823      	ldr	r3, [r4, #0]
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	f013 0f03 	tst.w	r3, #3
 800146a:	d057      	beq.n	800151c <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800146c:	4620      	mov	r0, r4
 800146e:	f7ff ffb6 	bl	80013de <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001472:	2300      	movs	r3, #0
 8001474:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001476:	6823      	ldr	r3, [r4, #0]
 8001478:	691a      	ldr	r2, [r3, #16]
 800147a:	f012 0f10 	tst.w	r2, #16
 800147e:	d012      	beq.n	80014a6 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001480:	68da      	ldr	r2, [r3, #12]
 8001482:	f012 0f10 	tst.w	r2, #16
 8001486:	d00e      	beq.n	80014a6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001488:	f06f 0210 	mvn.w	r2, #16
 800148c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800148e:	2308      	movs	r3, #8
 8001490:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001492:	6823      	ldr	r3, [r4, #0]
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	f413 7f40 	tst.w	r3, #768	; 0x300
 800149a:	d046      	beq.n	800152a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800149c:	4620      	mov	r0, r4
 800149e:	f7ff ff9e 	bl	80013de <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014a2:	2300      	movs	r3, #0
 80014a4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80014a6:	6823      	ldr	r3, [r4, #0]
 80014a8:	691a      	ldr	r2, [r3, #16]
 80014aa:	f012 0f01 	tst.w	r2, #1
 80014ae:	d003      	beq.n	80014b8 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80014b0:	68da      	ldr	r2, [r3, #12]
 80014b2:	f012 0f01 	tst.w	r2, #1
 80014b6:	d13f      	bne.n	8001538 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80014b8:	6823      	ldr	r3, [r4, #0]
 80014ba:	691a      	ldr	r2, [r3, #16]
 80014bc:	f012 0f80 	tst.w	r2, #128	; 0x80
 80014c0:	d003      	beq.n	80014ca <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80014c8:	d13d      	bne.n	8001546 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80014ca:	6823      	ldr	r3, [r4, #0]
 80014cc:	691a      	ldr	r2, [r3, #16]
 80014ce:	f412 7f80 	tst.w	r2, #256	; 0x100
 80014d2:	d003      	beq.n	80014dc <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80014d4:	68da      	ldr	r2, [r3, #12]
 80014d6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80014da:	d13b      	bne.n	8001554 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80014dc:	6823      	ldr	r3, [r4, #0]
 80014de:	691a      	ldr	r2, [r3, #16]
 80014e0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80014e4:	d003      	beq.n	80014ee <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80014e6:	68da      	ldr	r2, [r3, #12]
 80014e8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80014ec:	d139      	bne.n	8001562 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80014ee:	6823      	ldr	r3, [r4, #0]
 80014f0:	691a      	ldr	r2, [r3, #16]
 80014f2:	f012 0f20 	tst.w	r2, #32
 80014f6:	d003      	beq.n	8001500 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80014f8:	68da      	ldr	r2, [r3, #12]
 80014fa:	f012 0f20 	tst.w	r2, #32
 80014fe:	d137      	bne.n	8001570 <HAL_TIM_IRQHandler+0x18c>
}
 8001500:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001502:	f7ff ff6b 	bl	80013dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001506:	4620      	mov	r0, r4
 8001508:	f7ff ff6a 	bl	80013e0 <HAL_TIM_PWM_PulseFinishedCallback>
 800150c:	e781      	b.n	8001412 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800150e:	4620      	mov	r0, r4
 8001510:	f7ff ff64 	bl	80013dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001514:	4620      	mov	r0, r4
 8001516:	f7ff ff63 	bl	80013e0 <HAL_TIM_PWM_PulseFinishedCallback>
 800151a:	e792      	b.n	8001442 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800151c:	4620      	mov	r0, r4
 800151e:	f7ff ff5d 	bl	80013dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001522:	4620      	mov	r0, r4
 8001524:	f7ff ff5c 	bl	80013e0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001528:	e7a3      	b.n	8001472 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800152a:	4620      	mov	r0, r4
 800152c:	f7ff ff56 	bl	80013dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001530:	4620      	mov	r0, r4
 8001532:	f7ff ff55 	bl	80013e0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001536:	e7b4      	b.n	80014a2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001538:	f06f 0201 	mvn.w	r2, #1
 800153c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800153e:	4620      	mov	r0, r4
 8001540:	f7ff f89e 	bl	8000680 <HAL_TIM_PeriodElapsedCallback>
 8001544:	e7b8      	b.n	80014b8 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001546:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800154a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800154c:	4620      	mov	r0, r4
 800154e:	f7ff f8a5 	bl	800069c <HAL_TIMEx_BreakCallback>
 8001552:	e7ba      	b.n	80014ca <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001554:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001558:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800155a:	4620      	mov	r0, r4
 800155c:	f000 f8b0 	bl	80016c0 <HAL_TIMEx_Break2Callback>
 8001560:	e7bc      	b.n	80014dc <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001562:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001566:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001568:	4620      	mov	r0, r4
 800156a:	f7ff ff3a 	bl	80013e2 <HAL_TIM_TriggerCallback>
 800156e:	e7be      	b.n	80014ee <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001570:	f06f 0220 	mvn.w	r2, #32
 8001574:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001576:	4620      	mov	r0, r4
 8001578:	f7ff f891 	bl	800069e <HAL_TIMEx_CommutCallback>
}
 800157c:	e7c0      	b.n	8001500 <HAL_TIM_IRQHandler+0x11c>
	...

08001580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001580:	b470      	push	{r4, r5, r6}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001582:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001584:	4c3a      	ldr	r4, [pc, #232]	; (8001670 <TIM_Base_SetConfig+0xf0>)
 8001586:	42a0      	cmp	r0, r4
 8001588:	bf14      	ite	ne
 800158a:	2400      	movne	r4, #0
 800158c:	2401      	moveq	r4, #1
 800158e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001592:	bf14      	ite	ne
 8001594:	4622      	movne	r2, r4
 8001596:	f044 0201 	orreq.w	r2, r4, #1
 800159a:	b9aa      	cbnz	r2, 80015c8 <TIM_Base_SetConfig+0x48>
 800159c:	4d35      	ldr	r5, [pc, #212]	; (8001674 <TIM_Base_SetConfig+0xf4>)
 800159e:	42a8      	cmp	r0, r5
 80015a0:	bf14      	ite	ne
 80015a2:	2500      	movne	r5, #0
 80015a4:	2501      	moveq	r5, #1
 80015a6:	4e34      	ldr	r6, [pc, #208]	; (8001678 <TIM_Base_SetConfig+0xf8>)
 80015a8:	42b0      	cmp	r0, r6
 80015aa:	d00d      	beq.n	80015c8 <TIM_Base_SetConfig+0x48>
 80015ac:	b965      	cbnz	r5, 80015c8 <TIM_Base_SetConfig+0x48>
 80015ae:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80015b2:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 80015b6:	42a8      	cmp	r0, r5
 80015b8:	bf14      	ite	ne
 80015ba:	2500      	movne	r5, #0
 80015bc:	2501      	moveq	r5, #1
 80015be:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80015c2:	42b0      	cmp	r0, r6
 80015c4:	d000      	beq.n	80015c8 <TIM_Base_SetConfig+0x48>
 80015c6:	b11d      	cbz	r5, 80015d0 <TIM_Base_SetConfig+0x50>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80015c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80015cc:	684d      	ldr	r5, [r1, #4]
 80015ce:	432b      	orrs	r3, r5
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80015d0:	2a00      	cmp	r2, #0
 80015d2:	d133      	bne.n	800163c <TIM_Base_SetConfig+0xbc>
 80015d4:	4a27      	ldr	r2, [pc, #156]	; (8001674 <TIM_Base_SetConfig+0xf4>)
 80015d6:	4290      	cmp	r0, r2
 80015d8:	bf14      	ite	ne
 80015da:	2200      	movne	r2, #0
 80015dc:	2201      	moveq	r2, #1
 80015de:	4d26      	ldr	r5, [pc, #152]	; (8001678 <TIM_Base_SetConfig+0xf8>)
 80015e0:	42a8      	cmp	r0, r5
 80015e2:	d02b      	beq.n	800163c <TIM_Base_SetConfig+0xbc>
 80015e4:	bb52      	cbnz	r2, 800163c <TIM_Base_SetConfig+0xbc>
 80015e6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80015ea:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 80015ee:	4290      	cmp	r0, r2
 80015f0:	bf14      	ite	ne
 80015f2:	2200      	movne	r2, #0
 80015f4:	2201      	moveq	r2, #1
 80015f6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80015fa:	42a8      	cmp	r0, r5
 80015fc:	d01e      	beq.n	800163c <TIM_Base_SetConfig+0xbc>
 80015fe:	b9ea      	cbnz	r2, 800163c <TIM_Base_SetConfig+0xbc>
 8001600:	4a1e      	ldr	r2, [pc, #120]	; (800167c <TIM_Base_SetConfig+0xfc>)
 8001602:	4290      	cmp	r0, r2
 8001604:	bf14      	ite	ne
 8001606:	2200      	movne	r2, #0
 8001608:	2201      	moveq	r2, #1
 800160a:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 800160e:	42a8      	cmp	r0, r5
 8001610:	d014      	beq.n	800163c <TIM_Base_SetConfig+0xbc>
 8001612:	b99a      	cbnz	r2, 800163c <TIM_Base_SetConfig+0xbc>
 8001614:	4a1a      	ldr	r2, [pc, #104]	; (8001680 <TIM_Base_SetConfig+0x100>)
 8001616:	4290      	cmp	r0, r2
 8001618:	bf14      	ite	ne
 800161a:	2200      	movne	r2, #0
 800161c:	2201      	moveq	r2, #1
 800161e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001622:	42a8      	cmp	r0, r5
 8001624:	d00a      	beq.n	800163c <TIM_Base_SetConfig+0xbc>
 8001626:	b94a      	cbnz	r2, 800163c <TIM_Base_SetConfig+0xbc>
 8001628:	4a16      	ldr	r2, [pc, #88]	; (8001684 <TIM_Base_SetConfig+0x104>)
 800162a:	4290      	cmp	r0, r2
 800162c:	bf14      	ite	ne
 800162e:	2200      	movne	r2, #0
 8001630:	2201      	moveq	r2, #1
 8001632:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 8001636:	42a8      	cmp	r0, r5
 8001638:	d000      	beq.n	800163c <TIM_Base_SetConfig+0xbc>
 800163a:	b11a      	cbz	r2, 8001644 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800163c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001640:	68ca      	ldr	r2, [r1, #12]
 8001642:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001648:	694a      	ldr	r2, [r1, #20]
 800164a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800164c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800164e:	688a      	ldr	r2, [r1, #8]
 8001650:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001652:	680a      	ldr	r2, [r1, #0]
 8001654:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <TIM_Base_SetConfig+0x108>)
 8001658:	4298      	cmp	r0, r3
 800165a:	bf14      	ite	ne
 800165c:	4623      	movne	r3, r4
 800165e:	f044 0301 	orreq.w	r3, r4, #1
 8001662:	b10b      	cbz	r3, 8001668 <TIM_Base_SetConfig+0xe8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001664:	690b      	ldr	r3, [r1, #16]
 8001666:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001668:	2301      	movs	r3, #1
 800166a:	6143      	str	r3, [r0, #20]
}
 800166c:	bc70      	pop	{r4, r5, r6}
 800166e:	4770      	bx	lr
 8001670:	40010000 	.word	0x40010000
 8001674:	40000800 	.word	0x40000800
 8001678:	40000400 	.word	0x40000400
 800167c:	40014400 	.word	0x40014400
 8001680:	40001800 	.word	0x40001800
 8001684:	40002000 	.word	0x40002000
 8001688:	40010400 	.word	0x40010400

0800168c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800168c:	b1b0      	cbz	r0, 80016bc <HAL_TIM_Base_Init+0x30>
{
 800168e:	b510      	push	{r4, lr}
 8001690:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001692:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001696:	b163      	cbz	r3, 80016b2 <HAL_TIM_Base_Init+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 8001698:	2302      	movs	r3, #2
 800169a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800169e:	4621      	mov	r1, r4
 80016a0:	f851 0b04 	ldr.w	r0, [r1], #4
 80016a4:	f7ff ff6c 	bl	8001580 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80016a8:	2301      	movs	r3, #1
 80016aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80016ae:	2000      	movs	r0, #0
}
 80016b0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80016b2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80016b6:	f7ff fe79 	bl	80013ac <HAL_TIM_Base_MspInit>
 80016ba:	e7ed      	b.n	8001698 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80016bc:	2001      	movs	r0, #1
}
 80016be:	4770      	bx	lr

080016c0 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80016c0:	4770      	bx	lr
	...

080016c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80016c4:	b538      	push	{r3, r4, r5, lr}
 80016c6:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80016c8:	6883      	ldr	r3, [r0, #8]
 80016ca:	6902      	ldr	r2, [r0, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	6942      	ldr	r2, [r0, #20]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	69c2      	ldr	r2, [r0, #28]
 80016d4:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80016d6:	6801      	ldr	r1, [r0, #0]
 80016d8:	6808      	ldr	r0, [r1, #0]
 80016da:	4a9f      	ldr	r2, [pc, #636]	; (8001958 <UART_SetConfig+0x294>)
 80016dc:	4002      	ands	r2, r0
 80016de:	4313      	orrs	r3, r2
 80016e0:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016e2:	6822      	ldr	r2, [r4, #0]
 80016e4:	6853      	ldr	r3, [r2, #4]
 80016e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016ea:	68e1      	ldr	r1, [r4, #12]
 80016ec:	430b      	orrs	r3, r1
 80016ee:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80016f0:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 80016f2:	6a23      	ldr	r3, [r4, #32]
 80016f4:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80016f6:	6821      	ldr	r1, [r4, #0]
 80016f8:	688b      	ldr	r3, [r1, #8]
 80016fa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80016fe:	4313      	orrs	r3, r2
 8001700:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001702:	6823      	ldr	r3, [r4, #0]
 8001704:	4a95      	ldr	r2, [pc, #596]	; (800195c <UART_SetConfig+0x298>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d019      	beq.n	800173e <UART_SetConfig+0x7a>
 800170a:	4a95      	ldr	r2, [pc, #596]	; (8001960 <UART_SetConfig+0x29c>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d029      	beq.n	8001764 <UART_SetConfig+0xa0>
 8001710:	4a94      	ldr	r2, [pc, #592]	; (8001964 <UART_SetConfig+0x2a0>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d03e      	beq.n	8001794 <UART_SetConfig+0xd0>
 8001716:	4a94      	ldr	r2, [pc, #592]	; (8001968 <UART_SetConfig+0x2a4>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d062      	beq.n	80017e2 <UART_SetConfig+0x11e>
 800171c:	4a93      	ldr	r2, [pc, #588]	; (800196c <UART_SetConfig+0x2a8>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d071      	beq.n	8001806 <UART_SetConfig+0x142>
 8001722:	4a93      	ldr	r2, [pc, #588]	; (8001970 <UART_SetConfig+0x2ac>)
 8001724:	4293      	cmp	r3, r2
 8001726:	f000 8083 	beq.w	8001830 <UART_SetConfig+0x16c>
 800172a:	4a92      	ldr	r2, [pc, #584]	; (8001974 <UART_SetConfig+0x2b0>)
 800172c:	4293      	cmp	r3, r2
 800172e:	f000 8094 	beq.w	800185a <UART_SetConfig+0x196>
 8001732:	4a91      	ldr	r2, [pc, #580]	; (8001978 <UART_SetConfig+0x2b4>)
 8001734:	4293      	cmp	r3, r2
 8001736:	f000 80a5 	beq.w	8001884 <UART_SetConfig+0x1c0>
 800173a:	2510      	movs	r5, #16
 800173c:	e03a      	b.n	80017b4 <UART_SetConfig+0xf0>
 800173e:	4b8f      	ldr	r3, [pc, #572]	; (800197c <UART_SetConfig+0x2b8>)
 8001740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	2b03      	cmp	r3, #3
 800174a:	d809      	bhi.n	8001760 <UART_SetConfig+0x9c>
 800174c:	e8df f003 	tbb	[pc, r3]
 8001750:	06ae0402 	.word	0x06ae0402
 8001754:	2501      	movs	r5, #1
 8001756:	e02d      	b.n	80017b4 <UART_SetConfig+0xf0>
 8001758:	2504      	movs	r5, #4
 800175a:	e02b      	b.n	80017b4 <UART_SetConfig+0xf0>
 800175c:	2508      	movs	r5, #8
 800175e:	e029      	b.n	80017b4 <UART_SetConfig+0xf0>
 8001760:	2510      	movs	r5, #16
 8001762:	e027      	b.n	80017b4 <UART_SetConfig+0xf0>
 8001764:	4b85      	ldr	r3, [pc, #532]	; (800197c <UART_SetConfig+0x2b8>)
 8001766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	2b0c      	cmp	r3, #12
 8001770:	d80e      	bhi.n	8001790 <UART_SetConfig+0xcc>
 8001772:	e8df f003 	tbb	[pc, r3]
 8001776:	0d07      	.short	0x0d07
 8001778:	0d090d0d 	.word	0x0d090d0d
 800177c:	0d9d0d0d 	.word	0x0d9d0d0d
 8001780:	0d0d      	.short	0x0d0d
 8001782:	0b          	.byte	0x0b
 8001783:	00          	.byte	0x00
 8001784:	2500      	movs	r5, #0
 8001786:	e015      	b.n	80017b4 <UART_SetConfig+0xf0>
 8001788:	2504      	movs	r5, #4
 800178a:	e013      	b.n	80017b4 <UART_SetConfig+0xf0>
 800178c:	2508      	movs	r5, #8
 800178e:	e011      	b.n	80017b4 <UART_SetConfig+0xf0>
 8001790:	2510      	movs	r5, #16
 8001792:	e00f      	b.n	80017b4 <UART_SetConfig+0xf0>
 8001794:	4b79      	ldr	r3, [pc, #484]	; (800197c <UART_SetConfig+0x2b8>)
 8001796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800179e:	2b20      	cmp	r3, #32
 80017a0:	f000 8088 	beq.w	80018b4 <UART_SetConfig+0x1f0>
 80017a4:	d819      	bhi.n	80017da <UART_SetConfig+0x116>
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 8086 	beq.w	80018b8 <UART_SetConfig+0x1f4>
 80017ac:	2b10      	cmp	r3, #16
 80017ae:	f040 8085 	bne.w	80018bc <UART_SetConfig+0x1f8>
 80017b2:	2504      	movs	r5, #4

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017b4:	69e3      	ldr	r3, [r4, #28]
 80017b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017ba:	f000 80ab 	beq.w	8001914 <UART_SetConfig+0x250>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 80017be:	2d08      	cmp	r5, #8
 80017c0:	f200 8140 	bhi.w	8001a44 <UART_SetConfig+0x380>
 80017c4:	e8df f015 	tbh	[pc, r5, lsl #1]
 80017c8:	01180107 	.word	0x01180107
 80017cc:	013e0122 	.word	0x013e0122
 80017d0:	013e012b 	.word	0x013e012b
 80017d4:	013e013e 	.word	0x013e013e
 80017d8:	0135      	.short	0x0135
  UART_GETCLOCKSOURCE(huart, clocksource);
 80017da:	2b30      	cmp	r3, #48	; 0x30
 80017dc:	d170      	bne.n	80018c0 <UART_SetConfig+0x1fc>
 80017de:	2508      	movs	r5, #8
 80017e0:	e7e8      	b.n	80017b4 <UART_SetConfig+0xf0>
 80017e2:	4b66      	ldr	r3, [pc, #408]	; (800197c <UART_SetConfig+0x2b8>)
 80017e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80017ec:	2b80      	cmp	r3, #128	; 0x80
 80017ee:	d069      	beq.n	80018c4 <UART_SetConfig+0x200>
 80017f0:	d805      	bhi.n	80017fe <UART_SetConfig+0x13a>
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d068      	beq.n	80018c8 <UART_SetConfig+0x204>
 80017f6:	2b40      	cmp	r3, #64	; 0x40
 80017f8:	d168      	bne.n	80018cc <UART_SetConfig+0x208>
 80017fa:	2504      	movs	r5, #4
 80017fc:	e7da      	b.n	80017b4 <UART_SetConfig+0xf0>
 80017fe:	2bc0      	cmp	r3, #192	; 0xc0
 8001800:	d166      	bne.n	80018d0 <UART_SetConfig+0x20c>
 8001802:	2508      	movs	r5, #8
 8001804:	e7d6      	b.n	80017b4 <UART_SetConfig+0xf0>
 8001806:	4b5d      	ldr	r3, [pc, #372]	; (800197c <UART_SetConfig+0x2b8>)
 8001808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800180c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001814:	d05e      	beq.n	80018d4 <UART_SetConfig+0x210>
 8001816:	d806      	bhi.n	8001826 <UART_SetConfig+0x162>
 8001818:	2b00      	cmp	r3, #0
 800181a:	d05d      	beq.n	80018d8 <UART_SetConfig+0x214>
 800181c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001820:	d15c      	bne.n	80018dc <UART_SetConfig+0x218>
 8001822:	2504      	movs	r5, #4
 8001824:	e7c6      	b.n	80017b4 <UART_SetConfig+0xf0>
 8001826:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800182a:	d159      	bne.n	80018e0 <UART_SetConfig+0x21c>
 800182c:	2508      	movs	r5, #8
 800182e:	e7c1      	b.n	80017b4 <UART_SetConfig+0xf0>
 8001830:	4b52      	ldr	r3, [pc, #328]	; (800197c <UART_SetConfig+0x2b8>)
 8001832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001836:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800183a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800183e:	d051      	beq.n	80018e4 <UART_SetConfig+0x220>
 8001840:	d806      	bhi.n	8001850 <UART_SetConfig+0x18c>
 8001842:	2b00      	cmp	r3, #0
 8001844:	d050      	beq.n	80018e8 <UART_SetConfig+0x224>
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184a:	d14f      	bne.n	80018ec <UART_SetConfig+0x228>
 800184c:	2504      	movs	r5, #4
 800184e:	e7b1      	b.n	80017b4 <UART_SetConfig+0xf0>
 8001850:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001854:	d14c      	bne.n	80018f0 <UART_SetConfig+0x22c>
 8001856:	2508      	movs	r5, #8
 8001858:	e7ac      	b.n	80017b4 <UART_SetConfig+0xf0>
 800185a:	4b48      	ldr	r3, [pc, #288]	; (800197c <UART_SetConfig+0x2b8>)
 800185c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001860:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001868:	d044      	beq.n	80018f4 <UART_SetConfig+0x230>
 800186a:	d806      	bhi.n	800187a <UART_SetConfig+0x1b6>
 800186c:	2b00      	cmp	r3, #0
 800186e:	d043      	beq.n	80018f8 <UART_SetConfig+0x234>
 8001870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001874:	d142      	bne.n	80018fc <UART_SetConfig+0x238>
 8001876:	2504      	movs	r5, #4
 8001878:	e79c      	b.n	80017b4 <UART_SetConfig+0xf0>
 800187a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800187e:	d13f      	bne.n	8001900 <UART_SetConfig+0x23c>
 8001880:	2508      	movs	r5, #8
 8001882:	e797      	b.n	80017b4 <UART_SetConfig+0xf0>
 8001884:	4b3d      	ldr	r3, [pc, #244]	; (800197c <UART_SetConfig+0x2b8>)
 8001886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800188e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001892:	d037      	beq.n	8001904 <UART_SetConfig+0x240>
 8001894:	d805      	bhi.n	80018a2 <UART_SetConfig+0x1de>
 8001896:	b3bb      	cbz	r3, 8001908 <UART_SetConfig+0x244>
 8001898:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800189c:	d136      	bne.n	800190c <UART_SetConfig+0x248>
 800189e:	2504      	movs	r5, #4
 80018a0:	e788      	b.n	80017b4 <UART_SetConfig+0xf0>
 80018a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80018a6:	d133      	bne.n	8001910 <UART_SetConfig+0x24c>
 80018a8:	2508      	movs	r5, #8
 80018aa:	e783      	b.n	80017b4 <UART_SetConfig+0xf0>
 80018ac:	2502      	movs	r5, #2
 80018ae:	e781      	b.n	80017b4 <UART_SetConfig+0xf0>
 80018b0:	2502      	movs	r5, #2
 80018b2:	e77f      	b.n	80017b4 <UART_SetConfig+0xf0>
 80018b4:	2502      	movs	r5, #2
 80018b6:	e77d      	b.n	80017b4 <UART_SetConfig+0xf0>
 80018b8:	2500      	movs	r5, #0
 80018ba:	e77b      	b.n	80017b4 <UART_SetConfig+0xf0>
 80018bc:	2510      	movs	r5, #16
 80018be:	e779      	b.n	80017b4 <UART_SetConfig+0xf0>
 80018c0:	2510      	movs	r5, #16
 80018c2:	e777      	b.n	80017b4 <UART_SetConfig+0xf0>
 80018c4:	2502      	movs	r5, #2
 80018c6:	e775      	b.n	80017b4 <UART_SetConfig+0xf0>
 80018c8:	2500      	movs	r5, #0
 80018ca:	e773      	b.n	80017b4 <UART_SetConfig+0xf0>
 80018cc:	2510      	movs	r5, #16
 80018ce:	e771      	b.n	80017b4 <UART_SetConfig+0xf0>
 80018d0:	2510      	movs	r5, #16
 80018d2:	e76f      	b.n	80017b4 <UART_SetConfig+0xf0>
 80018d4:	2502      	movs	r5, #2
 80018d6:	e76d      	b.n	80017b4 <UART_SetConfig+0xf0>
 80018d8:	2500      	movs	r5, #0
 80018da:	e76b      	b.n	80017b4 <UART_SetConfig+0xf0>
 80018dc:	2510      	movs	r5, #16
 80018de:	e769      	b.n	80017b4 <UART_SetConfig+0xf0>
 80018e0:	2510      	movs	r5, #16
 80018e2:	e767      	b.n	80017b4 <UART_SetConfig+0xf0>
 80018e4:	2502      	movs	r5, #2
 80018e6:	e765      	b.n	80017b4 <UART_SetConfig+0xf0>
 80018e8:	2501      	movs	r5, #1
 80018ea:	e763      	b.n	80017b4 <UART_SetConfig+0xf0>
 80018ec:	2510      	movs	r5, #16
 80018ee:	e761      	b.n	80017b4 <UART_SetConfig+0xf0>
 80018f0:	2510      	movs	r5, #16
 80018f2:	e75f      	b.n	80017b4 <UART_SetConfig+0xf0>
 80018f4:	2502      	movs	r5, #2
 80018f6:	e75d      	b.n	80017b4 <UART_SetConfig+0xf0>
 80018f8:	2500      	movs	r5, #0
 80018fa:	e75b      	b.n	80017b4 <UART_SetConfig+0xf0>
 80018fc:	2510      	movs	r5, #16
 80018fe:	e759      	b.n	80017b4 <UART_SetConfig+0xf0>
 8001900:	2510      	movs	r5, #16
 8001902:	e757      	b.n	80017b4 <UART_SetConfig+0xf0>
 8001904:	2502      	movs	r5, #2
 8001906:	e755      	b.n	80017b4 <UART_SetConfig+0xf0>
 8001908:	2500      	movs	r5, #0
 800190a:	e753      	b.n	80017b4 <UART_SetConfig+0xf0>
 800190c:	2510      	movs	r5, #16
 800190e:	e751      	b.n	80017b4 <UART_SetConfig+0xf0>
 8001910:	2510      	movs	r5, #16
 8001912:	e74f      	b.n	80017b4 <UART_SetConfig+0xf0>
    switch (clocksource)
 8001914:	2d08      	cmp	r5, #8
 8001916:	d85b      	bhi.n	80019d0 <UART_SetConfig+0x30c>
 8001918:	e8df f005 	tbb	[pc, r5]
 800191c:	5a3d3205 	.word	0x5a3d3205
 8001920:	5a5a5a46 	.word	0x5a5a5a46
 8001924:	51          	.byte	0x51
 8001925:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8001926:	f7ff fd21 	bl	800136c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800192a:	6862      	ldr	r2, [r4, #4]
 800192c:	0853      	lsrs	r3, r2, #1
 800192e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001932:	fbb3 f3f2 	udiv	r3, r3, r2
 8001936:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001938:	f1a3 0110 	sub.w	r1, r3, #16
 800193c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001940:	4291      	cmp	r1, r2
 8001942:	f200 8082 	bhi.w	8001a4a <UART_SetConfig+0x386>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001946:	b29a      	uxth	r2, r3
 8001948:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800194c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001950:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8001952:	6822      	ldr	r2, [r4, #0]
 8001954:	60d3      	str	r3, [r2, #12]
 8001956:	e07b      	b.n	8001a50 <UART_SetConfig+0x38c>
 8001958:	efff69f3 	.word	0xefff69f3
 800195c:	40011000 	.word	0x40011000
 8001960:	40004400 	.word	0x40004400
 8001964:	40004800 	.word	0x40004800
 8001968:	40004c00 	.word	0x40004c00
 800196c:	40005000 	.word	0x40005000
 8001970:	40011400 	.word	0x40011400
 8001974:	40007800 	.word	0x40007800
 8001978:	40007c00 	.word	0x40007c00
 800197c:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK2Freq();
 8001980:	f7ff fd04 	bl	800138c <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001984:	6862      	ldr	r2, [r4, #4]
 8001986:	0853      	lsrs	r3, r2, #1
 8001988:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800198c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001990:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001992:	2500      	movs	r5, #0
        break;
 8001994:	e7d0      	b.n	8001938 <UART_SetConfig+0x274>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001996:	6862      	ldr	r2, [r4, #4]
 8001998:	4b30      	ldr	r3, [pc, #192]	; (8001a5c <UART_SetConfig+0x398>)
 800199a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800199e:	fbb3 f3f2 	udiv	r3, r3, r2
 80019a2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80019a4:	2500      	movs	r5, #0
        break;
 80019a6:	e7c7      	b.n	8001938 <UART_SetConfig+0x274>
        pclk = HAL_RCC_GetSysClockFreq();
 80019a8:	f7ff fbd4 	bl	8001154 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80019ac:	6862      	ldr	r2, [r4, #4]
 80019ae:	0853      	lsrs	r3, r2, #1
 80019b0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80019b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80019b8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80019ba:	2500      	movs	r5, #0
        break;
 80019bc:	e7bc      	b.n	8001938 <UART_SetConfig+0x274>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80019be:	6862      	ldr	r2, [r4, #4]
 80019c0:	0853      	lsrs	r3, r2, #1
 80019c2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80019c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80019ca:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80019cc:	2500      	movs	r5, #0
        break;
 80019ce:	e7b3      	b.n	8001938 <UART_SetConfig+0x274>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019d0:	2501      	movs	r5, #1
 80019d2:	2300      	movs	r3, #0
 80019d4:	e7b0      	b.n	8001938 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80019d6:	f7ff fcc9 	bl	800136c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80019da:	6862      	ldr	r2, [r4, #4]
 80019dc:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80019e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80019e4:	b29b      	uxth	r3, r3
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80019e6:	f1a3 0110 	sub.w	r1, r3, #16
 80019ea:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80019ee:	4291      	cmp	r1, r2
 80019f0:	d82d      	bhi.n	8001a4e <UART_SetConfig+0x38a>
    {
      huart->Instance->BRR = usartdiv;
 80019f2:	6822      	ldr	r2, [r4, #0]
 80019f4:	60d3      	str	r3, [r2, #12]
 80019f6:	e02b      	b.n	8001a50 <UART_SetConfig+0x38c>
        pclk = HAL_RCC_GetPCLK2Freq();
 80019f8:	f7ff fcc8 	bl	800138c <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80019fc:	6862      	ldr	r2, [r4, #4]
 80019fe:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001a02:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a06:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001a08:	2500      	movs	r5, #0
        break;
 8001a0a:	e7ec      	b.n	80019e6 <UART_SetConfig+0x322>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001a0c:	6862      	ldr	r2, [r4, #4]
 8001a0e:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <UART_SetConfig+0x39c>)
 8001a10:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8001a14:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a18:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001a1a:	2500      	movs	r5, #0
        break;
 8001a1c:	e7e3      	b.n	80019e6 <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetSysClockFreq();
 8001a1e:	f7ff fb99 	bl	8001154 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001a22:	6862      	ldr	r2, [r4, #4]
 8001a24:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001a28:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a2c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001a2e:	2500      	movs	r5, #0
        break;
 8001a30:	e7d9      	b.n	80019e6 <UART_SetConfig+0x322>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001a32:	6862      	ldr	r2, [r4, #4]
 8001a34:	0853      	lsrs	r3, r2, #1
 8001a36:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001a3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a3e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001a40:	2500      	movs	r5, #0
        break;
 8001a42:	e7d0      	b.n	80019e6 <UART_SetConfig+0x322>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a44:	2501      	movs	r5, #1
 8001a46:	2300      	movs	r3, #0
 8001a48:	e7cd      	b.n	80019e6 <UART_SetConfig+0x322>
      ret = HAL_ERROR;
 8001a4a:	2501      	movs	r5, #1
 8001a4c:	e000      	b.n	8001a50 <UART_SetConfig+0x38c>
    }
    else
    {
      ret = HAL_ERROR;
 8001a4e:	2501      	movs	r5, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001a54:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001a56:	4628      	mov	r0, r5
 8001a58:	bd38      	pop	{r3, r4, r5, pc}
 8001a5a:	bf00      	nop
 8001a5c:	01e84800 	.word	0x01e84800
 8001a60:	00f42400 	.word	0x00f42400

08001a64 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001a64:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a66:	f013 0f01 	tst.w	r3, #1
 8001a6a:	d006      	beq.n	8001a7a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001a6c:	6802      	ldr	r2, [r0, #0]
 8001a6e:	6853      	ldr	r3, [r2, #4]
 8001a70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001a74:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001a76:	430b      	orrs	r3, r1
 8001a78:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001a7a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a7c:	f013 0f02 	tst.w	r3, #2
 8001a80:	d006      	beq.n	8001a90 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001a82:	6802      	ldr	r2, [r0, #0]
 8001a84:	6853      	ldr	r3, [r2, #4]
 8001a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001a8c:	430b      	orrs	r3, r1
 8001a8e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001a90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a92:	f013 0f04 	tst.w	r3, #4
 8001a96:	d006      	beq.n	8001aa6 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001a98:	6802      	ldr	r2, [r0, #0]
 8001a9a:	6853      	ldr	r3, [r2, #4]
 8001a9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aa0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001aa2:	430b      	orrs	r3, r1
 8001aa4:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001aa6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001aa8:	f013 0f08 	tst.w	r3, #8
 8001aac:	d006      	beq.n	8001abc <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001aae:	6802      	ldr	r2, [r0, #0]
 8001ab0:	6853      	ldr	r3, [r2, #4]
 8001ab2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001ab6:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001abc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001abe:	f013 0f10 	tst.w	r3, #16
 8001ac2:	d006      	beq.n	8001ad2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001ac4:	6802      	ldr	r2, [r0, #0]
 8001ac6:	6893      	ldr	r3, [r2, #8]
 8001ac8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001acc:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001ace:	430b      	orrs	r3, r1
 8001ad0:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001ad2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ad4:	f013 0f20 	tst.w	r3, #32
 8001ad8:	d006      	beq.n	8001ae8 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001ada:	6802      	ldr	r2, [r0, #0]
 8001adc:	6893      	ldr	r3, [r2, #8]
 8001ade:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ae2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001ae8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001aea:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001aee:	d00a      	beq.n	8001b06 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001af0:	6802      	ldr	r2, [r0, #0]
 8001af2:	6853      	ldr	r3, [r2, #4]
 8001af4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001af8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001afa:	430b      	orrs	r3, r1
 8001afc:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001afe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b04:	d00b      	beq.n	8001b1e <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001b06:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b08:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b0c:	d006      	beq.n	8001b1c <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001b0e:	6802      	ldr	r2, [r0, #0]
 8001b10:	6853      	ldr	r3, [r2, #4]
 8001b12:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001b16:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001b18:	430b      	orrs	r3, r1
 8001b1a:	6053      	str	r3, [r2, #4]
  }
}
 8001b1c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001b1e:	6802      	ldr	r2, [r0, #0]
 8001b20:	6853      	ldr	r3, [r2, #4]
 8001b22:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001b26:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001b28:	430b      	orrs	r3, r1
 8001b2a:	6053      	str	r3, [r2, #4]
 8001b2c:	e7eb      	b.n	8001b06 <UART_AdvFeatureConfig+0xa2>

08001b2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001b2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b32:	4605      	mov	r5, r0
 8001b34:	460f      	mov	r7, r1
 8001b36:	4616      	mov	r6, r2
 8001b38:	4699      	mov	r9, r3
 8001b3a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b3e:	682c      	ldr	r4, [r5, #0]
 8001b40:	69e4      	ldr	r4, [r4, #28]
 8001b42:	ea37 0304 	bics.w	r3, r7, r4
 8001b46:	bf0c      	ite	eq
 8001b48:	2401      	moveq	r4, #1
 8001b4a:	2400      	movne	r4, #0
 8001b4c:	42b4      	cmp	r4, r6
 8001b4e:	d13c      	bne.n	8001bca <UART_WaitOnFlagUntilTimeout+0x9c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b50:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001b54:	d0f3      	beq.n	8001b3e <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b56:	f7fe ff3f 	bl	80009d8 <HAL_GetTick>
 8001b5a:	eba0 0009 	sub.w	r0, r0, r9
 8001b5e:	4540      	cmp	r0, r8
 8001b60:	d821      	bhi.n	8001ba6 <UART_WaitOnFlagUntilTimeout+0x78>
 8001b62:	f1b8 0f00 	cmp.w	r8, #0
 8001b66:	d01e      	beq.n	8001ba6 <UART_WaitOnFlagUntilTimeout+0x78>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001b68:	682b      	ldr	r3, [r5, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	f012 0f04 	tst.w	r2, #4
 8001b70:	d0e5      	beq.n	8001b3e <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001b72:	69da      	ldr	r2, [r3, #28]
 8001b74:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001b78:	d0e1      	beq.n	8001b3e <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001b7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b7e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b80:	682a      	ldr	r2, [r5, #0]
 8001b82:	6813      	ldr	r3, [r2, #0]
 8001b84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001b88:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b8a:	682a      	ldr	r2, [r5, #0]
 8001b8c:	6893      	ldr	r3, [r2, #8]
 8001b8e:	f023 0301 	bic.w	r3, r3, #1
 8001b92:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 8001b94:	2320      	movs	r3, #32
 8001b96:	676b      	str	r3, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001b98:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001b9a:	67eb      	str	r3, [r5, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8001ba2:	2003      	movs	r0, #3
 8001ba4:	e012      	b.n	8001bcc <UART_WaitOnFlagUntilTimeout+0x9e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ba6:	682a      	ldr	r2, [r5, #0]
 8001ba8:	6813      	ldr	r3, [r2, #0]
 8001baa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001bae:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bb0:	682a      	ldr	r2, [r5, #0]
 8001bb2:	6893      	ldr	r3, [r2, #8]
 8001bb4:	f023 0301 	bic.w	r3, r3, #1
 8001bb8:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001bba:	2320      	movs	r3, #32
 8001bbc:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001bbe:	67ab      	str	r3, [r5, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
        return HAL_TIMEOUT;
 8001bc6:	2003      	movs	r0, #3
 8001bc8:	e000      	b.n	8001bcc <UART_WaitOnFlagUntilTimeout+0x9e>
        }
      }
    }
  }
  return HAL_OK;
 8001bca:	2000      	movs	r0, #0
}
 8001bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001bd0 <HAL_UART_Transmit>:
{
 8001bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001bd8:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001bda:	2b20      	cmp	r3, #32
 8001bdc:	d159      	bne.n	8001c92 <HAL_UART_Transmit+0xc2>
 8001bde:	4604      	mov	r4, r0
 8001be0:	460d      	mov	r5, r1
 8001be2:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001be4:	fab2 f382 	clz	r3, r2
 8001be8:	095b      	lsrs	r3, r3, #5
 8001bea:	2900      	cmp	r1, #0
 8001bec:	bf08      	it	eq
 8001bee:	2301      	moveq	r3, #1
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d152      	bne.n	8001c9a <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 8001bf4:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d050      	beq.n	8001c9e <HAL_UART_Transmit+0xce>
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c06:	2321      	movs	r3, #33	; 0x21
 8001c08:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8001c0a:	f7fe fee5 	bl	80009d8 <HAL_GetTick>
 8001c0e:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8001c10:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8001c14:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c18:	68a3      	ldr	r3, [r4, #8]
 8001c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c1e:	d005      	beq.n	8001c2c <HAL_UART_Transmit+0x5c>
      pdata16bits = NULL;
 8001c20:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8001c24:	2300      	movs	r3, #0
 8001c26:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 8001c2a:	e014      	b.n	8001c56 <HAL_UART_Transmit+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c2c:	6923      	ldr	r3, [r4, #16]
 8001c2e:	b113      	cbz	r3, 8001c36 <HAL_UART_Transmit+0x66>
      pdata16bits = NULL;
 8001c30:	f04f 0800 	mov.w	r8, #0
 8001c34:	e7f6      	b.n	8001c24 <HAL_UART_Transmit+0x54>
      pdata16bits = (uint16_t *) pData;
 8001c36:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001c38:	2500      	movs	r5, #0
 8001c3a:	e7f3      	b.n	8001c24 <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c3c:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001c40:	6822      	ldr	r2, [r4, #0]
 8001c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c46:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001c48:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001c4c:	b292      	uxth	r2, r2
 8001c4e:	3a01      	subs	r2, #1
 8001c50:	b292      	uxth	r2, r2
 8001c52:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8001c56:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	b173      	cbz	r3, 8001c7c <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c5e:	9600      	str	r6, [sp, #0]
 8001c60:	463b      	mov	r3, r7
 8001c62:	2200      	movs	r2, #0
 8001c64:	2180      	movs	r1, #128	; 0x80
 8001c66:	4620      	mov	r0, r4
 8001c68:	f7ff ff61 	bl	8001b2e <UART_WaitOnFlagUntilTimeout>
 8001c6c:	b9c8      	cbnz	r0, 8001ca2 <HAL_UART_Transmit+0xd2>
      if (pdata8bits == NULL)
 8001c6e:	2d00      	cmp	r5, #0
 8001c70:	d0e4      	beq.n	8001c3c <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c72:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001c76:	6823      	ldr	r3, [r4, #0]
 8001c78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001c7a:	e7e5      	b.n	8001c48 <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c7c:	9600      	str	r6, [sp, #0]
 8001c7e:	463b      	mov	r3, r7
 8001c80:	2200      	movs	r2, #0
 8001c82:	2140      	movs	r1, #64	; 0x40
 8001c84:	4620      	mov	r0, r4
 8001c86:	f7ff ff52 	bl	8001b2e <UART_WaitOnFlagUntilTimeout>
 8001c8a:	b960      	cbnz	r0, 8001ca6 <HAL_UART_Transmit+0xd6>
    huart->gState = HAL_UART_STATE_READY;
 8001c8c:	2320      	movs	r3, #32
 8001c8e:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8001c90:	e000      	b.n	8001c94 <HAL_UART_Transmit+0xc4>
    return HAL_BUSY;
 8001c92:	2002      	movs	r0, #2
}
 8001c94:	b002      	add	sp, #8
 8001c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	e7fa      	b.n	8001c94 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8001c9e:	2002      	movs	r0, #2
 8001ca0:	e7f8      	b.n	8001c94 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8001ca2:	2003      	movs	r0, #3
 8001ca4:	e7f6      	b.n	8001c94 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8001ca6:	2003      	movs	r0, #3
 8001ca8:	e7f4      	b.n	8001c94 <HAL_UART_Transmit+0xc4>

08001caa <HAL_UART_Receive>:
{
 8001caa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cb2:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001cb4:	2b20      	cmp	r3, #32
 8001cb6:	f040 8081 	bne.w	8001dbc <HAL_UART_Receive+0x112>
 8001cba:	4604      	mov	r4, r0
 8001cbc:	460d      	mov	r5, r1
 8001cbe:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001cc0:	fab2 f382 	clz	r3, r2
 8001cc4:	095b      	lsrs	r3, r3, #5
 8001cc6:	2900      	cmp	r1, #0
 8001cc8:	bf08      	it	eq
 8001cca:	2301      	moveq	r3, #1
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d179      	bne.n	8001dc4 <HAL_UART_Receive+0x11a>
    __HAL_LOCK(huart);
 8001cd0:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d077      	beq.n	8001dc8 <HAL_UART_Receive+0x11e>
 8001cd8:	2301      	movs	r3, #1
 8001cda:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ce2:	2322      	movs	r3, #34	; 0x22
 8001ce4:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8001ce6:	f7fe fe77 	bl	80009d8 <HAL_GetTick>
 8001cea:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 8001cec:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 8001cf0:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001cf4:	68a3      	ldr	r3, [r4, #8]
 8001cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cfa:	d006      	beq.n	8001d0a <HAL_UART_Receive+0x60>
 8001cfc:	b9a3      	cbnz	r3, 8001d28 <HAL_UART_Receive+0x7e>
 8001cfe:	6922      	ldr	r2, [r4, #16]
 8001d00:	b972      	cbnz	r2, 8001d20 <HAL_UART_Receive+0x76>
 8001d02:	22ff      	movs	r2, #255	; 0xff
 8001d04:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001d08:	e014      	b.n	8001d34 <HAL_UART_Receive+0x8a>
 8001d0a:	6922      	ldr	r2, [r4, #16]
 8001d0c:	b922      	cbnz	r2, 8001d18 <HAL_UART_Receive+0x6e>
 8001d0e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001d12:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001d16:	e00d      	b.n	8001d34 <HAL_UART_Receive+0x8a>
 8001d18:	22ff      	movs	r2, #255	; 0xff
 8001d1a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001d1e:	e009      	b.n	8001d34 <HAL_UART_Receive+0x8a>
 8001d20:	227f      	movs	r2, #127	; 0x7f
 8001d22:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001d26:	e005      	b.n	8001d34 <HAL_UART_Receive+0x8a>
 8001d28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d2c:	d00d      	beq.n	8001d4a <HAL_UART_Receive+0xa0>
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8001d34:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d3c:	d00f      	beq.n	8001d5e <HAL_UART_Receive+0xb4>
      pdata16bits = NULL;
 8001d3e:	f04f 0900 	mov.w	r9, #0
    __HAL_UNLOCK(huart);
 8001d42:	2300      	movs	r3, #0
 8001d44:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->RxXferCount > 0U)
 8001d48:	e01e      	b.n	8001d88 <HAL_UART_Receive+0xde>
    UART_MASK_COMPUTATION(huart);
 8001d4a:	6922      	ldr	r2, [r4, #16]
 8001d4c:	b91a      	cbnz	r2, 8001d56 <HAL_UART_Receive+0xac>
 8001d4e:	227f      	movs	r2, #127	; 0x7f
 8001d50:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001d54:	e7ee      	b.n	8001d34 <HAL_UART_Receive+0x8a>
 8001d56:	223f      	movs	r2, #63	; 0x3f
 8001d58:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001d5c:	e7ea      	b.n	8001d34 <HAL_UART_Receive+0x8a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d5e:	6923      	ldr	r3, [r4, #16]
 8001d60:	b113      	cbz	r3, 8001d68 <HAL_UART_Receive+0xbe>
      pdata16bits = NULL;
 8001d62:	f04f 0900 	mov.w	r9, #0
 8001d66:	e7ec      	b.n	8001d42 <HAL_UART_Receive+0x98>
      pdata16bits = (uint16_t *) pData;
 8001d68:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8001d6a:	2500      	movs	r5, #0
 8001d6c:	e7e9      	b.n	8001d42 <HAL_UART_Receive+0x98>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001d6e:	6823      	ldr	r3, [r4, #0]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	ea08 0303 	and.w	r3, r8, r3
 8001d76:	f829 3b02 	strh.w	r3, [r9], #2
      huart->RxXferCount--;
 8001d7a:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8001d7e:	b292      	uxth	r2, r2
 8001d80:	3a01      	subs	r2, #1
 8001d82:	b292      	uxth	r2, r2
 8001d84:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8001d88:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	b18b      	cbz	r3, 8001db4 <HAL_UART_Receive+0x10a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001d90:	9600      	str	r6, [sp, #0]
 8001d92:	463b      	mov	r3, r7
 8001d94:	2200      	movs	r2, #0
 8001d96:	2120      	movs	r1, #32
 8001d98:	4620      	mov	r0, r4
 8001d9a:	f7ff fec8 	bl	8001b2e <UART_WaitOnFlagUntilTimeout>
 8001d9e:	b9a8      	cbnz	r0, 8001dcc <HAL_UART_Receive+0x122>
      if (pdata8bits == NULL)
 8001da0:	2d00      	cmp	r5, #0
 8001da2:	d0e4      	beq.n	8001d6e <HAL_UART_Receive+0xc4>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001da4:	6823      	ldr	r3, [r4, #0]
 8001da6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001da8:	fa5f f388 	uxtb.w	r3, r8
 8001dac:	4013      	ands	r3, r2
 8001dae:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 8001db2:	e7e2      	b.n	8001d7a <HAL_UART_Receive+0xd0>
    huart->RxState = HAL_UART_STATE_READY;
 8001db4:	2320      	movs	r3, #32
 8001db6:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8001db8:	2000      	movs	r0, #0
 8001dba:	e000      	b.n	8001dbe <HAL_UART_Receive+0x114>
    return HAL_BUSY;
 8001dbc:	2002      	movs	r0, #2
}
 8001dbe:	b003      	add	sp, #12
 8001dc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	e7fa      	b.n	8001dbe <HAL_UART_Receive+0x114>
    __HAL_LOCK(huart);
 8001dc8:	2002      	movs	r0, #2
 8001dca:	e7f8      	b.n	8001dbe <HAL_UART_Receive+0x114>
        return HAL_TIMEOUT;
 8001dcc:	2003      	movs	r0, #3
 8001dce:	e7f6      	b.n	8001dbe <HAL_UART_Receive+0x114>

08001dd0 <UART_CheckIdleState>:
{
 8001dd0:	b530      	push	{r4, r5, lr}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001dda:	f7fe fdfd 	bl	80009d8 <HAL_GetTick>
 8001dde:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001de0:	6823      	ldr	r3, [r4, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f013 0f08 	tst.w	r3, #8
 8001de8:	d10c      	bne.n	8001e04 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001dea:	6823      	ldr	r3, [r4, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f013 0f04 	tst.w	r3, #4
 8001df2:	d115      	bne.n	8001e20 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8001df4:	2320      	movs	r3, #32
 8001df6:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001df8:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8001e00:	b003      	add	sp, #12
 8001e02:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001e12:	4620      	mov	r0, r4
 8001e14:	f7ff fe8b 	bl	8001b2e <UART_WaitOnFlagUntilTimeout>
 8001e18:	2800      	cmp	r0, #0
 8001e1a:	d0e6      	beq.n	8001dea <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8001e1c:	2003      	movs	r0, #3
 8001e1e:	e7ef      	b.n	8001e00 <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	462b      	mov	r3, r5
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001e2e:	4620      	mov	r0, r4
 8001e30:	f7ff fe7d 	bl	8001b2e <UART_WaitOnFlagUntilTimeout>
 8001e34:	2800      	cmp	r0, #0
 8001e36:	d0dd      	beq.n	8001df4 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8001e38:	2003      	movs	r0, #3
 8001e3a:	e7e1      	b.n	8001e00 <UART_CheckIdleState+0x30>

08001e3c <HAL_UART_Init>:
  if (huart == NULL)
 8001e3c:	b368      	cbz	r0, 8001e9a <HAL_UART_Init+0x5e>
{
 8001e3e:	b510      	push	{r4, lr}
 8001e40:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001e42:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001e44:	b303      	cbz	r3, 8001e88 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8001e46:	2324      	movs	r3, #36	; 0x24
 8001e48:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001e4a:	6822      	ldr	r2, [r4, #0]
 8001e4c:	6813      	ldr	r3, [r2, #0]
 8001e4e:	f023 0301 	bic.w	r3, r3, #1
 8001e52:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e54:	4620      	mov	r0, r4
 8001e56:	f7ff fc35 	bl	80016c4 <UART_SetConfig>
 8001e5a:	2801      	cmp	r0, #1
 8001e5c:	d013      	beq.n	8001e86 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e60:	b9bb      	cbnz	r3, 8001e92 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e62:	6822      	ldr	r2, [r4, #0]
 8001e64:	6853      	ldr	r3, [r2, #4]
 8001e66:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001e6a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e6c:	6822      	ldr	r2, [r4, #0]
 8001e6e:	6893      	ldr	r3, [r2, #8]
 8001e70:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001e74:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001e76:	6822      	ldr	r2, [r4, #0]
 8001e78:	6813      	ldr	r3, [r2, #0]
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001e80:	4620      	mov	r0, r4
 8001e82:	f7ff ffa5 	bl	8001dd0 <UART_CheckIdleState>
}
 8001e86:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001e88:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001e8c:	f7fe fc92 	bl	80007b4 <HAL_UART_MspInit>
 8001e90:	e7d9      	b.n	8001e46 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8001e92:	4620      	mov	r0, r4
 8001e94:	f7ff fde6 	bl	8001a64 <UART_AdvFeatureConfig>
 8001e98:	e7e3      	b.n	8001e62 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8001e9a:	2001      	movs	r0, #1
}
 8001e9c:	4770      	bx	lr
	...

08001ea0 <__sflush_r>:
 8001ea0:	898a      	ldrh	r2, [r1, #12]
 8001ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ea6:	4605      	mov	r5, r0
 8001ea8:	0710      	lsls	r0, r2, #28
 8001eaa:	460c      	mov	r4, r1
 8001eac:	d458      	bmi.n	8001f60 <__sflush_r+0xc0>
 8001eae:	684b      	ldr	r3, [r1, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	dc05      	bgt.n	8001ec0 <__sflush_r+0x20>
 8001eb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	dc02      	bgt.n	8001ec0 <__sflush_r+0x20>
 8001eba:	2000      	movs	r0, #0
 8001ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ec0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ec2:	2e00      	cmp	r6, #0
 8001ec4:	d0f9      	beq.n	8001eba <__sflush_r+0x1a>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001ecc:	682f      	ldr	r7, [r5, #0]
 8001ece:	602b      	str	r3, [r5, #0]
 8001ed0:	d032      	beq.n	8001f38 <__sflush_r+0x98>
 8001ed2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001ed4:	89a3      	ldrh	r3, [r4, #12]
 8001ed6:	075a      	lsls	r2, r3, #29
 8001ed8:	d505      	bpl.n	8001ee6 <__sflush_r+0x46>
 8001eda:	6863      	ldr	r3, [r4, #4]
 8001edc:	1ac0      	subs	r0, r0, r3
 8001ede:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ee0:	b10b      	cbz	r3, 8001ee6 <__sflush_r+0x46>
 8001ee2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ee4:	1ac0      	subs	r0, r0, r3
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	4602      	mov	r2, r0
 8001eea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001eec:	6a21      	ldr	r1, [r4, #32]
 8001eee:	4628      	mov	r0, r5
 8001ef0:	47b0      	blx	r6
 8001ef2:	1c43      	adds	r3, r0, #1
 8001ef4:	89a3      	ldrh	r3, [r4, #12]
 8001ef6:	d106      	bne.n	8001f06 <__sflush_r+0x66>
 8001ef8:	6829      	ldr	r1, [r5, #0]
 8001efa:	291d      	cmp	r1, #29
 8001efc:	d82c      	bhi.n	8001f58 <__sflush_r+0xb8>
 8001efe:	4a2a      	ldr	r2, [pc, #168]	; (8001fa8 <__sflush_r+0x108>)
 8001f00:	40ca      	lsrs	r2, r1
 8001f02:	07d6      	lsls	r6, r2, #31
 8001f04:	d528      	bpl.n	8001f58 <__sflush_r+0xb8>
 8001f06:	2200      	movs	r2, #0
 8001f08:	6062      	str	r2, [r4, #4]
 8001f0a:	04d9      	lsls	r1, r3, #19
 8001f0c:	6922      	ldr	r2, [r4, #16]
 8001f0e:	6022      	str	r2, [r4, #0]
 8001f10:	d504      	bpl.n	8001f1c <__sflush_r+0x7c>
 8001f12:	1c42      	adds	r2, r0, #1
 8001f14:	d101      	bne.n	8001f1a <__sflush_r+0x7a>
 8001f16:	682b      	ldr	r3, [r5, #0]
 8001f18:	b903      	cbnz	r3, 8001f1c <__sflush_r+0x7c>
 8001f1a:	6560      	str	r0, [r4, #84]	; 0x54
 8001f1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f1e:	602f      	str	r7, [r5, #0]
 8001f20:	2900      	cmp	r1, #0
 8001f22:	d0ca      	beq.n	8001eba <__sflush_r+0x1a>
 8001f24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f28:	4299      	cmp	r1, r3
 8001f2a:	d002      	beq.n	8001f32 <__sflush_r+0x92>
 8001f2c:	4628      	mov	r0, r5
 8001f2e:	f000 f9b1 	bl	8002294 <_free_r>
 8001f32:	2000      	movs	r0, #0
 8001f34:	6360      	str	r0, [r4, #52]	; 0x34
 8001f36:	e7c1      	b.n	8001ebc <__sflush_r+0x1c>
 8001f38:	6a21      	ldr	r1, [r4, #32]
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	4628      	mov	r0, r5
 8001f3e:	47b0      	blx	r6
 8001f40:	1c41      	adds	r1, r0, #1
 8001f42:	d1c7      	bne.n	8001ed4 <__sflush_r+0x34>
 8001f44:	682b      	ldr	r3, [r5, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0c4      	beq.n	8001ed4 <__sflush_r+0x34>
 8001f4a:	2b1d      	cmp	r3, #29
 8001f4c:	d001      	beq.n	8001f52 <__sflush_r+0xb2>
 8001f4e:	2b16      	cmp	r3, #22
 8001f50:	d101      	bne.n	8001f56 <__sflush_r+0xb6>
 8001f52:	602f      	str	r7, [r5, #0]
 8001f54:	e7b1      	b.n	8001eba <__sflush_r+0x1a>
 8001f56:	89a3      	ldrh	r3, [r4, #12]
 8001f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f5c:	81a3      	strh	r3, [r4, #12]
 8001f5e:	e7ad      	b.n	8001ebc <__sflush_r+0x1c>
 8001f60:	690f      	ldr	r7, [r1, #16]
 8001f62:	2f00      	cmp	r7, #0
 8001f64:	d0a9      	beq.n	8001eba <__sflush_r+0x1a>
 8001f66:	0793      	lsls	r3, r2, #30
 8001f68:	680e      	ldr	r6, [r1, #0]
 8001f6a:	bf08      	it	eq
 8001f6c:	694b      	ldreq	r3, [r1, #20]
 8001f6e:	600f      	str	r7, [r1, #0]
 8001f70:	bf18      	it	ne
 8001f72:	2300      	movne	r3, #0
 8001f74:	eba6 0807 	sub.w	r8, r6, r7
 8001f78:	608b      	str	r3, [r1, #8]
 8001f7a:	f1b8 0f00 	cmp.w	r8, #0
 8001f7e:	dd9c      	ble.n	8001eba <__sflush_r+0x1a>
 8001f80:	6a21      	ldr	r1, [r4, #32]
 8001f82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001f84:	4643      	mov	r3, r8
 8001f86:	463a      	mov	r2, r7
 8001f88:	4628      	mov	r0, r5
 8001f8a:	47b0      	blx	r6
 8001f8c:	2800      	cmp	r0, #0
 8001f8e:	dc06      	bgt.n	8001f9e <__sflush_r+0xfe>
 8001f90:	89a3      	ldrh	r3, [r4, #12]
 8001f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f96:	81a3      	strh	r3, [r4, #12]
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	e78e      	b.n	8001ebc <__sflush_r+0x1c>
 8001f9e:	4407      	add	r7, r0
 8001fa0:	eba8 0800 	sub.w	r8, r8, r0
 8001fa4:	e7e9      	b.n	8001f7a <__sflush_r+0xda>
 8001fa6:	bf00      	nop
 8001fa8:	20400001 	.word	0x20400001

08001fac <_fflush_r>:
 8001fac:	b538      	push	{r3, r4, r5, lr}
 8001fae:	690b      	ldr	r3, [r1, #16]
 8001fb0:	4605      	mov	r5, r0
 8001fb2:	460c      	mov	r4, r1
 8001fb4:	b913      	cbnz	r3, 8001fbc <_fflush_r+0x10>
 8001fb6:	2500      	movs	r5, #0
 8001fb8:	4628      	mov	r0, r5
 8001fba:	bd38      	pop	{r3, r4, r5, pc}
 8001fbc:	b118      	cbz	r0, 8001fc6 <_fflush_r+0x1a>
 8001fbe:	6983      	ldr	r3, [r0, #24]
 8001fc0:	b90b      	cbnz	r3, 8001fc6 <_fflush_r+0x1a>
 8001fc2:	f000 f899 	bl	80020f8 <__sinit>
 8001fc6:	4b14      	ldr	r3, [pc, #80]	; (8002018 <_fflush_r+0x6c>)
 8001fc8:	429c      	cmp	r4, r3
 8001fca:	d11b      	bne.n	8002004 <_fflush_r+0x58>
 8001fcc:	686c      	ldr	r4, [r5, #4]
 8001fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0ef      	beq.n	8001fb6 <_fflush_r+0xa>
 8001fd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001fd8:	07d0      	lsls	r0, r2, #31
 8001fda:	d404      	bmi.n	8001fe6 <_fflush_r+0x3a>
 8001fdc:	0599      	lsls	r1, r3, #22
 8001fde:	d402      	bmi.n	8001fe6 <_fflush_r+0x3a>
 8001fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001fe2:	f000 f94c 	bl	800227e <__retarget_lock_acquire_recursive>
 8001fe6:	4628      	mov	r0, r5
 8001fe8:	4621      	mov	r1, r4
 8001fea:	f7ff ff59 	bl	8001ea0 <__sflush_r>
 8001fee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ff0:	07da      	lsls	r2, r3, #31
 8001ff2:	4605      	mov	r5, r0
 8001ff4:	d4e0      	bmi.n	8001fb8 <_fflush_r+0xc>
 8001ff6:	89a3      	ldrh	r3, [r4, #12]
 8001ff8:	059b      	lsls	r3, r3, #22
 8001ffa:	d4dd      	bmi.n	8001fb8 <_fflush_r+0xc>
 8001ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ffe:	f000 f93f 	bl	8002280 <__retarget_lock_release_recursive>
 8002002:	e7d9      	b.n	8001fb8 <_fflush_r+0xc>
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <_fflush_r+0x70>)
 8002006:	429c      	cmp	r4, r3
 8002008:	d101      	bne.n	800200e <_fflush_r+0x62>
 800200a:	68ac      	ldr	r4, [r5, #8]
 800200c:	e7df      	b.n	8001fce <_fflush_r+0x22>
 800200e:	4b04      	ldr	r3, [pc, #16]	; (8002020 <_fflush_r+0x74>)
 8002010:	429c      	cmp	r4, r3
 8002012:	bf08      	it	eq
 8002014:	68ec      	ldreq	r4, [r5, #12]
 8002016:	e7da      	b.n	8001fce <_fflush_r+0x22>
 8002018:	080048a8 	.word	0x080048a8
 800201c:	080048c8 	.word	0x080048c8
 8002020:	08004888 	.word	0x08004888

08002024 <fflush>:
 8002024:	4601      	mov	r1, r0
 8002026:	b920      	cbnz	r0, 8002032 <fflush+0xe>
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <fflush+0x18>)
 800202a:	4905      	ldr	r1, [pc, #20]	; (8002040 <fflush+0x1c>)
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	f000 b8e1 	b.w	80021f4 <_fwalk_reent>
 8002032:	4b04      	ldr	r3, [pc, #16]	; (8002044 <fflush+0x20>)
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	f7ff bfb9 	b.w	8001fac <_fflush_r>
 800203a:	bf00      	nop
 800203c:	080048e8 	.word	0x080048e8
 8002040:	08001fad 	.word	0x08001fad
 8002044:	2000000c 	.word	0x2000000c

08002048 <std>:
 8002048:	2300      	movs	r3, #0
 800204a:	b510      	push	{r4, lr}
 800204c:	4604      	mov	r4, r0
 800204e:	e9c0 3300 	strd	r3, r3, [r0]
 8002052:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002056:	6083      	str	r3, [r0, #8]
 8002058:	8181      	strh	r1, [r0, #12]
 800205a:	6643      	str	r3, [r0, #100]	; 0x64
 800205c:	81c2      	strh	r2, [r0, #14]
 800205e:	6183      	str	r3, [r0, #24]
 8002060:	4619      	mov	r1, r3
 8002062:	2208      	movs	r2, #8
 8002064:	305c      	adds	r0, #92	; 0x5c
 8002066:	f000 f90c 	bl	8002282 <memset>
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <std+0x38>)
 800206c:	6263      	str	r3, [r4, #36]	; 0x24
 800206e:	4b05      	ldr	r3, [pc, #20]	; (8002084 <std+0x3c>)
 8002070:	62a3      	str	r3, [r4, #40]	; 0x28
 8002072:	4b05      	ldr	r3, [pc, #20]	; (8002088 <std+0x40>)
 8002074:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002076:	4b05      	ldr	r3, [pc, #20]	; (800208c <std+0x44>)
 8002078:	6224      	str	r4, [r4, #32]
 800207a:	6323      	str	r3, [r4, #48]	; 0x30
 800207c:	bd10      	pop	{r4, pc}
 800207e:	bf00      	nop
 8002080:	08002cbd 	.word	0x08002cbd
 8002084:	08002cdf 	.word	0x08002cdf
 8002088:	08002d17 	.word	0x08002d17
 800208c:	08002d3b 	.word	0x08002d3b

08002090 <_cleanup_r>:
 8002090:	4901      	ldr	r1, [pc, #4]	; (8002098 <_cleanup_r+0x8>)
 8002092:	f000 b8af 	b.w	80021f4 <_fwalk_reent>
 8002096:	bf00      	nop
 8002098:	08001fad 	.word	0x08001fad

0800209c <__sfmoreglue>:
 800209c:	b570      	push	{r4, r5, r6, lr}
 800209e:	1e4a      	subs	r2, r1, #1
 80020a0:	2568      	movs	r5, #104	; 0x68
 80020a2:	4355      	muls	r5, r2
 80020a4:	460e      	mov	r6, r1
 80020a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80020aa:	f000 f943 	bl	8002334 <_malloc_r>
 80020ae:	4604      	mov	r4, r0
 80020b0:	b140      	cbz	r0, 80020c4 <__sfmoreglue+0x28>
 80020b2:	2100      	movs	r1, #0
 80020b4:	e9c0 1600 	strd	r1, r6, [r0]
 80020b8:	300c      	adds	r0, #12
 80020ba:	60a0      	str	r0, [r4, #8]
 80020bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80020c0:	f000 f8df 	bl	8002282 <memset>
 80020c4:	4620      	mov	r0, r4
 80020c6:	bd70      	pop	{r4, r5, r6, pc}

080020c8 <__sfp_lock_acquire>:
 80020c8:	4801      	ldr	r0, [pc, #4]	; (80020d0 <__sfp_lock_acquire+0x8>)
 80020ca:	f000 b8d8 	b.w	800227e <__retarget_lock_acquire_recursive>
 80020ce:	bf00      	nop
 80020d0:	200002d4 	.word	0x200002d4

080020d4 <__sfp_lock_release>:
 80020d4:	4801      	ldr	r0, [pc, #4]	; (80020dc <__sfp_lock_release+0x8>)
 80020d6:	f000 b8d3 	b.w	8002280 <__retarget_lock_release_recursive>
 80020da:	bf00      	nop
 80020dc:	200002d4 	.word	0x200002d4

080020e0 <__sinit_lock_acquire>:
 80020e0:	4801      	ldr	r0, [pc, #4]	; (80020e8 <__sinit_lock_acquire+0x8>)
 80020e2:	f000 b8cc 	b.w	800227e <__retarget_lock_acquire_recursive>
 80020e6:	bf00      	nop
 80020e8:	200002cf 	.word	0x200002cf

080020ec <__sinit_lock_release>:
 80020ec:	4801      	ldr	r0, [pc, #4]	; (80020f4 <__sinit_lock_release+0x8>)
 80020ee:	f000 b8c7 	b.w	8002280 <__retarget_lock_release_recursive>
 80020f2:	bf00      	nop
 80020f4:	200002cf 	.word	0x200002cf

080020f8 <__sinit>:
 80020f8:	b510      	push	{r4, lr}
 80020fa:	4604      	mov	r4, r0
 80020fc:	f7ff fff0 	bl	80020e0 <__sinit_lock_acquire>
 8002100:	69a3      	ldr	r3, [r4, #24]
 8002102:	b11b      	cbz	r3, 800210c <__sinit+0x14>
 8002104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002108:	f7ff bff0 	b.w	80020ec <__sinit_lock_release>
 800210c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002110:	6523      	str	r3, [r4, #80]	; 0x50
 8002112:	4b13      	ldr	r3, [pc, #76]	; (8002160 <__sinit+0x68>)
 8002114:	4a13      	ldr	r2, [pc, #76]	; (8002164 <__sinit+0x6c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	62a2      	str	r2, [r4, #40]	; 0x28
 800211a:	42a3      	cmp	r3, r4
 800211c:	bf04      	itt	eq
 800211e:	2301      	moveq	r3, #1
 8002120:	61a3      	streq	r3, [r4, #24]
 8002122:	4620      	mov	r0, r4
 8002124:	f000 f820 	bl	8002168 <__sfp>
 8002128:	6060      	str	r0, [r4, #4]
 800212a:	4620      	mov	r0, r4
 800212c:	f000 f81c 	bl	8002168 <__sfp>
 8002130:	60a0      	str	r0, [r4, #8]
 8002132:	4620      	mov	r0, r4
 8002134:	f000 f818 	bl	8002168 <__sfp>
 8002138:	2200      	movs	r2, #0
 800213a:	60e0      	str	r0, [r4, #12]
 800213c:	2104      	movs	r1, #4
 800213e:	6860      	ldr	r0, [r4, #4]
 8002140:	f7ff ff82 	bl	8002048 <std>
 8002144:	68a0      	ldr	r0, [r4, #8]
 8002146:	2201      	movs	r2, #1
 8002148:	2109      	movs	r1, #9
 800214a:	f7ff ff7d 	bl	8002048 <std>
 800214e:	68e0      	ldr	r0, [r4, #12]
 8002150:	2202      	movs	r2, #2
 8002152:	2112      	movs	r1, #18
 8002154:	f7ff ff78 	bl	8002048 <std>
 8002158:	2301      	movs	r3, #1
 800215a:	61a3      	str	r3, [r4, #24]
 800215c:	e7d2      	b.n	8002104 <__sinit+0xc>
 800215e:	bf00      	nop
 8002160:	080048e8 	.word	0x080048e8
 8002164:	08002091 	.word	0x08002091

08002168 <__sfp>:
 8002168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800216a:	4607      	mov	r7, r0
 800216c:	f7ff ffac 	bl	80020c8 <__sfp_lock_acquire>
 8002170:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <__sfp+0x84>)
 8002172:	681e      	ldr	r6, [r3, #0]
 8002174:	69b3      	ldr	r3, [r6, #24]
 8002176:	b913      	cbnz	r3, 800217e <__sfp+0x16>
 8002178:	4630      	mov	r0, r6
 800217a:	f7ff ffbd 	bl	80020f8 <__sinit>
 800217e:	3648      	adds	r6, #72	; 0x48
 8002180:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002184:	3b01      	subs	r3, #1
 8002186:	d503      	bpl.n	8002190 <__sfp+0x28>
 8002188:	6833      	ldr	r3, [r6, #0]
 800218a:	b30b      	cbz	r3, 80021d0 <__sfp+0x68>
 800218c:	6836      	ldr	r6, [r6, #0]
 800218e:	e7f7      	b.n	8002180 <__sfp+0x18>
 8002190:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002194:	b9d5      	cbnz	r5, 80021cc <__sfp+0x64>
 8002196:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <__sfp+0x88>)
 8002198:	60e3      	str	r3, [r4, #12]
 800219a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800219e:	6665      	str	r5, [r4, #100]	; 0x64
 80021a0:	f000 f86c 	bl	800227c <__retarget_lock_init_recursive>
 80021a4:	f7ff ff96 	bl	80020d4 <__sfp_lock_release>
 80021a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80021ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80021b0:	6025      	str	r5, [r4, #0]
 80021b2:	61a5      	str	r5, [r4, #24]
 80021b4:	2208      	movs	r2, #8
 80021b6:	4629      	mov	r1, r5
 80021b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80021bc:	f000 f861 	bl	8002282 <memset>
 80021c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80021c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80021c8:	4620      	mov	r0, r4
 80021ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021cc:	3468      	adds	r4, #104	; 0x68
 80021ce:	e7d9      	b.n	8002184 <__sfp+0x1c>
 80021d0:	2104      	movs	r1, #4
 80021d2:	4638      	mov	r0, r7
 80021d4:	f7ff ff62 	bl	800209c <__sfmoreglue>
 80021d8:	4604      	mov	r4, r0
 80021da:	6030      	str	r0, [r6, #0]
 80021dc:	2800      	cmp	r0, #0
 80021de:	d1d5      	bne.n	800218c <__sfp+0x24>
 80021e0:	f7ff ff78 	bl	80020d4 <__sfp_lock_release>
 80021e4:	230c      	movs	r3, #12
 80021e6:	603b      	str	r3, [r7, #0]
 80021e8:	e7ee      	b.n	80021c8 <__sfp+0x60>
 80021ea:	bf00      	nop
 80021ec:	080048e8 	.word	0x080048e8
 80021f0:	ffff0001 	.word	0xffff0001

080021f4 <_fwalk_reent>:
 80021f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021f8:	4606      	mov	r6, r0
 80021fa:	4688      	mov	r8, r1
 80021fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002200:	2700      	movs	r7, #0
 8002202:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002206:	f1b9 0901 	subs.w	r9, r9, #1
 800220a:	d505      	bpl.n	8002218 <_fwalk_reent+0x24>
 800220c:	6824      	ldr	r4, [r4, #0]
 800220e:	2c00      	cmp	r4, #0
 8002210:	d1f7      	bne.n	8002202 <_fwalk_reent+0xe>
 8002212:	4638      	mov	r0, r7
 8002214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002218:	89ab      	ldrh	r3, [r5, #12]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d907      	bls.n	800222e <_fwalk_reent+0x3a>
 800221e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002222:	3301      	adds	r3, #1
 8002224:	d003      	beq.n	800222e <_fwalk_reent+0x3a>
 8002226:	4629      	mov	r1, r5
 8002228:	4630      	mov	r0, r6
 800222a:	47c0      	blx	r8
 800222c:	4307      	orrs	r7, r0
 800222e:	3568      	adds	r5, #104	; 0x68
 8002230:	e7e9      	b.n	8002206 <_fwalk_reent+0x12>
	...

08002234 <__libc_init_array>:
 8002234:	b570      	push	{r4, r5, r6, lr}
 8002236:	4d0d      	ldr	r5, [pc, #52]	; (800226c <__libc_init_array+0x38>)
 8002238:	4c0d      	ldr	r4, [pc, #52]	; (8002270 <__libc_init_array+0x3c>)
 800223a:	1b64      	subs	r4, r4, r5
 800223c:	10a4      	asrs	r4, r4, #2
 800223e:	2600      	movs	r6, #0
 8002240:	42a6      	cmp	r6, r4
 8002242:	d109      	bne.n	8002258 <__libc_init_array+0x24>
 8002244:	4d0b      	ldr	r5, [pc, #44]	; (8002274 <__libc_init_array+0x40>)
 8002246:	4c0c      	ldr	r4, [pc, #48]	; (8002278 <__libc_init_array+0x44>)
 8002248:	f002 fafc 	bl	8004844 <_init>
 800224c:	1b64      	subs	r4, r4, r5
 800224e:	10a4      	asrs	r4, r4, #2
 8002250:	2600      	movs	r6, #0
 8002252:	42a6      	cmp	r6, r4
 8002254:	d105      	bne.n	8002262 <__libc_init_array+0x2e>
 8002256:	bd70      	pop	{r4, r5, r6, pc}
 8002258:	f855 3b04 	ldr.w	r3, [r5], #4
 800225c:	4798      	blx	r3
 800225e:	3601      	adds	r6, #1
 8002260:	e7ee      	b.n	8002240 <__libc_init_array+0xc>
 8002262:	f855 3b04 	ldr.w	r3, [r5], #4
 8002266:	4798      	blx	r3
 8002268:	3601      	adds	r6, #1
 800226a:	e7f2      	b.n	8002252 <__libc_init_array+0x1e>
 800226c:	08004c74 	.word	0x08004c74
 8002270:	08004c74 	.word	0x08004c74
 8002274:	08004c74 	.word	0x08004c74
 8002278:	08004c78 	.word	0x08004c78

0800227c <__retarget_lock_init_recursive>:
 800227c:	4770      	bx	lr

0800227e <__retarget_lock_acquire_recursive>:
 800227e:	4770      	bx	lr

08002280 <__retarget_lock_release_recursive>:
 8002280:	4770      	bx	lr

08002282 <memset>:
 8002282:	4402      	add	r2, r0
 8002284:	4603      	mov	r3, r0
 8002286:	4293      	cmp	r3, r2
 8002288:	d100      	bne.n	800228c <memset+0xa>
 800228a:	4770      	bx	lr
 800228c:	f803 1b01 	strb.w	r1, [r3], #1
 8002290:	e7f9      	b.n	8002286 <memset+0x4>
	...

08002294 <_free_r>:
 8002294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002296:	2900      	cmp	r1, #0
 8002298:	d048      	beq.n	800232c <_free_r+0x98>
 800229a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800229e:	9001      	str	r0, [sp, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f1a1 0404 	sub.w	r4, r1, #4
 80022a6:	bfb8      	it	lt
 80022a8:	18e4      	addlt	r4, r4, r3
 80022aa:	f001 fba7 	bl	80039fc <__malloc_lock>
 80022ae:	4a20      	ldr	r2, [pc, #128]	; (8002330 <_free_r+0x9c>)
 80022b0:	9801      	ldr	r0, [sp, #4]
 80022b2:	6813      	ldr	r3, [r2, #0]
 80022b4:	4615      	mov	r5, r2
 80022b6:	b933      	cbnz	r3, 80022c6 <_free_r+0x32>
 80022b8:	6063      	str	r3, [r4, #4]
 80022ba:	6014      	str	r4, [r2, #0]
 80022bc:	b003      	add	sp, #12
 80022be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80022c2:	f001 bba1 	b.w	8003a08 <__malloc_unlock>
 80022c6:	42a3      	cmp	r3, r4
 80022c8:	d90b      	bls.n	80022e2 <_free_r+0x4e>
 80022ca:	6821      	ldr	r1, [r4, #0]
 80022cc:	1862      	adds	r2, r4, r1
 80022ce:	4293      	cmp	r3, r2
 80022d0:	bf04      	itt	eq
 80022d2:	681a      	ldreq	r2, [r3, #0]
 80022d4:	685b      	ldreq	r3, [r3, #4]
 80022d6:	6063      	str	r3, [r4, #4]
 80022d8:	bf04      	itt	eq
 80022da:	1852      	addeq	r2, r2, r1
 80022dc:	6022      	streq	r2, [r4, #0]
 80022de:	602c      	str	r4, [r5, #0]
 80022e0:	e7ec      	b.n	80022bc <_free_r+0x28>
 80022e2:	461a      	mov	r2, r3
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	b10b      	cbz	r3, 80022ec <_free_r+0x58>
 80022e8:	42a3      	cmp	r3, r4
 80022ea:	d9fa      	bls.n	80022e2 <_free_r+0x4e>
 80022ec:	6811      	ldr	r1, [r2, #0]
 80022ee:	1855      	adds	r5, r2, r1
 80022f0:	42a5      	cmp	r5, r4
 80022f2:	d10b      	bne.n	800230c <_free_r+0x78>
 80022f4:	6824      	ldr	r4, [r4, #0]
 80022f6:	4421      	add	r1, r4
 80022f8:	1854      	adds	r4, r2, r1
 80022fa:	42a3      	cmp	r3, r4
 80022fc:	6011      	str	r1, [r2, #0]
 80022fe:	d1dd      	bne.n	80022bc <_free_r+0x28>
 8002300:	681c      	ldr	r4, [r3, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	6053      	str	r3, [r2, #4]
 8002306:	4421      	add	r1, r4
 8002308:	6011      	str	r1, [r2, #0]
 800230a:	e7d7      	b.n	80022bc <_free_r+0x28>
 800230c:	d902      	bls.n	8002314 <_free_r+0x80>
 800230e:	230c      	movs	r3, #12
 8002310:	6003      	str	r3, [r0, #0]
 8002312:	e7d3      	b.n	80022bc <_free_r+0x28>
 8002314:	6825      	ldr	r5, [r4, #0]
 8002316:	1961      	adds	r1, r4, r5
 8002318:	428b      	cmp	r3, r1
 800231a:	bf04      	itt	eq
 800231c:	6819      	ldreq	r1, [r3, #0]
 800231e:	685b      	ldreq	r3, [r3, #4]
 8002320:	6063      	str	r3, [r4, #4]
 8002322:	bf04      	itt	eq
 8002324:	1949      	addeq	r1, r1, r5
 8002326:	6021      	streq	r1, [r4, #0]
 8002328:	6054      	str	r4, [r2, #4]
 800232a:	e7c7      	b.n	80022bc <_free_r+0x28>
 800232c:	b003      	add	sp, #12
 800232e:	bd30      	pop	{r4, r5, pc}
 8002330:	200001fc 	.word	0x200001fc

08002334 <_malloc_r>:
 8002334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002336:	1ccd      	adds	r5, r1, #3
 8002338:	f025 0503 	bic.w	r5, r5, #3
 800233c:	3508      	adds	r5, #8
 800233e:	2d0c      	cmp	r5, #12
 8002340:	bf38      	it	cc
 8002342:	250c      	movcc	r5, #12
 8002344:	2d00      	cmp	r5, #0
 8002346:	4606      	mov	r6, r0
 8002348:	db01      	blt.n	800234e <_malloc_r+0x1a>
 800234a:	42a9      	cmp	r1, r5
 800234c:	d903      	bls.n	8002356 <_malloc_r+0x22>
 800234e:	230c      	movs	r3, #12
 8002350:	6033      	str	r3, [r6, #0]
 8002352:	2000      	movs	r0, #0
 8002354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002356:	f001 fb51 	bl	80039fc <__malloc_lock>
 800235a:	4921      	ldr	r1, [pc, #132]	; (80023e0 <_malloc_r+0xac>)
 800235c:	680a      	ldr	r2, [r1, #0]
 800235e:	4614      	mov	r4, r2
 8002360:	b99c      	cbnz	r4, 800238a <_malloc_r+0x56>
 8002362:	4f20      	ldr	r7, [pc, #128]	; (80023e4 <_malloc_r+0xb0>)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	b923      	cbnz	r3, 8002372 <_malloc_r+0x3e>
 8002368:	4621      	mov	r1, r4
 800236a:	4630      	mov	r0, r6
 800236c:	f000 fc96 	bl	8002c9c <_sbrk_r>
 8002370:	6038      	str	r0, [r7, #0]
 8002372:	4629      	mov	r1, r5
 8002374:	4630      	mov	r0, r6
 8002376:	f000 fc91 	bl	8002c9c <_sbrk_r>
 800237a:	1c43      	adds	r3, r0, #1
 800237c:	d123      	bne.n	80023c6 <_malloc_r+0x92>
 800237e:	230c      	movs	r3, #12
 8002380:	6033      	str	r3, [r6, #0]
 8002382:	4630      	mov	r0, r6
 8002384:	f001 fb40 	bl	8003a08 <__malloc_unlock>
 8002388:	e7e3      	b.n	8002352 <_malloc_r+0x1e>
 800238a:	6823      	ldr	r3, [r4, #0]
 800238c:	1b5b      	subs	r3, r3, r5
 800238e:	d417      	bmi.n	80023c0 <_malloc_r+0x8c>
 8002390:	2b0b      	cmp	r3, #11
 8002392:	d903      	bls.n	800239c <_malloc_r+0x68>
 8002394:	6023      	str	r3, [r4, #0]
 8002396:	441c      	add	r4, r3
 8002398:	6025      	str	r5, [r4, #0]
 800239a:	e004      	b.n	80023a6 <_malloc_r+0x72>
 800239c:	6863      	ldr	r3, [r4, #4]
 800239e:	42a2      	cmp	r2, r4
 80023a0:	bf0c      	ite	eq
 80023a2:	600b      	streq	r3, [r1, #0]
 80023a4:	6053      	strne	r3, [r2, #4]
 80023a6:	4630      	mov	r0, r6
 80023a8:	f001 fb2e 	bl	8003a08 <__malloc_unlock>
 80023ac:	f104 000b 	add.w	r0, r4, #11
 80023b0:	1d23      	adds	r3, r4, #4
 80023b2:	f020 0007 	bic.w	r0, r0, #7
 80023b6:	1ac2      	subs	r2, r0, r3
 80023b8:	d0cc      	beq.n	8002354 <_malloc_r+0x20>
 80023ba:	1a1b      	subs	r3, r3, r0
 80023bc:	50a3      	str	r3, [r4, r2]
 80023be:	e7c9      	b.n	8002354 <_malloc_r+0x20>
 80023c0:	4622      	mov	r2, r4
 80023c2:	6864      	ldr	r4, [r4, #4]
 80023c4:	e7cc      	b.n	8002360 <_malloc_r+0x2c>
 80023c6:	1cc4      	adds	r4, r0, #3
 80023c8:	f024 0403 	bic.w	r4, r4, #3
 80023cc:	42a0      	cmp	r0, r4
 80023ce:	d0e3      	beq.n	8002398 <_malloc_r+0x64>
 80023d0:	1a21      	subs	r1, r4, r0
 80023d2:	4630      	mov	r0, r6
 80023d4:	f000 fc62 	bl	8002c9c <_sbrk_r>
 80023d8:	3001      	adds	r0, #1
 80023da:	d1dd      	bne.n	8002398 <_malloc_r+0x64>
 80023dc:	e7cf      	b.n	800237e <_malloc_r+0x4a>
 80023de:	bf00      	nop
 80023e0:	200001fc 	.word	0x200001fc
 80023e4:	20000200 	.word	0x20000200

080023e8 <__cvt>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	ed2d 8b02 	vpush	{d8}
 80023ee:	eeb0 8b40 	vmov.f64	d8, d0
 80023f2:	b085      	sub	sp, #20
 80023f4:	4617      	mov	r7, r2
 80023f6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80023f8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80023fa:	ee18 2a90 	vmov	r2, s17
 80023fe:	f025 0520 	bic.w	r5, r5, #32
 8002402:	2a00      	cmp	r2, #0
 8002404:	bfb6      	itet	lt
 8002406:	222d      	movlt	r2, #45	; 0x2d
 8002408:	2200      	movge	r2, #0
 800240a:	eeb1 8b40 	vneglt.f64	d8, d0
 800240e:	2d46      	cmp	r5, #70	; 0x46
 8002410:	460c      	mov	r4, r1
 8002412:	701a      	strb	r2, [r3, #0]
 8002414:	d004      	beq.n	8002420 <__cvt+0x38>
 8002416:	2d45      	cmp	r5, #69	; 0x45
 8002418:	d100      	bne.n	800241c <__cvt+0x34>
 800241a:	3401      	adds	r4, #1
 800241c:	2102      	movs	r1, #2
 800241e:	e000      	b.n	8002422 <__cvt+0x3a>
 8002420:	2103      	movs	r1, #3
 8002422:	ab03      	add	r3, sp, #12
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	ab02      	add	r3, sp, #8
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	4622      	mov	r2, r4
 800242c:	4633      	mov	r3, r6
 800242e:	eeb0 0b48 	vmov.f64	d0, d8
 8002432:	f000 fd35 	bl	8002ea0 <_dtoa_r>
 8002436:	2d47      	cmp	r5, #71	; 0x47
 8002438:	d109      	bne.n	800244e <__cvt+0x66>
 800243a:	07fb      	lsls	r3, r7, #31
 800243c:	d407      	bmi.n	800244e <__cvt+0x66>
 800243e:	9b03      	ldr	r3, [sp, #12]
 8002440:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002442:	1a1b      	subs	r3, r3, r0
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	b005      	add	sp, #20
 8002448:	ecbd 8b02 	vpop	{d8}
 800244c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244e:	2d46      	cmp	r5, #70	; 0x46
 8002450:	eb00 0204 	add.w	r2, r0, r4
 8002454:	d10c      	bne.n	8002470 <__cvt+0x88>
 8002456:	7803      	ldrb	r3, [r0, #0]
 8002458:	2b30      	cmp	r3, #48	; 0x30
 800245a:	d107      	bne.n	800246c <__cvt+0x84>
 800245c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8002460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002464:	bf1c      	itt	ne
 8002466:	f1c4 0401 	rsbne	r4, r4, #1
 800246a:	6034      	strne	r4, [r6, #0]
 800246c:	6833      	ldr	r3, [r6, #0]
 800246e:	441a      	add	r2, r3
 8002470:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8002474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002478:	bf08      	it	eq
 800247a:	9203      	streq	r2, [sp, #12]
 800247c:	2130      	movs	r1, #48	; 0x30
 800247e:	9b03      	ldr	r3, [sp, #12]
 8002480:	4293      	cmp	r3, r2
 8002482:	d2dc      	bcs.n	800243e <__cvt+0x56>
 8002484:	1c5c      	adds	r4, r3, #1
 8002486:	9403      	str	r4, [sp, #12]
 8002488:	7019      	strb	r1, [r3, #0]
 800248a:	e7f8      	b.n	800247e <__cvt+0x96>

0800248c <__exponent>:
 800248c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800248e:	4603      	mov	r3, r0
 8002490:	2900      	cmp	r1, #0
 8002492:	bfb8      	it	lt
 8002494:	4249      	neglt	r1, r1
 8002496:	f803 2b02 	strb.w	r2, [r3], #2
 800249a:	bfb4      	ite	lt
 800249c:	222d      	movlt	r2, #45	; 0x2d
 800249e:	222b      	movge	r2, #43	; 0x2b
 80024a0:	2909      	cmp	r1, #9
 80024a2:	7042      	strb	r2, [r0, #1]
 80024a4:	dd2a      	ble.n	80024fc <__exponent+0x70>
 80024a6:	f10d 0407 	add.w	r4, sp, #7
 80024aa:	46a4      	mov	ip, r4
 80024ac:	270a      	movs	r7, #10
 80024ae:	46a6      	mov	lr, r4
 80024b0:	460a      	mov	r2, r1
 80024b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80024b6:	fb07 1516 	mls	r5, r7, r6, r1
 80024ba:	3530      	adds	r5, #48	; 0x30
 80024bc:	2a63      	cmp	r2, #99	; 0x63
 80024be:	f104 34ff 	add.w	r4, r4, #4294967295
 80024c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80024c6:	4631      	mov	r1, r6
 80024c8:	dcf1      	bgt.n	80024ae <__exponent+0x22>
 80024ca:	3130      	adds	r1, #48	; 0x30
 80024cc:	f1ae 0502 	sub.w	r5, lr, #2
 80024d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80024d4:	1c44      	adds	r4, r0, #1
 80024d6:	4629      	mov	r1, r5
 80024d8:	4561      	cmp	r1, ip
 80024da:	d30a      	bcc.n	80024f2 <__exponent+0x66>
 80024dc:	f10d 0209 	add.w	r2, sp, #9
 80024e0:	eba2 020e 	sub.w	r2, r2, lr
 80024e4:	4565      	cmp	r5, ip
 80024e6:	bf88      	it	hi
 80024e8:	2200      	movhi	r2, #0
 80024ea:	4413      	add	r3, r2
 80024ec:	1a18      	subs	r0, r3, r0
 80024ee:	b003      	add	sp, #12
 80024f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80024f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80024fa:	e7ed      	b.n	80024d8 <__exponent+0x4c>
 80024fc:	2330      	movs	r3, #48	; 0x30
 80024fe:	3130      	adds	r1, #48	; 0x30
 8002500:	7083      	strb	r3, [r0, #2]
 8002502:	70c1      	strb	r1, [r0, #3]
 8002504:	1d03      	adds	r3, r0, #4
 8002506:	e7f1      	b.n	80024ec <__exponent+0x60>

08002508 <_printf_float>:
 8002508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800250c:	b08b      	sub	sp, #44	; 0x2c
 800250e:	460c      	mov	r4, r1
 8002510:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8002514:	4616      	mov	r6, r2
 8002516:	461f      	mov	r7, r3
 8002518:	4605      	mov	r5, r0
 800251a:	f001 fa43 	bl	80039a4 <_localeconv_r>
 800251e:	f8d0 b000 	ldr.w	fp, [r0]
 8002522:	4658      	mov	r0, fp
 8002524:	f7fd fe8c 	bl	8000240 <strlen>
 8002528:	2300      	movs	r3, #0
 800252a:	9308      	str	r3, [sp, #32]
 800252c:	f8d8 3000 	ldr.w	r3, [r8]
 8002530:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002534:	6822      	ldr	r2, [r4, #0]
 8002536:	3307      	adds	r3, #7
 8002538:	f023 0307 	bic.w	r3, r3, #7
 800253c:	f103 0108 	add.w	r1, r3, #8
 8002540:	f8c8 1000 	str.w	r1, [r8]
 8002544:	4682      	mov	sl, r0
 8002546:	e9d3 0100 	ldrd	r0, r1, [r3]
 800254a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800254e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80027b0 <_printf_float+0x2a8>
 8002552:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8002556:	eeb0 6bc0 	vabs.f64	d6, d0
 800255a:	eeb4 6b47 	vcmp.f64	d6, d7
 800255e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002562:	dd24      	ble.n	80025ae <_printf_float+0xa6>
 8002564:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8002568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256c:	d502      	bpl.n	8002574 <_printf_float+0x6c>
 800256e:	232d      	movs	r3, #45	; 0x2d
 8002570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002574:	4b90      	ldr	r3, [pc, #576]	; (80027b8 <_printf_float+0x2b0>)
 8002576:	4891      	ldr	r0, [pc, #580]	; (80027bc <_printf_float+0x2b4>)
 8002578:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800257c:	bf94      	ite	ls
 800257e:	4698      	movls	r8, r3
 8002580:	4680      	movhi	r8, r0
 8002582:	2303      	movs	r3, #3
 8002584:	6123      	str	r3, [r4, #16]
 8002586:	f022 0204 	bic.w	r2, r2, #4
 800258a:	2300      	movs	r3, #0
 800258c:	6022      	str	r2, [r4, #0]
 800258e:	9304      	str	r3, [sp, #16]
 8002590:	9700      	str	r7, [sp, #0]
 8002592:	4633      	mov	r3, r6
 8002594:	aa09      	add	r2, sp, #36	; 0x24
 8002596:	4621      	mov	r1, r4
 8002598:	4628      	mov	r0, r5
 800259a:	f000 f9d3 	bl	8002944 <_printf_common>
 800259e:	3001      	adds	r0, #1
 80025a0:	f040 808a 	bne.w	80026b8 <_printf_float+0x1b0>
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295
 80025a8:	b00b      	add	sp, #44	; 0x2c
 80025aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025ae:	eeb4 0b40 	vcmp.f64	d0, d0
 80025b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b6:	d709      	bvc.n	80025cc <_printf_float+0xc4>
 80025b8:	ee10 3a90 	vmov	r3, s1
 80025bc:	2b00      	cmp	r3, #0
 80025be:	bfbc      	itt	lt
 80025c0:	232d      	movlt	r3, #45	; 0x2d
 80025c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80025c6:	487e      	ldr	r0, [pc, #504]	; (80027c0 <_printf_float+0x2b8>)
 80025c8:	4b7e      	ldr	r3, [pc, #504]	; (80027c4 <_printf_float+0x2bc>)
 80025ca:	e7d5      	b.n	8002578 <_printf_float+0x70>
 80025cc:	6863      	ldr	r3, [r4, #4]
 80025ce:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80025d2:	9104      	str	r1, [sp, #16]
 80025d4:	1c59      	adds	r1, r3, #1
 80025d6:	d13c      	bne.n	8002652 <_printf_float+0x14a>
 80025d8:	2306      	movs	r3, #6
 80025da:	6063      	str	r3, [r4, #4]
 80025dc:	2300      	movs	r3, #0
 80025de:	9303      	str	r3, [sp, #12]
 80025e0:	ab08      	add	r3, sp, #32
 80025e2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80025e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025ea:	ab07      	add	r3, sp, #28
 80025ec:	6861      	ldr	r1, [r4, #4]
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	6022      	str	r2, [r4, #0]
 80025f2:	f10d 031b 	add.w	r3, sp, #27
 80025f6:	4628      	mov	r0, r5
 80025f8:	f7ff fef6 	bl	80023e8 <__cvt>
 80025fc:	9b04      	ldr	r3, [sp, #16]
 80025fe:	9907      	ldr	r1, [sp, #28]
 8002600:	2b47      	cmp	r3, #71	; 0x47
 8002602:	4680      	mov	r8, r0
 8002604:	d108      	bne.n	8002618 <_printf_float+0x110>
 8002606:	1cc8      	adds	r0, r1, #3
 8002608:	db02      	blt.n	8002610 <_printf_float+0x108>
 800260a:	6863      	ldr	r3, [r4, #4]
 800260c:	4299      	cmp	r1, r3
 800260e:	dd41      	ble.n	8002694 <_printf_float+0x18c>
 8002610:	f1a9 0902 	sub.w	r9, r9, #2
 8002614:	fa5f f989 	uxtb.w	r9, r9
 8002618:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800261c:	d820      	bhi.n	8002660 <_printf_float+0x158>
 800261e:	3901      	subs	r1, #1
 8002620:	464a      	mov	r2, r9
 8002622:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002626:	9107      	str	r1, [sp, #28]
 8002628:	f7ff ff30 	bl	800248c <__exponent>
 800262c:	9a08      	ldr	r2, [sp, #32]
 800262e:	9004      	str	r0, [sp, #16]
 8002630:	1813      	adds	r3, r2, r0
 8002632:	2a01      	cmp	r2, #1
 8002634:	6123      	str	r3, [r4, #16]
 8002636:	dc02      	bgt.n	800263e <_printf_float+0x136>
 8002638:	6822      	ldr	r2, [r4, #0]
 800263a:	07d2      	lsls	r2, r2, #31
 800263c:	d501      	bpl.n	8002642 <_printf_float+0x13a>
 800263e:	3301      	adds	r3, #1
 8002640:	6123      	str	r3, [r4, #16]
 8002642:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0a2      	beq.n	8002590 <_printf_float+0x88>
 800264a:	232d      	movs	r3, #45	; 0x2d
 800264c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002650:	e79e      	b.n	8002590 <_printf_float+0x88>
 8002652:	9904      	ldr	r1, [sp, #16]
 8002654:	2947      	cmp	r1, #71	; 0x47
 8002656:	d1c1      	bne.n	80025dc <_printf_float+0xd4>
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1bf      	bne.n	80025dc <_printf_float+0xd4>
 800265c:	2301      	movs	r3, #1
 800265e:	e7bc      	b.n	80025da <_printf_float+0xd2>
 8002660:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002664:	d118      	bne.n	8002698 <_printf_float+0x190>
 8002666:	2900      	cmp	r1, #0
 8002668:	6863      	ldr	r3, [r4, #4]
 800266a:	dd0b      	ble.n	8002684 <_printf_float+0x17c>
 800266c:	6121      	str	r1, [r4, #16]
 800266e:	b913      	cbnz	r3, 8002676 <_printf_float+0x16e>
 8002670:	6822      	ldr	r2, [r4, #0]
 8002672:	07d0      	lsls	r0, r2, #31
 8002674:	d502      	bpl.n	800267c <_printf_float+0x174>
 8002676:	3301      	adds	r3, #1
 8002678:	440b      	add	r3, r1
 800267a:	6123      	str	r3, [r4, #16]
 800267c:	2300      	movs	r3, #0
 800267e:	65a1      	str	r1, [r4, #88]	; 0x58
 8002680:	9304      	str	r3, [sp, #16]
 8002682:	e7de      	b.n	8002642 <_printf_float+0x13a>
 8002684:	b913      	cbnz	r3, 800268c <_printf_float+0x184>
 8002686:	6822      	ldr	r2, [r4, #0]
 8002688:	07d2      	lsls	r2, r2, #31
 800268a:	d501      	bpl.n	8002690 <_printf_float+0x188>
 800268c:	3302      	adds	r3, #2
 800268e:	e7f4      	b.n	800267a <_printf_float+0x172>
 8002690:	2301      	movs	r3, #1
 8002692:	e7f2      	b.n	800267a <_printf_float+0x172>
 8002694:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002698:	9b08      	ldr	r3, [sp, #32]
 800269a:	4299      	cmp	r1, r3
 800269c:	db05      	blt.n	80026aa <_printf_float+0x1a2>
 800269e:	6823      	ldr	r3, [r4, #0]
 80026a0:	6121      	str	r1, [r4, #16]
 80026a2:	07d8      	lsls	r0, r3, #31
 80026a4:	d5ea      	bpl.n	800267c <_printf_float+0x174>
 80026a6:	1c4b      	adds	r3, r1, #1
 80026a8:	e7e7      	b.n	800267a <_printf_float+0x172>
 80026aa:	2900      	cmp	r1, #0
 80026ac:	bfd4      	ite	le
 80026ae:	f1c1 0202 	rsble	r2, r1, #2
 80026b2:	2201      	movgt	r2, #1
 80026b4:	4413      	add	r3, r2
 80026b6:	e7e0      	b.n	800267a <_printf_float+0x172>
 80026b8:	6823      	ldr	r3, [r4, #0]
 80026ba:	055a      	lsls	r2, r3, #21
 80026bc:	d407      	bmi.n	80026ce <_printf_float+0x1c6>
 80026be:	6923      	ldr	r3, [r4, #16]
 80026c0:	4642      	mov	r2, r8
 80026c2:	4631      	mov	r1, r6
 80026c4:	4628      	mov	r0, r5
 80026c6:	47b8      	blx	r7
 80026c8:	3001      	adds	r0, #1
 80026ca:	d12a      	bne.n	8002722 <_printf_float+0x21a>
 80026cc:	e76a      	b.n	80025a4 <_printf_float+0x9c>
 80026ce:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80026d2:	f240 80e2 	bls.w	800289a <_printf_float+0x392>
 80026d6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80026da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80026de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e2:	d133      	bne.n	800274c <_printf_float+0x244>
 80026e4:	4a38      	ldr	r2, [pc, #224]	; (80027c8 <_printf_float+0x2c0>)
 80026e6:	2301      	movs	r3, #1
 80026e8:	4631      	mov	r1, r6
 80026ea:	4628      	mov	r0, r5
 80026ec:	47b8      	blx	r7
 80026ee:	3001      	adds	r0, #1
 80026f0:	f43f af58 	beq.w	80025a4 <_printf_float+0x9c>
 80026f4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	db02      	blt.n	8002702 <_printf_float+0x1fa>
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	07d8      	lsls	r0, r3, #31
 8002700:	d50f      	bpl.n	8002722 <_printf_float+0x21a>
 8002702:	4653      	mov	r3, sl
 8002704:	465a      	mov	r2, fp
 8002706:	4631      	mov	r1, r6
 8002708:	4628      	mov	r0, r5
 800270a:	47b8      	blx	r7
 800270c:	3001      	adds	r0, #1
 800270e:	f43f af49 	beq.w	80025a4 <_printf_float+0x9c>
 8002712:	f04f 0800 	mov.w	r8, #0
 8002716:	f104 091a 	add.w	r9, r4, #26
 800271a:	9b08      	ldr	r3, [sp, #32]
 800271c:	3b01      	subs	r3, #1
 800271e:	4543      	cmp	r3, r8
 8002720:	dc09      	bgt.n	8002736 <_printf_float+0x22e>
 8002722:	6823      	ldr	r3, [r4, #0]
 8002724:	079b      	lsls	r3, r3, #30
 8002726:	f100 8108 	bmi.w	800293a <_printf_float+0x432>
 800272a:	68e0      	ldr	r0, [r4, #12]
 800272c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800272e:	4298      	cmp	r0, r3
 8002730:	bfb8      	it	lt
 8002732:	4618      	movlt	r0, r3
 8002734:	e738      	b.n	80025a8 <_printf_float+0xa0>
 8002736:	2301      	movs	r3, #1
 8002738:	464a      	mov	r2, r9
 800273a:	4631      	mov	r1, r6
 800273c:	4628      	mov	r0, r5
 800273e:	47b8      	blx	r7
 8002740:	3001      	adds	r0, #1
 8002742:	f43f af2f 	beq.w	80025a4 <_printf_float+0x9c>
 8002746:	f108 0801 	add.w	r8, r8, #1
 800274a:	e7e6      	b.n	800271a <_printf_float+0x212>
 800274c:	9b07      	ldr	r3, [sp, #28]
 800274e:	2b00      	cmp	r3, #0
 8002750:	dc3c      	bgt.n	80027cc <_printf_float+0x2c4>
 8002752:	4a1d      	ldr	r2, [pc, #116]	; (80027c8 <_printf_float+0x2c0>)
 8002754:	2301      	movs	r3, #1
 8002756:	4631      	mov	r1, r6
 8002758:	4628      	mov	r0, r5
 800275a:	47b8      	blx	r7
 800275c:	3001      	adds	r0, #1
 800275e:	f43f af21 	beq.w	80025a4 <_printf_float+0x9c>
 8002762:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8002766:	4313      	orrs	r3, r2
 8002768:	d102      	bne.n	8002770 <_printf_float+0x268>
 800276a:	6823      	ldr	r3, [r4, #0]
 800276c:	07d9      	lsls	r1, r3, #31
 800276e:	d5d8      	bpl.n	8002722 <_printf_float+0x21a>
 8002770:	4653      	mov	r3, sl
 8002772:	465a      	mov	r2, fp
 8002774:	4631      	mov	r1, r6
 8002776:	4628      	mov	r0, r5
 8002778:	47b8      	blx	r7
 800277a:	3001      	adds	r0, #1
 800277c:	f43f af12 	beq.w	80025a4 <_printf_float+0x9c>
 8002780:	f04f 0900 	mov.w	r9, #0
 8002784:	f104 0a1a 	add.w	sl, r4, #26
 8002788:	9b07      	ldr	r3, [sp, #28]
 800278a:	425b      	negs	r3, r3
 800278c:	454b      	cmp	r3, r9
 800278e:	dc01      	bgt.n	8002794 <_printf_float+0x28c>
 8002790:	9b08      	ldr	r3, [sp, #32]
 8002792:	e795      	b.n	80026c0 <_printf_float+0x1b8>
 8002794:	2301      	movs	r3, #1
 8002796:	4652      	mov	r2, sl
 8002798:	4631      	mov	r1, r6
 800279a:	4628      	mov	r0, r5
 800279c:	47b8      	blx	r7
 800279e:	3001      	adds	r0, #1
 80027a0:	f43f af00 	beq.w	80025a4 <_printf_float+0x9c>
 80027a4:	f109 0901 	add.w	r9, r9, #1
 80027a8:	e7ee      	b.n	8002788 <_printf_float+0x280>
 80027aa:	bf00      	nop
 80027ac:	f3af 8000 	nop.w
 80027b0:	ffffffff 	.word	0xffffffff
 80027b4:	7fefffff 	.word	0x7fefffff
 80027b8:	080048ec 	.word	0x080048ec
 80027bc:	080048f0 	.word	0x080048f0
 80027c0:	080048f8 	.word	0x080048f8
 80027c4:	080048f4 	.word	0x080048f4
 80027c8:	080048fc 	.word	0x080048fc
 80027cc:	9a08      	ldr	r2, [sp, #32]
 80027ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80027d0:	429a      	cmp	r2, r3
 80027d2:	bfa8      	it	ge
 80027d4:	461a      	movge	r2, r3
 80027d6:	2a00      	cmp	r2, #0
 80027d8:	4691      	mov	r9, r2
 80027da:	dc38      	bgt.n	800284e <_printf_float+0x346>
 80027dc:	2300      	movs	r3, #0
 80027de:	9305      	str	r3, [sp, #20]
 80027e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80027e4:	f104 021a 	add.w	r2, r4, #26
 80027e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80027ea:	9905      	ldr	r1, [sp, #20]
 80027ec:	9304      	str	r3, [sp, #16]
 80027ee:	eba3 0309 	sub.w	r3, r3, r9
 80027f2:	428b      	cmp	r3, r1
 80027f4:	dc33      	bgt.n	800285e <_printf_float+0x356>
 80027f6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	db3c      	blt.n	8002878 <_printf_float+0x370>
 80027fe:	6823      	ldr	r3, [r4, #0]
 8002800:	07da      	lsls	r2, r3, #31
 8002802:	d439      	bmi.n	8002878 <_printf_float+0x370>
 8002804:	9a08      	ldr	r2, [sp, #32]
 8002806:	9b04      	ldr	r3, [sp, #16]
 8002808:	9907      	ldr	r1, [sp, #28]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	eba2 0901 	sub.w	r9, r2, r1
 8002810:	4599      	cmp	r9, r3
 8002812:	bfa8      	it	ge
 8002814:	4699      	movge	r9, r3
 8002816:	f1b9 0f00 	cmp.w	r9, #0
 800281a:	dc35      	bgt.n	8002888 <_printf_float+0x380>
 800281c:	f04f 0800 	mov.w	r8, #0
 8002820:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002824:	f104 0a1a 	add.w	sl, r4, #26
 8002828:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	eba3 0309 	sub.w	r3, r3, r9
 8002832:	4543      	cmp	r3, r8
 8002834:	f77f af75 	ble.w	8002722 <_printf_float+0x21a>
 8002838:	2301      	movs	r3, #1
 800283a:	4652      	mov	r2, sl
 800283c:	4631      	mov	r1, r6
 800283e:	4628      	mov	r0, r5
 8002840:	47b8      	blx	r7
 8002842:	3001      	adds	r0, #1
 8002844:	f43f aeae 	beq.w	80025a4 <_printf_float+0x9c>
 8002848:	f108 0801 	add.w	r8, r8, #1
 800284c:	e7ec      	b.n	8002828 <_printf_float+0x320>
 800284e:	4613      	mov	r3, r2
 8002850:	4631      	mov	r1, r6
 8002852:	4642      	mov	r2, r8
 8002854:	4628      	mov	r0, r5
 8002856:	47b8      	blx	r7
 8002858:	3001      	adds	r0, #1
 800285a:	d1bf      	bne.n	80027dc <_printf_float+0x2d4>
 800285c:	e6a2      	b.n	80025a4 <_printf_float+0x9c>
 800285e:	2301      	movs	r3, #1
 8002860:	4631      	mov	r1, r6
 8002862:	4628      	mov	r0, r5
 8002864:	9204      	str	r2, [sp, #16]
 8002866:	47b8      	blx	r7
 8002868:	3001      	adds	r0, #1
 800286a:	f43f ae9b 	beq.w	80025a4 <_printf_float+0x9c>
 800286e:	9b05      	ldr	r3, [sp, #20]
 8002870:	9a04      	ldr	r2, [sp, #16]
 8002872:	3301      	adds	r3, #1
 8002874:	9305      	str	r3, [sp, #20]
 8002876:	e7b7      	b.n	80027e8 <_printf_float+0x2e0>
 8002878:	4653      	mov	r3, sl
 800287a:	465a      	mov	r2, fp
 800287c:	4631      	mov	r1, r6
 800287e:	4628      	mov	r0, r5
 8002880:	47b8      	blx	r7
 8002882:	3001      	adds	r0, #1
 8002884:	d1be      	bne.n	8002804 <_printf_float+0x2fc>
 8002886:	e68d      	b.n	80025a4 <_printf_float+0x9c>
 8002888:	9a04      	ldr	r2, [sp, #16]
 800288a:	464b      	mov	r3, r9
 800288c:	4442      	add	r2, r8
 800288e:	4631      	mov	r1, r6
 8002890:	4628      	mov	r0, r5
 8002892:	47b8      	blx	r7
 8002894:	3001      	adds	r0, #1
 8002896:	d1c1      	bne.n	800281c <_printf_float+0x314>
 8002898:	e684      	b.n	80025a4 <_printf_float+0x9c>
 800289a:	9a08      	ldr	r2, [sp, #32]
 800289c:	2a01      	cmp	r2, #1
 800289e:	dc01      	bgt.n	80028a4 <_printf_float+0x39c>
 80028a0:	07db      	lsls	r3, r3, #31
 80028a2:	d537      	bpl.n	8002914 <_printf_float+0x40c>
 80028a4:	2301      	movs	r3, #1
 80028a6:	4642      	mov	r2, r8
 80028a8:	4631      	mov	r1, r6
 80028aa:	4628      	mov	r0, r5
 80028ac:	47b8      	blx	r7
 80028ae:	3001      	adds	r0, #1
 80028b0:	f43f ae78 	beq.w	80025a4 <_printf_float+0x9c>
 80028b4:	4653      	mov	r3, sl
 80028b6:	465a      	mov	r2, fp
 80028b8:	4631      	mov	r1, r6
 80028ba:	4628      	mov	r0, r5
 80028bc:	47b8      	blx	r7
 80028be:	3001      	adds	r0, #1
 80028c0:	f43f ae70 	beq.w	80025a4 <_printf_float+0x9c>
 80028c4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80028c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80028cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d0:	d01b      	beq.n	800290a <_printf_float+0x402>
 80028d2:	9b08      	ldr	r3, [sp, #32]
 80028d4:	f108 0201 	add.w	r2, r8, #1
 80028d8:	3b01      	subs	r3, #1
 80028da:	4631      	mov	r1, r6
 80028dc:	4628      	mov	r0, r5
 80028de:	47b8      	blx	r7
 80028e0:	3001      	adds	r0, #1
 80028e2:	d10e      	bne.n	8002902 <_printf_float+0x3fa>
 80028e4:	e65e      	b.n	80025a4 <_printf_float+0x9c>
 80028e6:	2301      	movs	r3, #1
 80028e8:	464a      	mov	r2, r9
 80028ea:	4631      	mov	r1, r6
 80028ec:	4628      	mov	r0, r5
 80028ee:	47b8      	blx	r7
 80028f0:	3001      	adds	r0, #1
 80028f2:	f43f ae57 	beq.w	80025a4 <_printf_float+0x9c>
 80028f6:	f108 0801 	add.w	r8, r8, #1
 80028fa:	9b08      	ldr	r3, [sp, #32]
 80028fc:	3b01      	subs	r3, #1
 80028fe:	4543      	cmp	r3, r8
 8002900:	dcf1      	bgt.n	80028e6 <_printf_float+0x3de>
 8002902:	9b04      	ldr	r3, [sp, #16]
 8002904:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002908:	e6db      	b.n	80026c2 <_printf_float+0x1ba>
 800290a:	f04f 0800 	mov.w	r8, #0
 800290e:	f104 091a 	add.w	r9, r4, #26
 8002912:	e7f2      	b.n	80028fa <_printf_float+0x3f2>
 8002914:	2301      	movs	r3, #1
 8002916:	4642      	mov	r2, r8
 8002918:	e7df      	b.n	80028da <_printf_float+0x3d2>
 800291a:	2301      	movs	r3, #1
 800291c:	464a      	mov	r2, r9
 800291e:	4631      	mov	r1, r6
 8002920:	4628      	mov	r0, r5
 8002922:	47b8      	blx	r7
 8002924:	3001      	adds	r0, #1
 8002926:	f43f ae3d 	beq.w	80025a4 <_printf_float+0x9c>
 800292a:	f108 0801 	add.w	r8, r8, #1
 800292e:	68e3      	ldr	r3, [r4, #12]
 8002930:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002932:	1a5b      	subs	r3, r3, r1
 8002934:	4543      	cmp	r3, r8
 8002936:	dcf0      	bgt.n	800291a <_printf_float+0x412>
 8002938:	e6f7      	b.n	800272a <_printf_float+0x222>
 800293a:	f04f 0800 	mov.w	r8, #0
 800293e:	f104 0919 	add.w	r9, r4, #25
 8002942:	e7f4      	b.n	800292e <_printf_float+0x426>

08002944 <_printf_common>:
 8002944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002948:	4616      	mov	r6, r2
 800294a:	4699      	mov	r9, r3
 800294c:	688a      	ldr	r2, [r1, #8]
 800294e:	690b      	ldr	r3, [r1, #16]
 8002950:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002954:	4293      	cmp	r3, r2
 8002956:	bfb8      	it	lt
 8002958:	4613      	movlt	r3, r2
 800295a:	6033      	str	r3, [r6, #0]
 800295c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002960:	4607      	mov	r7, r0
 8002962:	460c      	mov	r4, r1
 8002964:	b10a      	cbz	r2, 800296a <_printf_common+0x26>
 8002966:	3301      	adds	r3, #1
 8002968:	6033      	str	r3, [r6, #0]
 800296a:	6823      	ldr	r3, [r4, #0]
 800296c:	0699      	lsls	r1, r3, #26
 800296e:	bf42      	ittt	mi
 8002970:	6833      	ldrmi	r3, [r6, #0]
 8002972:	3302      	addmi	r3, #2
 8002974:	6033      	strmi	r3, [r6, #0]
 8002976:	6825      	ldr	r5, [r4, #0]
 8002978:	f015 0506 	ands.w	r5, r5, #6
 800297c:	d106      	bne.n	800298c <_printf_common+0x48>
 800297e:	f104 0a19 	add.w	sl, r4, #25
 8002982:	68e3      	ldr	r3, [r4, #12]
 8002984:	6832      	ldr	r2, [r6, #0]
 8002986:	1a9b      	subs	r3, r3, r2
 8002988:	42ab      	cmp	r3, r5
 800298a:	dc26      	bgt.n	80029da <_printf_common+0x96>
 800298c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002990:	1e13      	subs	r3, r2, #0
 8002992:	6822      	ldr	r2, [r4, #0]
 8002994:	bf18      	it	ne
 8002996:	2301      	movne	r3, #1
 8002998:	0692      	lsls	r2, r2, #26
 800299a:	d42b      	bmi.n	80029f4 <_printf_common+0xb0>
 800299c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80029a0:	4649      	mov	r1, r9
 80029a2:	4638      	mov	r0, r7
 80029a4:	47c0      	blx	r8
 80029a6:	3001      	adds	r0, #1
 80029a8:	d01e      	beq.n	80029e8 <_printf_common+0xa4>
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	68e5      	ldr	r5, [r4, #12]
 80029ae:	6832      	ldr	r2, [r6, #0]
 80029b0:	f003 0306 	and.w	r3, r3, #6
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	bf08      	it	eq
 80029b8:	1aad      	subeq	r5, r5, r2
 80029ba:	68a3      	ldr	r3, [r4, #8]
 80029bc:	6922      	ldr	r2, [r4, #16]
 80029be:	bf0c      	ite	eq
 80029c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029c4:	2500      	movne	r5, #0
 80029c6:	4293      	cmp	r3, r2
 80029c8:	bfc4      	itt	gt
 80029ca:	1a9b      	subgt	r3, r3, r2
 80029cc:	18ed      	addgt	r5, r5, r3
 80029ce:	2600      	movs	r6, #0
 80029d0:	341a      	adds	r4, #26
 80029d2:	42b5      	cmp	r5, r6
 80029d4:	d11a      	bne.n	8002a0c <_printf_common+0xc8>
 80029d6:	2000      	movs	r0, #0
 80029d8:	e008      	b.n	80029ec <_printf_common+0xa8>
 80029da:	2301      	movs	r3, #1
 80029dc:	4652      	mov	r2, sl
 80029de:	4649      	mov	r1, r9
 80029e0:	4638      	mov	r0, r7
 80029e2:	47c0      	blx	r8
 80029e4:	3001      	adds	r0, #1
 80029e6:	d103      	bne.n	80029f0 <_printf_common+0xac>
 80029e8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029f0:	3501      	adds	r5, #1
 80029f2:	e7c6      	b.n	8002982 <_printf_common+0x3e>
 80029f4:	18e1      	adds	r1, r4, r3
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	2030      	movs	r0, #48	; 0x30
 80029fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80029fe:	4422      	add	r2, r4
 8002a00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a08:	3302      	adds	r3, #2
 8002a0a:	e7c7      	b.n	800299c <_printf_common+0x58>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	4622      	mov	r2, r4
 8002a10:	4649      	mov	r1, r9
 8002a12:	4638      	mov	r0, r7
 8002a14:	47c0      	blx	r8
 8002a16:	3001      	adds	r0, #1
 8002a18:	d0e6      	beq.n	80029e8 <_printf_common+0xa4>
 8002a1a:	3601      	adds	r6, #1
 8002a1c:	e7d9      	b.n	80029d2 <_printf_common+0x8e>
	...

08002a20 <_printf_i>:
 8002a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a24:	460c      	mov	r4, r1
 8002a26:	4691      	mov	r9, r2
 8002a28:	7e27      	ldrb	r7, [r4, #24]
 8002a2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002a2c:	2f78      	cmp	r7, #120	; 0x78
 8002a2e:	4680      	mov	r8, r0
 8002a30:	469a      	mov	sl, r3
 8002a32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a36:	d807      	bhi.n	8002a48 <_printf_i+0x28>
 8002a38:	2f62      	cmp	r7, #98	; 0x62
 8002a3a:	d80a      	bhi.n	8002a52 <_printf_i+0x32>
 8002a3c:	2f00      	cmp	r7, #0
 8002a3e:	f000 80d8 	beq.w	8002bf2 <_printf_i+0x1d2>
 8002a42:	2f58      	cmp	r7, #88	; 0x58
 8002a44:	f000 80a3 	beq.w	8002b8e <_printf_i+0x16e>
 8002a48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002a4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002a50:	e03a      	b.n	8002ac8 <_printf_i+0xa8>
 8002a52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002a56:	2b15      	cmp	r3, #21
 8002a58:	d8f6      	bhi.n	8002a48 <_printf_i+0x28>
 8002a5a:	a001      	add	r0, pc, #4	; (adr r0, 8002a60 <_printf_i+0x40>)
 8002a5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002a60:	08002ab9 	.word	0x08002ab9
 8002a64:	08002acd 	.word	0x08002acd
 8002a68:	08002a49 	.word	0x08002a49
 8002a6c:	08002a49 	.word	0x08002a49
 8002a70:	08002a49 	.word	0x08002a49
 8002a74:	08002a49 	.word	0x08002a49
 8002a78:	08002acd 	.word	0x08002acd
 8002a7c:	08002a49 	.word	0x08002a49
 8002a80:	08002a49 	.word	0x08002a49
 8002a84:	08002a49 	.word	0x08002a49
 8002a88:	08002a49 	.word	0x08002a49
 8002a8c:	08002bd9 	.word	0x08002bd9
 8002a90:	08002afd 	.word	0x08002afd
 8002a94:	08002bbb 	.word	0x08002bbb
 8002a98:	08002a49 	.word	0x08002a49
 8002a9c:	08002a49 	.word	0x08002a49
 8002aa0:	08002bfb 	.word	0x08002bfb
 8002aa4:	08002a49 	.word	0x08002a49
 8002aa8:	08002afd 	.word	0x08002afd
 8002aac:	08002a49 	.word	0x08002a49
 8002ab0:	08002a49 	.word	0x08002a49
 8002ab4:	08002bc3 	.word	0x08002bc3
 8002ab8:	680b      	ldr	r3, [r1, #0]
 8002aba:	1d1a      	adds	r2, r3, #4
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	600a      	str	r2, [r1, #0]
 8002ac0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002ac4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0a3      	b.n	8002c14 <_printf_i+0x1f4>
 8002acc:	6825      	ldr	r5, [r4, #0]
 8002ace:	6808      	ldr	r0, [r1, #0]
 8002ad0:	062e      	lsls	r6, r5, #24
 8002ad2:	f100 0304 	add.w	r3, r0, #4
 8002ad6:	d50a      	bpl.n	8002aee <_printf_i+0xce>
 8002ad8:	6805      	ldr	r5, [r0, #0]
 8002ada:	600b      	str	r3, [r1, #0]
 8002adc:	2d00      	cmp	r5, #0
 8002ade:	da03      	bge.n	8002ae8 <_printf_i+0xc8>
 8002ae0:	232d      	movs	r3, #45	; 0x2d
 8002ae2:	426d      	negs	r5, r5
 8002ae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ae8:	485e      	ldr	r0, [pc, #376]	; (8002c64 <_printf_i+0x244>)
 8002aea:	230a      	movs	r3, #10
 8002aec:	e019      	b.n	8002b22 <_printf_i+0x102>
 8002aee:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002af2:	6805      	ldr	r5, [r0, #0]
 8002af4:	600b      	str	r3, [r1, #0]
 8002af6:	bf18      	it	ne
 8002af8:	b22d      	sxthne	r5, r5
 8002afa:	e7ef      	b.n	8002adc <_printf_i+0xbc>
 8002afc:	680b      	ldr	r3, [r1, #0]
 8002afe:	6825      	ldr	r5, [r4, #0]
 8002b00:	1d18      	adds	r0, r3, #4
 8002b02:	6008      	str	r0, [r1, #0]
 8002b04:	0628      	lsls	r0, r5, #24
 8002b06:	d501      	bpl.n	8002b0c <_printf_i+0xec>
 8002b08:	681d      	ldr	r5, [r3, #0]
 8002b0a:	e002      	b.n	8002b12 <_printf_i+0xf2>
 8002b0c:	0669      	lsls	r1, r5, #25
 8002b0e:	d5fb      	bpl.n	8002b08 <_printf_i+0xe8>
 8002b10:	881d      	ldrh	r5, [r3, #0]
 8002b12:	4854      	ldr	r0, [pc, #336]	; (8002c64 <_printf_i+0x244>)
 8002b14:	2f6f      	cmp	r7, #111	; 0x6f
 8002b16:	bf0c      	ite	eq
 8002b18:	2308      	moveq	r3, #8
 8002b1a:	230a      	movne	r3, #10
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b22:	6866      	ldr	r6, [r4, #4]
 8002b24:	60a6      	str	r6, [r4, #8]
 8002b26:	2e00      	cmp	r6, #0
 8002b28:	bfa2      	ittt	ge
 8002b2a:	6821      	ldrge	r1, [r4, #0]
 8002b2c:	f021 0104 	bicge.w	r1, r1, #4
 8002b30:	6021      	strge	r1, [r4, #0]
 8002b32:	b90d      	cbnz	r5, 8002b38 <_printf_i+0x118>
 8002b34:	2e00      	cmp	r6, #0
 8002b36:	d04d      	beq.n	8002bd4 <_printf_i+0x1b4>
 8002b38:	4616      	mov	r6, r2
 8002b3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8002b3e:	fb03 5711 	mls	r7, r3, r1, r5
 8002b42:	5dc7      	ldrb	r7, [r0, r7]
 8002b44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002b48:	462f      	mov	r7, r5
 8002b4a:	42bb      	cmp	r3, r7
 8002b4c:	460d      	mov	r5, r1
 8002b4e:	d9f4      	bls.n	8002b3a <_printf_i+0x11a>
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d10b      	bne.n	8002b6c <_printf_i+0x14c>
 8002b54:	6823      	ldr	r3, [r4, #0]
 8002b56:	07df      	lsls	r7, r3, #31
 8002b58:	d508      	bpl.n	8002b6c <_printf_i+0x14c>
 8002b5a:	6923      	ldr	r3, [r4, #16]
 8002b5c:	6861      	ldr	r1, [r4, #4]
 8002b5e:	4299      	cmp	r1, r3
 8002b60:	bfde      	ittt	le
 8002b62:	2330      	movle	r3, #48	; 0x30
 8002b64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002b68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002b6c:	1b92      	subs	r2, r2, r6
 8002b6e:	6122      	str	r2, [r4, #16]
 8002b70:	f8cd a000 	str.w	sl, [sp]
 8002b74:	464b      	mov	r3, r9
 8002b76:	aa03      	add	r2, sp, #12
 8002b78:	4621      	mov	r1, r4
 8002b7a:	4640      	mov	r0, r8
 8002b7c:	f7ff fee2 	bl	8002944 <_printf_common>
 8002b80:	3001      	adds	r0, #1
 8002b82:	d14c      	bne.n	8002c1e <_printf_i+0x1fe>
 8002b84:	f04f 30ff 	mov.w	r0, #4294967295
 8002b88:	b004      	add	sp, #16
 8002b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b8e:	4835      	ldr	r0, [pc, #212]	; (8002c64 <_printf_i+0x244>)
 8002b90:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002b94:	6823      	ldr	r3, [r4, #0]
 8002b96:	680e      	ldr	r6, [r1, #0]
 8002b98:	061f      	lsls	r7, r3, #24
 8002b9a:	f856 5b04 	ldr.w	r5, [r6], #4
 8002b9e:	600e      	str	r6, [r1, #0]
 8002ba0:	d514      	bpl.n	8002bcc <_printf_i+0x1ac>
 8002ba2:	07d9      	lsls	r1, r3, #31
 8002ba4:	bf44      	itt	mi
 8002ba6:	f043 0320 	orrmi.w	r3, r3, #32
 8002baa:	6023      	strmi	r3, [r4, #0]
 8002bac:	b91d      	cbnz	r5, 8002bb6 <_printf_i+0x196>
 8002bae:	6823      	ldr	r3, [r4, #0]
 8002bb0:	f023 0320 	bic.w	r3, r3, #32
 8002bb4:	6023      	str	r3, [r4, #0]
 8002bb6:	2310      	movs	r3, #16
 8002bb8:	e7b0      	b.n	8002b1c <_printf_i+0xfc>
 8002bba:	6823      	ldr	r3, [r4, #0]
 8002bbc:	f043 0320 	orr.w	r3, r3, #32
 8002bc0:	6023      	str	r3, [r4, #0]
 8002bc2:	2378      	movs	r3, #120	; 0x78
 8002bc4:	4828      	ldr	r0, [pc, #160]	; (8002c68 <_printf_i+0x248>)
 8002bc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002bca:	e7e3      	b.n	8002b94 <_printf_i+0x174>
 8002bcc:	065e      	lsls	r6, r3, #25
 8002bce:	bf48      	it	mi
 8002bd0:	b2ad      	uxthmi	r5, r5
 8002bd2:	e7e6      	b.n	8002ba2 <_printf_i+0x182>
 8002bd4:	4616      	mov	r6, r2
 8002bd6:	e7bb      	b.n	8002b50 <_printf_i+0x130>
 8002bd8:	680b      	ldr	r3, [r1, #0]
 8002bda:	6826      	ldr	r6, [r4, #0]
 8002bdc:	6960      	ldr	r0, [r4, #20]
 8002bde:	1d1d      	adds	r5, r3, #4
 8002be0:	600d      	str	r5, [r1, #0]
 8002be2:	0635      	lsls	r5, r6, #24
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	d501      	bpl.n	8002bec <_printf_i+0x1cc>
 8002be8:	6018      	str	r0, [r3, #0]
 8002bea:	e002      	b.n	8002bf2 <_printf_i+0x1d2>
 8002bec:	0671      	lsls	r1, r6, #25
 8002bee:	d5fb      	bpl.n	8002be8 <_printf_i+0x1c8>
 8002bf0:	8018      	strh	r0, [r3, #0]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	6123      	str	r3, [r4, #16]
 8002bf6:	4616      	mov	r6, r2
 8002bf8:	e7ba      	b.n	8002b70 <_printf_i+0x150>
 8002bfa:	680b      	ldr	r3, [r1, #0]
 8002bfc:	1d1a      	adds	r2, r3, #4
 8002bfe:	600a      	str	r2, [r1, #0]
 8002c00:	681e      	ldr	r6, [r3, #0]
 8002c02:	6862      	ldr	r2, [r4, #4]
 8002c04:	2100      	movs	r1, #0
 8002c06:	4630      	mov	r0, r6
 8002c08:	f7fd fb22 	bl	8000250 <memchr>
 8002c0c:	b108      	cbz	r0, 8002c12 <_printf_i+0x1f2>
 8002c0e:	1b80      	subs	r0, r0, r6
 8002c10:	6060      	str	r0, [r4, #4]
 8002c12:	6863      	ldr	r3, [r4, #4]
 8002c14:	6123      	str	r3, [r4, #16]
 8002c16:	2300      	movs	r3, #0
 8002c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c1c:	e7a8      	b.n	8002b70 <_printf_i+0x150>
 8002c1e:	6923      	ldr	r3, [r4, #16]
 8002c20:	4632      	mov	r2, r6
 8002c22:	4649      	mov	r1, r9
 8002c24:	4640      	mov	r0, r8
 8002c26:	47d0      	blx	sl
 8002c28:	3001      	adds	r0, #1
 8002c2a:	d0ab      	beq.n	8002b84 <_printf_i+0x164>
 8002c2c:	6823      	ldr	r3, [r4, #0]
 8002c2e:	079b      	lsls	r3, r3, #30
 8002c30:	d413      	bmi.n	8002c5a <_printf_i+0x23a>
 8002c32:	68e0      	ldr	r0, [r4, #12]
 8002c34:	9b03      	ldr	r3, [sp, #12]
 8002c36:	4298      	cmp	r0, r3
 8002c38:	bfb8      	it	lt
 8002c3a:	4618      	movlt	r0, r3
 8002c3c:	e7a4      	b.n	8002b88 <_printf_i+0x168>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	4632      	mov	r2, r6
 8002c42:	4649      	mov	r1, r9
 8002c44:	4640      	mov	r0, r8
 8002c46:	47d0      	blx	sl
 8002c48:	3001      	adds	r0, #1
 8002c4a:	d09b      	beq.n	8002b84 <_printf_i+0x164>
 8002c4c:	3501      	adds	r5, #1
 8002c4e:	68e3      	ldr	r3, [r4, #12]
 8002c50:	9903      	ldr	r1, [sp, #12]
 8002c52:	1a5b      	subs	r3, r3, r1
 8002c54:	42ab      	cmp	r3, r5
 8002c56:	dcf2      	bgt.n	8002c3e <_printf_i+0x21e>
 8002c58:	e7eb      	b.n	8002c32 <_printf_i+0x212>
 8002c5a:	2500      	movs	r5, #0
 8002c5c:	f104 0619 	add.w	r6, r4, #25
 8002c60:	e7f5      	b.n	8002c4e <_printf_i+0x22e>
 8002c62:	bf00      	nop
 8002c64:	080048fe 	.word	0x080048fe
 8002c68:	0800490f 	.word	0x0800490f

08002c6c <iprintf>:
 8002c6c:	b40f      	push	{r0, r1, r2, r3}
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <iprintf+0x2c>)
 8002c70:	b513      	push	{r0, r1, r4, lr}
 8002c72:	681c      	ldr	r4, [r3, #0]
 8002c74:	b124      	cbz	r4, 8002c80 <iprintf+0x14>
 8002c76:	69a3      	ldr	r3, [r4, #24]
 8002c78:	b913      	cbnz	r3, 8002c80 <iprintf+0x14>
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	f7ff fa3c 	bl	80020f8 <__sinit>
 8002c80:	ab05      	add	r3, sp, #20
 8002c82:	9a04      	ldr	r2, [sp, #16]
 8002c84:	68a1      	ldr	r1, [r4, #8]
 8002c86:	9301      	str	r3, [sp, #4]
 8002c88:	4620      	mov	r0, r4
 8002c8a:	f001 fa79 	bl	8004180 <_vfiprintf_r>
 8002c8e:	b002      	add	sp, #8
 8002c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c94:	b004      	add	sp, #16
 8002c96:	4770      	bx	lr
 8002c98:	2000000c 	.word	0x2000000c

08002c9c <_sbrk_r>:
 8002c9c:	b538      	push	{r3, r4, r5, lr}
 8002c9e:	4d06      	ldr	r5, [pc, #24]	; (8002cb8 <_sbrk_r+0x1c>)
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	4604      	mov	r4, r0
 8002ca4:	4608      	mov	r0, r1
 8002ca6:	602b      	str	r3, [r5, #0]
 8002ca8:	f001 fdbc 	bl	8004824 <_sbrk>
 8002cac:	1c43      	adds	r3, r0, #1
 8002cae:	d102      	bne.n	8002cb6 <_sbrk_r+0x1a>
 8002cb0:	682b      	ldr	r3, [r5, #0]
 8002cb2:	b103      	cbz	r3, 8002cb6 <_sbrk_r+0x1a>
 8002cb4:	6023      	str	r3, [r4, #0]
 8002cb6:	bd38      	pop	{r3, r4, r5, pc}
 8002cb8:	200002d8 	.word	0x200002d8

08002cbc <__sread>:
 8002cbc:	b510      	push	{r4, lr}
 8002cbe:	460c      	mov	r4, r1
 8002cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cc4:	f001 fb8c 	bl	80043e0 <_read_r>
 8002cc8:	2800      	cmp	r0, #0
 8002cca:	bfab      	itete	ge
 8002ccc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002cce:	89a3      	ldrhlt	r3, [r4, #12]
 8002cd0:	181b      	addge	r3, r3, r0
 8002cd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002cd6:	bfac      	ite	ge
 8002cd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8002cda:	81a3      	strhlt	r3, [r4, #12]
 8002cdc:	bd10      	pop	{r4, pc}

08002cde <__swrite>:
 8002cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ce2:	461f      	mov	r7, r3
 8002ce4:	898b      	ldrh	r3, [r1, #12]
 8002ce6:	05db      	lsls	r3, r3, #23
 8002ce8:	4605      	mov	r5, r0
 8002cea:	460c      	mov	r4, r1
 8002cec:	4616      	mov	r6, r2
 8002cee:	d505      	bpl.n	8002cfc <__swrite+0x1e>
 8002cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f000 fe58 	bl	80039ac <_lseek_r>
 8002cfc:	89a3      	ldrh	r3, [r4, #12]
 8002cfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d06:	81a3      	strh	r3, [r4, #12]
 8002d08:	4632      	mov	r2, r6
 8002d0a:	463b      	mov	r3, r7
 8002d0c:	4628      	mov	r0, r5
 8002d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d12:	f000 b817 	b.w	8002d44 <_write_r>

08002d16 <__sseek>:
 8002d16:	b510      	push	{r4, lr}
 8002d18:	460c      	mov	r4, r1
 8002d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d1e:	f000 fe45 	bl	80039ac <_lseek_r>
 8002d22:	1c43      	adds	r3, r0, #1
 8002d24:	89a3      	ldrh	r3, [r4, #12]
 8002d26:	bf15      	itete	ne
 8002d28:	6560      	strne	r0, [r4, #84]	; 0x54
 8002d2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002d2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002d32:	81a3      	strheq	r3, [r4, #12]
 8002d34:	bf18      	it	ne
 8002d36:	81a3      	strhne	r3, [r4, #12]
 8002d38:	bd10      	pop	{r4, pc}

08002d3a <__sclose>:
 8002d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d3e:	f000 b813 	b.w	8002d68 <_close_r>
	...

08002d44 <_write_r>:
 8002d44:	b538      	push	{r3, r4, r5, lr}
 8002d46:	4d07      	ldr	r5, [pc, #28]	; (8002d64 <_write_r+0x20>)
 8002d48:	4604      	mov	r4, r0
 8002d4a:	4608      	mov	r0, r1
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	2200      	movs	r2, #0
 8002d50:	602a      	str	r2, [r5, #0]
 8002d52:	461a      	mov	r2, r3
 8002d54:	f7fd fda6 	bl	80008a4 <_write>
 8002d58:	1c43      	adds	r3, r0, #1
 8002d5a:	d102      	bne.n	8002d62 <_write_r+0x1e>
 8002d5c:	682b      	ldr	r3, [r5, #0]
 8002d5e:	b103      	cbz	r3, 8002d62 <_write_r+0x1e>
 8002d60:	6023      	str	r3, [r4, #0]
 8002d62:	bd38      	pop	{r3, r4, r5, pc}
 8002d64:	200002d8 	.word	0x200002d8

08002d68 <_close_r>:
 8002d68:	b538      	push	{r3, r4, r5, lr}
 8002d6a:	4d06      	ldr	r5, [pc, #24]	; (8002d84 <_close_r+0x1c>)
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	4604      	mov	r4, r0
 8002d70:	4608      	mov	r0, r1
 8002d72:	602b      	str	r3, [r5, #0]
 8002d74:	f001 fd26 	bl	80047c4 <_close>
 8002d78:	1c43      	adds	r3, r0, #1
 8002d7a:	d102      	bne.n	8002d82 <_close_r+0x1a>
 8002d7c:	682b      	ldr	r3, [r5, #0]
 8002d7e:	b103      	cbz	r3, 8002d82 <_close_r+0x1a>
 8002d80:	6023      	str	r3, [r4, #0]
 8002d82:	bd38      	pop	{r3, r4, r5, pc}
 8002d84:	200002d8 	.word	0x200002d8

08002d88 <quorem>:
 8002d88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d8c:	6903      	ldr	r3, [r0, #16]
 8002d8e:	690c      	ldr	r4, [r1, #16]
 8002d90:	42a3      	cmp	r3, r4
 8002d92:	4607      	mov	r7, r0
 8002d94:	f2c0 8081 	blt.w	8002e9a <quorem+0x112>
 8002d98:	3c01      	subs	r4, #1
 8002d9a:	f101 0814 	add.w	r8, r1, #20
 8002d9e:	f100 0514 	add.w	r5, r0, #20
 8002da2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002da6:	9301      	str	r3, [sp, #4]
 8002da8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002dac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002db0:	3301      	adds	r3, #1
 8002db2:	429a      	cmp	r2, r3
 8002db4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002db8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002dbc:	fbb2 f6f3 	udiv	r6, r2, r3
 8002dc0:	d331      	bcc.n	8002e26 <quorem+0x9e>
 8002dc2:	f04f 0e00 	mov.w	lr, #0
 8002dc6:	4640      	mov	r0, r8
 8002dc8:	46ac      	mov	ip, r5
 8002dca:	46f2      	mov	sl, lr
 8002dcc:	f850 2b04 	ldr.w	r2, [r0], #4
 8002dd0:	b293      	uxth	r3, r2
 8002dd2:	fb06 e303 	mla	r3, r6, r3, lr
 8002dd6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	ebaa 0303 	sub.w	r3, sl, r3
 8002de0:	0c12      	lsrs	r2, r2, #16
 8002de2:	f8dc a000 	ldr.w	sl, [ip]
 8002de6:	fb06 e202 	mla	r2, r6, r2, lr
 8002dea:	fa13 f38a 	uxtah	r3, r3, sl
 8002dee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002df2:	fa1f fa82 	uxth.w	sl, r2
 8002df6:	f8dc 2000 	ldr.w	r2, [ip]
 8002dfa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8002dfe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e08:	4581      	cmp	r9, r0
 8002e0a:	f84c 3b04 	str.w	r3, [ip], #4
 8002e0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002e12:	d2db      	bcs.n	8002dcc <quorem+0x44>
 8002e14:	f855 300b 	ldr.w	r3, [r5, fp]
 8002e18:	b92b      	cbnz	r3, 8002e26 <quorem+0x9e>
 8002e1a:	9b01      	ldr	r3, [sp, #4]
 8002e1c:	3b04      	subs	r3, #4
 8002e1e:	429d      	cmp	r5, r3
 8002e20:	461a      	mov	r2, r3
 8002e22:	d32e      	bcc.n	8002e82 <quorem+0xfa>
 8002e24:	613c      	str	r4, [r7, #16]
 8002e26:	4638      	mov	r0, r7
 8002e28:	f001 f872 	bl	8003f10 <__mcmp>
 8002e2c:	2800      	cmp	r0, #0
 8002e2e:	db24      	blt.n	8002e7a <quorem+0xf2>
 8002e30:	3601      	adds	r6, #1
 8002e32:	4628      	mov	r0, r5
 8002e34:	f04f 0c00 	mov.w	ip, #0
 8002e38:	f858 2b04 	ldr.w	r2, [r8], #4
 8002e3c:	f8d0 e000 	ldr.w	lr, [r0]
 8002e40:	b293      	uxth	r3, r2
 8002e42:	ebac 0303 	sub.w	r3, ip, r3
 8002e46:	0c12      	lsrs	r2, r2, #16
 8002e48:	fa13 f38e 	uxtah	r3, r3, lr
 8002e4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002e50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e5a:	45c1      	cmp	r9, r8
 8002e5c:	f840 3b04 	str.w	r3, [r0], #4
 8002e60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002e64:	d2e8      	bcs.n	8002e38 <quorem+0xb0>
 8002e66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002e6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002e6e:	b922      	cbnz	r2, 8002e7a <quorem+0xf2>
 8002e70:	3b04      	subs	r3, #4
 8002e72:	429d      	cmp	r5, r3
 8002e74:	461a      	mov	r2, r3
 8002e76:	d30a      	bcc.n	8002e8e <quorem+0x106>
 8002e78:	613c      	str	r4, [r7, #16]
 8002e7a:	4630      	mov	r0, r6
 8002e7c:	b003      	add	sp, #12
 8002e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	3b04      	subs	r3, #4
 8002e86:	2a00      	cmp	r2, #0
 8002e88:	d1cc      	bne.n	8002e24 <quorem+0x9c>
 8002e8a:	3c01      	subs	r4, #1
 8002e8c:	e7c7      	b.n	8002e1e <quorem+0x96>
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	3b04      	subs	r3, #4
 8002e92:	2a00      	cmp	r2, #0
 8002e94:	d1f0      	bne.n	8002e78 <quorem+0xf0>
 8002e96:	3c01      	subs	r4, #1
 8002e98:	e7eb      	b.n	8002e72 <quorem+0xea>
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	e7ee      	b.n	8002e7c <quorem+0xf4>
	...

08002ea0 <_dtoa_r>:
 8002ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ea4:	ec59 8b10 	vmov	r8, r9, d0
 8002ea8:	b095      	sub	sp, #84	; 0x54
 8002eaa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002eac:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8002eae:	9107      	str	r1, [sp, #28]
 8002eb0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002eb4:	4606      	mov	r6, r0
 8002eb6:	9209      	str	r2, [sp, #36]	; 0x24
 8002eb8:	9310      	str	r3, [sp, #64]	; 0x40
 8002eba:	b975      	cbnz	r5, 8002eda <_dtoa_r+0x3a>
 8002ebc:	2010      	movs	r0, #16
 8002ebe:	f000 fd87 	bl	80039d0 <malloc>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	6270      	str	r0, [r6, #36]	; 0x24
 8002ec6:	b920      	cbnz	r0, 8002ed2 <_dtoa_r+0x32>
 8002ec8:	4bab      	ldr	r3, [pc, #684]	; (8003178 <_dtoa_r+0x2d8>)
 8002eca:	21ea      	movs	r1, #234	; 0xea
 8002ecc:	48ab      	ldr	r0, [pc, #684]	; (800317c <_dtoa_r+0x2dc>)
 8002ece:	f001 fb59 	bl	8004584 <__assert_func>
 8002ed2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002ed6:	6005      	str	r5, [r0, #0]
 8002ed8:	60c5      	str	r5, [r0, #12]
 8002eda:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002edc:	6819      	ldr	r1, [r3, #0]
 8002ede:	b151      	cbz	r1, 8002ef6 <_dtoa_r+0x56>
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	604a      	str	r2, [r1, #4]
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	4093      	lsls	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
 8002eea:	4630      	mov	r0, r6
 8002eec:	f000 fdd2 	bl	8003a94 <_Bfree>
 8002ef0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	f1b9 0300 	subs.w	r3, r9, #0
 8002efa:	bfbb      	ittet	lt
 8002efc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002f00:	9303      	strlt	r3, [sp, #12]
 8002f02:	2300      	movge	r3, #0
 8002f04:	2201      	movlt	r2, #1
 8002f06:	bfac      	ite	ge
 8002f08:	6023      	strge	r3, [r4, #0]
 8002f0a:	6022      	strlt	r2, [r4, #0]
 8002f0c:	4b9c      	ldr	r3, [pc, #624]	; (8003180 <_dtoa_r+0x2e0>)
 8002f0e:	9c03      	ldr	r4, [sp, #12]
 8002f10:	43a3      	bics	r3, r4
 8002f12:	d11a      	bne.n	8002f4a <_dtoa_r+0xaa>
 8002f14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002f16:	f242 730f 	movw	r3, #9999	; 0x270f
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8002f20:	ea53 0308 	orrs.w	r3, r3, r8
 8002f24:	f000 8512 	beq.w	800394c <_dtoa_r+0xaac>
 8002f28:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002f2a:	b953      	cbnz	r3, 8002f42 <_dtoa_r+0xa2>
 8002f2c:	4b95      	ldr	r3, [pc, #596]	; (8003184 <_dtoa_r+0x2e4>)
 8002f2e:	e01f      	b.n	8002f70 <_dtoa_r+0xd0>
 8002f30:	4b95      	ldr	r3, [pc, #596]	; (8003188 <_dtoa_r+0x2e8>)
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	3308      	adds	r3, #8
 8002f36:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	9800      	ldr	r0, [sp, #0]
 8002f3c:	b015      	add	sp, #84	; 0x54
 8002f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f42:	4b90      	ldr	r3, [pc, #576]	; (8003184 <_dtoa_r+0x2e4>)
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	3303      	adds	r3, #3
 8002f48:	e7f5      	b.n	8002f36 <_dtoa_r+0x96>
 8002f4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002f4e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f56:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002f5a:	d10b      	bne.n	8002f74 <_dtoa_r+0xd4>
 8002f5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002f5e:	2301      	movs	r3, #1
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 84ee 	beq.w	8003946 <_dtoa_r+0xaa6>
 8002f6a:	4888      	ldr	r0, [pc, #544]	; (800318c <_dtoa_r+0x2ec>)
 8002f6c:	6018      	str	r0, [r3, #0]
 8002f6e:	1e43      	subs	r3, r0, #1
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	e7e2      	b.n	8002f3a <_dtoa_r+0x9a>
 8002f74:	a913      	add	r1, sp, #76	; 0x4c
 8002f76:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8002f7a:	aa12      	add	r2, sp, #72	; 0x48
 8002f7c:	4630      	mov	r0, r6
 8002f7e:	f001 f86b 	bl	8004058 <__d2b>
 8002f82:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8002f86:	4605      	mov	r5, r0
 8002f88:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002f8a:	2900      	cmp	r1, #0
 8002f8c:	d047      	beq.n	800301e <_dtoa_r+0x17e>
 8002f8e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8002f90:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8002f94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002f98:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8002f9c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002fa0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8002fa4:	2400      	movs	r4, #0
 8002fa6:	ec43 2b16 	vmov	d6, r2, r3
 8002faa:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8002fae:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8003160 <_dtoa_r+0x2c0>
 8002fb2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002fb6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8003168 <_dtoa_r+0x2c8>
 8002fba:	eea7 6b05 	vfma.f64	d6, d7, d5
 8002fbe:	eeb0 7b46 	vmov.f64	d7, d6
 8002fc2:	ee06 1a90 	vmov	s13, r1
 8002fc6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8002fca:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8003170 <_dtoa_r+0x2d0>
 8002fce:	eea5 7b06 	vfma.f64	d7, d5, d6
 8002fd2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8002fd6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fde:	ee16 ba90 	vmov	fp, s13
 8002fe2:	9411      	str	r4, [sp, #68]	; 0x44
 8002fe4:	d508      	bpl.n	8002ff8 <_dtoa_r+0x158>
 8002fe6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8002fea:	eeb4 6b47 	vcmp.f64	d6, d7
 8002fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff2:	bf18      	it	ne
 8002ff4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8002ff8:	f1bb 0f16 	cmp.w	fp, #22
 8002ffc:	d832      	bhi.n	8003064 <_dtoa_r+0x1c4>
 8002ffe:	4b64      	ldr	r3, [pc, #400]	; (8003190 <_dtoa_r+0x2f0>)
 8003000:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003004:	ed93 7b00 	vldr	d7, [r3]
 8003008:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800300c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003014:	d501      	bpl.n	800301a <_dtoa_r+0x17a>
 8003016:	f10b 3bff 	add.w	fp, fp, #4294967295
 800301a:	2300      	movs	r3, #0
 800301c:	e023      	b.n	8003066 <_dtoa_r+0x1c6>
 800301e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8003020:	4401      	add	r1, r0
 8003022:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8003026:	2b20      	cmp	r3, #32
 8003028:	bfc3      	ittte	gt
 800302a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800302e:	fa04 f303 	lslgt.w	r3, r4, r3
 8003032:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8003036:	f1c3 0320 	rsble	r3, r3, #32
 800303a:	bfc6      	itte	gt
 800303c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8003040:	ea43 0308 	orrgt.w	r3, r3, r8
 8003044:	fa08 f303 	lslle.w	r3, r8, r3
 8003048:	ee07 3a90 	vmov	s15, r3
 800304c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003050:	3901      	subs	r1, #1
 8003052:	ed8d 7b00 	vstr	d7, [sp]
 8003056:	9c01      	ldr	r4, [sp, #4]
 8003058:	e9dd 2300 	ldrd	r2, r3, [sp]
 800305c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8003060:	2401      	movs	r4, #1
 8003062:	e7a0      	b.n	8002fa6 <_dtoa_r+0x106>
 8003064:	2301      	movs	r3, #1
 8003066:	930f      	str	r3, [sp, #60]	; 0x3c
 8003068:	1a43      	subs	r3, r0, r1
 800306a:	1e5a      	subs	r2, r3, #1
 800306c:	bf45      	ittet	mi
 800306e:	f1c3 0301 	rsbmi	r3, r3, #1
 8003072:	9305      	strmi	r3, [sp, #20]
 8003074:	2300      	movpl	r3, #0
 8003076:	2300      	movmi	r3, #0
 8003078:	9206      	str	r2, [sp, #24]
 800307a:	bf54      	ite	pl
 800307c:	9305      	strpl	r3, [sp, #20]
 800307e:	9306      	strmi	r3, [sp, #24]
 8003080:	f1bb 0f00 	cmp.w	fp, #0
 8003084:	db18      	blt.n	80030b8 <_dtoa_r+0x218>
 8003086:	9b06      	ldr	r3, [sp, #24]
 8003088:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800308c:	445b      	add	r3, fp
 800308e:	9306      	str	r3, [sp, #24]
 8003090:	2300      	movs	r3, #0
 8003092:	9a07      	ldr	r2, [sp, #28]
 8003094:	2a09      	cmp	r2, #9
 8003096:	d849      	bhi.n	800312c <_dtoa_r+0x28c>
 8003098:	2a05      	cmp	r2, #5
 800309a:	bfc4      	itt	gt
 800309c:	3a04      	subgt	r2, #4
 800309e:	9207      	strgt	r2, [sp, #28]
 80030a0:	9a07      	ldr	r2, [sp, #28]
 80030a2:	f1a2 0202 	sub.w	r2, r2, #2
 80030a6:	bfcc      	ite	gt
 80030a8:	2400      	movgt	r4, #0
 80030aa:	2401      	movle	r4, #1
 80030ac:	2a03      	cmp	r2, #3
 80030ae:	d848      	bhi.n	8003142 <_dtoa_r+0x2a2>
 80030b0:	e8df f002 	tbb	[pc, r2]
 80030b4:	3a2c2e0b 	.word	0x3a2c2e0b
 80030b8:	9b05      	ldr	r3, [sp, #20]
 80030ba:	2200      	movs	r2, #0
 80030bc:	eba3 030b 	sub.w	r3, r3, fp
 80030c0:	9305      	str	r3, [sp, #20]
 80030c2:	920e      	str	r2, [sp, #56]	; 0x38
 80030c4:	f1cb 0300 	rsb	r3, fp, #0
 80030c8:	e7e3      	b.n	8003092 <_dtoa_r+0x1f2>
 80030ca:	2200      	movs	r2, #0
 80030cc:	9208      	str	r2, [sp, #32]
 80030ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030d0:	2a00      	cmp	r2, #0
 80030d2:	dc39      	bgt.n	8003148 <_dtoa_r+0x2a8>
 80030d4:	f04f 0a01 	mov.w	sl, #1
 80030d8:	46d1      	mov	r9, sl
 80030da:	4652      	mov	r2, sl
 80030dc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80030e0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80030e2:	2100      	movs	r1, #0
 80030e4:	6079      	str	r1, [r7, #4]
 80030e6:	2004      	movs	r0, #4
 80030e8:	f100 0c14 	add.w	ip, r0, #20
 80030ec:	4594      	cmp	ip, r2
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	d92f      	bls.n	8003152 <_dtoa_r+0x2b2>
 80030f2:	4630      	mov	r0, r6
 80030f4:	930c      	str	r3, [sp, #48]	; 0x30
 80030f6:	f000 fc8d 	bl	8003a14 <_Balloc>
 80030fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80030fc:	9000      	str	r0, [sp, #0]
 80030fe:	4602      	mov	r2, r0
 8003100:	2800      	cmp	r0, #0
 8003102:	d149      	bne.n	8003198 <_dtoa_r+0x2f8>
 8003104:	4b23      	ldr	r3, [pc, #140]	; (8003194 <_dtoa_r+0x2f4>)
 8003106:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800310a:	e6df      	b.n	8002ecc <_dtoa_r+0x2c>
 800310c:	2201      	movs	r2, #1
 800310e:	e7dd      	b.n	80030cc <_dtoa_r+0x22c>
 8003110:	2200      	movs	r2, #0
 8003112:	9208      	str	r2, [sp, #32]
 8003114:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003116:	eb0b 0a02 	add.w	sl, fp, r2
 800311a:	f10a 0901 	add.w	r9, sl, #1
 800311e:	464a      	mov	r2, r9
 8003120:	2a01      	cmp	r2, #1
 8003122:	bfb8      	it	lt
 8003124:	2201      	movlt	r2, #1
 8003126:	e7db      	b.n	80030e0 <_dtoa_r+0x240>
 8003128:	2201      	movs	r2, #1
 800312a:	e7f2      	b.n	8003112 <_dtoa_r+0x272>
 800312c:	2401      	movs	r4, #1
 800312e:	2200      	movs	r2, #0
 8003130:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8003134:	f04f 3aff 	mov.w	sl, #4294967295
 8003138:	2100      	movs	r1, #0
 800313a:	46d1      	mov	r9, sl
 800313c:	2212      	movs	r2, #18
 800313e:	9109      	str	r1, [sp, #36]	; 0x24
 8003140:	e7ce      	b.n	80030e0 <_dtoa_r+0x240>
 8003142:	2201      	movs	r2, #1
 8003144:	9208      	str	r2, [sp, #32]
 8003146:	e7f5      	b.n	8003134 <_dtoa_r+0x294>
 8003148:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800314c:	46d1      	mov	r9, sl
 800314e:	4652      	mov	r2, sl
 8003150:	e7c6      	b.n	80030e0 <_dtoa_r+0x240>
 8003152:	3101      	adds	r1, #1
 8003154:	6079      	str	r1, [r7, #4]
 8003156:	0040      	lsls	r0, r0, #1
 8003158:	e7c6      	b.n	80030e8 <_dtoa_r+0x248>
 800315a:	bf00      	nop
 800315c:	f3af 8000 	nop.w
 8003160:	636f4361 	.word	0x636f4361
 8003164:	3fd287a7 	.word	0x3fd287a7
 8003168:	8b60c8b3 	.word	0x8b60c8b3
 800316c:	3fc68a28 	.word	0x3fc68a28
 8003170:	509f79fb 	.word	0x509f79fb
 8003174:	3fd34413 	.word	0x3fd34413
 8003178:	0800492d 	.word	0x0800492d
 800317c:	08004944 	.word	0x08004944
 8003180:	7ff00000 	.word	0x7ff00000
 8003184:	08004929 	.word	0x08004929
 8003188:	08004920 	.word	0x08004920
 800318c:	080048fd 	.word	0x080048fd
 8003190:	08004a40 	.word	0x08004a40
 8003194:	080049a3 	.word	0x080049a3
 8003198:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800319a:	9900      	ldr	r1, [sp, #0]
 800319c:	6011      	str	r1, [r2, #0]
 800319e:	f1b9 0f0e 	cmp.w	r9, #14
 80031a2:	d872      	bhi.n	800328a <_dtoa_r+0x3ea>
 80031a4:	2c00      	cmp	r4, #0
 80031a6:	d070      	beq.n	800328a <_dtoa_r+0x3ea>
 80031a8:	f1bb 0f00 	cmp.w	fp, #0
 80031ac:	f340 80a6 	ble.w	80032fc <_dtoa_r+0x45c>
 80031b0:	49ca      	ldr	r1, [pc, #808]	; (80034dc <_dtoa_r+0x63c>)
 80031b2:	f00b 020f 	and.w	r2, fp, #15
 80031b6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80031ba:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80031be:	ed92 7b00 	vldr	d7, [r2]
 80031c2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80031c6:	f000 808d 	beq.w	80032e4 <_dtoa_r+0x444>
 80031ca:	4ac5      	ldr	r2, [pc, #788]	; (80034e0 <_dtoa_r+0x640>)
 80031cc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80031d0:	ed92 6b08 	vldr	d6, [r2, #32]
 80031d4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80031d8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80031dc:	f001 010f 	and.w	r1, r1, #15
 80031e0:	2203      	movs	r2, #3
 80031e2:	48bf      	ldr	r0, [pc, #764]	; (80034e0 <_dtoa_r+0x640>)
 80031e4:	2900      	cmp	r1, #0
 80031e6:	d17f      	bne.n	80032e8 <_dtoa_r+0x448>
 80031e8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80031ec:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80031f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80031f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80031f6:	2900      	cmp	r1, #0
 80031f8:	f000 80b2 	beq.w	8003360 <_dtoa_r+0x4c0>
 80031fc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003200:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003204:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800320c:	f140 80a8 	bpl.w	8003360 <_dtoa_r+0x4c0>
 8003210:	f1b9 0f00 	cmp.w	r9, #0
 8003214:	f000 80a4 	beq.w	8003360 <_dtoa_r+0x4c0>
 8003218:	f1ba 0f00 	cmp.w	sl, #0
 800321c:	dd31      	ble.n	8003282 <_dtoa_r+0x3e2>
 800321e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8003222:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003226:	ed8d 7b02 	vstr	d7, [sp, #8]
 800322a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800322e:	3201      	adds	r2, #1
 8003230:	4650      	mov	r0, sl
 8003232:	ed9d 6b02 	vldr	d6, [sp, #8]
 8003236:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800323a:	ee07 2a90 	vmov	s15, r2
 800323e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003242:	eea7 5b06 	vfma.f64	d5, d7, d6
 8003246:	ed8d 5b02 	vstr	d5, [sp, #8]
 800324a:	9c03      	ldr	r4, [sp, #12]
 800324c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8003250:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8003254:	2800      	cmp	r0, #0
 8003256:	f040 8086 	bne.w	8003366 <_dtoa_r+0x4c6>
 800325a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800325e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003262:	ec42 1b17 	vmov	d7, r1, r2
 8003266:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800326a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800326e:	f300 8272 	bgt.w	8003756 <_dtoa_r+0x8b6>
 8003272:	eeb1 7b47 	vneg.f64	d7, d7
 8003276:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800327a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327e:	f100 8267 	bmi.w	8003750 <_dtoa_r+0x8b0>
 8003282:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8003286:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800328a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800328c:	2a00      	cmp	r2, #0
 800328e:	f2c0 8129 	blt.w	80034e4 <_dtoa_r+0x644>
 8003292:	f1bb 0f0e 	cmp.w	fp, #14
 8003296:	f300 8125 	bgt.w	80034e4 <_dtoa_r+0x644>
 800329a:	4b90      	ldr	r3, [pc, #576]	; (80034dc <_dtoa_r+0x63c>)
 800329c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80032a0:	ed93 6b00 	vldr	d6, [r3]
 80032a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f280 80c3 	bge.w	8003432 <_dtoa_r+0x592>
 80032ac:	f1b9 0f00 	cmp.w	r9, #0
 80032b0:	f300 80bf 	bgt.w	8003432 <_dtoa_r+0x592>
 80032b4:	f040 824c 	bne.w	8003750 <_dtoa_r+0x8b0>
 80032b8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80032bc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80032c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80032c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80032c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032cc:	464c      	mov	r4, r9
 80032ce:	464f      	mov	r7, r9
 80032d0:	f280 8222 	bge.w	8003718 <_dtoa_r+0x878>
 80032d4:	f8dd 8000 	ldr.w	r8, [sp]
 80032d8:	2331      	movs	r3, #49	; 0x31
 80032da:	f808 3b01 	strb.w	r3, [r8], #1
 80032de:	f10b 0b01 	add.w	fp, fp, #1
 80032e2:	e21e      	b.n	8003722 <_dtoa_r+0x882>
 80032e4:	2202      	movs	r2, #2
 80032e6:	e77c      	b.n	80031e2 <_dtoa_r+0x342>
 80032e8:	07cc      	lsls	r4, r1, #31
 80032ea:	d504      	bpl.n	80032f6 <_dtoa_r+0x456>
 80032ec:	ed90 6b00 	vldr	d6, [r0]
 80032f0:	3201      	adds	r2, #1
 80032f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80032f6:	1049      	asrs	r1, r1, #1
 80032f8:	3008      	adds	r0, #8
 80032fa:	e773      	b.n	80031e4 <_dtoa_r+0x344>
 80032fc:	d02e      	beq.n	800335c <_dtoa_r+0x4bc>
 80032fe:	f1cb 0100 	rsb	r1, fp, #0
 8003302:	4a76      	ldr	r2, [pc, #472]	; (80034dc <_dtoa_r+0x63c>)
 8003304:	f001 000f 	and.w	r0, r1, #15
 8003308:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800330c:	ed92 7b00 	vldr	d7, [r2]
 8003310:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8003314:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003318:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800331c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8003320:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8003324:	486e      	ldr	r0, [pc, #440]	; (80034e0 <_dtoa_r+0x640>)
 8003326:	1109      	asrs	r1, r1, #4
 8003328:	2400      	movs	r4, #0
 800332a:	2202      	movs	r2, #2
 800332c:	b939      	cbnz	r1, 800333e <_dtoa_r+0x49e>
 800332e:	2c00      	cmp	r4, #0
 8003330:	f43f af60 	beq.w	80031f4 <_dtoa_r+0x354>
 8003334:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003338:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800333c:	e75a      	b.n	80031f4 <_dtoa_r+0x354>
 800333e:	07cf      	lsls	r7, r1, #31
 8003340:	d509      	bpl.n	8003356 <_dtoa_r+0x4b6>
 8003342:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8003346:	ed90 7b00 	vldr	d7, [r0]
 800334a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800334e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003352:	3201      	adds	r2, #1
 8003354:	2401      	movs	r4, #1
 8003356:	1049      	asrs	r1, r1, #1
 8003358:	3008      	adds	r0, #8
 800335a:	e7e7      	b.n	800332c <_dtoa_r+0x48c>
 800335c:	2202      	movs	r2, #2
 800335e:	e749      	b.n	80031f4 <_dtoa_r+0x354>
 8003360:	465f      	mov	r7, fp
 8003362:	4648      	mov	r0, r9
 8003364:	e765      	b.n	8003232 <_dtoa_r+0x392>
 8003366:	ec42 1b17 	vmov	d7, r1, r2
 800336a:	4a5c      	ldr	r2, [pc, #368]	; (80034dc <_dtoa_r+0x63c>)
 800336c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8003370:	ed12 4b02 	vldr	d4, [r2, #-8]
 8003374:	9a00      	ldr	r2, [sp, #0]
 8003376:	1814      	adds	r4, r2, r0
 8003378:	9a08      	ldr	r2, [sp, #32]
 800337a:	b352      	cbz	r2, 80033d2 <_dtoa_r+0x532>
 800337c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8003380:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8003384:	f8dd 8000 	ldr.w	r8, [sp]
 8003388:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800338c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8003390:	ee35 7b47 	vsub.f64	d7, d5, d7
 8003394:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8003398:	ee14 2a90 	vmov	r2, s9
 800339c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80033a0:	3230      	adds	r2, #48	; 0x30
 80033a2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80033a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80033aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ae:	f808 2b01 	strb.w	r2, [r8], #1
 80033b2:	d439      	bmi.n	8003428 <_dtoa_r+0x588>
 80033b4:	ee32 5b46 	vsub.f64	d5, d2, d6
 80033b8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80033bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c0:	d472      	bmi.n	80034a8 <_dtoa_r+0x608>
 80033c2:	45a0      	cmp	r8, r4
 80033c4:	f43f af5d 	beq.w	8003282 <_dtoa_r+0x3e2>
 80033c8:	ee27 7b03 	vmul.f64	d7, d7, d3
 80033cc:	ee26 6b03 	vmul.f64	d6, d6, d3
 80033d0:	e7e0      	b.n	8003394 <_dtoa_r+0x4f4>
 80033d2:	f8dd 8000 	ldr.w	r8, [sp]
 80033d6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80033da:	4621      	mov	r1, r4
 80033dc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80033e0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80033e4:	ee14 2a90 	vmov	r2, s9
 80033e8:	3230      	adds	r2, #48	; 0x30
 80033ea:	f808 2b01 	strb.w	r2, [r8], #1
 80033ee:	45a0      	cmp	r8, r4
 80033f0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80033f4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80033f8:	d118      	bne.n	800342c <_dtoa_r+0x58c>
 80033fa:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80033fe:	ee37 4b05 	vadd.f64	d4, d7, d5
 8003402:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8003406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340a:	dc4d      	bgt.n	80034a8 <_dtoa_r+0x608>
 800340c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8003410:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003418:	f57f af33 	bpl.w	8003282 <_dtoa_r+0x3e2>
 800341c:	4688      	mov	r8, r1
 800341e:	3901      	subs	r1, #1
 8003420:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8003424:	2b30      	cmp	r3, #48	; 0x30
 8003426:	d0f9      	beq.n	800341c <_dtoa_r+0x57c>
 8003428:	46bb      	mov	fp, r7
 800342a:	e02a      	b.n	8003482 <_dtoa_r+0x5e2>
 800342c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8003430:	e7d6      	b.n	80033e0 <_dtoa_r+0x540>
 8003432:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003436:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800343a:	f8dd 8000 	ldr.w	r8, [sp]
 800343e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8003442:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8003446:	ee15 3a10 	vmov	r3, s10
 800344a:	3330      	adds	r3, #48	; 0x30
 800344c:	f808 3b01 	strb.w	r3, [r8], #1
 8003450:	9b00      	ldr	r3, [sp, #0]
 8003452:	eba8 0303 	sub.w	r3, r8, r3
 8003456:	4599      	cmp	r9, r3
 8003458:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800345c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8003460:	d133      	bne.n	80034ca <_dtoa_r+0x62a>
 8003462:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003466:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800346a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800346e:	dc1a      	bgt.n	80034a6 <_dtoa_r+0x606>
 8003470:	eeb4 7b46 	vcmp.f64	d7, d6
 8003474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003478:	d103      	bne.n	8003482 <_dtoa_r+0x5e2>
 800347a:	ee15 3a10 	vmov	r3, s10
 800347e:	07d9      	lsls	r1, r3, #31
 8003480:	d411      	bmi.n	80034a6 <_dtoa_r+0x606>
 8003482:	4629      	mov	r1, r5
 8003484:	4630      	mov	r0, r6
 8003486:	f000 fb05 	bl	8003a94 <_Bfree>
 800348a:	2300      	movs	r3, #0
 800348c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800348e:	f888 3000 	strb.w	r3, [r8]
 8003492:	f10b 0301 	add.w	r3, fp, #1
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800349a:	2b00      	cmp	r3, #0
 800349c:	f43f ad4d 	beq.w	8002f3a <_dtoa_r+0x9a>
 80034a0:	f8c3 8000 	str.w	r8, [r3]
 80034a4:	e549      	b.n	8002f3a <_dtoa_r+0x9a>
 80034a6:	465f      	mov	r7, fp
 80034a8:	4643      	mov	r3, r8
 80034aa:	4698      	mov	r8, r3
 80034ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80034b0:	2a39      	cmp	r2, #57	; 0x39
 80034b2:	d106      	bne.n	80034c2 <_dtoa_r+0x622>
 80034b4:	9a00      	ldr	r2, [sp, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d1f7      	bne.n	80034aa <_dtoa_r+0x60a>
 80034ba:	9900      	ldr	r1, [sp, #0]
 80034bc:	2230      	movs	r2, #48	; 0x30
 80034be:	3701      	adds	r7, #1
 80034c0:	700a      	strb	r2, [r1, #0]
 80034c2:	781a      	ldrb	r2, [r3, #0]
 80034c4:	3201      	adds	r2, #1
 80034c6:	701a      	strb	r2, [r3, #0]
 80034c8:	e7ae      	b.n	8003428 <_dtoa_r+0x588>
 80034ca:	ee27 7b04 	vmul.f64	d7, d7, d4
 80034ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80034d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d6:	d1b2      	bne.n	800343e <_dtoa_r+0x59e>
 80034d8:	e7d3      	b.n	8003482 <_dtoa_r+0x5e2>
 80034da:	bf00      	nop
 80034dc:	08004a40 	.word	0x08004a40
 80034e0:	08004a18 	.word	0x08004a18
 80034e4:	9908      	ldr	r1, [sp, #32]
 80034e6:	2900      	cmp	r1, #0
 80034e8:	f000 80d1 	beq.w	800368e <_dtoa_r+0x7ee>
 80034ec:	9907      	ldr	r1, [sp, #28]
 80034ee:	2901      	cmp	r1, #1
 80034f0:	f300 80b4 	bgt.w	800365c <_dtoa_r+0x7bc>
 80034f4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80034f6:	2900      	cmp	r1, #0
 80034f8:	f000 80ac 	beq.w	8003654 <_dtoa_r+0x7b4>
 80034fc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003500:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8003504:	461c      	mov	r4, r3
 8003506:	930a      	str	r3, [sp, #40]	; 0x28
 8003508:	9b05      	ldr	r3, [sp, #20]
 800350a:	4413      	add	r3, r2
 800350c:	9305      	str	r3, [sp, #20]
 800350e:	9b06      	ldr	r3, [sp, #24]
 8003510:	2101      	movs	r1, #1
 8003512:	4413      	add	r3, r2
 8003514:	4630      	mov	r0, r6
 8003516:	9306      	str	r3, [sp, #24]
 8003518:	f000 fb78 	bl	8003c0c <__i2b>
 800351c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800351e:	4607      	mov	r7, r0
 8003520:	f1b8 0f00 	cmp.w	r8, #0
 8003524:	dd0d      	ble.n	8003542 <_dtoa_r+0x6a2>
 8003526:	9a06      	ldr	r2, [sp, #24]
 8003528:	2a00      	cmp	r2, #0
 800352a:	dd0a      	ble.n	8003542 <_dtoa_r+0x6a2>
 800352c:	4542      	cmp	r2, r8
 800352e:	9905      	ldr	r1, [sp, #20]
 8003530:	bfa8      	it	ge
 8003532:	4642      	movge	r2, r8
 8003534:	1a89      	subs	r1, r1, r2
 8003536:	9105      	str	r1, [sp, #20]
 8003538:	9906      	ldr	r1, [sp, #24]
 800353a:	eba8 0802 	sub.w	r8, r8, r2
 800353e:	1a8a      	subs	r2, r1, r2
 8003540:	9206      	str	r2, [sp, #24]
 8003542:	b303      	cbz	r3, 8003586 <_dtoa_r+0x6e6>
 8003544:	9a08      	ldr	r2, [sp, #32]
 8003546:	2a00      	cmp	r2, #0
 8003548:	f000 80a6 	beq.w	8003698 <_dtoa_r+0x7f8>
 800354c:	2c00      	cmp	r4, #0
 800354e:	dd13      	ble.n	8003578 <_dtoa_r+0x6d8>
 8003550:	4639      	mov	r1, r7
 8003552:	4622      	mov	r2, r4
 8003554:	4630      	mov	r0, r6
 8003556:	930c      	str	r3, [sp, #48]	; 0x30
 8003558:	f000 fc14 	bl	8003d84 <__pow5mult>
 800355c:	462a      	mov	r2, r5
 800355e:	4601      	mov	r1, r0
 8003560:	4607      	mov	r7, r0
 8003562:	4630      	mov	r0, r6
 8003564:	f000 fb68 	bl	8003c38 <__multiply>
 8003568:	4629      	mov	r1, r5
 800356a:	900a      	str	r0, [sp, #40]	; 0x28
 800356c:	4630      	mov	r0, r6
 800356e:	f000 fa91 	bl	8003a94 <_Bfree>
 8003572:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003574:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003576:	4615      	mov	r5, r2
 8003578:	1b1a      	subs	r2, r3, r4
 800357a:	d004      	beq.n	8003586 <_dtoa_r+0x6e6>
 800357c:	4629      	mov	r1, r5
 800357e:	4630      	mov	r0, r6
 8003580:	f000 fc00 	bl	8003d84 <__pow5mult>
 8003584:	4605      	mov	r5, r0
 8003586:	2101      	movs	r1, #1
 8003588:	4630      	mov	r0, r6
 800358a:	f000 fb3f 	bl	8003c0c <__i2b>
 800358e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003590:	2b00      	cmp	r3, #0
 8003592:	4604      	mov	r4, r0
 8003594:	f340 8082 	ble.w	800369c <_dtoa_r+0x7fc>
 8003598:	461a      	mov	r2, r3
 800359a:	4601      	mov	r1, r0
 800359c:	4630      	mov	r0, r6
 800359e:	f000 fbf1 	bl	8003d84 <__pow5mult>
 80035a2:	9b07      	ldr	r3, [sp, #28]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	4604      	mov	r4, r0
 80035a8:	dd7b      	ble.n	80036a2 <_dtoa_r+0x802>
 80035aa:	2300      	movs	r3, #0
 80035ac:	930a      	str	r3, [sp, #40]	; 0x28
 80035ae:	6922      	ldr	r2, [r4, #16]
 80035b0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80035b4:	6910      	ldr	r0, [r2, #16]
 80035b6:	f000 fad9 	bl	8003b6c <__hi0bits>
 80035ba:	f1c0 0020 	rsb	r0, r0, #32
 80035be:	9b06      	ldr	r3, [sp, #24]
 80035c0:	4418      	add	r0, r3
 80035c2:	f010 001f 	ands.w	r0, r0, #31
 80035c6:	f000 808d 	beq.w	80036e4 <_dtoa_r+0x844>
 80035ca:	f1c0 0220 	rsb	r2, r0, #32
 80035ce:	2a04      	cmp	r2, #4
 80035d0:	f340 8086 	ble.w	80036e0 <_dtoa_r+0x840>
 80035d4:	f1c0 001c 	rsb	r0, r0, #28
 80035d8:	9b05      	ldr	r3, [sp, #20]
 80035da:	4403      	add	r3, r0
 80035dc:	9305      	str	r3, [sp, #20]
 80035de:	9b06      	ldr	r3, [sp, #24]
 80035e0:	4403      	add	r3, r0
 80035e2:	4480      	add	r8, r0
 80035e4:	9306      	str	r3, [sp, #24]
 80035e6:	9b05      	ldr	r3, [sp, #20]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	dd05      	ble.n	80035f8 <_dtoa_r+0x758>
 80035ec:	4629      	mov	r1, r5
 80035ee:	461a      	mov	r2, r3
 80035f0:	4630      	mov	r0, r6
 80035f2:	f000 fc21 	bl	8003e38 <__lshift>
 80035f6:	4605      	mov	r5, r0
 80035f8:	9b06      	ldr	r3, [sp, #24]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	dd05      	ble.n	800360a <_dtoa_r+0x76a>
 80035fe:	4621      	mov	r1, r4
 8003600:	461a      	mov	r2, r3
 8003602:	4630      	mov	r0, r6
 8003604:	f000 fc18 	bl	8003e38 <__lshift>
 8003608:	4604      	mov	r4, r0
 800360a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800360c:	2b00      	cmp	r3, #0
 800360e:	d06b      	beq.n	80036e8 <_dtoa_r+0x848>
 8003610:	4621      	mov	r1, r4
 8003612:	4628      	mov	r0, r5
 8003614:	f000 fc7c 	bl	8003f10 <__mcmp>
 8003618:	2800      	cmp	r0, #0
 800361a:	da65      	bge.n	80036e8 <_dtoa_r+0x848>
 800361c:	2300      	movs	r3, #0
 800361e:	4629      	mov	r1, r5
 8003620:	220a      	movs	r2, #10
 8003622:	4630      	mov	r0, r6
 8003624:	f000 fa58 	bl	8003ad8 <__multadd>
 8003628:	9b08      	ldr	r3, [sp, #32]
 800362a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800362e:	4605      	mov	r5, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 8192 	beq.w	800395a <_dtoa_r+0xaba>
 8003636:	4639      	mov	r1, r7
 8003638:	2300      	movs	r3, #0
 800363a:	220a      	movs	r2, #10
 800363c:	4630      	mov	r0, r6
 800363e:	f000 fa4b 	bl	8003ad8 <__multadd>
 8003642:	f1ba 0f00 	cmp.w	sl, #0
 8003646:	4607      	mov	r7, r0
 8003648:	f300 808e 	bgt.w	8003768 <_dtoa_r+0x8c8>
 800364c:	9b07      	ldr	r3, [sp, #28]
 800364e:	2b02      	cmp	r3, #2
 8003650:	dc51      	bgt.n	80036f6 <_dtoa_r+0x856>
 8003652:	e089      	b.n	8003768 <_dtoa_r+0x8c8>
 8003654:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003656:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800365a:	e751      	b.n	8003500 <_dtoa_r+0x660>
 800365c:	f109 34ff 	add.w	r4, r9, #4294967295
 8003660:	42a3      	cmp	r3, r4
 8003662:	bfbf      	itttt	lt
 8003664:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8003666:	1ae3      	sublt	r3, r4, r3
 8003668:	18d2      	addlt	r2, r2, r3
 800366a:	4613      	movlt	r3, r2
 800366c:	bfb7      	itett	lt
 800366e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003670:	1b1c      	subge	r4, r3, r4
 8003672:	4623      	movlt	r3, r4
 8003674:	2400      	movlt	r4, #0
 8003676:	f1b9 0f00 	cmp.w	r9, #0
 800367a:	bfb5      	itete	lt
 800367c:	9a05      	ldrlt	r2, [sp, #20]
 800367e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8003682:	eba2 0809 	sublt.w	r8, r2, r9
 8003686:	464a      	movge	r2, r9
 8003688:	bfb8      	it	lt
 800368a:	2200      	movlt	r2, #0
 800368c:	e73b      	b.n	8003506 <_dtoa_r+0x666>
 800368e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8003692:	9f08      	ldr	r7, [sp, #32]
 8003694:	461c      	mov	r4, r3
 8003696:	e743      	b.n	8003520 <_dtoa_r+0x680>
 8003698:	461a      	mov	r2, r3
 800369a:	e76f      	b.n	800357c <_dtoa_r+0x6dc>
 800369c:	9b07      	ldr	r3, [sp, #28]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	dc18      	bgt.n	80036d4 <_dtoa_r+0x834>
 80036a2:	9b02      	ldr	r3, [sp, #8]
 80036a4:	b9b3      	cbnz	r3, 80036d4 <_dtoa_r+0x834>
 80036a6:	9b03      	ldr	r3, [sp, #12]
 80036a8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80036ac:	b9a2      	cbnz	r2, 80036d8 <_dtoa_r+0x838>
 80036ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036b2:	0d12      	lsrs	r2, r2, #20
 80036b4:	0512      	lsls	r2, r2, #20
 80036b6:	b18a      	cbz	r2, 80036dc <_dtoa_r+0x83c>
 80036b8:	9b05      	ldr	r3, [sp, #20]
 80036ba:	3301      	adds	r3, #1
 80036bc:	9305      	str	r3, [sp, #20]
 80036be:	9b06      	ldr	r3, [sp, #24]
 80036c0:	3301      	adds	r3, #1
 80036c2:	9306      	str	r3, [sp, #24]
 80036c4:	2301      	movs	r3, #1
 80036c6:	930a      	str	r3, [sp, #40]	; 0x28
 80036c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f47f af6f 	bne.w	80035ae <_dtoa_r+0x70e>
 80036d0:	2001      	movs	r0, #1
 80036d2:	e774      	b.n	80035be <_dtoa_r+0x71e>
 80036d4:	2300      	movs	r3, #0
 80036d6:	e7f6      	b.n	80036c6 <_dtoa_r+0x826>
 80036d8:	9b02      	ldr	r3, [sp, #8]
 80036da:	e7f4      	b.n	80036c6 <_dtoa_r+0x826>
 80036dc:	920a      	str	r2, [sp, #40]	; 0x28
 80036de:	e7f3      	b.n	80036c8 <_dtoa_r+0x828>
 80036e0:	d081      	beq.n	80035e6 <_dtoa_r+0x746>
 80036e2:	4610      	mov	r0, r2
 80036e4:	301c      	adds	r0, #28
 80036e6:	e777      	b.n	80035d8 <_dtoa_r+0x738>
 80036e8:	f1b9 0f00 	cmp.w	r9, #0
 80036ec:	dc37      	bgt.n	800375e <_dtoa_r+0x8be>
 80036ee:	9b07      	ldr	r3, [sp, #28]
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	dd34      	ble.n	800375e <_dtoa_r+0x8be>
 80036f4:	46ca      	mov	sl, r9
 80036f6:	f1ba 0f00 	cmp.w	sl, #0
 80036fa:	d10d      	bne.n	8003718 <_dtoa_r+0x878>
 80036fc:	4621      	mov	r1, r4
 80036fe:	4653      	mov	r3, sl
 8003700:	2205      	movs	r2, #5
 8003702:	4630      	mov	r0, r6
 8003704:	f000 f9e8 	bl	8003ad8 <__multadd>
 8003708:	4601      	mov	r1, r0
 800370a:	4604      	mov	r4, r0
 800370c:	4628      	mov	r0, r5
 800370e:	f000 fbff 	bl	8003f10 <__mcmp>
 8003712:	2800      	cmp	r0, #0
 8003714:	f73f adde 	bgt.w	80032d4 <_dtoa_r+0x434>
 8003718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800371a:	f8dd 8000 	ldr.w	r8, [sp]
 800371e:	ea6f 0b03 	mvn.w	fp, r3
 8003722:	f04f 0900 	mov.w	r9, #0
 8003726:	4621      	mov	r1, r4
 8003728:	4630      	mov	r0, r6
 800372a:	f000 f9b3 	bl	8003a94 <_Bfree>
 800372e:	2f00      	cmp	r7, #0
 8003730:	f43f aea7 	beq.w	8003482 <_dtoa_r+0x5e2>
 8003734:	f1b9 0f00 	cmp.w	r9, #0
 8003738:	d005      	beq.n	8003746 <_dtoa_r+0x8a6>
 800373a:	45b9      	cmp	r9, r7
 800373c:	d003      	beq.n	8003746 <_dtoa_r+0x8a6>
 800373e:	4649      	mov	r1, r9
 8003740:	4630      	mov	r0, r6
 8003742:	f000 f9a7 	bl	8003a94 <_Bfree>
 8003746:	4639      	mov	r1, r7
 8003748:	4630      	mov	r0, r6
 800374a:	f000 f9a3 	bl	8003a94 <_Bfree>
 800374e:	e698      	b.n	8003482 <_dtoa_r+0x5e2>
 8003750:	2400      	movs	r4, #0
 8003752:	4627      	mov	r7, r4
 8003754:	e7e0      	b.n	8003718 <_dtoa_r+0x878>
 8003756:	46bb      	mov	fp, r7
 8003758:	4604      	mov	r4, r0
 800375a:	4607      	mov	r7, r0
 800375c:	e5ba      	b.n	80032d4 <_dtoa_r+0x434>
 800375e:	9b08      	ldr	r3, [sp, #32]
 8003760:	46ca      	mov	sl, r9
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 8100 	beq.w	8003968 <_dtoa_r+0xac8>
 8003768:	f1b8 0f00 	cmp.w	r8, #0
 800376c:	dd05      	ble.n	800377a <_dtoa_r+0x8da>
 800376e:	4639      	mov	r1, r7
 8003770:	4642      	mov	r2, r8
 8003772:	4630      	mov	r0, r6
 8003774:	f000 fb60 	bl	8003e38 <__lshift>
 8003778:	4607      	mov	r7, r0
 800377a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800377c:	2b00      	cmp	r3, #0
 800377e:	d05d      	beq.n	800383c <_dtoa_r+0x99c>
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	4630      	mov	r0, r6
 8003784:	f000 f946 	bl	8003a14 <_Balloc>
 8003788:	4680      	mov	r8, r0
 800378a:	b928      	cbnz	r0, 8003798 <_dtoa_r+0x8f8>
 800378c:	4b82      	ldr	r3, [pc, #520]	; (8003998 <_dtoa_r+0xaf8>)
 800378e:	4602      	mov	r2, r0
 8003790:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003794:	f7ff bb9a 	b.w	8002ecc <_dtoa_r+0x2c>
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	3202      	adds	r2, #2
 800379c:	0092      	lsls	r2, r2, #2
 800379e:	f107 010c 	add.w	r1, r7, #12
 80037a2:	300c      	adds	r0, #12
 80037a4:	f000 f91c 	bl	80039e0 <memcpy>
 80037a8:	2201      	movs	r2, #1
 80037aa:	4641      	mov	r1, r8
 80037ac:	4630      	mov	r0, r6
 80037ae:	f000 fb43 	bl	8003e38 <__lshift>
 80037b2:	9b00      	ldr	r3, [sp, #0]
 80037b4:	3301      	adds	r3, #1
 80037b6:	9305      	str	r3, [sp, #20]
 80037b8:	9b00      	ldr	r3, [sp, #0]
 80037ba:	4453      	add	r3, sl
 80037bc:	9309      	str	r3, [sp, #36]	; 0x24
 80037be:	9b02      	ldr	r3, [sp, #8]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	46b9      	mov	r9, r7
 80037c6:	9308      	str	r3, [sp, #32]
 80037c8:	4607      	mov	r7, r0
 80037ca:	9b05      	ldr	r3, [sp, #20]
 80037cc:	4621      	mov	r1, r4
 80037ce:	3b01      	subs	r3, #1
 80037d0:	4628      	mov	r0, r5
 80037d2:	9302      	str	r3, [sp, #8]
 80037d4:	f7ff fad8 	bl	8002d88 <quorem>
 80037d8:	4603      	mov	r3, r0
 80037da:	3330      	adds	r3, #48	; 0x30
 80037dc:	9006      	str	r0, [sp, #24]
 80037de:	4649      	mov	r1, r9
 80037e0:	4628      	mov	r0, r5
 80037e2:	930a      	str	r3, [sp, #40]	; 0x28
 80037e4:	f000 fb94 	bl	8003f10 <__mcmp>
 80037e8:	463a      	mov	r2, r7
 80037ea:	4682      	mov	sl, r0
 80037ec:	4621      	mov	r1, r4
 80037ee:	4630      	mov	r0, r6
 80037f0:	f000 fbaa 	bl	8003f48 <__mdiff>
 80037f4:	68c2      	ldr	r2, [r0, #12]
 80037f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037f8:	4680      	mov	r8, r0
 80037fa:	bb0a      	cbnz	r2, 8003840 <_dtoa_r+0x9a0>
 80037fc:	4601      	mov	r1, r0
 80037fe:	4628      	mov	r0, r5
 8003800:	f000 fb86 	bl	8003f10 <__mcmp>
 8003804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003806:	4602      	mov	r2, r0
 8003808:	4641      	mov	r1, r8
 800380a:	4630      	mov	r0, r6
 800380c:	920e      	str	r2, [sp, #56]	; 0x38
 800380e:	930a      	str	r3, [sp, #40]	; 0x28
 8003810:	f000 f940 	bl	8003a94 <_Bfree>
 8003814:	9b07      	ldr	r3, [sp, #28]
 8003816:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003818:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800381c:	ea43 0102 	orr.w	r1, r3, r2
 8003820:	9b08      	ldr	r3, [sp, #32]
 8003822:	430b      	orrs	r3, r1
 8003824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003826:	d10d      	bne.n	8003844 <_dtoa_r+0x9a4>
 8003828:	2b39      	cmp	r3, #57	; 0x39
 800382a:	d029      	beq.n	8003880 <_dtoa_r+0x9e0>
 800382c:	f1ba 0f00 	cmp.w	sl, #0
 8003830:	dd01      	ble.n	8003836 <_dtoa_r+0x996>
 8003832:	9b06      	ldr	r3, [sp, #24]
 8003834:	3331      	adds	r3, #49	; 0x31
 8003836:	9a02      	ldr	r2, [sp, #8]
 8003838:	7013      	strb	r3, [r2, #0]
 800383a:	e774      	b.n	8003726 <_dtoa_r+0x886>
 800383c:	4638      	mov	r0, r7
 800383e:	e7b8      	b.n	80037b2 <_dtoa_r+0x912>
 8003840:	2201      	movs	r2, #1
 8003842:	e7e1      	b.n	8003808 <_dtoa_r+0x968>
 8003844:	f1ba 0f00 	cmp.w	sl, #0
 8003848:	db06      	blt.n	8003858 <_dtoa_r+0x9b8>
 800384a:	9907      	ldr	r1, [sp, #28]
 800384c:	ea41 0a0a 	orr.w	sl, r1, sl
 8003850:	9908      	ldr	r1, [sp, #32]
 8003852:	ea5a 0101 	orrs.w	r1, sl, r1
 8003856:	d120      	bne.n	800389a <_dtoa_r+0x9fa>
 8003858:	2a00      	cmp	r2, #0
 800385a:	ddec      	ble.n	8003836 <_dtoa_r+0x996>
 800385c:	4629      	mov	r1, r5
 800385e:	2201      	movs	r2, #1
 8003860:	4630      	mov	r0, r6
 8003862:	9305      	str	r3, [sp, #20]
 8003864:	f000 fae8 	bl	8003e38 <__lshift>
 8003868:	4621      	mov	r1, r4
 800386a:	4605      	mov	r5, r0
 800386c:	f000 fb50 	bl	8003f10 <__mcmp>
 8003870:	2800      	cmp	r0, #0
 8003872:	9b05      	ldr	r3, [sp, #20]
 8003874:	dc02      	bgt.n	800387c <_dtoa_r+0x9dc>
 8003876:	d1de      	bne.n	8003836 <_dtoa_r+0x996>
 8003878:	07da      	lsls	r2, r3, #31
 800387a:	d5dc      	bpl.n	8003836 <_dtoa_r+0x996>
 800387c:	2b39      	cmp	r3, #57	; 0x39
 800387e:	d1d8      	bne.n	8003832 <_dtoa_r+0x992>
 8003880:	9a02      	ldr	r2, [sp, #8]
 8003882:	2339      	movs	r3, #57	; 0x39
 8003884:	7013      	strb	r3, [r2, #0]
 8003886:	4643      	mov	r3, r8
 8003888:	4698      	mov	r8, r3
 800388a:	3b01      	subs	r3, #1
 800388c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8003890:	2a39      	cmp	r2, #57	; 0x39
 8003892:	d051      	beq.n	8003938 <_dtoa_r+0xa98>
 8003894:	3201      	adds	r2, #1
 8003896:	701a      	strb	r2, [r3, #0]
 8003898:	e745      	b.n	8003726 <_dtoa_r+0x886>
 800389a:	2a00      	cmp	r2, #0
 800389c:	dd03      	ble.n	80038a6 <_dtoa_r+0xa06>
 800389e:	2b39      	cmp	r3, #57	; 0x39
 80038a0:	d0ee      	beq.n	8003880 <_dtoa_r+0x9e0>
 80038a2:	3301      	adds	r3, #1
 80038a4:	e7c7      	b.n	8003836 <_dtoa_r+0x996>
 80038a6:	9a05      	ldr	r2, [sp, #20]
 80038a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80038aa:	f802 3c01 	strb.w	r3, [r2, #-1]
 80038ae:	428a      	cmp	r2, r1
 80038b0:	d02b      	beq.n	800390a <_dtoa_r+0xa6a>
 80038b2:	4629      	mov	r1, r5
 80038b4:	2300      	movs	r3, #0
 80038b6:	220a      	movs	r2, #10
 80038b8:	4630      	mov	r0, r6
 80038ba:	f000 f90d 	bl	8003ad8 <__multadd>
 80038be:	45b9      	cmp	r9, r7
 80038c0:	4605      	mov	r5, r0
 80038c2:	f04f 0300 	mov.w	r3, #0
 80038c6:	f04f 020a 	mov.w	r2, #10
 80038ca:	4649      	mov	r1, r9
 80038cc:	4630      	mov	r0, r6
 80038ce:	d107      	bne.n	80038e0 <_dtoa_r+0xa40>
 80038d0:	f000 f902 	bl	8003ad8 <__multadd>
 80038d4:	4681      	mov	r9, r0
 80038d6:	4607      	mov	r7, r0
 80038d8:	9b05      	ldr	r3, [sp, #20]
 80038da:	3301      	adds	r3, #1
 80038dc:	9305      	str	r3, [sp, #20]
 80038de:	e774      	b.n	80037ca <_dtoa_r+0x92a>
 80038e0:	f000 f8fa 	bl	8003ad8 <__multadd>
 80038e4:	4639      	mov	r1, r7
 80038e6:	4681      	mov	r9, r0
 80038e8:	2300      	movs	r3, #0
 80038ea:	220a      	movs	r2, #10
 80038ec:	4630      	mov	r0, r6
 80038ee:	f000 f8f3 	bl	8003ad8 <__multadd>
 80038f2:	4607      	mov	r7, r0
 80038f4:	e7f0      	b.n	80038d8 <_dtoa_r+0xa38>
 80038f6:	f1ba 0f00 	cmp.w	sl, #0
 80038fa:	9a00      	ldr	r2, [sp, #0]
 80038fc:	bfcc      	ite	gt
 80038fe:	46d0      	movgt	r8, sl
 8003900:	f04f 0801 	movle.w	r8, #1
 8003904:	4490      	add	r8, r2
 8003906:	f04f 0900 	mov.w	r9, #0
 800390a:	4629      	mov	r1, r5
 800390c:	2201      	movs	r2, #1
 800390e:	4630      	mov	r0, r6
 8003910:	9302      	str	r3, [sp, #8]
 8003912:	f000 fa91 	bl	8003e38 <__lshift>
 8003916:	4621      	mov	r1, r4
 8003918:	4605      	mov	r5, r0
 800391a:	f000 faf9 	bl	8003f10 <__mcmp>
 800391e:	2800      	cmp	r0, #0
 8003920:	dcb1      	bgt.n	8003886 <_dtoa_r+0x9e6>
 8003922:	d102      	bne.n	800392a <_dtoa_r+0xa8a>
 8003924:	9b02      	ldr	r3, [sp, #8]
 8003926:	07db      	lsls	r3, r3, #31
 8003928:	d4ad      	bmi.n	8003886 <_dtoa_r+0x9e6>
 800392a:	4643      	mov	r3, r8
 800392c:	4698      	mov	r8, r3
 800392e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003932:	2a30      	cmp	r2, #48	; 0x30
 8003934:	d0fa      	beq.n	800392c <_dtoa_r+0xa8c>
 8003936:	e6f6      	b.n	8003726 <_dtoa_r+0x886>
 8003938:	9a00      	ldr	r2, [sp, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d1a4      	bne.n	8003888 <_dtoa_r+0x9e8>
 800393e:	f10b 0b01 	add.w	fp, fp, #1
 8003942:	2331      	movs	r3, #49	; 0x31
 8003944:	e778      	b.n	8003838 <_dtoa_r+0x998>
 8003946:	4b15      	ldr	r3, [pc, #84]	; (800399c <_dtoa_r+0xafc>)
 8003948:	f7ff bb12 	b.w	8002f70 <_dtoa_r+0xd0>
 800394c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800394e:	2b00      	cmp	r3, #0
 8003950:	f47f aaee 	bne.w	8002f30 <_dtoa_r+0x90>
 8003954:	4b12      	ldr	r3, [pc, #72]	; (80039a0 <_dtoa_r+0xb00>)
 8003956:	f7ff bb0b 	b.w	8002f70 <_dtoa_r+0xd0>
 800395a:	f1ba 0f00 	cmp.w	sl, #0
 800395e:	dc03      	bgt.n	8003968 <_dtoa_r+0xac8>
 8003960:	9b07      	ldr	r3, [sp, #28]
 8003962:	2b02      	cmp	r3, #2
 8003964:	f73f aec7 	bgt.w	80036f6 <_dtoa_r+0x856>
 8003968:	f8dd 8000 	ldr.w	r8, [sp]
 800396c:	4621      	mov	r1, r4
 800396e:	4628      	mov	r0, r5
 8003970:	f7ff fa0a 	bl	8002d88 <quorem>
 8003974:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8003978:	f808 3b01 	strb.w	r3, [r8], #1
 800397c:	9a00      	ldr	r2, [sp, #0]
 800397e:	eba8 0202 	sub.w	r2, r8, r2
 8003982:	4592      	cmp	sl, r2
 8003984:	ddb7      	ble.n	80038f6 <_dtoa_r+0xa56>
 8003986:	4629      	mov	r1, r5
 8003988:	2300      	movs	r3, #0
 800398a:	220a      	movs	r2, #10
 800398c:	4630      	mov	r0, r6
 800398e:	f000 f8a3 	bl	8003ad8 <__multadd>
 8003992:	4605      	mov	r5, r0
 8003994:	e7ea      	b.n	800396c <_dtoa_r+0xacc>
 8003996:	bf00      	nop
 8003998:	080049a3 	.word	0x080049a3
 800399c:	080048fc 	.word	0x080048fc
 80039a0:	08004920 	.word	0x08004920

080039a4 <_localeconv_r>:
 80039a4:	4800      	ldr	r0, [pc, #0]	; (80039a8 <_localeconv_r+0x4>)
 80039a6:	4770      	bx	lr
 80039a8:	20000160 	.word	0x20000160

080039ac <_lseek_r>:
 80039ac:	b538      	push	{r3, r4, r5, lr}
 80039ae:	4d07      	ldr	r5, [pc, #28]	; (80039cc <_lseek_r+0x20>)
 80039b0:	4604      	mov	r4, r0
 80039b2:	4608      	mov	r0, r1
 80039b4:	4611      	mov	r1, r2
 80039b6:	2200      	movs	r2, #0
 80039b8:	602a      	str	r2, [r5, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	f000 ff2a 	bl	8004814 <_lseek>
 80039c0:	1c43      	adds	r3, r0, #1
 80039c2:	d102      	bne.n	80039ca <_lseek_r+0x1e>
 80039c4:	682b      	ldr	r3, [r5, #0]
 80039c6:	b103      	cbz	r3, 80039ca <_lseek_r+0x1e>
 80039c8:	6023      	str	r3, [r4, #0]
 80039ca:	bd38      	pop	{r3, r4, r5, pc}
 80039cc:	200002d8 	.word	0x200002d8

080039d0 <malloc>:
 80039d0:	4b02      	ldr	r3, [pc, #8]	; (80039dc <malloc+0xc>)
 80039d2:	4601      	mov	r1, r0
 80039d4:	6818      	ldr	r0, [r3, #0]
 80039d6:	f7fe bcad 	b.w	8002334 <_malloc_r>
 80039da:	bf00      	nop
 80039dc:	2000000c 	.word	0x2000000c

080039e0 <memcpy>:
 80039e0:	440a      	add	r2, r1
 80039e2:	4291      	cmp	r1, r2
 80039e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80039e8:	d100      	bne.n	80039ec <memcpy+0xc>
 80039ea:	4770      	bx	lr
 80039ec:	b510      	push	{r4, lr}
 80039ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039f6:	4291      	cmp	r1, r2
 80039f8:	d1f9      	bne.n	80039ee <memcpy+0xe>
 80039fa:	bd10      	pop	{r4, pc}

080039fc <__malloc_lock>:
 80039fc:	4801      	ldr	r0, [pc, #4]	; (8003a04 <__malloc_lock+0x8>)
 80039fe:	f7fe bc3e 	b.w	800227e <__retarget_lock_acquire_recursive>
 8003a02:	bf00      	nop
 8003a04:	200002d0 	.word	0x200002d0

08003a08 <__malloc_unlock>:
 8003a08:	4801      	ldr	r0, [pc, #4]	; (8003a10 <__malloc_unlock+0x8>)
 8003a0a:	f7fe bc39 	b.w	8002280 <__retarget_lock_release_recursive>
 8003a0e:	bf00      	nop
 8003a10:	200002d0 	.word	0x200002d0

08003a14 <_Balloc>:
 8003a14:	b570      	push	{r4, r5, r6, lr}
 8003a16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003a18:	4604      	mov	r4, r0
 8003a1a:	460d      	mov	r5, r1
 8003a1c:	b976      	cbnz	r6, 8003a3c <_Balloc+0x28>
 8003a1e:	2010      	movs	r0, #16
 8003a20:	f7ff ffd6 	bl	80039d0 <malloc>
 8003a24:	4602      	mov	r2, r0
 8003a26:	6260      	str	r0, [r4, #36]	; 0x24
 8003a28:	b920      	cbnz	r0, 8003a34 <_Balloc+0x20>
 8003a2a:	4b18      	ldr	r3, [pc, #96]	; (8003a8c <_Balloc+0x78>)
 8003a2c:	4818      	ldr	r0, [pc, #96]	; (8003a90 <_Balloc+0x7c>)
 8003a2e:	2166      	movs	r1, #102	; 0x66
 8003a30:	f000 fda8 	bl	8004584 <__assert_func>
 8003a34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003a38:	6006      	str	r6, [r0, #0]
 8003a3a:	60c6      	str	r6, [r0, #12]
 8003a3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003a3e:	68f3      	ldr	r3, [r6, #12]
 8003a40:	b183      	cbz	r3, 8003a64 <_Balloc+0x50>
 8003a42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003a4a:	b9b8      	cbnz	r0, 8003a7c <_Balloc+0x68>
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	fa01 f605 	lsl.w	r6, r1, r5
 8003a52:	1d72      	adds	r2, r6, #5
 8003a54:	0092      	lsls	r2, r2, #2
 8003a56:	4620      	mov	r0, r4
 8003a58:	f000 fb5a 	bl	8004110 <_calloc_r>
 8003a5c:	b160      	cbz	r0, 8003a78 <_Balloc+0x64>
 8003a5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003a62:	e00e      	b.n	8003a82 <_Balloc+0x6e>
 8003a64:	2221      	movs	r2, #33	; 0x21
 8003a66:	2104      	movs	r1, #4
 8003a68:	4620      	mov	r0, r4
 8003a6a:	f000 fb51 	bl	8004110 <_calloc_r>
 8003a6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a70:	60f0      	str	r0, [r6, #12]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1e4      	bne.n	8003a42 <_Balloc+0x2e>
 8003a78:	2000      	movs	r0, #0
 8003a7a:	bd70      	pop	{r4, r5, r6, pc}
 8003a7c:	6802      	ldr	r2, [r0, #0]
 8003a7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003a82:	2300      	movs	r3, #0
 8003a84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003a88:	e7f7      	b.n	8003a7a <_Balloc+0x66>
 8003a8a:	bf00      	nop
 8003a8c:	0800492d 	.word	0x0800492d
 8003a90:	080049b4 	.word	0x080049b4

08003a94 <_Bfree>:
 8003a94:	b570      	push	{r4, r5, r6, lr}
 8003a96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003a98:	4605      	mov	r5, r0
 8003a9a:	460c      	mov	r4, r1
 8003a9c:	b976      	cbnz	r6, 8003abc <_Bfree+0x28>
 8003a9e:	2010      	movs	r0, #16
 8003aa0:	f7ff ff96 	bl	80039d0 <malloc>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	6268      	str	r0, [r5, #36]	; 0x24
 8003aa8:	b920      	cbnz	r0, 8003ab4 <_Bfree+0x20>
 8003aaa:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <_Bfree+0x3c>)
 8003aac:	4809      	ldr	r0, [pc, #36]	; (8003ad4 <_Bfree+0x40>)
 8003aae:	218a      	movs	r1, #138	; 0x8a
 8003ab0:	f000 fd68 	bl	8004584 <__assert_func>
 8003ab4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003ab8:	6006      	str	r6, [r0, #0]
 8003aba:	60c6      	str	r6, [r0, #12]
 8003abc:	b13c      	cbz	r4, 8003ace <_Bfree+0x3a>
 8003abe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003ac0:	6862      	ldr	r2, [r4, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ac8:	6021      	str	r1, [r4, #0]
 8003aca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003ace:	bd70      	pop	{r4, r5, r6, pc}
 8003ad0:	0800492d 	.word	0x0800492d
 8003ad4:	080049b4 	.word	0x080049b4

08003ad8 <__multadd>:
 8003ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003adc:	690e      	ldr	r6, [r1, #16]
 8003ade:	4607      	mov	r7, r0
 8003ae0:	4698      	mov	r8, r3
 8003ae2:	460c      	mov	r4, r1
 8003ae4:	f101 0014 	add.w	r0, r1, #20
 8003ae8:	2300      	movs	r3, #0
 8003aea:	6805      	ldr	r5, [r0, #0]
 8003aec:	b2a9      	uxth	r1, r5
 8003aee:	fb02 8101 	mla	r1, r2, r1, r8
 8003af2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8003af6:	0c2d      	lsrs	r5, r5, #16
 8003af8:	fb02 c505 	mla	r5, r2, r5, ip
 8003afc:	b289      	uxth	r1, r1
 8003afe:	3301      	adds	r3, #1
 8003b00:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8003b04:	429e      	cmp	r6, r3
 8003b06:	f840 1b04 	str.w	r1, [r0], #4
 8003b0a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8003b0e:	dcec      	bgt.n	8003aea <__multadd+0x12>
 8003b10:	f1b8 0f00 	cmp.w	r8, #0
 8003b14:	d022      	beq.n	8003b5c <__multadd+0x84>
 8003b16:	68a3      	ldr	r3, [r4, #8]
 8003b18:	42b3      	cmp	r3, r6
 8003b1a:	dc19      	bgt.n	8003b50 <__multadd+0x78>
 8003b1c:	6861      	ldr	r1, [r4, #4]
 8003b1e:	4638      	mov	r0, r7
 8003b20:	3101      	adds	r1, #1
 8003b22:	f7ff ff77 	bl	8003a14 <_Balloc>
 8003b26:	4605      	mov	r5, r0
 8003b28:	b928      	cbnz	r0, 8003b36 <__multadd+0x5e>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <__multadd+0x8c>)
 8003b2e:	480e      	ldr	r0, [pc, #56]	; (8003b68 <__multadd+0x90>)
 8003b30:	21b5      	movs	r1, #181	; 0xb5
 8003b32:	f000 fd27 	bl	8004584 <__assert_func>
 8003b36:	6922      	ldr	r2, [r4, #16]
 8003b38:	3202      	adds	r2, #2
 8003b3a:	f104 010c 	add.w	r1, r4, #12
 8003b3e:	0092      	lsls	r2, r2, #2
 8003b40:	300c      	adds	r0, #12
 8003b42:	f7ff ff4d 	bl	80039e0 <memcpy>
 8003b46:	4621      	mov	r1, r4
 8003b48:	4638      	mov	r0, r7
 8003b4a:	f7ff ffa3 	bl	8003a94 <_Bfree>
 8003b4e:	462c      	mov	r4, r5
 8003b50:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8003b54:	3601      	adds	r6, #1
 8003b56:	f8c3 8014 	str.w	r8, [r3, #20]
 8003b5a:	6126      	str	r6, [r4, #16]
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b62:	bf00      	nop
 8003b64:	080049a3 	.word	0x080049a3
 8003b68:	080049b4 	.word	0x080049b4

08003b6c <__hi0bits>:
 8003b6c:	0c03      	lsrs	r3, r0, #16
 8003b6e:	041b      	lsls	r3, r3, #16
 8003b70:	b9d3      	cbnz	r3, 8003ba8 <__hi0bits+0x3c>
 8003b72:	0400      	lsls	r0, r0, #16
 8003b74:	2310      	movs	r3, #16
 8003b76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8003b7a:	bf04      	itt	eq
 8003b7c:	0200      	lsleq	r0, r0, #8
 8003b7e:	3308      	addeq	r3, #8
 8003b80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8003b84:	bf04      	itt	eq
 8003b86:	0100      	lsleq	r0, r0, #4
 8003b88:	3304      	addeq	r3, #4
 8003b8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8003b8e:	bf04      	itt	eq
 8003b90:	0080      	lsleq	r0, r0, #2
 8003b92:	3302      	addeq	r3, #2
 8003b94:	2800      	cmp	r0, #0
 8003b96:	db05      	blt.n	8003ba4 <__hi0bits+0x38>
 8003b98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003b9c:	f103 0301 	add.w	r3, r3, #1
 8003ba0:	bf08      	it	eq
 8003ba2:	2320      	moveq	r3, #32
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	4770      	bx	lr
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e7e4      	b.n	8003b76 <__hi0bits+0xa>

08003bac <__lo0bits>:
 8003bac:	6803      	ldr	r3, [r0, #0]
 8003bae:	f013 0207 	ands.w	r2, r3, #7
 8003bb2:	4601      	mov	r1, r0
 8003bb4:	d00b      	beq.n	8003bce <__lo0bits+0x22>
 8003bb6:	07da      	lsls	r2, r3, #31
 8003bb8:	d424      	bmi.n	8003c04 <__lo0bits+0x58>
 8003bba:	0798      	lsls	r0, r3, #30
 8003bbc:	bf49      	itett	mi
 8003bbe:	085b      	lsrmi	r3, r3, #1
 8003bc0:	089b      	lsrpl	r3, r3, #2
 8003bc2:	2001      	movmi	r0, #1
 8003bc4:	600b      	strmi	r3, [r1, #0]
 8003bc6:	bf5c      	itt	pl
 8003bc8:	600b      	strpl	r3, [r1, #0]
 8003bca:	2002      	movpl	r0, #2
 8003bcc:	4770      	bx	lr
 8003bce:	b298      	uxth	r0, r3
 8003bd0:	b9b0      	cbnz	r0, 8003c00 <__lo0bits+0x54>
 8003bd2:	0c1b      	lsrs	r3, r3, #16
 8003bd4:	2010      	movs	r0, #16
 8003bd6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003bda:	bf04      	itt	eq
 8003bdc:	0a1b      	lsreq	r3, r3, #8
 8003bde:	3008      	addeq	r0, #8
 8003be0:	071a      	lsls	r2, r3, #28
 8003be2:	bf04      	itt	eq
 8003be4:	091b      	lsreq	r3, r3, #4
 8003be6:	3004      	addeq	r0, #4
 8003be8:	079a      	lsls	r2, r3, #30
 8003bea:	bf04      	itt	eq
 8003bec:	089b      	lsreq	r3, r3, #2
 8003bee:	3002      	addeq	r0, #2
 8003bf0:	07da      	lsls	r2, r3, #31
 8003bf2:	d403      	bmi.n	8003bfc <__lo0bits+0x50>
 8003bf4:	085b      	lsrs	r3, r3, #1
 8003bf6:	f100 0001 	add.w	r0, r0, #1
 8003bfa:	d005      	beq.n	8003c08 <__lo0bits+0x5c>
 8003bfc:	600b      	str	r3, [r1, #0]
 8003bfe:	4770      	bx	lr
 8003c00:	4610      	mov	r0, r2
 8003c02:	e7e8      	b.n	8003bd6 <__lo0bits+0x2a>
 8003c04:	2000      	movs	r0, #0
 8003c06:	4770      	bx	lr
 8003c08:	2020      	movs	r0, #32
 8003c0a:	4770      	bx	lr

08003c0c <__i2b>:
 8003c0c:	b510      	push	{r4, lr}
 8003c0e:	460c      	mov	r4, r1
 8003c10:	2101      	movs	r1, #1
 8003c12:	f7ff feff 	bl	8003a14 <_Balloc>
 8003c16:	4602      	mov	r2, r0
 8003c18:	b928      	cbnz	r0, 8003c26 <__i2b+0x1a>
 8003c1a:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <__i2b+0x24>)
 8003c1c:	4805      	ldr	r0, [pc, #20]	; (8003c34 <__i2b+0x28>)
 8003c1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003c22:	f000 fcaf 	bl	8004584 <__assert_func>
 8003c26:	2301      	movs	r3, #1
 8003c28:	6144      	str	r4, [r0, #20]
 8003c2a:	6103      	str	r3, [r0, #16]
 8003c2c:	bd10      	pop	{r4, pc}
 8003c2e:	bf00      	nop
 8003c30:	080049a3 	.word	0x080049a3
 8003c34:	080049b4 	.word	0x080049b4

08003c38 <__multiply>:
 8003c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c3c:	4614      	mov	r4, r2
 8003c3e:	690a      	ldr	r2, [r1, #16]
 8003c40:	6923      	ldr	r3, [r4, #16]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	bfb8      	it	lt
 8003c46:	460b      	movlt	r3, r1
 8003c48:	460d      	mov	r5, r1
 8003c4a:	bfbc      	itt	lt
 8003c4c:	4625      	movlt	r5, r4
 8003c4e:	461c      	movlt	r4, r3
 8003c50:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8003c54:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8003c58:	68ab      	ldr	r3, [r5, #8]
 8003c5a:	6869      	ldr	r1, [r5, #4]
 8003c5c:	eb0a 0709 	add.w	r7, sl, r9
 8003c60:	42bb      	cmp	r3, r7
 8003c62:	b085      	sub	sp, #20
 8003c64:	bfb8      	it	lt
 8003c66:	3101      	addlt	r1, #1
 8003c68:	f7ff fed4 	bl	8003a14 <_Balloc>
 8003c6c:	b930      	cbnz	r0, 8003c7c <__multiply+0x44>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	4b42      	ldr	r3, [pc, #264]	; (8003d7c <__multiply+0x144>)
 8003c72:	4843      	ldr	r0, [pc, #268]	; (8003d80 <__multiply+0x148>)
 8003c74:	f240 115d 	movw	r1, #349	; 0x15d
 8003c78:	f000 fc84 	bl	8004584 <__assert_func>
 8003c7c:	f100 0614 	add.w	r6, r0, #20
 8003c80:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8003c84:	4633      	mov	r3, r6
 8003c86:	2200      	movs	r2, #0
 8003c88:	4543      	cmp	r3, r8
 8003c8a:	d31e      	bcc.n	8003cca <__multiply+0x92>
 8003c8c:	f105 0c14 	add.w	ip, r5, #20
 8003c90:	f104 0314 	add.w	r3, r4, #20
 8003c94:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8003c98:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8003c9c:	9202      	str	r2, [sp, #8]
 8003c9e:	ebac 0205 	sub.w	r2, ip, r5
 8003ca2:	3a15      	subs	r2, #21
 8003ca4:	f022 0203 	bic.w	r2, r2, #3
 8003ca8:	3204      	adds	r2, #4
 8003caa:	f105 0115 	add.w	r1, r5, #21
 8003cae:	458c      	cmp	ip, r1
 8003cb0:	bf38      	it	cc
 8003cb2:	2204      	movcc	r2, #4
 8003cb4:	9201      	str	r2, [sp, #4]
 8003cb6:	9a02      	ldr	r2, [sp, #8]
 8003cb8:	9303      	str	r3, [sp, #12]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d808      	bhi.n	8003cd0 <__multiply+0x98>
 8003cbe:	2f00      	cmp	r7, #0
 8003cc0:	dc55      	bgt.n	8003d6e <__multiply+0x136>
 8003cc2:	6107      	str	r7, [r0, #16]
 8003cc4:	b005      	add	sp, #20
 8003cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cca:	f843 2b04 	str.w	r2, [r3], #4
 8003cce:	e7db      	b.n	8003c88 <__multiply+0x50>
 8003cd0:	f8b3 a000 	ldrh.w	sl, [r3]
 8003cd4:	f1ba 0f00 	cmp.w	sl, #0
 8003cd8:	d020      	beq.n	8003d1c <__multiply+0xe4>
 8003cda:	f105 0e14 	add.w	lr, r5, #20
 8003cde:	46b1      	mov	r9, r6
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8003ce6:	f8d9 b000 	ldr.w	fp, [r9]
 8003cea:	b2a1      	uxth	r1, r4
 8003cec:	fa1f fb8b 	uxth.w	fp, fp
 8003cf0:	fb0a b101 	mla	r1, sl, r1, fp
 8003cf4:	4411      	add	r1, r2
 8003cf6:	f8d9 2000 	ldr.w	r2, [r9]
 8003cfa:	0c24      	lsrs	r4, r4, #16
 8003cfc:	0c12      	lsrs	r2, r2, #16
 8003cfe:	fb0a 2404 	mla	r4, sl, r4, r2
 8003d02:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8003d06:	b289      	uxth	r1, r1
 8003d08:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8003d0c:	45f4      	cmp	ip, lr
 8003d0e:	f849 1b04 	str.w	r1, [r9], #4
 8003d12:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8003d16:	d8e4      	bhi.n	8003ce2 <__multiply+0xaa>
 8003d18:	9901      	ldr	r1, [sp, #4]
 8003d1a:	5072      	str	r2, [r6, r1]
 8003d1c:	9a03      	ldr	r2, [sp, #12]
 8003d1e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003d22:	3304      	adds	r3, #4
 8003d24:	f1b9 0f00 	cmp.w	r9, #0
 8003d28:	d01f      	beq.n	8003d6a <__multiply+0x132>
 8003d2a:	6834      	ldr	r4, [r6, #0]
 8003d2c:	f105 0114 	add.w	r1, r5, #20
 8003d30:	46b6      	mov	lr, r6
 8003d32:	f04f 0a00 	mov.w	sl, #0
 8003d36:	880a      	ldrh	r2, [r1, #0]
 8003d38:	f8be b002 	ldrh.w	fp, [lr, #2]
 8003d3c:	fb09 b202 	mla	r2, r9, r2, fp
 8003d40:	4492      	add	sl, r2
 8003d42:	b2a4      	uxth	r4, r4
 8003d44:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8003d48:	f84e 4b04 	str.w	r4, [lr], #4
 8003d4c:	f851 4b04 	ldr.w	r4, [r1], #4
 8003d50:	f8be 2000 	ldrh.w	r2, [lr]
 8003d54:	0c24      	lsrs	r4, r4, #16
 8003d56:	fb09 2404 	mla	r4, r9, r4, r2
 8003d5a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8003d5e:	458c      	cmp	ip, r1
 8003d60:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8003d64:	d8e7      	bhi.n	8003d36 <__multiply+0xfe>
 8003d66:	9a01      	ldr	r2, [sp, #4]
 8003d68:	50b4      	str	r4, [r6, r2]
 8003d6a:	3604      	adds	r6, #4
 8003d6c:	e7a3      	b.n	8003cb6 <__multiply+0x7e>
 8003d6e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1a5      	bne.n	8003cc2 <__multiply+0x8a>
 8003d76:	3f01      	subs	r7, #1
 8003d78:	e7a1      	b.n	8003cbe <__multiply+0x86>
 8003d7a:	bf00      	nop
 8003d7c:	080049a3 	.word	0x080049a3
 8003d80:	080049b4 	.word	0x080049b4

08003d84 <__pow5mult>:
 8003d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d88:	4615      	mov	r5, r2
 8003d8a:	f012 0203 	ands.w	r2, r2, #3
 8003d8e:	4606      	mov	r6, r0
 8003d90:	460f      	mov	r7, r1
 8003d92:	d007      	beq.n	8003da4 <__pow5mult+0x20>
 8003d94:	4c25      	ldr	r4, [pc, #148]	; (8003e2c <__pow5mult+0xa8>)
 8003d96:	3a01      	subs	r2, #1
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003d9e:	f7ff fe9b 	bl	8003ad8 <__multadd>
 8003da2:	4607      	mov	r7, r0
 8003da4:	10ad      	asrs	r5, r5, #2
 8003da6:	d03d      	beq.n	8003e24 <__pow5mult+0xa0>
 8003da8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003daa:	b97c      	cbnz	r4, 8003dcc <__pow5mult+0x48>
 8003dac:	2010      	movs	r0, #16
 8003dae:	f7ff fe0f 	bl	80039d0 <malloc>
 8003db2:	4602      	mov	r2, r0
 8003db4:	6270      	str	r0, [r6, #36]	; 0x24
 8003db6:	b928      	cbnz	r0, 8003dc4 <__pow5mult+0x40>
 8003db8:	4b1d      	ldr	r3, [pc, #116]	; (8003e30 <__pow5mult+0xac>)
 8003dba:	481e      	ldr	r0, [pc, #120]	; (8003e34 <__pow5mult+0xb0>)
 8003dbc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003dc0:	f000 fbe0 	bl	8004584 <__assert_func>
 8003dc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003dc8:	6004      	str	r4, [r0, #0]
 8003dca:	60c4      	str	r4, [r0, #12]
 8003dcc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003dd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003dd4:	b94c      	cbnz	r4, 8003dea <__pow5mult+0x66>
 8003dd6:	f240 2171 	movw	r1, #625	; 0x271
 8003dda:	4630      	mov	r0, r6
 8003ddc:	f7ff ff16 	bl	8003c0c <__i2b>
 8003de0:	2300      	movs	r3, #0
 8003de2:	f8c8 0008 	str.w	r0, [r8, #8]
 8003de6:	4604      	mov	r4, r0
 8003de8:	6003      	str	r3, [r0, #0]
 8003dea:	f04f 0900 	mov.w	r9, #0
 8003dee:	07eb      	lsls	r3, r5, #31
 8003df0:	d50a      	bpl.n	8003e08 <__pow5mult+0x84>
 8003df2:	4639      	mov	r1, r7
 8003df4:	4622      	mov	r2, r4
 8003df6:	4630      	mov	r0, r6
 8003df8:	f7ff ff1e 	bl	8003c38 <__multiply>
 8003dfc:	4639      	mov	r1, r7
 8003dfe:	4680      	mov	r8, r0
 8003e00:	4630      	mov	r0, r6
 8003e02:	f7ff fe47 	bl	8003a94 <_Bfree>
 8003e06:	4647      	mov	r7, r8
 8003e08:	106d      	asrs	r5, r5, #1
 8003e0a:	d00b      	beq.n	8003e24 <__pow5mult+0xa0>
 8003e0c:	6820      	ldr	r0, [r4, #0]
 8003e0e:	b938      	cbnz	r0, 8003e20 <__pow5mult+0x9c>
 8003e10:	4622      	mov	r2, r4
 8003e12:	4621      	mov	r1, r4
 8003e14:	4630      	mov	r0, r6
 8003e16:	f7ff ff0f 	bl	8003c38 <__multiply>
 8003e1a:	6020      	str	r0, [r4, #0]
 8003e1c:	f8c0 9000 	str.w	r9, [r0]
 8003e20:	4604      	mov	r4, r0
 8003e22:	e7e4      	b.n	8003dee <__pow5mult+0x6a>
 8003e24:	4638      	mov	r0, r7
 8003e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e2a:	bf00      	nop
 8003e2c:	08004b08 	.word	0x08004b08
 8003e30:	0800492d 	.word	0x0800492d
 8003e34:	080049b4 	.word	0x080049b4

08003e38 <__lshift>:
 8003e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e3c:	460c      	mov	r4, r1
 8003e3e:	6849      	ldr	r1, [r1, #4]
 8003e40:	6923      	ldr	r3, [r4, #16]
 8003e42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003e46:	68a3      	ldr	r3, [r4, #8]
 8003e48:	4607      	mov	r7, r0
 8003e4a:	4691      	mov	r9, r2
 8003e4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003e50:	f108 0601 	add.w	r6, r8, #1
 8003e54:	42b3      	cmp	r3, r6
 8003e56:	db0b      	blt.n	8003e70 <__lshift+0x38>
 8003e58:	4638      	mov	r0, r7
 8003e5a:	f7ff fddb 	bl	8003a14 <_Balloc>
 8003e5e:	4605      	mov	r5, r0
 8003e60:	b948      	cbnz	r0, 8003e76 <__lshift+0x3e>
 8003e62:	4602      	mov	r2, r0
 8003e64:	4b28      	ldr	r3, [pc, #160]	; (8003f08 <__lshift+0xd0>)
 8003e66:	4829      	ldr	r0, [pc, #164]	; (8003f0c <__lshift+0xd4>)
 8003e68:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003e6c:	f000 fb8a 	bl	8004584 <__assert_func>
 8003e70:	3101      	adds	r1, #1
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	e7ee      	b.n	8003e54 <__lshift+0x1c>
 8003e76:	2300      	movs	r3, #0
 8003e78:	f100 0114 	add.w	r1, r0, #20
 8003e7c:	f100 0210 	add.w	r2, r0, #16
 8003e80:	4618      	mov	r0, r3
 8003e82:	4553      	cmp	r3, sl
 8003e84:	db33      	blt.n	8003eee <__lshift+0xb6>
 8003e86:	6920      	ldr	r0, [r4, #16]
 8003e88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003e8c:	f104 0314 	add.w	r3, r4, #20
 8003e90:	f019 091f 	ands.w	r9, r9, #31
 8003e94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003e98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003e9c:	d02b      	beq.n	8003ef6 <__lshift+0xbe>
 8003e9e:	f1c9 0e20 	rsb	lr, r9, #32
 8003ea2:	468a      	mov	sl, r1
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	fa00 f009 	lsl.w	r0, r0, r9
 8003eac:	4302      	orrs	r2, r0
 8003eae:	f84a 2b04 	str.w	r2, [sl], #4
 8003eb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003eb6:	459c      	cmp	ip, r3
 8003eb8:	fa22 f20e 	lsr.w	r2, r2, lr
 8003ebc:	d8f3      	bhi.n	8003ea6 <__lshift+0x6e>
 8003ebe:	ebac 0304 	sub.w	r3, ip, r4
 8003ec2:	3b15      	subs	r3, #21
 8003ec4:	f023 0303 	bic.w	r3, r3, #3
 8003ec8:	3304      	adds	r3, #4
 8003eca:	f104 0015 	add.w	r0, r4, #21
 8003ece:	4584      	cmp	ip, r0
 8003ed0:	bf38      	it	cc
 8003ed2:	2304      	movcc	r3, #4
 8003ed4:	50ca      	str	r2, [r1, r3]
 8003ed6:	b10a      	cbz	r2, 8003edc <__lshift+0xa4>
 8003ed8:	f108 0602 	add.w	r6, r8, #2
 8003edc:	3e01      	subs	r6, #1
 8003ede:	4638      	mov	r0, r7
 8003ee0:	612e      	str	r6, [r5, #16]
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	f7ff fdd6 	bl	8003a94 <_Bfree>
 8003ee8:	4628      	mov	r0, r5
 8003eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eee:	f842 0f04 	str.w	r0, [r2, #4]!
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	e7c5      	b.n	8003e82 <__lshift+0x4a>
 8003ef6:	3904      	subs	r1, #4
 8003ef8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003efc:	f841 2f04 	str.w	r2, [r1, #4]!
 8003f00:	459c      	cmp	ip, r3
 8003f02:	d8f9      	bhi.n	8003ef8 <__lshift+0xc0>
 8003f04:	e7ea      	b.n	8003edc <__lshift+0xa4>
 8003f06:	bf00      	nop
 8003f08:	080049a3 	.word	0x080049a3
 8003f0c:	080049b4 	.word	0x080049b4

08003f10 <__mcmp>:
 8003f10:	b530      	push	{r4, r5, lr}
 8003f12:	6902      	ldr	r2, [r0, #16]
 8003f14:	690c      	ldr	r4, [r1, #16]
 8003f16:	1b12      	subs	r2, r2, r4
 8003f18:	d10e      	bne.n	8003f38 <__mcmp+0x28>
 8003f1a:	f100 0314 	add.w	r3, r0, #20
 8003f1e:	3114      	adds	r1, #20
 8003f20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8003f24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8003f28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8003f2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8003f30:	42a5      	cmp	r5, r4
 8003f32:	d003      	beq.n	8003f3c <__mcmp+0x2c>
 8003f34:	d305      	bcc.n	8003f42 <__mcmp+0x32>
 8003f36:	2201      	movs	r2, #1
 8003f38:	4610      	mov	r0, r2
 8003f3a:	bd30      	pop	{r4, r5, pc}
 8003f3c:	4283      	cmp	r3, r0
 8003f3e:	d3f3      	bcc.n	8003f28 <__mcmp+0x18>
 8003f40:	e7fa      	b.n	8003f38 <__mcmp+0x28>
 8003f42:	f04f 32ff 	mov.w	r2, #4294967295
 8003f46:	e7f7      	b.n	8003f38 <__mcmp+0x28>

08003f48 <__mdiff>:
 8003f48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f4c:	460c      	mov	r4, r1
 8003f4e:	4606      	mov	r6, r0
 8003f50:	4611      	mov	r1, r2
 8003f52:	4620      	mov	r0, r4
 8003f54:	4617      	mov	r7, r2
 8003f56:	f7ff ffdb 	bl	8003f10 <__mcmp>
 8003f5a:	1e05      	subs	r5, r0, #0
 8003f5c:	d110      	bne.n	8003f80 <__mdiff+0x38>
 8003f5e:	4629      	mov	r1, r5
 8003f60:	4630      	mov	r0, r6
 8003f62:	f7ff fd57 	bl	8003a14 <_Balloc>
 8003f66:	b930      	cbnz	r0, 8003f76 <__mdiff+0x2e>
 8003f68:	4b39      	ldr	r3, [pc, #228]	; (8004050 <__mdiff+0x108>)
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	f240 2132 	movw	r1, #562	; 0x232
 8003f70:	4838      	ldr	r0, [pc, #224]	; (8004054 <__mdiff+0x10c>)
 8003f72:	f000 fb07 	bl	8004584 <__assert_func>
 8003f76:	2301      	movs	r3, #1
 8003f78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003f7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f80:	bfa4      	itt	ge
 8003f82:	463b      	movge	r3, r7
 8003f84:	4627      	movge	r7, r4
 8003f86:	4630      	mov	r0, r6
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	bfa6      	itte	ge
 8003f8c:	461c      	movge	r4, r3
 8003f8e:	2500      	movge	r5, #0
 8003f90:	2501      	movlt	r5, #1
 8003f92:	f7ff fd3f 	bl	8003a14 <_Balloc>
 8003f96:	b920      	cbnz	r0, 8003fa2 <__mdiff+0x5a>
 8003f98:	4b2d      	ldr	r3, [pc, #180]	; (8004050 <__mdiff+0x108>)
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003fa0:	e7e6      	b.n	8003f70 <__mdiff+0x28>
 8003fa2:	693e      	ldr	r6, [r7, #16]
 8003fa4:	60c5      	str	r5, [r0, #12]
 8003fa6:	6925      	ldr	r5, [r4, #16]
 8003fa8:	f107 0114 	add.w	r1, r7, #20
 8003fac:	f104 0914 	add.w	r9, r4, #20
 8003fb0:	f100 0e14 	add.w	lr, r0, #20
 8003fb4:	f107 0210 	add.w	r2, r7, #16
 8003fb8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8003fbc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8003fc0:	46f2      	mov	sl, lr
 8003fc2:	2700      	movs	r7, #0
 8003fc4:	f859 3b04 	ldr.w	r3, [r9], #4
 8003fc8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8003fcc:	fa1f f883 	uxth.w	r8, r3
 8003fd0:	fa17 f78b 	uxtah	r7, r7, fp
 8003fd4:	0c1b      	lsrs	r3, r3, #16
 8003fd6:	eba7 0808 	sub.w	r8, r7, r8
 8003fda:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8003fde:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8003fe2:	fa1f f888 	uxth.w	r8, r8
 8003fe6:	141f      	asrs	r7, r3, #16
 8003fe8:	454d      	cmp	r5, r9
 8003fea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8003fee:	f84a 3b04 	str.w	r3, [sl], #4
 8003ff2:	d8e7      	bhi.n	8003fc4 <__mdiff+0x7c>
 8003ff4:	1b2b      	subs	r3, r5, r4
 8003ff6:	3b15      	subs	r3, #21
 8003ff8:	f023 0303 	bic.w	r3, r3, #3
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	3415      	adds	r4, #21
 8004000:	42a5      	cmp	r5, r4
 8004002:	bf38      	it	cc
 8004004:	2304      	movcc	r3, #4
 8004006:	4419      	add	r1, r3
 8004008:	4473      	add	r3, lr
 800400a:	469e      	mov	lr, r3
 800400c:	460d      	mov	r5, r1
 800400e:	4565      	cmp	r5, ip
 8004010:	d30e      	bcc.n	8004030 <__mdiff+0xe8>
 8004012:	f10c 0203 	add.w	r2, ip, #3
 8004016:	1a52      	subs	r2, r2, r1
 8004018:	f022 0203 	bic.w	r2, r2, #3
 800401c:	3903      	subs	r1, #3
 800401e:	458c      	cmp	ip, r1
 8004020:	bf38      	it	cc
 8004022:	2200      	movcc	r2, #0
 8004024:	441a      	add	r2, r3
 8004026:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800402a:	b17b      	cbz	r3, 800404c <__mdiff+0x104>
 800402c:	6106      	str	r6, [r0, #16]
 800402e:	e7a5      	b.n	8003f7c <__mdiff+0x34>
 8004030:	f855 8b04 	ldr.w	r8, [r5], #4
 8004034:	fa17 f488 	uxtah	r4, r7, r8
 8004038:	1422      	asrs	r2, r4, #16
 800403a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800403e:	b2a4      	uxth	r4, r4
 8004040:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004044:	f84e 4b04 	str.w	r4, [lr], #4
 8004048:	1417      	asrs	r7, r2, #16
 800404a:	e7e0      	b.n	800400e <__mdiff+0xc6>
 800404c:	3e01      	subs	r6, #1
 800404e:	e7ea      	b.n	8004026 <__mdiff+0xde>
 8004050:	080049a3 	.word	0x080049a3
 8004054:	080049b4 	.word	0x080049b4

08004058 <__d2b>:
 8004058:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800405c:	4689      	mov	r9, r1
 800405e:	2101      	movs	r1, #1
 8004060:	ec57 6b10 	vmov	r6, r7, d0
 8004064:	4690      	mov	r8, r2
 8004066:	f7ff fcd5 	bl	8003a14 <_Balloc>
 800406a:	4604      	mov	r4, r0
 800406c:	b930      	cbnz	r0, 800407c <__d2b+0x24>
 800406e:	4602      	mov	r2, r0
 8004070:	4b25      	ldr	r3, [pc, #148]	; (8004108 <__d2b+0xb0>)
 8004072:	4826      	ldr	r0, [pc, #152]	; (800410c <__d2b+0xb4>)
 8004074:	f240 310a 	movw	r1, #778	; 0x30a
 8004078:	f000 fa84 	bl	8004584 <__assert_func>
 800407c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004080:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004084:	bb35      	cbnz	r5, 80040d4 <__d2b+0x7c>
 8004086:	2e00      	cmp	r6, #0
 8004088:	9301      	str	r3, [sp, #4]
 800408a:	d028      	beq.n	80040de <__d2b+0x86>
 800408c:	4668      	mov	r0, sp
 800408e:	9600      	str	r6, [sp, #0]
 8004090:	f7ff fd8c 	bl	8003bac <__lo0bits>
 8004094:	9900      	ldr	r1, [sp, #0]
 8004096:	b300      	cbz	r0, 80040da <__d2b+0x82>
 8004098:	9a01      	ldr	r2, [sp, #4]
 800409a:	f1c0 0320 	rsb	r3, r0, #32
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	430b      	orrs	r3, r1
 80040a4:	40c2      	lsrs	r2, r0
 80040a6:	6163      	str	r3, [r4, #20]
 80040a8:	9201      	str	r2, [sp, #4]
 80040aa:	9b01      	ldr	r3, [sp, #4]
 80040ac:	61a3      	str	r3, [r4, #24]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	bf14      	ite	ne
 80040b2:	2202      	movne	r2, #2
 80040b4:	2201      	moveq	r2, #1
 80040b6:	6122      	str	r2, [r4, #16]
 80040b8:	b1d5      	cbz	r5, 80040f0 <__d2b+0x98>
 80040ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80040be:	4405      	add	r5, r0
 80040c0:	f8c9 5000 	str.w	r5, [r9]
 80040c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80040c8:	f8c8 0000 	str.w	r0, [r8]
 80040cc:	4620      	mov	r0, r4
 80040ce:	b003      	add	sp, #12
 80040d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040d8:	e7d5      	b.n	8004086 <__d2b+0x2e>
 80040da:	6161      	str	r1, [r4, #20]
 80040dc:	e7e5      	b.n	80040aa <__d2b+0x52>
 80040de:	a801      	add	r0, sp, #4
 80040e0:	f7ff fd64 	bl	8003bac <__lo0bits>
 80040e4:	9b01      	ldr	r3, [sp, #4]
 80040e6:	6163      	str	r3, [r4, #20]
 80040e8:	2201      	movs	r2, #1
 80040ea:	6122      	str	r2, [r4, #16]
 80040ec:	3020      	adds	r0, #32
 80040ee:	e7e3      	b.n	80040b8 <__d2b+0x60>
 80040f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80040f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80040f8:	f8c9 0000 	str.w	r0, [r9]
 80040fc:	6918      	ldr	r0, [r3, #16]
 80040fe:	f7ff fd35 	bl	8003b6c <__hi0bits>
 8004102:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004106:	e7df      	b.n	80040c8 <__d2b+0x70>
 8004108:	080049a3 	.word	0x080049a3
 800410c:	080049b4 	.word	0x080049b4

08004110 <_calloc_r>:
 8004110:	b513      	push	{r0, r1, r4, lr}
 8004112:	434a      	muls	r2, r1
 8004114:	4611      	mov	r1, r2
 8004116:	9201      	str	r2, [sp, #4]
 8004118:	f7fe f90c 	bl	8002334 <_malloc_r>
 800411c:	4604      	mov	r4, r0
 800411e:	b118      	cbz	r0, 8004128 <_calloc_r+0x18>
 8004120:	9a01      	ldr	r2, [sp, #4]
 8004122:	2100      	movs	r1, #0
 8004124:	f7fe f8ad 	bl	8002282 <memset>
 8004128:	4620      	mov	r0, r4
 800412a:	b002      	add	sp, #8
 800412c:	bd10      	pop	{r4, pc}

0800412e <__sfputc_r>:
 800412e:	6893      	ldr	r3, [r2, #8]
 8004130:	3b01      	subs	r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	b410      	push	{r4}
 8004136:	6093      	str	r3, [r2, #8]
 8004138:	da08      	bge.n	800414c <__sfputc_r+0x1e>
 800413a:	6994      	ldr	r4, [r2, #24]
 800413c:	42a3      	cmp	r3, r4
 800413e:	db01      	blt.n	8004144 <__sfputc_r+0x16>
 8004140:	290a      	cmp	r1, #10
 8004142:	d103      	bne.n	800414c <__sfputc_r+0x1e>
 8004144:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004148:	f000 b95c 	b.w	8004404 <__swbuf_r>
 800414c:	6813      	ldr	r3, [r2, #0]
 800414e:	1c58      	adds	r0, r3, #1
 8004150:	6010      	str	r0, [r2, #0]
 8004152:	7019      	strb	r1, [r3, #0]
 8004154:	4608      	mov	r0, r1
 8004156:	f85d 4b04 	ldr.w	r4, [sp], #4
 800415a:	4770      	bx	lr

0800415c <__sfputs_r>:
 800415c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415e:	4606      	mov	r6, r0
 8004160:	460f      	mov	r7, r1
 8004162:	4614      	mov	r4, r2
 8004164:	18d5      	adds	r5, r2, r3
 8004166:	42ac      	cmp	r4, r5
 8004168:	d101      	bne.n	800416e <__sfputs_r+0x12>
 800416a:	2000      	movs	r0, #0
 800416c:	e007      	b.n	800417e <__sfputs_r+0x22>
 800416e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004172:	463a      	mov	r2, r7
 8004174:	4630      	mov	r0, r6
 8004176:	f7ff ffda 	bl	800412e <__sfputc_r>
 800417a:	1c43      	adds	r3, r0, #1
 800417c:	d1f3      	bne.n	8004166 <__sfputs_r+0xa>
 800417e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004180 <_vfiprintf_r>:
 8004180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004184:	460d      	mov	r5, r1
 8004186:	b09d      	sub	sp, #116	; 0x74
 8004188:	4614      	mov	r4, r2
 800418a:	4698      	mov	r8, r3
 800418c:	4606      	mov	r6, r0
 800418e:	b118      	cbz	r0, 8004198 <_vfiprintf_r+0x18>
 8004190:	6983      	ldr	r3, [r0, #24]
 8004192:	b90b      	cbnz	r3, 8004198 <_vfiprintf_r+0x18>
 8004194:	f7fd ffb0 	bl	80020f8 <__sinit>
 8004198:	4b89      	ldr	r3, [pc, #548]	; (80043c0 <_vfiprintf_r+0x240>)
 800419a:	429d      	cmp	r5, r3
 800419c:	d11b      	bne.n	80041d6 <_vfiprintf_r+0x56>
 800419e:	6875      	ldr	r5, [r6, #4]
 80041a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041a2:	07d9      	lsls	r1, r3, #31
 80041a4:	d405      	bmi.n	80041b2 <_vfiprintf_r+0x32>
 80041a6:	89ab      	ldrh	r3, [r5, #12]
 80041a8:	059a      	lsls	r2, r3, #22
 80041aa:	d402      	bmi.n	80041b2 <_vfiprintf_r+0x32>
 80041ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041ae:	f7fe f866 	bl	800227e <__retarget_lock_acquire_recursive>
 80041b2:	89ab      	ldrh	r3, [r5, #12]
 80041b4:	071b      	lsls	r3, r3, #28
 80041b6:	d501      	bpl.n	80041bc <_vfiprintf_r+0x3c>
 80041b8:	692b      	ldr	r3, [r5, #16]
 80041ba:	b9eb      	cbnz	r3, 80041f8 <_vfiprintf_r+0x78>
 80041bc:	4629      	mov	r1, r5
 80041be:	4630      	mov	r0, r6
 80041c0:	f000 f972 	bl	80044a8 <__swsetup_r>
 80041c4:	b1c0      	cbz	r0, 80041f8 <_vfiprintf_r+0x78>
 80041c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041c8:	07dc      	lsls	r4, r3, #31
 80041ca:	d50e      	bpl.n	80041ea <_vfiprintf_r+0x6a>
 80041cc:	f04f 30ff 	mov.w	r0, #4294967295
 80041d0:	b01d      	add	sp, #116	; 0x74
 80041d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041d6:	4b7b      	ldr	r3, [pc, #492]	; (80043c4 <_vfiprintf_r+0x244>)
 80041d8:	429d      	cmp	r5, r3
 80041da:	d101      	bne.n	80041e0 <_vfiprintf_r+0x60>
 80041dc:	68b5      	ldr	r5, [r6, #8]
 80041de:	e7df      	b.n	80041a0 <_vfiprintf_r+0x20>
 80041e0:	4b79      	ldr	r3, [pc, #484]	; (80043c8 <_vfiprintf_r+0x248>)
 80041e2:	429d      	cmp	r5, r3
 80041e4:	bf08      	it	eq
 80041e6:	68f5      	ldreq	r5, [r6, #12]
 80041e8:	e7da      	b.n	80041a0 <_vfiprintf_r+0x20>
 80041ea:	89ab      	ldrh	r3, [r5, #12]
 80041ec:	0598      	lsls	r0, r3, #22
 80041ee:	d4ed      	bmi.n	80041cc <_vfiprintf_r+0x4c>
 80041f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041f2:	f7fe f845 	bl	8002280 <__retarget_lock_release_recursive>
 80041f6:	e7e9      	b.n	80041cc <_vfiprintf_r+0x4c>
 80041f8:	2300      	movs	r3, #0
 80041fa:	9309      	str	r3, [sp, #36]	; 0x24
 80041fc:	2320      	movs	r3, #32
 80041fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004202:	f8cd 800c 	str.w	r8, [sp, #12]
 8004206:	2330      	movs	r3, #48	; 0x30
 8004208:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80043cc <_vfiprintf_r+0x24c>
 800420c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004210:	f04f 0901 	mov.w	r9, #1
 8004214:	4623      	mov	r3, r4
 8004216:	469a      	mov	sl, r3
 8004218:	f813 2b01 	ldrb.w	r2, [r3], #1
 800421c:	b10a      	cbz	r2, 8004222 <_vfiprintf_r+0xa2>
 800421e:	2a25      	cmp	r2, #37	; 0x25
 8004220:	d1f9      	bne.n	8004216 <_vfiprintf_r+0x96>
 8004222:	ebba 0b04 	subs.w	fp, sl, r4
 8004226:	d00b      	beq.n	8004240 <_vfiprintf_r+0xc0>
 8004228:	465b      	mov	r3, fp
 800422a:	4622      	mov	r2, r4
 800422c:	4629      	mov	r1, r5
 800422e:	4630      	mov	r0, r6
 8004230:	f7ff ff94 	bl	800415c <__sfputs_r>
 8004234:	3001      	adds	r0, #1
 8004236:	f000 80aa 	beq.w	800438e <_vfiprintf_r+0x20e>
 800423a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800423c:	445a      	add	r2, fp
 800423e:	9209      	str	r2, [sp, #36]	; 0x24
 8004240:	f89a 3000 	ldrb.w	r3, [sl]
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 80a2 	beq.w	800438e <_vfiprintf_r+0x20e>
 800424a:	2300      	movs	r3, #0
 800424c:	f04f 32ff 	mov.w	r2, #4294967295
 8004250:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004254:	f10a 0a01 	add.w	sl, sl, #1
 8004258:	9304      	str	r3, [sp, #16]
 800425a:	9307      	str	r3, [sp, #28]
 800425c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004260:	931a      	str	r3, [sp, #104]	; 0x68
 8004262:	4654      	mov	r4, sl
 8004264:	2205      	movs	r2, #5
 8004266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800426a:	4858      	ldr	r0, [pc, #352]	; (80043cc <_vfiprintf_r+0x24c>)
 800426c:	f7fb fff0 	bl	8000250 <memchr>
 8004270:	9a04      	ldr	r2, [sp, #16]
 8004272:	b9d8      	cbnz	r0, 80042ac <_vfiprintf_r+0x12c>
 8004274:	06d1      	lsls	r1, r2, #27
 8004276:	bf44      	itt	mi
 8004278:	2320      	movmi	r3, #32
 800427a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800427e:	0713      	lsls	r3, r2, #28
 8004280:	bf44      	itt	mi
 8004282:	232b      	movmi	r3, #43	; 0x2b
 8004284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004288:	f89a 3000 	ldrb.w	r3, [sl]
 800428c:	2b2a      	cmp	r3, #42	; 0x2a
 800428e:	d015      	beq.n	80042bc <_vfiprintf_r+0x13c>
 8004290:	9a07      	ldr	r2, [sp, #28]
 8004292:	4654      	mov	r4, sl
 8004294:	2000      	movs	r0, #0
 8004296:	f04f 0c0a 	mov.w	ip, #10
 800429a:	4621      	mov	r1, r4
 800429c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042a0:	3b30      	subs	r3, #48	; 0x30
 80042a2:	2b09      	cmp	r3, #9
 80042a4:	d94e      	bls.n	8004344 <_vfiprintf_r+0x1c4>
 80042a6:	b1b0      	cbz	r0, 80042d6 <_vfiprintf_r+0x156>
 80042a8:	9207      	str	r2, [sp, #28]
 80042aa:	e014      	b.n	80042d6 <_vfiprintf_r+0x156>
 80042ac:	eba0 0308 	sub.w	r3, r0, r8
 80042b0:	fa09 f303 	lsl.w	r3, r9, r3
 80042b4:	4313      	orrs	r3, r2
 80042b6:	9304      	str	r3, [sp, #16]
 80042b8:	46a2      	mov	sl, r4
 80042ba:	e7d2      	b.n	8004262 <_vfiprintf_r+0xe2>
 80042bc:	9b03      	ldr	r3, [sp, #12]
 80042be:	1d19      	adds	r1, r3, #4
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	9103      	str	r1, [sp, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	bfbb      	ittet	lt
 80042c8:	425b      	neglt	r3, r3
 80042ca:	f042 0202 	orrlt.w	r2, r2, #2
 80042ce:	9307      	strge	r3, [sp, #28]
 80042d0:	9307      	strlt	r3, [sp, #28]
 80042d2:	bfb8      	it	lt
 80042d4:	9204      	strlt	r2, [sp, #16]
 80042d6:	7823      	ldrb	r3, [r4, #0]
 80042d8:	2b2e      	cmp	r3, #46	; 0x2e
 80042da:	d10c      	bne.n	80042f6 <_vfiprintf_r+0x176>
 80042dc:	7863      	ldrb	r3, [r4, #1]
 80042de:	2b2a      	cmp	r3, #42	; 0x2a
 80042e0:	d135      	bne.n	800434e <_vfiprintf_r+0x1ce>
 80042e2:	9b03      	ldr	r3, [sp, #12]
 80042e4:	1d1a      	adds	r2, r3, #4
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	9203      	str	r2, [sp, #12]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	bfb8      	it	lt
 80042ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80042f2:	3402      	adds	r4, #2
 80042f4:	9305      	str	r3, [sp, #20]
 80042f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80043dc <_vfiprintf_r+0x25c>
 80042fa:	7821      	ldrb	r1, [r4, #0]
 80042fc:	2203      	movs	r2, #3
 80042fe:	4650      	mov	r0, sl
 8004300:	f7fb ffa6 	bl	8000250 <memchr>
 8004304:	b140      	cbz	r0, 8004318 <_vfiprintf_r+0x198>
 8004306:	2340      	movs	r3, #64	; 0x40
 8004308:	eba0 000a 	sub.w	r0, r0, sl
 800430c:	fa03 f000 	lsl.w	r0, r3, r0
 8004310:	9b04      	ldr	r3, [sp, #16]
 8004312:	4303      	orrs	r3, r0
 8004314:	3401      	adds	r4, #1
 8004316:	9304      	str	r3, [sp, #16]
 8004318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800431c:	482c      	ldr	r0, [pc, #176]	; (80043d0 <_vfiprintf_r+0x250>)
 800431e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004322:	2206      	movs	r2, #6
 8004324:	f7fb ff94 	bl	8000250 <memchr>
 8004328:	2800      	cmp	r0, #0
 800432a:	d03f      	beq.n	80043ac <_vfiprintf_r+0x22c>
 800432c:	4b29      	ldr	r3, [pc, #164]	; (80043d4 <_vfiprintf_r+0x254>)
 800432e:	bb1b      	cbnz	r3, 8004378 <_vfiprintf_r+0x1f8>
 8004330:	9b03      	ldr	r3, [sp, #12]
 8004332:	3307      	adds	r3, #7
 8004334:	f023 0307 	bic.w	r3, r3, #7
 8004338:	3308      	adds	r3, #8
 800433a:	9303      	str	r3, [sp, #12]
 800433c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800433e:	443b      	add	r3, r7
 8004340:	9309      	str	r3, [sp, #36]	; 0x24
 8004342:	e767      	b.n	8004214 <_vfiprintf_r+0x94>
 8004344:	fb0c 3202 	mla	r2, ip, r2, r3
 8004348:	460c      	mov	r4, r1
 800434a:	2001      	movs	r0, #1
 800434c:	e7a5      	b.n	800429a <_vfiprintf_r+0x11a>
 800434e:	2300      	movs	r3, #0
 8004350:	3401      	adds	r4, #1
 8004352:	9305      	str	r3, [sp, #20]
 8004354:	4619      	mov	r1, r3
 8004356:	f04f 0c0a 	mov.w	ip, #10
 800435a:	4620      	mov	r0, r4
 800435c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004360:	3a30      	subs	r2, #48	; 0x30
 8004362:	2a09      	cmp	r2, #9
 8004364:	d903      	bls.n	800436e <_vfiprintf_r+0x1ee>
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0c5      	beq.n	80042f6 <_vfiprintf_r+0x176>
 800436a:	9105      	str	r1, [sp, #20]
 800436c:	e7c3      	b.n	80042f6 <_vfiprintf_r+0x176>
 800436e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004372:	4604      	mov	r4, r0
 8004374:	2301      	movs	r3, #1
 8004376:	e7f0      	b.n	800435a <_vfiprintf_r+0x1da>
 8004378:	ab03      	add	r3, sp, #12
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	462a      	mov	r2, r5
 800437e:	4b16      	ldr	r3, [pc, #88]	; (80043d8 <_vfiprintf_r+0x258>)
 8004380:	a904      	add	r1, sp, #16
 8004382:	4630      	mov	r0, r6
 8004384:	f7fe f8c0 	bl	8002508 <_printf_float>
 8004388:	4607      	mov	r7, r0
 800438a:	1c78      	adds	r0, r7, #1
 800438c:	d1d6      	bne.n	800433c <_vfiprintf_r+0x1bc>
 800438e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004390:	07d9      	lsls	r1, r3, #31
 8004392:	d405      	bmi.n	80043a0 <_vfiprintf_r+0x220>
 8004394:	89ab      	ldrh	r3, [r5, #12]
 8004396:	059a      	lsls	r2, r3, #22
 8004398:	d402      	bmi.n	80043a0 <_vfiprintf_r+0x220>
 800439a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800439c:	f7fd ff70 	bl	8002280 <__retarget_lock_release_recursive>
 80043a0:	89ab      	ldrh	r3, [r5, #12]
 80043a2:	065b      	lsls	r3, r3, #25
 80043a4:	f53f af12 	bmi.w	80041cc <_vfiprintf_r+0x4c>
 80043a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043aa:	e711      	b.n	80041d0 <_vfiprintf_r+0x50>
 80043ac:	ab03      	add	r3, sp, #12
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	462a      	mov	r2, r5
 80043b2:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <_vfiprintf_r+0x258>)
 80043b4:	a904      	add	r1, sp, #16
 80043b6:	4630      	mov	r0, r6
 80043b8:	f7fe fb32 	bl	8002a20 <_printf_i>
 80043bc:	e7e4      	b.n	8004388 <_vfiprintf_r+0x208>
 80043be:	bf00      	nop
 80043c0:	080048a8 	.word	0x080048a8
 80043c4:	080048c8 	.word	0x080048c8
 80043c8:	08004888 	.word	0x08004888
 80043cc:	08004b14 	.word	0x08004b14
 80043d0:	08004b1e 	.word	0x08004b1e
 80043d4:	08002509 	.word	0x08002509
 80043d8:	0800415d 	.word	0x0800415d
 80043dc:	08004b1a 	.word	0x08004b1a

080043e0 <_read_r>:
 80043e0:	b538      	push	{r3, r4, r5, lr}
 80043e2:	4d07      	ldr	r5, [pc, #28]	; (8004400 <_read_r+0x20>)
 80043e4:	4604      	mov	r4, r0
 80043e6:	4608      	mov	r0, r1
 80043e8:	4611      	mov	r1, r2
 80043ea:	2200      	movs	r2, #0
 80043ec:	602a      	str	r2, [r5, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	f7fc fa64 	bl	80008bc <_read>
 80043f4:	1c43      	adds	r3, r0, #1
 80043f6:	d102      	bne.n	80043fe <_read_r+0x1e>
 80043f8:	682b      	ldr	r3, [r5, #0]
 80043fa:	b103      	cbz	r3, 80043fe <_read_r+0x1e>
 80043fc:	6023      	str	r3, [r4, #0]
 80043fe:	bd38      	pop	{r3, r4, r5, pc}
 8004400:	200002d8 	.word	0x200002d8

08004404 <__swbuf_r>:
 8004404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004406:	460e      	mov	r6, r1
 8004408:	4614      	mov	r4, r2
 800440a:	4605      	mov	r5, r0
 800440c:	b118      	cbz	r0, 8004416 <__swbuf_r+0x12>
 800440e:	6983      	ldr	r3, [r0, #24]
 8004410:	b90b      	cbnz	r3, 8004416 <__swbuf_r+0x12>
 8004412:	f7fd fe71 	bl	80020f8 <__sinit>
 8004416:	4b21      	ldr	r3, [pc, #132]	; (800449c <__swbuf_r+0x98>)
 8004418:	429c      	cmp	r4, r3
 800441a:	d12b      	bne.n	8004474 <__swbuf_r+0x70>
 800441c:	686c      	ldr	r4, [r5, #4]
 800441e:	69a3      	ldr	r3, [r4, #24]
 8004420:	60a3      	str	r3, [r4, #8]
 8004422:	89a3      	ldrh	r3, [r4, #12]
 8004424:	071a      	lsls	r2, r3, #28
 8004426:	d52f      	bpl.n	8004488 <__swbuf_r+0x84>
 8004428:	6923      	ldr	r3, [r4, #16]
 800442a:	b36b      	cbz	r3, 8004488 <__swbuf_r+0x84>
 800442c:	6923      	ldr	r3, [r4, #16]
 800442e:	6820      	ldr	r0, [r4, #0]
 8004430:	1ac0      	subs	r0, r0, r3
 8004432:	6963      	ldr	r3, [r4, #20]
 8004434:	b2f6      	uxtb	r6, r6
 8004436:	4283      	cmp	r3, r0
 8004438:	4637      	mov	r7, r6
 800443a:	dc04      	bgt.n	8004446 <__swbuf_r+0x42>
 800443c:	4621      	mov	r1, r4
 800443e:	4628      	mov	r0, r5
 8004440:	f7fd fdb4 	bl	8001fac <_fflush_r>
 8004444:	bb30      	cbnz	r0, 8004494 <__swbuf_r+0x90>
 8004446:	68a3      	ldr	r3, [r4, #8]
 8004448:	3b01      	subs	r3, #1
 800444a:	60a3      	str	r3, [r4, #8]
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	6022      	str	r2, [r4, #0]
 8004452:	701e      	strb	r6, [r3, #0]
 8004454:	6963      	ldr	r3, [r4, #20]
 8004456:	3001      	adds	r0, #1
 8004458:	4283      	cmp	r3, r0
 800445a:	d004      	beq.n	8004466 <__swbuf_r+0x62>
 800445c:	89a3      	ldrh	r3, [r4, #12]
 800445e:	07db      	lsls	r3, r3, #31
 8004460:	d506      	bpl.n	8004470 <__swbuf_r+0x6c>
 8004462:	2e0a      	cmp	r6, #10
 8004464:	d104      	bne.n	8004470 <__swbuf_r+0x6c>
 8004466:	4621      	mov	r1, r4
 8004468:	4628      	mov	r0, r5
 800446a:	f7fd fd9f 	bl	8001fac <_fflush_r>
 800446e:	b988      	cbnz	r0, 8004494 <__swbuf_r+0x90>
 8004470:	4638      	mov	r0, r7
 8004472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004474:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <__swbuf_r+0x9c>)
 8004476:	429c      	cmp	r4, r3
 8004478:	d101      	bne.n	800447e <__swbuf_r+0x7a>
 800447a:	68ac      	ldr	r4, [r5, #8]
 800447c:	e7cf      	b.n	800441e <__swbuf_r+0x1a>
 800447e:	4b09      	ldr	r3, [pc, #36]	; (80044a4 <__swbuf_r+0xa0>)
 8004480:	429c      	cmp	r4, r3
 8004482:	bf08      	it	eq
 8004484:	68ec      	ldreq	r4, [r5, #12]
 8004486:	e7ca      	b.n	800441e <__swbuf_r+0x1a>
 8004488:	4621      	mov	r1, r4
 800448a:	4628      	mov	r0, r5
 800448c:	f000 f80c 	bl	80044a8 <__swsetup_r>
 8004490:	2800      	cmp	r0, #0
 8004492:	d0cb      	beq.n	800442c <__swbuf_r+0x28>
 8004494:	f04f 37ff 	mov.w	r7, #4294967295
 8004498:	e7ea      	b.n	8004470 <__swbuf_r+0x6c>
 800449a:	bf00      	nop
 800449c:	080048a8 	.word	0x080048a8
 80044a0:	080048c8 	.word	0x080048c8
 80044a4:	08004888 	.word	0x08004888

080044a8 <__swsetup_r>:
 80044a8:	4b32      	ldr	r3, [pc, #200]	; (8004574 <__swsetup_r+0xcc>)
 80044aa:	b570      	push	{r4, r5, r6, lr}
 80044ac:	681d      	ldr	r5, [r3, #0]
 80044ae:	4606      	mov	r6, r0
 80044b0:	460c      	mov	r4, r1
 80044b2:	b125      	cbz	r5, 80044be <__swsetup_r+0x16>
 80044b4:	69ab      	ldr	r3, [r5, #24]
 80044b6:	b913      	cbnz	r3, 80044be <__swsetup_r+0x16>
 80044b8:	4628      	mov	r0, r5
 80044ba:	f7fd fe1d 	bl	80020f8 <__sinit>
 80044be:	4b2e      	ldr	r3, [pc, #184]	; (8004578 <__swsetup_r+0xd0>)
 80044c0:	429c      	cmp	r4, r3
 80044c2:	d10f      	bne.n	80044e4 <__swsetup_r+0x3c>
 80044c4:	686c      	ldr	r4, [r5, #4]
 80044c6:	89a3      	ldrh	r3, [r4, #12]
 80044c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044cc:	0719      	lsls	r1, r3, #28
 80044ce:	d42c      	bmi.n	800452a <__swsetup_r+0x82>
 80044d0:	06dd      	lsls	r5, r3, #27
 80044d2:	d411      	bmi.n	80044f8 <__swsetup_r+0x50>
 80044d4:	2309      	movs	r3, #9
 80044d6:	6033      	str	r3, [r6, #0]
 80044d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80044dc:	81a3      	strh	r3, [r4, #12]
 80044de:	f04f 30ff 	mov.w	r0, #4294967295
 80044e2:	e03e      	b.n	8004562 <__swsetup_r+0xba>
 80044e4:	4b25      	ldr	r3, [pc, #148]	; (800457c <__swsetup_r+0xd4>)
 80044e6:	429c      	cmp	r4, r3
 80044e8:	d101      	bne.n	80044ee <__swsetup_r+0x46>
 80044ea:	68ac      	ldr	r4, [r5, #8]
 80044ec:	e7eb      	b.n	80044c6 <__swsetup_r+0x1e>
 80044ee:	4b24      	ldr	r3, [pc, #144]	; (8004580 <__swsetup_r+0xd8>)
 80044f0:	429c      	cmp	r4, r3
 80044f2:	bf08      	it	eq
 80044f4:	68ec      	ldreq	r4, [r5, #12]
 80044f6:	e7e6      	b.n	80044c6 <__swsetup_r+0x1e>
 80044f8:	0758      	lsls	r0, r3, #29
 80044fa:	d512      	bpl.n	8004522 <__swsetup_r+0x7a>
 80044fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044fe:	b141      	cbz	r1, 8004512 <__swsetup_r+0x6a>
 8004500:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004504:	4299      	cmp	r1, r3
 8004506:	d002      	beq.n	800450e <__swsetup_r+0x66>
 8004508:	4630      	mov	r0, r6
 800450a:	f7fd fec3 	bl	8002294 <_free_r>
 800450e:	2300      	movs	r3, #0
 8004510:	6363      	str	r3, [r4, #52]	; 0x34
 8004512:	89a3      	ldrh	r3, [r4, #12]
 8004514:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004518:	81a3      	strh	r3, [r4, #12]
 800451a:	2300      	movs	r3, #0
 800451c:	6063      	str	r3, [r4, #4]
 800451e:	6923      	ldr	r3, [r4, #16]
 8004520:	6023      	str	r3, [r4, #0]
 8004522:	89a3      	ldrh	r3, [r4, #12]
 8004524:	f043 0308 	orr.w	r3, r3, #8
 8004528:	81a3      	strh	r3, [r4, #12]
 800452a:	6923      	ldr	r3, [r4, #16]
 800452c:	b94b      	cbnz	r3, 8004542 <__swsetup_r+0x9a>
 800452e:	89a3      	ldrh	r3, [r4, #12]
 8004530:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004538:	d003      	beq.n	8004542 <__swsetup_r+0x9a>
 800453a:	4621      	mov	r1, r4
 800453c:	4630      	mov	r0, r6
 800453e:	f000 f875 	bl	800462c <__smakebuf_r>
 8004542:	89a0      	ldrh	r0, [r4, #12]
 8004544:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004548:	f010 0301 	ands.w	r3, r0, #1
 800454c:	d00a      	beq.n	8004564 <__swsetup_r+0xbc>
 800454e:	2300      	movs	r3, #0
 8004550:	60a3      	str	r3, [r4, #8]
 8004552:	6963      	ldr	r3, [r4, #20]
 8004554:	425b      	negs	r3, r3
 8004556:	61a3      	str	r3, [r4, #24]
 8004558:	6923      	ldr	r3, [r4, #16]
 800455a:	b943      	cbnz	r3, 800456e <__swsetup_r+0xc6>
 800455c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004560:	d1ba      	bne.n	80044d8 <__swsetup_r+0x30>
 8004562:	bd70      	pop	{r4, r5, r6, pc}
 8004564:	0781      	lsls	r1, r0, #30
 8004566:	bf58      	it	pl
 8004568:	6963      	ldrpl	r3, [r4, #20]
 800456a:	60a3      	str	r3, [r4, #8]
 800456c:	e7f4      	b.n	8004558 <__swsetup_r+0xb0>
 800456e:	2000      	movs	r0, #0
 8004570:	e7f7      	b.n	8004562 <__swsetup_r+0xba>
 8004572:	bf00      	nop
 8004574:	2000000c 	.word	0x2000000c
 8004578:	080048a8 	.word	0x080048a8
 800457c:	080048c8 	.word	0x080048c8
 8004580:	08004888 	.word	0x08004888

08004584 <__assert_func>:
 8004584:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004586:	4614      	mov	r4, r2
 8004588:	461a      	mov	r2, r3
 800458a:	4b09      	ldr	r3, [pc, #36]	; (80045b0 <__assert_func+0x2c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4605      	mov	r5, r0
 8004590:	68d8      	ldr	r0, [r3, #12]
 8004592:	b14c      	cbz	r4, 80045a8 <__assert_func+0x24>
 8004594:	4b07      	ldr	r3, [pc, #28]	; (80045b4 <__assert_func+0x30>)
 8004596:	9100      	str	r1, [sp, #0]
 8004598:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800459c:	4906      	ldr	r1, [pc, #24]	; (80045b8 <__assert_func+0x34>)
 800459e:	462b      	mov	r3, r5
 80045a0:	f000 f80e 	bl	80045c0 <fiprintf>
 80045a4:	f000 f8a1 	bl	80046ea <abort>
 80045a8:	4b04      	ldr	r3, [pc, #16]	; (80045bc <__assert_func+0x38>)
 80045aa:	461c      	mov	r4, r3
 80045ac:	e7f3      	b.n	8004596 <__assert_func+0x12>
 80045ae:	bf00      	nop
 80045b0:	2000000c 	.word	0x2000000c
 80045b4:	08004b25 	.word	0x08004b25
 80045b8:	08004b32 	.word	0x08004b32
 80045bc:	08004b60 	.word	0x08004b60

080045c0 <fiprintf>:
 80045c0:	b40e      	push	{r1, r2, r3}
 80045c2:	b503      	push	{r0, r1, lr}
 80045c4:	4601      	mov	r1, r0
 80045c6:	ab03      	add	r3, sp, #12
 80045c8:	4805      	ldr	r0, [pc, #20]	; (80045e0 <fiprintf+0x20>)
 80045ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80045ce:	6800      	ldr	r0, [r0, #0]
 80045d0:	9301      	str	r3, [sp, #4]
 80045d2:	f7ff fdd5 	bl	8004180 <_vfiprintf_r>
 80045d6:	b002      	add	sp, #8
 80045d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80045dc:	b003      	add	sp, #12
 80045de:	4770      	bx	lr
 80045e0:	2000000c 	.word	0x2000000c

080045e4 <__swhatbuf_r>:
 80045e4:	b570      	push	{r4, r5, r6, lr}
 80045e6:	460e      	mov	r6, r1
 80045e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045ec:	2900      	cmp	r1, #0
 80045ee:	b096      	sub	sp, #88	; 0x58
 80045f0:	4614      	mov	r4, r2
 80045f2:	461d      	mov	r5, r3
 80045f4:	da07      	bge.n	8004606 <__swhatbuf_r+0x22>
 80045f6:	2300      	movs	r3, #0
 80045f8:	602b      	str	r3, [r5, #0]
 80045fa:	89b3      	ldrh	r3, [r6, #12]
 80045fc:	061a      	lsls	r2, r3, #24
 80045fe:	d410      	bmi.n	8004622 <__swhatbuf_r+0x3e>
 8004600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004604:	e00e      	b.n	8004624 <__swhatbuf_r+0x40>
 8004606:	466a      	mov	r2, sp
 8004608:	f000 f876 	bl	80046f8 <_fstat_r>
 800460c:	2800      	cmp	r0, #0
 800460e:	dbf2      	blt.n	80045f6 <__swhatbuf_r+0x12>
 8004610:	9a01      	ldr	r2, [sp, #4]
 8004612:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004616:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800461a:	425a      	negs	r2, r3
 800461c:	415a      	adcs	r2, r3
 800461e:	602a      	str	r2, [r5, #0]
 8004620:	e7ee      	b.n	8004600 <__swhatbuf_r+0x1c>
 8004622:	2340      	movs	r3, #64	; 0x40
 8004624:	2000      	movs	r0, #0
 8004626:	6023      	str	r3, [r4, #0]
 8004628:	b016      	add	sp, #88	; 0x58
 800462a:	bd70      	pop	{r4, r5, r6, pc}

0800462c <__smakebuf_r>:
 800462c:	898b      	ldrh	r3, [r1, #12]
 800462e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004630:	079d      	lsls	r5, r3, #30
 8004632:	4606      	mov	r6, r0
 8004634:	460c      	mov	r4, r1
 8004636:	d507      	bpl.n	8004648 <__smakebuf_r+0x1c>
 8004638:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800463c:	6023      	str	r3, [r4, #0]
 800463e:	6123      	str	r3, [r4, #16]
 8004640:	2301      	movs	r3, #1
 8004642:	6163      	str	r3, [r4, #20]
 8004644:	b002      	add	sp, #8
 8004646:	bd70      	pop	{r4, r5, r6, pc}
 8004648:	ab01      	add	r3, sp, #4
 800464a:	466a      	mov	r2, sp
 800464c:	f7ff ffca 	bl	80045e4 <__swhatbuf_r>
 8004650:	9900      	ldr	r1, [sp, #0]
 8004652:	4605      	mov	r5, r0
 8004654:	4630      	mov	r0, r6
 8004656:	f7fd fe6d 	bl	8002334 <_malloc_r>
 800465a:	b948      	cbnz	r0, 8004670 <__smakebuf_r+0x44>
 800465c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004660:	059a      	lsls	r2, r3, #22
 8004662:	d4ef      	bmi.n	8004644 <__smakebuf_r+0x18>
 8004664:	f023 0303 	bic.w	r3, r3, #3
 8004668:	f043 0302 	orr.w	r3, r3, #2
 800466c:	81a3      	strh	r3, [r4, #12]
 800466e:	e7e3      	b.n	8004638 <__smakebuf_r+0xc>
 8004670:	4b0d      	ldr	r3, [pc, #52]	; (80046a8 <__smakebuf_r+0x7c>)
 8004672:	62b3      	str	r3, [r6, #40]	; 0x28
 8004674:	89a3      	ldrh	r3, [r4, #12]
 8004676:	6020      	str	r0, [r4, #0]
 8004678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800467c:	81a3      	strh	r3, [r4, #12]
 800467e:	9b00      	ldr	r3, [sp, #0]
 8004680:	6163      	str	r3, [r4, #20]
 8004682:	9b01      	ldr	r3, [sp, #4]
 8004684:	6120      	str	r0, [r4, #16]
 8004686:	b15b      	cbz	r3, 80046a0 <__smakebuf_r+0x74>
 8004688:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800468c:	4630      	mov	r0, r6
 800468e:	f000 f845 	bl	800471c <_isatty_r>
 8004692:	b128      	cbz	r0, 80046a0 <__smakebuf_r+0x74>
 8004694:	89a3      	ldrh	r3, [r4, #12]
 8004696:	f023 0303 	bic.w	r3, r3, #3
 800469a:	f043 0301 	orr.w	r3, r3, #1
 800469e:	81a3      	strh	r3, [r4, #12]
 80046a0:	89a0      	ldrh	r0, [r4, #12]
 80046a2:	4305      	orrs	r5, r0
 80046a4:	81a5      	strh	r5, [r4, #12]
 80046a6:	e7cd      	b.n	8004644 <__smakebuf_r+0x18>
 80046a8:	08002091 	.word	0x08002091

080046ac <__ascii_mbtowc>:
 80046ac:	b082      	sub	sp, #8
 80046ae:	b901      	cbnz	r1, 80046b2 <__ascii_mbtowc+0x6>
 80046b0:	a901      	add	r1, sp, #4
 80046b2:	b142      	cbz	r2, 80046c6 <__ascii_mbtowc+0x1a>
 80046b4:	b14b      	cbz	r3, 80046ca <__ascii_mbtowc+0x1e>
 80046b6:	7813      	ldrb	r3, [r2, #0]
 80046b8:	600b      	str	r3, [r1, #0]
 80046ba:	7812      	ldrb	r2, [r2, #0]
 80046bc:	1e10      	subs	r0, r2, #0
 80046be:	bf18      	it	ne
 80046c0:	2001      	movne	r0, #1
 80046c2:	b002      	add	sp, #8
 80046c4:	4770      	bx	lr
 80046c6:	4610      	mov	r0, r2
 80046c8:	e7fb      	b.n	80046c2 <__ascii_mbtowc+0x16>
 80046ca:	f06f 0001 	mvn.w	r0, #1
 80046ce:	e7f8      	b.n	80046c2 <__ascii_mbtowc+0x16>

080046d0 <__ascii_wctomb>:
 80046d0:	b149      	cbz	r1, 80046e6 <__ascii_wctomb+0x16>
 80046d2:	2aff      	cmp	r2, #255	; 0xff
 80046d4:	bf85      	ittet	hi
 80046d6:	238a      	movhi	r3, #138	; 0x8a
 80046d8:	6003      	strhi	r3, [r0, #0]
 80046da:	700a      	strbls	r2, [r1, #0]
 80046dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80046e0:	bf98      	it	ls
 80046e2:	2001      	movls	r0, #1
 80046e4:	4770      	bx	lr
 80046e6:	4608      	mov	r0, r1
 80046e8:	4770      	bx	lr

080046ea <abort>:
 80046ea:	b508      	push	{r3, lr}
 80046ec:	2006      	movs	r0, #6
 80046ee:	f000 f84d 	bl	800478c <raise>
 80046f2:	2001      	movs	r0, #1
 80046f4:	f000 f8a4 	bl	8004840 <_exit>

080046f8 <_fstat_r>:
 80046f8:	b538      	push	{r3, r4, r5, lr}
 80046fa:	4d07      	ldr	r5, [pc, #28]	; (8004718 <_fstat_r+0x20>)
 80046fc:	2300      	movs	r3, #0
 80046fe:	4604      	mov	r4, r0
 8004700:	4608      	mov	r0, r1
 8004702:	4611      	mov	r1, r2
 8004704:	602b      	str	r3, [r5, #0]
 8004706:	f000 f865 	bl	80047d4 <_fstat>
 800470a:	1c43      	adds	r3, r0, #1
 800470c:	d102      	bne.n	8004714 <_fstat_r+0x1c>
 800470e:	682b      	ldr	r3, [r5, #0]
 8004710:	b103      	cbz	r3, 8004714 <_fstat_r+0x1c>
 8004712:	6023      	str	r3, [r4, #0]
 8004714:	bd38      	pop	{r3, r4, r5, pc}
 8004716:	bf00      	nop
 8004718:	200002d8 	.word	0x200002d8

0800471c <_isatty_r>:
 800471c:	b538      	push	{r3, r4, r5, lr}
 800471e:	4d06      	ldr	r5, [pc, #24]	; (8004738 <_isatty_r+0x1c>)
 8004720:	2300      	movs	r3, #0
 8004722:	4604      	mov	r4, r0
 8004724:	4608      	mov	r0, r1
 8004726:	602b      	str	r3, [r5, #0]
 8004728:	f000 f864 	bl	80047f4 <_isatty>
 800472c:	1c43      	adds	r3, r0, #1
 800472e:	d102      	bne.n	8004736 <_isatty_r+0x1a>
 8004730:	682b      	ldr	r3, [r5, #0]
 8004732:	b103      	cbz	r3, 8004736 <_isatty_r+0x1a>
 8004734:	6023      	str	r3, [r4, #0]
 8004736:	bd38      	pop	{r3, r4, r5, pc}
 8004738:	200002d8 	.word	0x200002d8

0800473c <_raise_r>:
 800473c:	291f      	cmp	r1, #31
 800473e:	b538      	push	{r3, r4, r5, lr}
 8004740:	4604      	mov	r4, r0
 8004742:	460d      	mov	r5, r1
 8004744:	d904      	bls.n	8004750 <_raise_r+0x14>
 8004746:	2316      	movs	r3, #22
 8004748:	6003      	str	r3, [r0, #0]
 800474a:	f04f 30ff 	mov.w	r0, #4294967295
 800474e:	bd38      	pop	{r3, r4, r5, pc}
 8004750:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004752:	b112      	cbz	r2, 800475a <_raise_r+0x1e>
 8004754:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004758:	b94b      	cbnz	r3, 800476e <_raise_r+0x32>
 800475a:	4620      	mov	r0, r4
 800475c:	f000 f830 	bl	80047c0 <_getpid_r>
 8004760:	462a      	mov	r2, r5
 8004762:	4601      	mov	r1, r0
 8004764:	4620      	mov	r0, r4
 8004766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800476a:	f000 b817 	b.w	800479c <_kill_r>
 800476e:	2b01      	cmp	r3, #1
 8004770:	d00a      	beq.n	8004788 <_raise_r+0x4c>
 8004772:	1c59      	adds	r1, r3, #1
 8004774:	d103      	bne.n	800477e <_raise_r+0x42>
 8004776:	2316      	movs	r3, #22
 8004778:	6003      	str	r3, [r0, #0]
 800477a:	2001      	movs	r0, #1
 800477c:	e7e7      	b.n	800474e <_raise_r+0x12>
 800477e:	2400      	movs	r4, #0
 8004780:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004784:	4628      	mov	r0, r5
 8004786:	4798      	blx	r3
 8004788:	2000      	movs	r0, #0
 800478a:	e7e0      	b.n	800474e <_raise_r+0x12>

0800478c <raise>:
 800478c:	4b02      	ldr	r3, [pc, #8]	; (8004798 <raise+0xc>)
 800478e:	4601      	mov	r1, r0
 8004790:	6818      	ldr	r0, [r3, #0]
 8004792:	f7ff bfd3 	b.w	800473c <_raise_r>
 8004796:	bf00      	nop
 8004798:	2000000c 	.word	0x2000000c

0800479c <_kill_r>:
 800479c:	b538      	push	{r3, r4, r5, lr}
 800479e:	4d07      	ldr	r5, [pc, #28]	; (80047bc <_kill_r+0x20>)
 80047a0:	2300      	movs	r3, #0
 80047a2:	4604      	mov	r4, r0
 80047a4:	4608      	mov	r0, r1
 80047a6:	4611      	mov	r1, r2
 80047a8:	602b      	str	r3, [r5, #0]
 80047aa:	f000 f82b 	bl	8004804 <_kill>
 80047ae:	1c43      	adds	r3, r0, #1
 80047b0:	d102      	bne.n	80047b8 <_kill_r+0x1c>
 80047b2:	682b      	ldr	r3, [r5, #0]
 80047b4:	b103      	cbz	r3, 80047b8 <_kill_r+0x1c>
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	bd38      	pop	{r3, r4, r5, pc}
 80047ba:	bf00      	nop
 80047bc:	200002d8 	.word	0x200002d8

080047c0 <_getpid_r>:
 80047c0:	f000 b810 	b.w	80047e4 <_getpid>

080047c4 <_close>:
 80047c4:	4b02      	ldr	r3, [pc, #8]	; (80047d0 <_close+0xc>)
 80047c6:	2258      	movs	r2, #88	; 0x58
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	f04f 30ff 	mov.w	r0, #4294967295
 80047ce:	4770      	bx	lr
 80047d0:	200002d8 	.word	0x200002d8

080047d4 <_fstat>:
 80047d4:	4b02      	ldr	r3, [pc, #8]	; (80047e0 <_fstat+0xc>)
 80047d6:	2258      	movs	r2, #88	; 0x58
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	f04f 30ff 	mov.w	r0, #4294967295
 80047de:	4770      	bx	lr
 80047e0:	200002d8 	.word	0x200002d8

080047e4 <_getpid>:
 80047e4:	4b02      	ldr	r3, [pc, #8]	; (80047f0 <_getpid+0xc>)
 80047e6:	2258      	movs	r2, #88	; 0x58
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	f04f 30ff 	mov.w	r0, #4294967295
 80047ee:	4770      	bx	lr
 80047f0:	200002d8 	.word	0x200002d8

080047f4 <_isatty>:
 80047f4:	4b02      	ldr	r3, [pc, #8]	; (8004800 <_isatty+0xc>)
 80047f6:	2258      	movs	r2, #88	; 0x58
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	2000      	movs	r0, #0
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	200002d8 	.word	0x200002d8

08004804 <_kill>:
 8004804:	4b02      	ldr	r3, [pc, #8]	; (8004810 <_kill+0xc>)
 8004806:	2258      	movs	r2, #88	; 0x58
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	f04f 30ff 	mov.w	r0, #4294967295
 800480e:	4770      	bx	lr
 8004810:	200002d8 	.word	0x200002d8

08004814 <_lseek>:
 8004814:	4b02      	ldr	r3, [pc, #8]	; (8004820 <_lseek+0xc>)
 8004816:	2258      	movs	r2, #88	; 0x58
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	f04f 30ff 	mov.w	r0, #4294967295
 800481e:	4770      	bx	lr
 8004820:	200002d8 	.word	0x200002d8

08004824 <_sbrk>:
 8004824:	4b04      	ldr	r3, [pc, #16]	; (8004838 <_sbrk+0x14>)
 8004826:	6819      	ldr	r1, [r3, #0]
 8004828:	4602      	mov	r2, r0
 800482a:	b909      	cbnz	r1, 8004830 <_sbrk+0xc>
 800482c:	4903      	ldr	r1, [pc, #12]	; (800483c <_sbrk+0x18>)
 800482e:	6019      	str	r1, [r3, #0]
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	4402      	add	r2, r0
 8004834:	601a      	str	r2, [r3, #0]
 8004836:	4770      	bx	lr
 8004838:	20000204 	.word	0x20000204
 800483c:	200002e0 	.word	0x200002e0

08004840 <_exit>:
 8004840:	e7fe      	b.n	8004840 <_exit>
	...

08004844 <_init>:
 8004844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004846:	bf00      	nop
 8004848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800484a:	bc08      	pop	{r3}
 800484c:	469e      	mov	lr, r3
 800484e:	4770      	bx	lr

08004850 <_fini>:
 8004850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004852:	bf00      	nop
 8004854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004856:	bc08      	pop	{r3}
 8004858:	469e      	mov	lr, r3
 800485a:	4770      	bx	lr
