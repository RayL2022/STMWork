
FinalTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000290c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08002b04  08002b04  00012b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bac  08002bac  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002bac  08002bac  00012bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002bb4  08002bb4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bb4  08002bb4  00012bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bb8  08002bb8  00012bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000070  08002c2c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  2000018c  08002c2c  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be0b  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b2e  00000000  00000000  0002bea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00004140  00000000  00000000  0002d9d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000728  00000000  00000000  00031b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006d0  00000000  00000000  00032240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c802  00000000  00000000  00032910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a63f  00000000  00000000  0005f112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f546  00000000  00000000  00069751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00178c97  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000018f8  00000000  00000000  00178cec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         0000006c  00000000  00000000  0017a5e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000000e3  00000000  00000000  0017a650  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000070 	.word	0x20000070
 8000214:	00000000 	.word	0x00000000
 8000218:	08002aec 	.word	0x08002aec

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000074 	.word	0x20000074
 8000234:	08002aec 	.word	0x08002aec

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 8000530:	b500      	push	{lr}
 8000532:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000534:	2301      	movs	r3, #1
 8000536:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000538:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800053c:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053e:	2302      	movs	r3, #2
 8000540:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000542:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000546:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000548:	2219      	movs	r2, #25
 800054a:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 800054c:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8000550:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000552:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000554:	2309      	movs	r3, #9
 8000556:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 8000558:	2307      	movs	r3, #7
 800055a:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800055c:	4668      	mov	r0, sp
 800055e:	f000 fe69 	bl	8001234 <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 8000562:	b100      	cbz	r0, 8000566 <SystemClock_Config+0x36>
    while(1) { ; }
 8000564:	e7fe      	b.n	8000564 <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 8000566:	f000 fe27 	bl	80011b8 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 800056a:	b100      	cbz	r0, 800056e <SystemClock_Config+0x3e>
    while(1) { ; }
 800056c:	e7fe      	b.n	800056c <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800056e:	230f      	movs	r3, #15
 8000570:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000572:	2302      	movs	r3, #2
 8000574:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800057a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800057e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000584:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8000586:	2107      	movs	r1, #7
 8000588:	a80d      	add	r0, sp, #52	; 0x34
 800058a:	f001 f8c5 	bl	8001718 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 800058e:	b100      	cbz	r0, 8000592 <SystemClock_Config+0x62>
    while(1) { ; }
 8000590:	e7fe      	b.n	8000590 <SystemClock_Config+0x60>
  }
}
 8000592:	b013      	add	sp, #76	; 0x4c
 8000594:	f85d fb04 	ldr.w	pc, [sp], #4

08000598 <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 8000598:	b410      	push	{r4}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800059a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800059e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005a2:	4b1c      	ldr	r3, [pc, #112]	; (8000614 <CPU_CACHE_Enable+0x7c>)
 80005a4:	2100      	movs	r1, #0
 80005a6:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005ae:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005b2:	695a      	ldr	r2, [r3, #20]
 80005b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80005b8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005be:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80005c2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005c6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005ca:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005ce:	f3c0 324e 	ubfx	r2, r0, #13, #15
 80005d2:	e000      	b.n	80005d6 <CPU_CACHE_Enable+0x3e>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 80005d4:	461a      	mov	r2, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005d6:	f3c0 01c9 	ubfx	r1, r0, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005da:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005de:	ea03 1342 	and.w	r3, r3, r2, lsl #5
 80005e2:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 80005e6:	4c0b      	ldr	r4, [pc, #44]	; (8000614 <CPU_CACHE_Enable+0x7c>)
 80005e8:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways-- != 0U);
 80005ec:	460b      	mov	r3, r1
 80005ee:	3901      	subs	r1, #1
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d1f2      	bne.n	80005da <CPU_CACHE_Enable+0x42>
    } while(sets-- != 0U);
 80005f4:	1e53      	subs	r3, r2, #1
 80005f6:	2a00      	cmp	r2, #0
 80005f8:	d1ec      	bne.n	80005d4 <CPU_CACHE_Enable+0x3c>
 80005fa:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005fe:	6963      	ldr	r3, [r4, #20]
 8000600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000604:	6163      	str	r3, [r4, #20]
 8000606:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800060a:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 800060e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <Sys_Init>:

// Unified System Initialization (equivalent of current MPS Sys_Init())
void Sys_Init(void) {
 8000618:	b508      	push	{r3, lr}
	//Initialize the system
	CPU_CACHE_Enable();		// Enable CPU Caching
 800061a:	f7ff ffbd 	bl	8000598 <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 800061e:	f000 f9a9 	bl	8000974 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 8000622:	f7ff ff85 	bl	8000530 <SystemClock_Config>
		- Stop Bit = No Stop bits
		- Parity = None
		- BaudRate = 115200 baud
		- Hardware flow control disabled (RTS and CTS signals)
	*/
	initUart(&USB_UART, 115200, USART1);
 8000626:	4a03      	ldr	r2, [pc, #12]	; (8000634 <Sys_Init+0x1c>)
 8000628:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800062c:	4802      	ldr	r0, [pc, #8]	; (8000638 <Sys_Init+0x20>)
 800062e:	f000 f91b 	bl	8000868 <initUart>
}
 8000632:	bd08      	pop	{r3, pc}
 8000634:	40011000 	.word	0x40011000
 8000638:	20000098 	.word	0x20000098

0800063c <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 800063c:	b508      	push	{r3, lr}
  HAL_IncTick();
 800063e:	f000 f9af 	bl	80009a0 <HAL_IncTick>
}
 8000642:	bd08      	pop	{r3, pc}

08000644 <configureADC>:
	}
}


void configureADC()
{
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	b083      	sub	sp, #12
	// Enable the ADC Clock.
	__HAL_RCC_ADC1_CLK_ENABLE();
 8000648:	4b14      	ldr	r3, [pc, #80]	; (800069c <configureADC+0x58>)
 800064a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800064c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000650:	645a      	str	r2, [r3, #68]	; 0x44
 8000652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000658:	9301      	str	r3, [sp, #4]
 800065a:	9b01      	ldr	r3, [sp, #4]


	 /* Configure the global features of the ADC (Clock, Resolution, Data Alignment and number
	 of conversion) */
	 hadc1.Instance = ADC1; //Using ADC1
 800065c:	4c10      	ldr	r4, [pc, #64]	; (80006a0 <configureADC+0x5c>)
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <configureADC+0x60>)
 8000660:	6023      	str	r3, [r4, #0]
	 hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000662:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000666:	6063      	str	r3, [r4, #4]
	 hadc1.Init.Resolution = ADC_RESOLUTION_12B; //12 Bit resolution
 8000668:	2300      	movs	r3, #0
 800066a:	60a3      	str	r3, [r4, #8]
	 hadc1.Init.ScanConvMode = DISABLE;
 800066c:	6123      	str	r3, [r4, #16]
	 hadc1.Init.ContinuousConvMode = ENABLE;
 800066e:	2501      	movs	r5, #1
 8000670:	61a5      	str	r5, [r4, #24]
	 hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000672:	f884 3020 	strb.w	r3, [r4, #32]
	 hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000676:	60e3      	str	r3, [r4, #12]
	 hadc1.Init.NbrOfConversion = 1;
 8000678:	61e5      	str	r5, [r4, #28]
	 hadc1.Init.DMAContinuousRequests = DISABLE;
 800067a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	 hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800067e:	6163      	str	r3, [r4, #20]

	 HAL_ADC_Init(&hadc1); // Initialize the ADC
 8000680:	4620      	mov	r0, r4
 8000682:	f000 fa4d 	bl	8000b20 <HAL_ADC_Init>

	 /* Configure for the selected ADC regular channel its corresponding rank in the sequence\r
	 Analog-To-Digital Conversion 406
	 and its sample time. */
	 sConfig.Channel = ADC_CHANNEL_12;
 8000686:	4908      	ldr	r1, [pc, #32]	; (80006a8 <configureADC+0x64>)
 8000688:	230c      	movs	r3, #12
 800068a:	600b      	str	r3, [r1, #0]
	 sConfig.Rank = ADC_REGULAR_RANK_1;
 800068c:	604d      	str	r5, [r1, #4]
	 sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800068e:	608d      	str	r5, [r1, #8]
	 HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000690:	4620      	mov	r0, r4
 8000692:	f000 fb61 	bl	8000d58 <HAL_ADC_ConfigChannel>
}
 8000696:	b003      	add	sp, #12
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	20000120 	.word	0x20000120
 80006a4:	40012000 	.word	0x40012000
 80006a8:	20000168 	.word	0x20000168

080006ac <main>:
int main(void){
 80006ac:	b508      	push	{r3, lr}
	Sys_Init();
 80006ae:	f7ff ffb3 	bl	8000618 <Sys_Init>
	HAL_Init();
 80006b2:	f000 f95f 	bl	8000974 <HAL_Init>
	configureADC();
 80006b6:	f7ff ffc5 	bl	8000644 <configureADC>
	HAL_ADC_Start(&hadc1);
 80006ba:	4820      	ldr	r0, [pc, #128]	; (800073c <main+0x90>)
 80006bc:	f000 fa5c 	bl	8000b78 <HAL_ADC_Start>
	current_state = 0; //1 for Down, 2 for Up, 3 for Neutral
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <main+0x94>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	e005      	b.n	80006d4 <main+0x28>
				current_state = 1;
 80006c8:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <main+0x94>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	601a      	str	r2, [r3, #0]
				printf("State: Down\r\n");
 80006ce:	481d      	ldr	r0, [pc, #116]	; (8000744 <main+0x98>)
 80006d0:	f001 fd86 	bl	80021e0 <puts>
		HAL_ADC_PollForConversion(&hadc1, 1000); //Start conversion
 80006d4:	4c19      	ldr	r4, [pc, #100]	; (800073c <main+0x90>)
 80006d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006da:	4620      	mov	r0, r4
 80006dc:	f000 fade 	bl	8000c9c <HAL_ADC_PollForConversion>
		adc_value = HAL_ADC_GetValue(&hadc1); //Get the value
 80006e0:	4620      	mov	r0, r4
 80006e2:	f000 fb36 	bl	8000d52 <HAL_ADC_GetValue>
 80006e6:	4c18      	ldr	r4, [pc, #96]	; (8000748 <main+0x9c>)
 80006e8:	8020      	strh	r0, [r4, #0]
		HAL_Delay(10);
 80006ea:	200a      	movs	r0, #10
 80006ec:	f000 f96a 	bl	80009c4 <HAL_Delay>
		if ((adc_value > 3060) && (adc_value < 3090)){ //Down
 80006f0:	8822      	ldrh	r2, [r4, #0]
 80006f2:	f6a2 33f5 	subw	r3, r2, #3061	; 0xbf5
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	2b1c      	cmp	r3, #28
 80006fa:	d804      	bhi.n	8000706 <main+0x5a>
			if (current_state != 1){
 80006fc:	4b10      	ldr	r3, [pc, #64]	; (8000740 <main+0x94>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d1e1      	bne.n	80006c8 <main+0x1c>
 8000704:	e7e6      	b.n	80006d4 <main+0x28>
		else if (adc_value < 3060){ //Up
 8000706:	f640 33f3 	movw	r3, #3059	; 0xbf3
 800070a:	429a      	cmp	r2, r3
 800070c:	d80a      	bhi.n	8000724 <main+0x78>
			if (current_state != 2){
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <main+0x94>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b02      	cmp	r3, #2
 8000714:	d0de      	beq.n	80006d4 <main+0x28>
				current_state = 2;
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <main+0x94>)
 8000718:	2202      	movs	r2, #2
 800071a:	601a      	str	r2, [r3, #0]
				printf("State: UP\r\n");
 800071c:	480b      	ldr	r0, [pc, #44]	; (800074c <main+0xa0>)
 800071e:	f001 fd5f 	bl	80021e0 <puts>
 8000722:	e7d7      	b.n	80006d4 <main+0x28>
			if (current_state != 3){
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <main+0x94>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b03      	cmp	r3, #3
 800072a:	d0d3      	beq.n	80006d4 <main+0x28>
				current_state = 3;
 800072c:	4b04      	ldr	r3, [pc, #16]	; (8000740 <main+0x94>)
 800072e:	2203      	movs	r2, #3
 8000730:	601a      	str	r2, [r3, #0]
				printf("State: Neutral\r\n");
 8000732:	4807      	ldr	r0, [pc, #28]	; (8000750 <main+0xa4>)
 8000734:	f001 fd54 	bl	80021e0 <puts>
 8000738:	e7cc      	b.n	80006d4 <main+0x28>
 800073a:	bf00      	nop
 800073c:	20000120 	.word	0x20000120
 8000740:	20000118 	.word	0x20000118
 8000744:	08002b1c 	.word	0x08002b1c
 8000748:	2000011c 	.word	0x2000011c
 800074c:	08002b2c 	.word	0x08002b2c
 8000750:	08002b38 	.word	0x08002b38

08000754 <HAL_ADC_MspInit>:


void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 8000754:	b500      	push	{lr}
 8000756:	b087      	sub	sp, #28

// GPIO init
	GPIO_InitTypeDef GPIO_InitStruct;
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <HAL_ADC_MspInit+0x38>)
 800075a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800075c:	f042 0204 	orr.w	r2, r2, #4
 8000760:	631a      	str	r2, [r3, #48]	; 0x30
 8000762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000764:	f003 0304 	and.w	r3, r3, #4
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	9b00      	ldr	r3, [sp, #0]
	GPIO_InitStruct.Mode      = GPIO_MODE_ANALOG; //Analog mode for pin
 800076c:	2303      	movs	r3, #3
 800076e:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8000770:	2200      	movs	r2, #0
 8000772:	9203      	str	r2, [sp, #12]
	GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000774:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000776:	2304      	movs	r3, #4
 8000778:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //Pin C2, Arduino A2, ADC1, In 12
 800077a:	eb0d 0103 	add.w	r1, sp, r3
 800077e:	4804      	ldr	r0, [pc, #16]	; (8000790 <HAL_ADC_MspInit+0x3c>)
 8000780:	f000 fc2a 	bl	8000fd8 <HAL_GPIO_Init>

}
 8000784:	b007      	add	sp, #28
 8000786:	f85d fb04 	ldr.w	pc, [sp], #4
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40020800 	.word	0x40020800

08000794 <HAL_UART_MspInit>:
#include "uart.h"

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000794:	b530      	push	{r4, r5, lr}
 8000796:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 8000798:	6803      	ldr	r3, [r0, #0]
 800079a:	4a2e      	ldr	r2, [pc, #184]	; (8000854 <HAL_UART_MspInit+0xc0>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d004      	beq.n	80007aa <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 80007a0:	4a2d      	ldr	r2, [pc, #180]	; (8000858 <HAL_UART_MspInit+0xc4>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d02c      	beq.n	8000800 <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 80007a6:	b00b      	add	sp, #44	; 0x2c
 80007a8:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 80007aa:	4c2c      	ldr	r4, [pc, #176]	; (800085c <HAL_UART_MspInit+0xc8>)
 80007ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007ae:	f043 0301 	orr.w	r3, r3, #1
 80007b2:	6323      	str	r3, [r4, #48]	; 0x30
 80007b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	9301      	str	r3, [sp, #4]
 80007bc:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 80007be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007c2:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 80007cc:	2303      	movs	r3, #3
 80007ce:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007d0:	2307      	movs	r3, #7
 80007d2:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 80007d4:	4d22      	ldr	r5, [pc, #136]	; (8000860 <HAL_UART_MspInit+0xcc>)
 80007d6:	a905      	add	r1, sp, #20
 80007d8:	4628      	mov	r0, r5
 80007da:	f000 fbfd 	bl	8000fd8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e2:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 80007e4:	a905      	add	r1, sp, #20
 80007e6:	4628      	mov	r0, r5
 80007e8:	f000 fbf6 	bl	8000fd8 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 80007ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007ee:	f043 0310 	orr.w	r3, r3, #16
 80007f2:	6463      	str	r3, [r4, #68]	; 0x44
 80007f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007f6:	f003 0310 	and.w	r3, r3, #16
 80007fa:	9302      	str	r3, [sp, #8]
 80007fc:	9b02      	ldr	r3, [sp, #8]
 80007fe:	e7d2      	b.n	80007a6 <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 8000800:	4c16      	ldr	r4, [pc, #88]	; (800085c <HAL_UART_MspInit+0xc8>)
 8000802:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	6323      	str	r3, [r4, #48]	; 0x30
 800080a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800080c:	f003 0304 	and.w	r3, r3, #4
 8000810:	9303      	str	r3, [sp, #12]
 8000812:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 8000814:	2340      	movs	r3, #64	; 0x40
 8000816:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000818:	2302      	movs	r3, #2
 800081a:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800081c:	2301      	movs	r3, #1
 800081e:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000820:	2303      	movs	r3, #3
 8000822:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000824:	2308      	movs	r3, #8
 8000826:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 8000828:	4d0e      	ldr	r5, [pc, #56]	; (8000864 <HAL_UART_MspInit+0xd0>)
 800082a:	a905      	add	r1, sp, #20
 800082c:	4628      	mov	r0, r5
 800082e:	f000 fbd3 	bl	8000fd8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000832:	2380      	movs	r3, #128	; 0x80
 8000834:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 8000836:	a905      	add	r1, sp, #20
 8000838:	4628      	mov	r0, r5
 800083a:	f000 fbcd 	bl	8000fd8 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 800083e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000840:	f043 0320 	orr.w	r3, r3, #32
 8000844:	6463      	str	r3, [r4, #68]	; 0x44
 8000846:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000848:	f003 0320 	and.w	r3, r3, #32
 800084c:	9304      	str	r3, [sp, #16]
 800084e:	9b04      	ldr	r3, [sp, #16]
}
 8000850:	e7a9      	b.n	80007a6 <HAL_UART_MspInit+0x12>
 8000852:	bf00      	nop
 8000854:	40011000 	.word	0x40011000
 8000858:	40011400 	.word	0x40011400
 800085c:	40023800 	.word	0x40023800
 8000860:	40020000 	.word	0x40020000
 8000864:	40020800 	.word	0x40020800

08000868 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 8000868:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 800086a:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 800086c:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	2200      	movs	r2, #0
 8000870:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 8000872:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 8000874:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 8000876:	210c      	movs	r1, #12
 8000878:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800087a:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 800087c:	f001 fbe4 	bl	8002048 <HAL_UART_Init>
}
 8000880:	bd08      	pop	{r3, pc}
	...

08000884 <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 8000884:	b510      	push	{r4, lr}
 8000886:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 8000888:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088c:	b292      	uxth	r2, r2
 800088e:	4802      	ldr	r0, [pc, #8]	; (8000898 <_write+0x14>)
 8000890:	f001 faa4 	bl	8001ddc <HAL_UART_Transmit>
	return len;
}
 8000894:	4620      	mov	r0, r4
 8000896:	bd10      	pop	{r4, pc}
 8000898:	20000098 	.word	0x20000098

0800089c <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 800089c:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 800089e:	2200      	movs	r2, #0
 80008a0:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80008a2:	f04f 33ff 	mov.w	r3, #4294967295
 80008a6:	2201      	movs	r2, #1
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <_read+0x18>)
 80008aa:	f001 fb04 	bl	8001eb6 <HAL_UART_Receive>
	return len;
}
 80008ae:	2001      	movs	r0, #1
 80008b0:	bd08      	pop	{r3, pc}
 80008b2:	bf00      	nop
 80008b4:	20000098 	.word	0x20000098

080008b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008b8:	480d      	ldr	r0, [pc, #52]	; (80008f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 80008bc:	480d      	ldr	r0, [pc, #52]	; (80008f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80008be:	490e      	ldr	r1, [pc, #56]	; (80008f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008c0:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <LoopForever+0xe>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c4:	e002      	b.n	80008cc <LoopCopyDataInit>

080008c6 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 80008c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ca:	3304      	adds	r3, #4

080008cc <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 80008cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ce:	428c      	cmp	r4, r1



  bcc CopyDataInit
 80008d0:	d3f9      	bcc.n	80008c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008d2:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008d4:	4c0b      	ldr	r4, [pc, #44]	; (8000904 <LoopForever+0x16>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d8:	e001      	b.n	80008de <LoopFillZerobss>

080008da <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 80008da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008dc:	3204      	adds	r2, #4

080008de <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 80008de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e0:	d3fb      	bcc.n	80008da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008e2:	f000 f813 	bl	800090c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80008e6:	f001 fbe1 	bl	80020ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ea:	f7ff fedf 	bl	80006ac <main>

080008ee <LoopForever>:

LoopForever:
    b LoopForever
 80008ee:	e7fe      	b.n	80008ee <LoopForever>
  ldr   r0, =_estack
 80008f0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80008f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008fc:	08002bbc 	.word	0x08002bbc
  ldr r2, =_sbss
 8000900:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000904:	2000018c 	.word	0x2000018c

08000908 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000908:	e7fe      	b.n	8000908 <ADC_IRQHandler>
	...

0800090c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <SystemInit+0x18>)
 800090e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000912:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000916:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800091a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800091e:	609a      	str	r2, [r3, #8]
#endif
}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000928:	4770      	bx	lr
	...

0800092c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b510      	push	{r4, lr}
 800092e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000930:	4b0e      	ldr	r3, [pc, #56]	; (800096c <HAL_InitTick+0x40>)
 8000932:	7818      	ldrb	r0, [r3, #0]
 8000934:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000938:	fbb3 f3f0 	udiv	r3, r3, r0
 800093c:	4a0c      	ldr	r2, [pc, #48]	; (8000970 <HAL_InitTick+0x44>)
 800093e:	6810      	ldr	r0, [r2, #0]
 8000940:	fbb0 f0f3 	udiv	r0, r0, r3
 8000944:	f000 fb32 	bl	8000fac <HAL_SYSTICK_Config>
 8000948:	b968      	cbnz	r0, 8000966 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094a:	2c0f      	cmp	r4, #15
 800094c:	d901      	bls.n	8000952 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800094e:	2001      	movs	r0, #1
 8000950:	e00a      	b.n	8000968 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000952:	2200      	movs	r2, #0
 8000954:	4621      	mov	r1, r4
 8000956:	f04f 30ff 	mov.w	r0, #4294967295
 800095a:	f000 faf5 	bl	8000f48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800095e:	4b03      	ldr	r3, [pc, #12]	; (800096c <HAL_InitTick+0x40>)
 8000960:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000962:	2000      	movs	r0, #0
 8000964:	e000      	b.n	8000968 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000966:	2001      	movs	r0, #1
}
 8000968:	bd10      	pop	{r4, pc}
 800096a:	bf00      	nop
 800096c:	20000004 	.word	0x20000004
 8000970:	20000000 	.word	0x20000000

08000974 <HAL_Init>:
{
 8000974:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <HAL_Init+0x28>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800097e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000986:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000988:	2003      	movs	r0, #3
 800098a:	f000 facb 	bl	8000f24 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800098e:	200f      	movs	r0, #15
 8000990:	f7ff ffcc 	bl	800092c <HAL_InitTick>
  HAL_MspInit();
 8000994:	f7ff ffc8 	bl	8000928 <HAL_MspInit>
}
 8000998:	2000      	movs	r0, #0
 800099a:	bd08      	pop	{r3, pc}
 800099c:	40023c00 	.word	0x40023c00

080009a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80009a0:	4a03      	ldr	r2, [pc, #12]	; (80009b0 <HAL_IncTick+0x10>)
 80009a2:	6811      	ldr	r1, [r2, #0]
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <HAL_IncTick+0x14>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	440b      	add	r3, r1
 80009aa:	6013      	str	r3, [r2, #0]
}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	20000178 	.word	0x20000178
 80009b4:	20000004 	.word	0x20000004

080009b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80009b8:	4b01      	ldr	r3, [pc, #4]	; (80009c0 <HAL_GetTick+0x8>)
 80009ba:	6818      	ldr	r0, [r3, #0]
}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000178 	.word	0x20000178

080009c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009c4:	b538      	push	{r3, r4, r5, lr}
 80009c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80009c8:	f7ff fff6 	bl	80009b8 <HAL_GetTick>
 80009cc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ce:	f1b4 3fff 	cmp.w	r4, #4294967295
 80009d2:	d002      	beq.n	80009da <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <HAL_Delay+0x24>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009da:	f7ff ffed 	bl	80009b8 <HAL_GetTick>
 80009de:	1b40      	subs	r0, r0, r5
 80009e0:	42a0      	cmp	r0, r4
 80009e2:	d3fa      	bcc.n	80009da <HAL_Delay+0x16>
  {
  }
}
 80009e4:	bd38      	pop	{r3, r4, r5, pc}
 80009e6:	bf00      	nop
 80009e8:	20000004 	.word	0x20000004

080009ec <ADC_Init>:
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80009ec:	4b4a      	ldr	r3, [pc, #296]	; (8000b18 <ADC_Init+0x12c>)
 80009ee:	685a      	ldr	r2, [r3, #4]
 80009f0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80009f4:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80009f6:	685a      	ldr	r2, [r3, #4]
 80009f8:	6841      	ldr	r1, [r0, #4]
 80009fa:	430a      	orrs	r2, r1
 80009fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80009fe:	6802      	ldr	r2, [r0, #0]
 8000a00:	6853      	ldr	r3, [r2, #4]
 8000a02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a06:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000a08:	6802      	ldr	r2, [r0, #0]
 8000a0a:	6853      	ldr	r3, [r2, #4]
 8000a0c:	6901      	ldr	r1, [r0, #16]
 8000a0e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000a12:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000a14:	6802      	ldr	r2, [r0, #0]
 8000a16:	6853      	ldr	r3, [r2, #4]
 8000a18:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000a1c:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000a1e:	6802      	ldr	r2, [r0, #0]
 8000a20:	6853      	ldr	r3, [r2, #4]
 8000a22:	6881      	ldr	r1, [r0, #8]
 8000a24:	430b      	orrs	r3, r1
 8000a26:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000a28:	6802      	ldr	r2, [r0, #0]
 8000a2a:	6893      	ldr	r3, [r2, #8]
 8000a2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a30:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000a32:	6802      	ldr	r2, [r0, #0]
 8000a34:	6893      	ldr	r3, [r2, #8]
 8000a36:	68c1      	ldr	r1, [r0, #12]
 8000a38:	430b      	orrs	r3, r1
 8000a3a:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a3c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000a3e:	4b37      	ldr	r3, [pc, #220]	; (8000b1c <ADC_Init+0x130>)
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d057      	beq.n	8000af4 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000a44:	6802      	ldr	r2, [r0, #0]
 8000a46:	6893      	ldr	r3, [r2, #8]
 8000a48:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000a4c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000a4e:	6802      	ldr	r2, [r0, #0]
 8000a50:	6893      	ldr	r3, [r2, #8]
 8000a52:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8000a54:	430b      	orrs	r3, r1
 8000a56:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000a58:	6802      	ldr	r2, [r0, #0]
 8000a5a:	6893      	ldr	r3, [r2, #8]
 8000a5c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000a60:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000a62:	6802      	ldr	r2, [r0, #0]
 8000a64:	6893      	ldr	r3, [r2, #8]
 8000a66:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8000a68:	430b      	orrs	r3, r1
 8000a6a:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000a6c:	6802      	ldr	r2, [r0, #0]
 8000a6e:	6893      	ldr	r3, [r2, #8]
 8000a70:	f023 0302 	bic.w	r3, r3, #2
 8000a74:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000a76:	6802      	ldr	r2, [r0, #0]
 8000a78:	6893      	ldr	r3, [r2, #8]
 8000a7a:	6981      	ldr	r1, [r0, #24]
 8000a7c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8000a80:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000a82:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d03f      	beq.n	8000b0a <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000a8a:	6802      	ldr	r2, [r0, #0]
 8000a8c:	6853      	ldr	r3, [r2, #4]
 8000a8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a92:	6053      	str	r3, [r2, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000a94:	6802      	ldr	r2, [r0, #0]
 8000a96:	6853      	ldr	r3, [r2, #4]
 8000a98:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000a9c:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000a9e:	6801      	ldr	r1, [r0, #0]
 8000aa0:	684b      	ldr	r3, [r1, #4]
 8000aa2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000aa4:	3a01      	subs	r2, #1
 8000aa6:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8000aaa:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000aac:	6802      	ldr	r2, [r0, #0]
 8000aae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000ab0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000ab4:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000ab6:	6801      	ldr	r1, [r0, #0]
 8000ab8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000aba:	69c2      	ldr	r2, [r0, #28]
 8000abc:	3a01      	subs	r2, #1
 8000abe:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8000ac2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000ac4:	6802      	ldr	r2, [r0, #0]
 8000ac6:	6893      	ldr	r3, [r2, #8]
 8000ac8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000acc:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000ace:	6802      	ldr	r2, [r0, #0]
 8000ad0:	6893      	ldr	r3, [r2, #8]
 8000ad2:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8000ad6:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8000ada:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000adc:	6802      	ldr	r2, [r0, #0]
 8000ade:	6893      	ldr	r3, [r2, #8]
 8000ae0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ae4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000ae6:	6802      	ldr	r2, [r0, #0]
 8000ae8:	6893      	ldr	r3, [r2, #8]
 8000aea:	6941      	ldr	r1, [r0, #20]
 8000aec:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8000af0:	6093      	str	r3, [r2, #8]
}
 8000af2:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000af4:	6802      	ldr	r2, [r0, #0]
 8000af6:	6893      	ldr	r3, [r2, #8]
 8000af8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000afc:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000afe:	6802      	ldr	r2, [r0, #0]
 8000b00:	6893      	ldr	r3, [r2, #8]
 8000b02:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000b06:	6093      	str	r3, [r2, #8]
 8000b08:	e7b0      	b.n	8000a6c <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000b0a:	6802      	ldr	r2, [r0, #0]
 8000b0c:	6853      	ldr	r3, [r2, #4]
 8000b0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000b12:	6053      	str	r3, [r2, #4]
 8000b14:	e7ca      	b.n	8000aac <ADC_Init+0xc0>
 8000b16:	bf00      	nop
 8000b18:	40012300 	.word	0x40012300
 8000b1c:	0f000001 	.word	0x0f000001

08000b20 <HAL_ADC_Init>:
  if(hadc == NULL)
 8000b20:	b328      	cbz	r0, 8000b6e <HAL_ADC_Init+0x4e>
{
 8000b22:	b510      	push	{r4, lr}
 8000b24:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000b26:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000b28:	b143      	cbz	r3, 8000b3c <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b2c:	f013 0f10 	tst.w	r3, #16
 8000b30:	d00b      	beq.n	8000b4a <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8000b32:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000b34:	2300      	movs	r3, #0
 8000b36:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8000b3a:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8000b3c:	f7ff fe0a 	bl	8000754 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8000b40:	2300      	movs	r3, #0
 8000b42:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8000b44:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8000b48:	e7ef      	b.n	8000b2a <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8000b4a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <HAL_ADC_Init+0x54>)
 8000b4e:	4013      	ands	r3, r2
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8000b56:	4620      	mov	r0, r4
 8000b58:	f7ff ff48 	bl	80009ec <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000b60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b62:	f023 0303 	bic.w	r3, r3, #3
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	6423      	str	r3, [r4, #64]	; 0x40
 8000b6c:	e7e2      	b.n	8000b34 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8000b6e:	2001      	movs	r0, #1
}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	ffffeefd 	.word	0xffffeefd

08000b78 <HAL_ADC_Start>:
{
 8000b78:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000b7e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d073      	beq.n	8000c6e <HAL_ADC_Start+0xf6>
 8000b86:	2301      	movs	r3, #1
 8000b88:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000b8c:	6803      	ldr	r3, [r0, #0]
 8000b8e:	689a      	ldr	r2, [r3, #8]
 8000b90:	f012 0f01 	tst.w	r2, #1
 8000b94:	d113      	bne.n	8000bbe <HAL_ADC_Start+0x46>
    __HAL_ADC_ENABLE(hadc);
 8000b96:	689a      	ldr	r2, [r3, #8]
 8000b98:	f042 0201 	orr.w	r2, r2, #1
 8000b9c:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000b9e:	4b39      	ldr	r3, [pc, #228]	; (8000c84 <HAL_ADC_Start+0x10c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a39      	ldr	r2, [pc, #228]	; (8000c88 <HAL_ADC_Start+0x110>)
 8000ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba8:	0c9b      	lsrs	r3, r3, #18
 8000baa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000bae:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8000bb0:	e002      	b.n	8000bb8 <HAL_ADC_Start+0x40>
      counter--;
 8000bb2:	9b01      	ldr	r3, [sp, #4]
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8000bb8:	9b01      	ldr	r3, [sp, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d1f9      	bne.n	8000bb2 <HAL_ADC_Start+0x3a>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000bbe:	6803      	ldr	r3, [r0, #0]
 8000bc0:	689a      	ldr	r2, [r3, #8]
 8000bc2:	f012 0f01 	tst.w	r2, #1
 8000bc6:	d054      	beq.n	8000c72 <HAL_ADC_Start+0xfa>
    ADC_STATE_CLR_SET(hadc->State,
 8000bc8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000bca:	4a30      	ldr	r2, [pc, #192]	; (8000c8c <HAL_ADC_Start+0x114>)
 8000bcc:	400a      	ands	r2, r1
 8000bce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bd2:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bd4:	685a      	ldr	r2, [r3, #4]
 8000bd6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000bda:	d005      	beq.n	8000be8 <HAL_ADC_Start+0x70>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000bdc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000bde:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000be2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000be6:	6402      	str	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000be8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000bea:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8000bee:	d019      	beq.n	8000c24 <HAL_ADC_Start+0xac>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000bf0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000bf2:	f022 0206 	bic.w	r2, r2, #6
 8000bf6:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000bfe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000c02:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000c04:	4b22      	ldr	r3, [pc, #136]	; (8000c90 <HAL_ADC_Start+0x118>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f013 0f1f 	tst.w	r3, #31
 8000c0c:	d10d      	bne.n	8000c2a <HAL_ADC_Start+0xb2>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000c0e:	6803      	ldr	r3, [r0, #0]
 8000c10:	689a      	ldr	r2, [r3, #8]
 8000c12:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000c16:	d12f      	bne.n	8000c78 <HAL_ADC_Start+0x100>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000c18:	689a      	ldr	r2, [r3, #8]
 8000c1a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000c1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8000c20:	2000      	movs	r0, #0
 8000c22:	e027      	b.n	8000c74 <HAL_ADC_Start+0xfc>
      ADC_CLEAR_ERRORCODE(hadc);
 8000c24:	2200      	movs	r2, #0
 8000c26:	6442      	str	r2, [r0, #68]	; 0x44
 8000c28:	e7e6      	b.n	8000bf8 <HAL_ADC_Start+0x80>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000c2a:	6803      	ldr	r3, [r0, #0]
 8000c2c:	4a19      	ldr	r2, [pc, #100]	; (8000c94 <HAL_ADC_Start+0x11c>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d00a      	beq.n	8000c48 <HAL_ADC_Start+0xd0>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8000c32:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <HAL_ADC_Start+0x118>)
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f013 0f10 	tst.w	r3, #16
 8000c3a:	d11f      	bne.n	8000c7c <HAL_ADC_Start+0x104>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000c3c:	6803      	ldr	r3, [r0, #0]
 8000c3e:	4a16      	ldr	r2, [pc, #88]	; (8000c98 <HAL_ADC_Start+0x120>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d00a      	beq.n	8000c5a <HAL_ADC_Start+0xe2>
  return HAL_OK;
 8000c44:	2000      	movs	r0, #0
 8000c46:	e015      	b.n	8000c74 <HAL_ADC_Start+0xfc>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000c48:	689a      	ldr	r2, [r3, #8]
 8000c4a:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000c4e:	d1f0      	bne.n	8000c32 <HAL_ADC_Start+0xba>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000c50:	689a      	ldr	r2, [r3, #8]
 8000c52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	e7eb      	b.n	8000c32 <HAL_ADC_Start+0xba>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000c5a:	689a      	ldr	r2, [r3, #8]
 8000c5c:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000c60:	d10e      	bne.n	8000c80 <HAL_ADC_Start+0x108>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000c62:	689a      	ldr	r2, [r3, #8]
 8000c64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000c68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	e002      	b.n	8000c74 <HAL_ADC_Start+0xfc>
  __HAL_LOCK(hadc);
 8000c6e:	2002      	movs	r0, #2
 8000c70:	e000      	b.n	8000c74 <HAL_ADC_Start+0xfc>
  return HAL_OK;
 8000c72:	2000      	movs	r0, #0
}
 8000c74:	b002      	add	sp, #8
 8000c76:	4770      	bx	lr
  return HAL_OK;
 8000c78:	2000      	movs	r0, #0
 8000c7a:	e7fb      	b.n	8000c74 <HAL_ADC_Start+0xfc>
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	e7f9      	b.n	8000c74 <HAL_ADC_Start+0xfc>
 8000c80:	2000      	movs	r0, #0
 8000c82:	e7f7      	b.n	8000c74 <HAL_ADC_Start+0xfc>
 8000c84:	20000000 	.word	0x20000000
 8000c88:	431bde83 	.word	0x431bde83
 8000c8c:	fffff8fe 	.word	0xfffff8fe
 8000c90:	40012300 	.word	0x40012300
 8000c94:	40012000 	.word	0x40012000
 8000c98:	40012200 	.word	0x40012200

08000c9c <HAL_ADC_PollForConversion>:
{
 8000c9c:	b570      	push	{r4, r5, r6, lr}
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000ca2:	6803      	ldr	r3, [r0, #0]
 8000ca4:	689a      	ldr	r2, [r3, #8]
 8000ca6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000caa:	d003      	beq.n	8000cb4 <HAL_ADC_PollForConversion+0x18>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000cac:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000cae:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000cb2:	d119      	bne.n	8000ce8 <HAL_ADC_PollForConversion+0x4c>
  tickstart = HAL_GetTick();
 8000cb4:	f7ff fe80 	bl	80009b8 <HAL_GetTick>
 8000cb8:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000cba:	6823      	ldr	r3, [r4, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	f012 0f02 	tst.w	r2, #2
 8000cc2:	d11a      	bne.n	8000cfa <HAL_ADC_PollForConversion+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8000cc4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000cc8:	d0f7      	beq.n	8000cba <HAL_ADC_PollForConversion+0x1e>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000cca:	b125      	cbz	r5, 8000cd6 <HAL_ADC_PollForConversion+0x3a>
 8000ccc:	f7ff fe74 	bl	80009b8 <HAL_GetTick>
 8000cd0:	1b80      	subs	r0, r0, r6
 8000cd2:	42a8      	cmp	r0, r5
 8000cd4:	d9f1      	bls.n	8000cba <HAL_ADC_PollForConversion+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000cd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	e02d      	b.n	8000d44 <HAL_ADC_PollForConversion+0xa8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ce8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000cea:	f043 0320 	orr.w	r3, r3, #32
 8000cee:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	e024      	b.n	8000d44 <HAL_ADC_PollForConversion+0xa8>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000cfa:	f06f 0212 	mvn.w	r2, #18
 8000cfe:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d06:	6423      	str	r3, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000d08:	6823      	ldr	r3, [r4, #0]
 8000d0a:	689a      	ldr	r2, [r3, #8]
 8000d0c:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000d10:	d117      	bne.n	8000d42 <HAL_ADC_PollForConversion+0xa6>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000d12:	69a2      	ldr	r2, [r4, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000d14:	b9ba      	cbnz	r2, 8000d46 <HAL_ADC_PollForConversion+0xaa>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000d18:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8000d1c:	d003      	beq.n	8000d26 <HAL_ADC_PollForConversion+0x8a>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000d1e:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000d20:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000d24:	d111      	bne.n	8000d4a <HAL_ADC_PollForConversion+0xae>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d2c:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d30:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000d34:	d10b      	bne.n	8000d4e <HAL_ADC_PollForConversion+0xb2>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6423      	str	r3, [r4, #64]	; 0x40
  return HAL_OK;
 8000d3e:	2000      	movs	r0, #0
 8000d40:	e000      	b.n	8000d44 <HAL_ADC_PollForConversion+0xa8>
 8000d42:	2000      	movs	r0, #0
}
 8000d44:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8000d46:	2000      	movs	r0, #0
 8000d48:	e7fc      	b.n	8000d44 <HAL_ADC_PollForConversion+0xa8>
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	e7fa      	b.n	8000d44 <HAL_ADC_PollForConversion+0xa8>
 8000d4e:	2000      	movs	r0, #0
 8000d50:	e7f8      	b.n	8000d44 <HAL_ADC_PollForConversion+0xa8>

08000d52 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000d52:	6803      	ldr	r3, [r0, #0]
 8000d54:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000d56:	4770      	bx	lr

08000d58 <HAL_ADC_ConfigChannel>:
{
 8000d58:	b430      	push	{r4, r5}
 8000d5a:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000d60:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	f000 80d1 	beq.w	8000f0c <HAL_ADC_ConfigChannel+0x1b4>
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8000d70:	680b      	ldr	r3, [r1, #0]
 8000d72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d76:	bf18      	it	ne
 8000d78:	2b09      	cmpne	r3, #9
 8000d7a:	d922      	bls.n	8000dc2 <HAL_ADC_ConfigChannel+0x6a>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000d7c:	6805      	ldr	r5, [r0, #0]
 8000d7e:	68ea      	ldr	r2, [r5, #12]
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000d86:	3b1e      	subs	r3, #30
 8000d88:	2407      	movs	r4, #7
 8000d8a:	fa04 f303 	lsl.w	r3, r4, r3
 8000d8e:	ea22 0303 	bic.w	r3, r2, r3
 8000d92:	60eb      	str	r3, [r5, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d94:	680b      	ldr	r3, [r1, #0]
 8000d96:	4a5e      	ldr	r2, [pc, #376]	; (8000f10 <HAL_ADC_ConfigChannel+0x1b8>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d00b      	beq.n	8000db4 <HAL_ADC_ConfigChannel+0x5c>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000d9c:	6805      	ldr	r5, [r0, #0]
 8000d9e:	68ea      	ldr	r2, [r5, #12]
 8000da0:	688c      	ldr	r4, [r1, #8]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000da8:	3b1e      	subs	r3, #30
 8000daa:	fa04 f303 	lsl.w	r3, r4, r3
 8000dae:	4313      	orrs	r3, r2
 8000db0:	60eb      	str	r3, [r5, #12]
 8000db2:	e01b      	b.n	8000dec <HAL_ADC_ConfigChannel+0x94>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000db4:	6802      	ldr	r2, [r0, #0]
 8000db6:	68d3      	ldr	r3, [r2, #12]
 8000db8:	688c      	ldr	r4, [r1, #8]
 8000dba:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8000dbe:	60d3      	str	r3, [r2, #12]
 8000dc0:	e014      	b.n	8000dec <HAL_ADC_ConfigChannel+0x94>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000dc2:	6805      	ldr	r5, [r0, #0]
 8000dc4:	692a      	ldr	r2, [r5, #16]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000dcc:	2407      	movs	r4, #7
 8000dce:	fa04 f303 	lsl.w	r3, r4, r3
 8000dd2:	ea22 0303 	bic.w	r3, r2, r3
 8000dd6:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000dd8:	6805      	ldr	r5, [r0, #0]
 8000dda:	692a      	ldr	r2, [r5, #16]
 8000ddc:	688c      	ldr	r4, [r1, #8]
 8000dde:	880b      	ldrh	r3, [r1, #0]
 8000de0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000de4:	fa04 f303 	lsl.w	r3, r4, r3
 8000de8:	4313      	orrs	r3, r2
 8000dea:	612b      	str	r3, [r5, #16]
  if (sConfig->Rank < 7)
 8000dec:	684b      	ldr	r3, [r1, #4]
 8000dee:	2b06      	cmp	r3, #6
 8000df0:	d828      	bhi.n	8000e44 <HAL_ADC_ConfigChannel+0xec>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000df2:	6805      	ldr	r5, [r0, #0]
 8000df4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000df6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000dfa:	3b05      	subs	r3, #5
 8000dfc:	241f      	movs	r4, #31
 8000dfe:	fa04 f303 	lsl.w	r3, r4, r3
 8000e02:	ea22 0303 	bic.w	r3, r2, r3
 8000e06:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000e08:	6805      	ldr	r5, [r0, #0]
 8000e0a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000e0c:	684b      	ldr	r3, [r1, #4]
 8000e0e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e12:	3b05      	subs	r3, #5
 8000e14:	880c      	ldrh	r4, [r1, #0]
 8000e16:	fa04 f303 	lsl.w	r3, r4, r3
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8000e1e:	6802      	ldr	r2, [r0, #0]
 8000e20:	4b3c      	ldr	r3, [pc, #240]	; (8000f14 <HAL_ADC_ConfigChannel+0x1bc>)
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d03e      	beq.n	8000ea4 <HAL_ADC_ConfigChannel+0x14c>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000e26:	6802      	ldr	r2, [r0, #0]
 8000e28:	4b3a      	ldr	r3, [pc, #232]	; (8000f14 <HAL_ADC_ConfigChannel+0x1bc>)
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d044      	beq.n	8000eb8 <HAL_ADC_ConfigChannel+0x160>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000e2e:	6802      	ldr	r2, [r0, #0]
 8000e30:	4b38      	ldr	r3, [pc, #224]	; (8000f14 <HAL_ADC_ConfigChannel+0x1bc>)
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d049      	beq.n	8000eca <HAL_ADC_ConfigChannel+0x172>
  __HAL_UNLOCK(hadc);
 8000e36:	2300      	movs	r3, #0
 8000e38:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000e3c:	4618      	mov	r0, r3
}
 8000e3e:	b002      	add	sp, #8
 8000e40:	bc30      	pop	{r4, r5}
 8000e42:	4770      	bx	lr
  else if (sConfig->Rank < 13)
 8000e44:	2b0c      	cmp	r3, #12
 8000e46:	d816      	bhi.n	8000e76 <HAL_ADC_ConfigChannel+0x11e>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000e48:	6805      	ldr	r5, [r0, #0]
 8000e4a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000e4c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e50:	3b23      	subs	r3, #35	; 0x23
 8000e52:	241f      	movs	r4, #31
 8000e54:	fa04 f303 	lsl.w	r3, r4, r3
 8000e58:	ea22 0303 	bic.w	r3, r2, r3
 8000e5c:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000e5e:	6805      	ldr	r5, [r0, #0]
 8000e60:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000e62:	684b      	ldr	r3, [r1, #4]
 8000e64:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e68:	3b23      	subs	r3, #35	; 0x23
 8000e6a:	880c      	ldrh	r4, [r1, #0]
 8000e6c:	fa04 f303 	lsl.w	r3, r4, r3
 8000e70:	4313      	orrs	r3, r2
 8000e72:	632b      	str	r3, [r5, #48]	; 0x30
 8000e74:	e7d3      	b.n	8000e1e <HAL_ADC_ConfigChannel+0xc6>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000e76:	6805      	ldr	r5, [r0, #0]
 8000e78:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000e7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e7e:	3b41      	subs	r3, #65	; 0x41
 8000e80:	241f      	movs	r4, #31
 8000e82:	fa04 f303 	lsl.w	r3, r4, r3
 8000e86:	ea22 0303 	bic.w	r3, r2, r3
 8000e8a:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000e8c:	6805      	ldr	r5, [r0, #0]
 8000e8e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000e90:	684b      	ldr	r3, [r1, #4]
 8000e92:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e96:	3b41      	subs	r3, #65	; 0x41
 8000e98:	880c      	ldrh	r4, [r1, #0]
 8000e9a:	fa04 f303 	lsl.w	r3, r4, r3
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000ea2:	e7bc      	b.n	8000e1e <HAL_ADC_ConfigChannel+0xc6>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8000ea4:	680b      	ldr	r3, [r1, #0]
 8000ea6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eaa:	d1bc      	bne.n	8000e26 <HAL_ADC_ConfigChannel+0xce>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8000eac:	4a1a      	ldr	r2, [pc, #104]	; (8000f18 <HAL_ADC_ConfigChannel+0x1c0>)
 8000eae:	6853      	ldr	r3, [r2, #4]
 8000eb0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000eb4:	6053      	str	r3, [r2, #4]
 8000eb6:	e7b6      	b.n	8000e26 <HAL_ADC_ConfigChannel+0xce>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000eb8:	680b      	ldr	r3, [r1, #0]
 8000eba:	2b12      	cmp	r3, #18
 8000ebc:	d1b7      	bne.n	8000e2e <HAL_ADC_ConfigChannel+0xd6>
    ADC->CCR |= ADC_CCR_VBATE;
 8000ebe:	4a16      	ldr	r2, [pc, #88]	; (8000f18 <HAL_ADC_ConfigChannel+0x1c0>)
 8000ec0:	6853      	ldr	r3, [r2, #4]
 8000ec2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ec6:	6053      	str	r3, [r2, #4]
 8000ec8:	e7b1      	b.n	8000e2e <HAL_ADC_ConfigChannel+0xd6>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000eca:	680b      	ldr	r3, [r1, #0]
 8000ecc:	4a10      	ldr	r2, [pc, #64]	; (8000f10 <HAL_ADC_ConfigChannel+0x1b8>)
 8000ece:	2b11      	cmp	r3, #17
 8000ed0:	bf18      	it	ne
 8000ed2:	4293      	cmpne	r3, r2
 8000ed4:	d1af      	bne.n	8000e36 <HAL_ADC_ConfigChannel+0xde>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000ed6:	4a10      	ldr	r2, [pc, #64]	; (8000f18 <HAL_ADC_ConfigChannel+0x1c0>)
 8000ed8:	6853      	ldr	r3, [r2, #4]
 8000eda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ede:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ee0:	680a      	ldr	r2, [r1, #0]
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <HAL_ADC_ConfigChannel+0x1b8>)
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d1a6      	bne.n	8000e36 <HAL_ADC_ConfigChannel+0xde>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <HAL_ADC_ConfigChannel+0x1c4>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0c      	ldr	r2, [pc, #48]	; (8000f20 <HAL_ADC_ConfigChannel+0x1c8>)
 8000eee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef2:	0c9b      	lsrs	r3, r3, #18
 8000ef4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8000efc:	e002      	b.n	8000f04 <HAL_ADC_ConfigChannel+0x1ac>
        counter--;
 8000efe:	9b01      	ldr	r3, [sp, #4]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8000f04:	9b01      	ldr	r3, [sp, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1f9      	bne.n	8000efe <HAL_ADC_ConfigChannel+0x1a6>
 8000f0a:	e794      	b.n	8000e36 <HAL_ADC_ConfigChannel+0xde>
  __HAL_LOCK(hadc);
 8000f0c:	2002      	movs	r0, #2
 8000f0e:	e796      	b.n	8000e3e <HAL_ADC_ConfigChannel+0xe6>
 8000f10:	10000012 	.word	0x10000012
 8000f14:	40012000 	.word	0x40012000
 8000f18:	40012300 	.word	0x40012300
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	431bde83 	.word	0x431bde83

08000f24 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f24:	4906      	ldr	r1, [pc, #24]	; (8000f40 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000f26:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f28:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f2c:	041b      	lsls	r3, r3, #16
 8000f2e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f30:	0200      	lsls	r0, r0, #8
 8000f32:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f36:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000f38:	4a02      	ldr	r2, [pc, #8]	; (8000f44 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f3a:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000f3c:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00
 8000f44:	05fa0000 	.word	0x05fa0000

08000f48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f48:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <HAL_NVIC_SetPriority+0x58>)
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f52:	f1c3 0407 	rsb	r4, r3, #7
 8000f56:	2c04      	cmp	r4, #4
 8000f58:	bf28      	it	cs
 8000f5a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5c:	1d1d      	adds	r5, r3, #4
 8000f5e:	2d06      	cmp	r5, #6
 8000f60:	d914      	bls.n	8000f8c <HAL_NVIC_SetPriority+0x44>
 8000f62:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	f04f 35ff 	mov.w	r5, #4294967295
 8000f68:	fa05 f404 	lsl.w	r4, r5, r4
 8000f6c:	ea21 0104 	bic.w	r1, r1, r4
 8000f70:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f72:	fa05 f303 	lsl.w	r3, r5, r3
 8000f76:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	db07      	blt.n	8000f90 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f80:	0109      	lsls	r1, r1, #4
 8000f82:	b2c9      	uxtb	r1, r1
 8000f84:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <HAL_NVIC_SetPriority+0x5c>)
 8000f86:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f88:	bc30      	pop	{r4, r5}
 8000f8a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	e7e9      	b.n	8000f64 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f90:	f000 000f 	and.w	r0, r0, #15
 8000f94:	0109      	lsls	r1, r1, #4
 8000f96:	b2c9      	uxtb	r1, r1
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_NVIC_SetPriority+0x60>)
 8000f9a:	5419      	strb	r1, [r3, r0]
 8000f9c:	e7f4      	b.n	8000f88 <HAL_NVIC_SetPriority+0x40>
 8000f9e:	bf00      	nop
 8000fa0:	e000ed00 	.word	0xe000ed00
 8000fa4:	e000e400 	.word	0xe000e400
 8000fa8:	e000ed14 	.word	0xe000ed14

08000fac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fac:	3801      	subs	r0, #1
 8000fae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000fb2:	d20a      	bcs.n	8000fca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_SYSTICK_Config+0x24>)
 8000fb6:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	4a06      	ldr	r2, [pc, #24]	; (8000fd4 <HAL_SYSTICK_Config+0x28>)
 8000fba:	21f0      	movs	r1, #240	; 0xf0
 8000fbc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000fca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000e010 	.word	0xe000e010
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	2b0f      	cmp	r3, #15
 8000fdc:	f200 80e3 	bhi.w	80011a6 <HAL_GPIO_Init+0x1ce>
{
 8000fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	e039      	b.n	800105a <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fe6:	2209      	movs	r2, #9
 8000fe8:	e000      	b.n	8000fec <HAL_GPIO_Init+0x14>
 8000fea:	2200      	movs	r2, #0
 8000fec:	40b2      	lsls	r2, r6
 8000fee:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ff0:	3402      	adds	r4, #2
 8000ff2:	4e6d      	ldr	r6, [pc, #436]	; (80011a8 <HAL_GPIO_Init+0x1d0>)
 8000ff4:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff8:	4a6c      	ldr	r2, [pc, #432]	; (80011ac <HAL_GPIO_Init+0x1d4>)
 8000ffa:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ffc:	43ea      	mvns	r2, r5
 8000ffe:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001002:	684f      	ldr	r7, [r1, #4]
 8001004:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001008:	d001      	beq.n	800100e <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 800100a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 800100e:	4c67      	ldr	r4, [pc, #412]	; (80011ac <HAL_GPIO_Init+0x1d4>)
 8001010:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8001012:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001014:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001018:	684f      	ldr	r7, [r1, #4]
 800101a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800101e:	d001      	beq.n	8001024 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8001020:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8001024:	4c61      	ldr	r4, [pc, #388]	; (80011ac <HAL_GPIO_Init+0x1d4>)
 8001026:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001028:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800102a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800102e:	684f      	ldr	r7, [r1, #4]
 8001030:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001034:	d001      	beq.n	800103a <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8001036:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 800103a:	4c5c      	ldr	r4, [pc, #368]	; (80011ac <HAL_GPIO_Init+0x1d4>)
 800103c:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 800103e:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001040:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001042:	684e      	ldr	r6, [r1, #4]
 8001044:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001048:	d001      	beq.n	800104e <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 800104a:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 800104e:	4c57      	ldr	r4, [pc, #348]	; (80011ac <HAL_GPIO_Init+0x1d4>)
 8001050:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001052:	3301      	adds	r3, #1
 8001054:	2b0f      	cmp	r3, #15
 8001056:	f200 80a4 	bhi.w	80011a2 <HAL_GPIO_Init+0x1ca>
    ioposition = ((uint32_t)0x01) << position;
 800105a:	2201      	movs	r2, #1
 800105c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800105e:	680c      	ldr	r4, [r1, #0]
 8001060:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8001064:	ea32 0404 	bics.w	r4, r2, r4
 8001068:	d1f3      	bne.n	8001052 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800106a:	684c      	ldr	r4, [r1, #4]
 800106c:	1e66      	subs	r6, r4, #1
 800106e:	2c11      	cmp	r4, #17
 8001070:	bf18      	it	ne
 8001072:	2e01      	cmpne	r6, #1
 8001074:	d901      	bls.n	800107a <HAL_GPIO_Init+0xa2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001076:	2c12      	cmp	r4, #18
 8001078:	d112      	bne.n	80010a0 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->OSPEEDR; 
 800107a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800107c:	005f      	lsls	r7, r3, #1
 800107e:	2403      	movs	r4, #3
 8001080:	40bc      	lsls	r4, r7
 8001082:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8001086:	68cc      	ldr	r4, [r1, #12]
 8001088:	40bc      	lsls	r4, r7
 800108a:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 800108c:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800108e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001090:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001094:	684c      	ldr	r4, [r1, #4]
 8001096:	f3c4 1200 	ubfx	r2, r4, #4, #1
 800109a:	409a      	lsls	r2, r3
 800109c:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 800109e:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80010a0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010a2:	005e      	lsls	r6, r3, #1
 80010a4:	2403      	movs	r4, #3
 80010a6:	40b4      	lsls	r4, r6
 80010a8:	43e2      	mvns	r2, r4
 80010aa:	ea27 0704 	bic.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80010ae:	688c      	ldr	r4, [r1, #8]
 80010b0:	40b4      	lsls	r4, r6
 80010b2:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 80010b4:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b6:	684c      	ldr	r4, [r1, #4]
 80010b8:	2c12      	cmp	r4, #18
 80010ba:	bf18      	it	ne
 80010bc:	2c02      	cmpne	r4, #2
 80010be:	d113      	bne.n	80010e8 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3];
 80010c0:	08df      	lsrs	r7, r3, #3
 80010c2:	3708      	adds	r7, #8
 80010c4:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010c8:	f003 0407 	and.w	r4, r3, #7
 80010cc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80010d0:	240f      	movs	r4, #15
 80010d2:	fa04 f40c 	lsl.w	r4, r4, ip
 80010d6:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80010da:	690c      	ldr	r4, [r1, #16]
 80010dc:	fa04 f40c 	lsl.w	r4, r4, ip
 80010e0:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 80010e4:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 80010e8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80010ea:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010ec:	684a      	ldr	r2, [r1, #4]
 80010ee:	f002 0203 	and.w	r2, r2, #3
 80010f2:	40b2      	lsls	r2, r6
 80010f4:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80010f6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010f8:	684a      	ldr	r2, [r1, #4]
 80010fa:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80010fe:	d0a8      	beq.n	8001052 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001100:	4a2b      	ldr	r2, [pc, #172]	; (80011b0 <HAL_GPIO_Init+0x1d8>)
 8001102:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001104:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001108:	6454      	str	r4, [r2, #68]	; 0x44
 800110a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800110c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001110:	9201      	str	r2, [sp, #4]
 8001112:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001114:	089c      	lsrs	r4, r3, #2
 8001116:	1ca6      	adds	r6, r4, #2
 8001118:	4a23      	ldr	r2, [pc, #140]	; (80011a8 <HAL_GPIO_Init+0x1d0>)
 800111a:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800111e:	f003 0203 	and.w	r2, r3, #3
 8001122:	0096      	lsls	r6, r2, #2
 8001124:	220f      	movs	r2, #15
 8001126:	40b2      	lsls	r2, r6
 8001128:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800112c:	4a21      	ldr	r2, [pc, #132]	; (80011b4 <HAL_GPIO_Init+0x1dc>)
 800112e:	4290      	cmp	r0, r2
 8001130:	f43f af5b 	beq.w	8000fea <HAL_GPIO_Init+0x12>
 8001134:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001138:	4290      	cmp	r0, r2
 800113a:	d022      	beq.n	8001182 <HAL_GPIO_Init+0x1aa>
 800113c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001140:	4290      	cmp	r0, r2
 8001142:	d020      	beq.n	8001186 <HAL_GPIO_Init+0x1ae>
 8001144:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001148:	4290      	cmp	r0, r2
 800114a:	d01e      	beq.n	800118a <HAL_GPIO_Init+0x1b2>
 800114c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001150:	4290      	cmp	r0, r2
 8001152:	d01c      	beq.n	800118e <HAL_GPIO_Init+0x1b6>
 8001154:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001158:	4290      	cmp	r0, r2
 800115a:	d01a      	beq.n	8001192 <HAL_GPIO_Init+0x1ba>
 800115c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001160:	4290      	cmp	r0, r2
 8001162:	d018      	beq.n	8001196 <HAL_GPIO_Init+0x1be>
 8001164:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001168:	4290      	cmp	r0, r2
 800116a:	d016      	beq.n	800119a <HAL_GPIO_Init+0x1c2>
 800116c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001170:	4290      	cmp	r0, r2
 8001172:	d014      	beq.n	800119e <HAL_GPIO_Init+0x1c6>
 8001174:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001178:	4290      	cmp	r0, r2
 800117a:	f43f af34 	beq.w	8000fe6 <HAL_GPIO_Init+0xe>
 800117e:	220a      	movs	r2, #10
 8001180:	e734      	b.n	8000fec <HAL_GPIO_Init+0x14>
 8001182:	2201      	movs	r2, #1
 8001184:	e732      	b.n	8000fec <HAL_GPIO_Init+0x14>
 8001186:	2202      	movs	r2, #2
 8001188:	e730      	b.n	8000fec <HAL_GPIO_Init+0x14>
 800118a:	2203      	movs	r2, #3
 800118c:	e72e      	b.n	8000fec <HAL_GPIO_Init+0x14>
 800118e:	2204      	movs	r2, #4
 8001190:	e72c      	b.n	8000fec <HAL_GPIO_Init+0x14>
 8001192:	2205      	movs	r2, #5
 8001194:	e72a      	b.n	8000fec <HAL_GPIO_Init+0x14>
 8001196:	2206      	movs	r2, #6
 8001198:	e728      	b.n	8000fec <HAL_GPIO_Init+0x14>
 800119a:	2207      	movs	r2, #7
 800119c:	e726      	b.n	8000fec <HAL_GPIO_Init+0x14>
 800119e:	2208      	movs	r2, #8
 80011a0:	e724      	b.n	8000fec <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 80011a2:	b003      	add	sp, #12
 80011a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a6:	4770      	bx	lr
 80011a8:	40013800 	.word	0x40013800
 80011ac:	40013c00 	.word	0x40013c00
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020000 	.word	0x40020000

080011b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011b8:	b510      	push	{r4, lr}
 80011ba:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <HAL_PWREx_EnableOverDrive+0x74>)
 80011be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011c4:	641a      	str	r2, [r3, #64]	; 0x40
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011cc:	9301      	str	r3, [sp, #4]
 80011ce:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011d0:	4a17      	ldr	r2, [pc, #92]	; (8001230 <HAL_PWREx_EnableOverDrive+0x78>)
 80011d2:	6813      	ldr	r3, [r2, #0]
 80011d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011da:	f7ff fbed 	bl	80009b8 <HAL_GetTick>
 80011de:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <HAL_PWREx_EnableOverDrive+0x78>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80011e8:	d108      	bne.n	80011fc <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011ea:	f7ff fbe5 	bl	80009b8 <HAL_GetTick>
 80011ee:	1b00      	subs	r0, r0, r4
 80011f0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80011f4:	d9f4      	bls.n	80011e0 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 80011f6:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 80011f8:	b002      	add	sp, #8
 80011fa:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80011fc:	4a0c      	ldr	r2, [pc, #48]	; (8001230 <HAL_PWREx_EnableOverDrive+0x78>)
 80011fe:	6813      	ldr	r3, [r2, #0]
 8001200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001204:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8001206:	f7ff fbd7 	bl	80009b8 <HAL_GetTick>
 800120a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <HAL_PWREx_EnableOverDrive+0x78>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001214:	d107      	bne.n	8001226 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001216:	f7ff fbcf 	bl	80009b8 <HAL_GetTick>
 800121a:	1b00      	subs	r0, r0, r4
 800121c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001220:	d9f4      	bls.n	800120c <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8001222:	2003      	movs	r0, #3
 8001224:	e7e8      	b.n	80011f8 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8001226:	2000      	movs	r0, #0
 8001228:	e7e6      	b.n	80011f8 <HAL_PWREx_EnableOverDrive+0x40>
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800
 8001230:	40007000 	.word	0x40007000

08001234 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001234:	2800      	cmp	r0, #0
 8001236:	f000 8206 	beq.w	8001646 <HAL_RCC_OscConfig+0x412>
{
 800123a:	b570      	push	{r4, r5, r6, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001240:	6803      	ldr	r3, [r0, #0]
 8001242:	f013 0f01 	tst.w	r3, #1
 8001246:	d029      	beq.n	800129c <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001248:	4ba7      	ldr	r3, [pc, #668]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 030c 	and.w	r3, r3, #12
 8001250:	2b04      	cmp	r3, #4
 8001252:	d01a      	beq.n	800128a <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001254:	4ba4      	ldr	r3, [pc, #656]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 030c 	and.w	r3, r3, #12
 800125c:	2b08      	cmp	r3, #8
 800125e:	d00f      	beq.n	8001280 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001260:	6863      	ldr	r3, [r4, #4]
 8001262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001266:	d040      	beq.n	80012ea <HAL_RCC_OscConfig+0xb6>
 8001268:	2b00      	cmp	r3, #0
 800126a:	d154      	bne.n	8001316 <HAL_RCC_OscConfig+0xe2>
 800126c:	4b9e      	ldr	r3, [pc, #632]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	e039      	b.n	80012f4 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001280:	4b99      	ldr	r3, [pc, #612]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001288:	d0ea      	beq.n	8001260 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128a:	4b97      	ldr	r3, [pc, #604]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001292:	d003      	beq.n	800129c <HAL_RCC_OscConfig+0x68>
 8001294:	6863      	ldr	r3, [r4, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 81d7 	beq.w	800164a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800129c:	6823      	ldr	r3, [r4, #0]
 800129e:	f013 0f02 	tst.w	r3, #2
 80012a2:	d074      	beq.n	800138e <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012a4:	4b90      	ldr	r3, [pc, #576]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f013 0f0c 	tst.w	r3, #12
 80012ac:	d05e      	beq.n	800136c <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ae:	4b8e      	ldr	r3, [pc, #568]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d053      	beq.n	8001362 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012ba:	68e3      	ldr	r3, [r4, #12]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 8089 	beq.w	80013d4 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c2:	4a89      	ldr	r2, [pc, #548]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 80012c4:	6813      	ldr	r3, [r2, #0]
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012cc:	f7ff fb74 	bl	80009b8 <HAL_GetTick>
 80012d0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d2:	4b85      	ldr	r3, [pc, #532]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f013 0f02 	tst.w	r3, #2
 80012da:	d172      	bne.n	80013c2 <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012dc:	f7ff fb6c 	bl	80009b8 <HAL_GetTick>
 80012e0:	1b40      	subs	r0, r0, r5
 80012e2:	2802      	cmp	r0, #2
 80012e4:	d9f5      	bls.n	80012d2 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 80012e6:	2003      	movs	r0, #3
 80012e8:	e1b4      	b.n	8001654 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ea:	4a7f      	ldr	r2, [pc, #508]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 80012ec:	6813      	ldr	r3, [r2, #0]
 80012ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f2:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012f4:	6863      	ldr	r3, [r4, #4]
 80012f6:	b32b      	cbz	r3, 8001344 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80012f8:	f7ff fb5e 	bl	80009b8 <HAL_GetTick>
 80012fc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fe:	4b7a      	ldr	r3, [pc, #488]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001306:	d1c9      	bne.n	800129c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001308:	f7ff fb56 	bl	80009b8 <HAL_GetTick>
 800130c:	1b40      	subs	r0, r0, r5
 800130e:	2864      	cmp	r0, #100	; 0x64
 8001310:	d9f5      	bls.n	80012fe <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8001312:	2003      	movs	r0, #3
 8001314:	e19e      	b.n	8001654 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001316:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800131a:	d009      	beq.n	8001330 <HAL_RCC_OscConfig+0xfc>
 800131c:	4b72      	ldr	r3, [pc, #456]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	e7e1      	b.n	80012f4 <HAL_RCC_OscConfig+0xc0>
 8001330:	4b6d      	ldr	r3, [pc, #436]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	e7d7      	b.n	80012f4 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8001344:	f7ff fb38 	bl	80009b8 <HAL_GetTick>
 8001348:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134a:	4b67      	ldr	r3, [pc, #412]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001352:	d0a3      	beq.n	800129c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001354:	f7ff fb30 	bl	80009b8 <HAL_GetTick>
 8001358:	1b40      	subs	r0, r0, r5
 800135a:	2864      	cmp	r0, #100	; 0x64
 800135c:	d9f5      	bls.n	800134a <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 800135e:	2003      	movs	r0, #3
 8001360:	e178      	b.n	8001654 <HAL_RCC_OscConfig+0x420>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001362:	4b61      	ldr	r3, [pc, #388]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800136a:	d1a6      	bne.n	80012ba <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136c:	4b5e      	ldr	r3, [pc, #376]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f013 0f02 	tst.w	r3, #2
 8001374:	d003      	beq.n	800137e <HAL_RCC_OscConfig+0x14a>
 8001376:	68e3      	ldr	r3, [r4, #12]
 8001378:	2b01      	cmp	r3, #1
 800137a:	f040 8168 	bne.w	800164e <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137e:	4a5a      	ldr	r2, [pc, #360]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 8001380:	6813      	ldr	r3, [r2, #0]
 8001382:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001386:	6921      	ldr	r1, [r4, #16]
 8001388:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800138c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800138e:	6823      	ldr	r3, [r4, #0]
 8001390:	f013 0f08 	tst.w	r3, #8
 8001394:	d046      	beq.n	8001424 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001396:	6963      	ldr	r3, [r4, #20]
 8001398:	b383      	cbz	r3, 80013fc <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800139a:	4a53      	ldr	r2, [pc, #332]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 800139c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a4:	f7ff fb08 	bl	80009b8 <HAL_GetTick>
 80013a8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013aa:	4b4f      	ldr	r3, [pc, #316]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 80013ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ae:	f013 0f02 	tst.w	r3, #2
 80013b2:	d137      	bne.n	8001424 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b4:	f7ff fb00 	bl	80009b8 <HAL_GetTick>
 80013b8:	1b40      	subs	r0, r0, r5
 80013ba:	2802      	cmp	r0, #2
 80013bc:	d9f5      	bls.n	80013aa <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 80013be:	2003      	movs	r0, #3
 80013c0:	e148      	b.n	8001654 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c2:	4a49      	ldr	r2, [pc, #292]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 80013c4:	6813      	ldr	r3, [r2, #0]
 80013c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80013ca:	6921      	ldr	r1, [r4, #16]
 80013cc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e7dc      	b.n	800138e <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 80013d4:	4a44      	ldr	r2, [pc, #272]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 80013d6:	6813      	ldr	r3, [r2, #0]
 80013d8:	f023 0301 	bic.w	r3, r3, #1
 80013dc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80013de:	f7ff faeb 	bl	80009b8 <HAL_GetTick>
 80013e2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e4:	4b40      	ldr	r3, [pc, #256]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f013 0f02 	tst.w	r3, #2
 80013ec:	d0cf      	beq.n	800138e <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ee:	f7ff fae3 	bl	80009b8 <HAL_GetTick>
 80013f2:	1b40      	subs	r0, r0, r5
 80013f4:	2802      	cmp	r0, #2
 80013f6:	d9f5      	bls.n	80013e4 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 80013f8:	2003      	movs	r0, #3
 80013fa:	e12b      	b.n	8001654 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013fc:	4a3a      	ldr	r2, [pc, #232]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 80013fe:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001400:	f023 0301 	bic.w	r3, r3, #1
 8001404:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001406:	f7ff fad7 	bl	80009b8 <HAL_GetTick>
 800140a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800140c:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 800140e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001410:	f013 0f02 	tst.w	r3, #2
 8001414:	d006      	beq.n	8001424 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001416:	f7ff facf 	bl	80009b8 <HAL_GetTick>
 800141a:	1b40      	subs	r0, r0, r5
 800141c:	2802      	cmp	r0, #2
 800141e:	d9f5      	bls.n	800140c <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8001420:	2003      	movs	r0, #3
 8001422:	e117      	b.n	8001654 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001424:	6823      	ldr	r3, [r4, #0]
 8001426:	f013 0f04 	tst.w	r3, #4
 800142a:	d07d      	beq.n	8001528 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800142c:	4b2e      	ldr	r3, [pc, #184]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001434:	d10b      	bne.n	800144e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 8001438:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800143a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800143e:	641a      	str	r2, [r3, #64]	; 0x40
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800144a:	2501      	movs	r5, #1
 800144c:	e000      	b.n	8001450 <HAL_RCC_OscConfig+0x21c>
  FlagStatus pwrclkchanged = RESET;
 800144e:	2500      	movs	r5, #0
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001450:	4b26      	ldr	r3, [pc, #152]	; (80014ec <HAL_RCC_OscConfig+0x2b8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001458:	d00e      	beq.n	8001478 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800145a:	68a3      	ldr	r3, [r4, #8]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d01f      	beq.n	80014a0 <HAL_RCC_OscConfig+0x26c>
 8001460:	2b00      	cmp	r3, #0
 8001462:	d135      	bne.n	80014d0 <HAL_RCC_OscConfig+0x29c>
 8001464:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 8001466:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001468:	f022 0201 	bic.w	r2, r2, #1
 800146c:	671a      	str	r2, [r3, #112]	; 0x70
 800146e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001470:	f022 0204 	bic.w	r2, r2, #4
 8001474:	671a      	str	r2, [r3, #112]	; 0x70
 8001476:	e018      	b.n	80014aa <HAL_RCC_OscConfig+0x276>
      PWR->CR1 |= PWR_CR1_DBP;
 8001478:	4a1c      	ldr	r2, [pc, #112]	; (80014ec <HAL_RCC_OscConfig+0x2b8>)
 800147a:	6813      	ldr	r3, [r2, #0]
 800147c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001480:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001482:	f7ff fa99 	bl	80009b8 <HAL_GetTick>
 8001486:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001488:	4b18      	ldr	r3, [pc, #96]	; (80014ec <HAL_RCC_OscConfig+0x2b8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001490:	d1e3      	bne.n	800145a <HAL_RCC_OscConfig+0x226>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001492:	f7ff fa91 	bl	80009b8 <HAL_GetTick>
 8001496:	1b80      	subs	r0, r0, r6
 8001498:	2864      	cmp	r0, #100	; 0x64
 800149a:	d9f5      	bls.n	8001488 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 800149c:	2003      	movs	r0, #3
 800149e:	e0d9      	b.n	8001654 <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a0:	4a11      	ldr	r2, [pc, #68]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 80014a2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014aa:	68a3      	ldr	r3, [r4, #8]
 80014ac:	b353      	cbz	r3, 8001504 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ae:	f7ff fa83 	bl	80009b8 <HAL_GetTick>
 80014b2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 80014b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b8:	f013 0f02 	tst.w	r3, #2
 80014bc:	d133      	bne.n	8001526 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014be:	f7ff fa7b 	bl	80009b8 <HAL_GetTick>
 80014c2:	1b80      	subs	r0, r0, r6
 80014c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80014c8:	4298      	cmp	r0, r3
 80014ca:	d9f3      	bls.n	80014b4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80014cc:	2003      	movs	r0, #3
 80014ce:	e0c1      	b.n	8001654 <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d0:	2b05      	cmp	r3, #5
 80014d2:	d00d      	beq.n	80014f0 <HAL_RCC_OscConfig+0x2bc>
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 80014d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80014d8:	f022 0201 	bic.w	r2, r2, #1
 80014dc:	671a      	str	r2, [r3, #112]	; 0x70
 80014de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80014e0:	f022 0204 	bic.w	r2, r2, #4
 80014e4:	671a      	str	r2, [r3, #112]	; 0x70
 80014e6:	e7e0      	b.n	80014aa <HAL_RCC_OscConfig+0x276>
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40007000 	.word	0x40007000
 80014f0:	4b60      	ldr	r3, [pc, #384]	; (8001674 <HAL_RCC_OscConfig+0x440>)
 80014f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80014f4:	f042 0204 	orr.w	r2, r2, #4
 80014f8:	671a      	str	r2, [r3, #112]	; 0x70
 80014fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80014fc:	f042 0201 	orr.w	r2, r2, #1
 8001500:	671a      	str	r2, [r3, #112]	; 0x70
 8001502:	e7d2      	b.n	80014aa <HAL_RCC_OscConfig+0x276>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001504:	f7ff fa58 	bl	80009b8 <HAL_GetTick>
 8001508:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800150a:	4b5a      	ldr	r3, [pc, #360]	; (8001674 <HAL_RCC_OscConfig+0x440>)
 800150c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150e:	f013 0f02 	tst.w	r3, #2
 8001512:	d008      	beq.n	8001526 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001514:	f7ff fa50 	bl	80009b8 <HAL_GetTick>
 8001518:	1b80      	subs	r0, r0, r6
 800151a:	f241 3388 	movw	r3, #5000	; 0x1388
 800151e:	4298      	cmp	r0, r3
 8001520:	d9f3      	bls.n	800150a <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8001522:	2003      	movs	r0, #3
 8001524:	e096      	b.n	8001654 <HAL_RCC_OscConfig+0x420>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001526:	b9fd      	cbnz	r5, 8001568 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001528:	69a3      	ldr	r3, [r4, #24]
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 8091 	beq.w	8001652 <HAL_RCC_OscConfig+0x41e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001530:	4a50      	ldr	r2, [pc, #320]	; (8001674 <HAL_RCC_OscConfig+0x440>)
 8001532:	6892      	ldr	r2, [r2, #8]
 8001534:	f002 020c 	and.w	r2, r2, #12
 8001538:	2a08      	cmp	r2, #8
 800153a:	d059      	beq.n	80015f0 <HAL_RCC_OscConfig+0x3bc>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800153c:	2b02      	cmp	r3, #2
 800153e:	d019      	beq.n	8001574 <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001540:	4a4c      	ldr	r2, [pc, #304]	; (8001674 <HAL_RCC_OscConfig+0x440>)
 8001542:	6813      	ldr	r3, [r2, #0]
 8001544:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154a:	f7ff fa35 	bl	80009b8 <HAL_GetTick>
 800154e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001550:	4b48      	ldr	r3, [pc, #288]	; (8001674 <HAL_RCC_OscConfig+0x440>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001558:	d048      	beq.n	80015ec <HAL_RCC_OscConfig+0x3b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800155a:	f7ff fa2d 	bl	80009b8 <HAL_GetTick>
 800155e:	1b00      	subs	r0, r0, r4
 8001560:	2802      	cmp	r0, #2
 8001562:	d9f5      	bls.n	8001550 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8001564:	2003      	movs	r0, #3
 8001566:	e075      	b.n	8001654 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001568:	4a42      	ldr	r2, [pc, #264]	; (8001674 <HAL_RCC_OscConfig+0x440>)
 800156a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800156c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001570:	6413      	str	r3, [r2, #64]	; 0x40
 8001572:	e7d9      	b.n	8001528 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8001574:	4a3f      	ldr	r2, [pc, #252]	; (8001674 <HAL_RCC_OscConfig+0x440>)
 8001576:	6813      	ldr	r3, [r2, #0]
 8001578:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800157c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800157e:	f7ff fa1b 	bl	80009b8 <HAL_GetTick>
 8001582:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001584:	4b3b      	ldr	r3, [pc, #236]	; (8001674 <HAL_RCC_OscConfig+0x440>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800158c:	d006      	beq.n	800159c <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800158e:	f7ff fa13 	bl	80009b8 <HAL_GetTick>
 8001592:	1b40      	subs	r0, r0, r5
 8001594:	2802      	cmp	r0, #2
 8001596:	d9f5      	bls.n	8001584 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 8001598:	2003      	movs	r0, #3
 800159a:	e05b      	b.n	8001654 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800159c:	69e3      	ldr	r3, [r4, #28]
 800159e:	6a22      	ldr	r2, [r4, #32]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015a4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80015a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80015aa:	0852      	lsrs	r2, r2, #1
 80015ac:	3a01      	subs	r2, #1
 80015ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80015b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80015b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80015b8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80015ba:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80015be:	4a2d      	ldr	r2, [pc, #180]	; (8001674 <HAL_RCC_OscConfig+0x440>)
 80015c0:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80015c2:	6813      	ldr	r3, [r2, #0]
 80015c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015c8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80015ca:	f7ff f9f5 	bl	80009b8 <HAL_GetTick>
 80015ce:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d0:	4b28      	ldr	r3, [pc, #160]	; (8001674 <HAL_RCC_OscConfig+0x440>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80015d8:	d106      	bne.n	80015e8 <HAL_RCC_OscConfig+0x3b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015da:	f7ff f9ed 	bl	80009b8 <HAL_GetTick>
 80015de:	1b00      	subs	r0, r0, r4
 80015e0:	2802      	cmp	r0, #2
 80015e2:	d9f5      	bls.n	80015d0 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 80015e4:	2003      	movs	r0, #3
 80015e6:	e035      	b.n	8001654 <HAL_RCC_OscConfig+0x420>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80015e8:	2000      	movs	r0, #0
 80015ea:	e033      	b.n	8001654 <HAL_RCC_OscConfig+0x420>
 80015ec:	2000      	movs	r0, #0
 80015ee:	e031      	b.n	8001654 <HAL_RCC_OscConfig+0x420>
      pll_config = RCC->PLLCFGR;
 80015f0:	4a20      	ldr	r2, [pc, #128]	; (8001674 <HAL_RCC_OscConfig+0x440>)
 80015f2:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d02f      	beq.n	8001658 <HAL_RCC_OscConfig+0x424>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80015fc:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015fe:	428b      	cmp	r3, r1
 8001600:	d12c      	bne.n	800165c <HAL_RCC_OscConfig+0x428>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001602:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8001606:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001608:	428b      	cmp	r3, r1
 800160a:	d129      	bne.n	8001660 <HAL_RCC_OscConfig+0x42c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800160c:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800160e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001612:	4013      	ands	r3, r2
 8001614:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8001618:	d124      	bne.n	8001664 <HAL_RCC_OscConfig+0x430>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800161a:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 800161e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001620:	085b      	lsrs	r3, r3, #1
 8001622:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001624:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8001628:	d11e      	bne.n	8001668 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800162a:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 800162e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001630:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 8001634:	d11a      	bne.n	800166c <HAL_RCC_OscConfig+0x438>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001636:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 800163a:	6b23      	ldr	r3, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800163c:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 8001640:	d116      	bne.n	8001670 <HAL_RCC_OscConfig+0x43c>
  return HAL_OK;
 8001642:	2000      	movs	r0, #0
 8001644:	e006      	b.n	8001654 <HAL_RCC_OscConfig+0x420>
    return HAL_ERROR;
 8001646:	2001      	movs	r0, #1
}
 8001648:	4770      	bx	lr
        return HAL_ERROR;
 800164a:	2001      	movs	r0, #1
 800164c:	e002      	b.n	8001654 <HAL_RCC_OscConfig+0x420>
        return HAL_ERROR;
 800164e:	2001      	movs	r0, #1
 8001650:	e000      	b.n	8001654 <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 8001652:	2000      	movs	r0, #0
}
 8001654:	b002      	add	sp, #8
 8001656:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001658:	2001      	movs	r0, #1
 800165a:	e7fb      	b.n	8001654 <HAL_RCC_OscConfig+0x420>
 800165c:	2001      	movs	r0, #1
 800165e:	e7f9      	b.n	8001654 <HAL_RCC_OscConfig+0x420>
 8001660:	2001      	movs	r0, #1
 8001662:	e7f7      	b.n	8001654 <HAL_RCC_OscConfig+0x420>
 8001664:	2001      	movs	r0, #1
 8001666:	e7f5      	b.n	8001654 <HAL_RCC_OscConfig+0x420>
 8001668:	2001      	movs	r0, #1
 800166a:	e7f3      	b.n	8001654 <HAL_RCC_OscConfig+0x420>
 800166c:	2001      	movs	r0, #1
 800166e:	e7f1      	b.n	8001654 <HAL_RCC_OscConfig+0x420>
 8001670:	2001      	movs	r0, #1
 8001672:	e7ef      	b.n	8001654 <HAL_RCC_OscConfig+0x420>
 8001674:	40023800 	.word	0x40023800

08001678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800167a:	4b24      	ldr	r3, [pc, #144]	; (800170c <HAL_RCC_GetSysClockFreq+0x94>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 030c 	and.w	r3, r3, #12
 8001682:	2b04      	cmp	r3, #4
 8001684:	d03d      	beq.n	8001702 <HAL_RCC_GetSysClockFreq+0x8a>
 8001686:	2b08      	cmp	r3, #8
 8001688:	d13d      	bne.n	8001706 <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800168a:	4b20      	ldr	r3, [pc, #128]	; (800170c <HAL_RCC_GetSysClockFreq+0x94>)
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001698:	d012      	beq.n	80016c0 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800169a:	4b1c      	ldr	r3, [pc, #112]	; (800170c <HAL_RCC_GetSysClockFreq+0x94>)
 800169c:	6859      	ldr	r1, [r3, #4]
 800169e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80016a2:	2300      	movs	r3, #0
 80016a4:	481a      	ldr	r0, [pc, #104]	; (8001710 <HAL_RCC_GetSysClockFreq+0x98>)
 80016a6:	fba1 0100 	umull	r0, r1, r1, r0
 80016aa:	f7fe fdc5 	bl	8000238 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80016ae:	4b17      	ldr	r3, [pc, #92]	; (800170c <HAL_RCC_GetSysClockFreq+0x94>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80016b6:	3301      	adds	r3, #1
 80016b8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80016ba:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80016be:	e023      	b.n	8001708 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_RCC_GetSysClockFreq+0x94>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80016c8:	015c      	lsls	r4, r3, #5
 80016ca:	2500      	movs	r5, #0
 80016cc:	1ae4      	subs	r4, r4, r3
 80016ce:	f165 0500 	sbc.w	r5, r5, #0
 80016d2:	01ae      	lsls	r6, r5, #6
 80016d4:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 80016d8:	01a7      	lsls	r7, r4, #6
 80016da:	1b38      	subs	r0, r7, r4
 80016dc:	eb66 0105 	sbc.w	r1, r6, r5
 80016e0:	00cc      	lsls	r4, r1, #3
 80016e2:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 80016e6:	00c5      	lsls	r5, r0, #3
 80016e8:	18e8      	adds	r0, r5, r3
 80016ea:	f144 0100 	adc.w	r1, r4, #0
 80016ee:	028b      	lsls	r3, r1, #10
 80016f0:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80016f4:	0284      	lsls	r4, r0, #10
 80016f6:	4620      	mov	r0, r4
 80016f8:	4619      	mov	r1, r3
 80016fa:	2300      	movs	r3, #0
 80016fc:	f7fe fd9c 	bl	8000238 <__aeabi_uldivmod>
 8001700:	e7d5      	b.n	80016ae <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001702:	4803      	ldr	r0, [pc, #12]	; (8001710 <HAL_RCC_GetSysClockFreq+0x98>)
 8001704:	e000      	b.n	8001708 <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001706:	4803      	ldr	r0, [pc, #12]	; (8001714 <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800
 8001710:	017d7840 	.word	0x017d7840
 8001714:	00f42400 	.word	0x00f42400

08001718 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001718:	2800      	cmp	r0, #0
 800171a:	f000 80a0 	beq.w	800185e <HAL_RCC_ClockConfig+0x146>
{
 800171e:	b570      	push	{r4, r5, r6, lr}
 8001720:	460d      	mov	r5, r1
 8001722:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001724:	4b52      	ldr	r3, [pc, #328]	; (8001870 <HAL_RCC_ClockConfig+0x158>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 030f 	and.w	r3, r3, #15
 800172c:	428b      	cmp	r3, r1
 800172e:	d20b      	bcs.n	8001748 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001730:	4a4f      	ldr	r2, [pc, #316]	; (8001870 <HAL_RCC_ClockConfig+0x158>)
 8001732:	6813      	ldr	r3, [r2, #0]
 8001734:	f023 030f 	bic.w	r3, r3, #15
 8001738:	430b      	orrs	r3, r1
 800173a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800173c:	6813      	ldr	r3, [r2, #0]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	428b      	cmp	r3, r1
 8001744:	f040 808d 	bne.w	8001862 <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001748:	6823      	ldr	r3, [r4, #0]
 800174a:	f013 0f02 	tst.w	r3, #2
 800174e:	d017      	beq.n	8001780 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001750:	f013 0f04 	tst.w	r3, #4
 8001754:	d004      	beq.n	8001760 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001756:	4a47      	ldr	r2, [pc, #284]	; (8001874 <HAL_RCC_ClockConfig+0x15c>)
 8001758:	6893      	ldr	r3, [r2, #8]
 800175a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800175e:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001760:	6823      	ldr	r3, [r4, #0]
 8001762:	f013 0f08 	tst.w	r3, #8
 8001766:	d004      	beq.n	8001772 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001768:	4a42      	ldr	r2, [pc, #264]	; (8001874 <HAL_RCC_ClockConfig+0x15c>)
 800176a:	6893      	ldr	r3, [r2, #8]
 800176c:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001770:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001772:	4a40      	ldr	r2, [pc, #256]	; (8001874 <HAL_RCC_ClockConfig+0x15c>)
 8001774:	6893      	ldr	r3, [r2, #8]
 8001776:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800177a:	68a1      	ldr	r1, [r4, #8]
 800177c:	430b      	orrs	r3, r1
 800177e:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001780:	6823      	ldr	r3, [r4, #0]
 8001782:	f013 0f01 	tst.w	r3, #1
 8001786:	d031      	beq.n	80017ec <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001788:	6863      	ldr	r3, [r4, #4]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d020      	beq.n	80017d0 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800178e:	2b02      	cmp	r3, #2
 8001790:	d025      	beq.n	80017de <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001792:	4a38      	ldr	r2, [pc, #224]	; (8001874 <HAL_RCC_ClockConfig+0x15c>)
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	f012 0f02 	tst.w	r2, #2
 800179a:	d064      	beq.n	8001866 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800179c:	4935      	ldr	r1, [pc, #212]	; (8001874 <HAL_RCC_ClockConfig+0x15c>)
 800179e:	688a      	ldr	r2, [r1, #8]
 80017a0:	f022 0203 	bic.w	r2, r2, #3
 80017a4:	4313      	orrs	r3, r2
 80017a6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80017a8:	f7ff f906 	bl	80009b8 <HAL_GetTick>
 80017ac:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ae:	4b31      	ldr	r3, [pc, #196]	; (8001874 <HAL_RCC_ClockConfig+0x15c>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	6862      	ldr	r2, [r4, #4]
 80017b8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80017bc:	d016      	beq.n	80017ec <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017be:	f7ff f8fb 	bl	80009b8 <HAL_GetTick>
 80017c2:	1b80      	subs	r0, r0, r6
 80017c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80017c8:	4298      	cmp	r0, r3
 80017ca:	d9f0      	bls.n	80017ae <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80017cc:	2003      	movs	r0, #3
 80017ce:	e045      	b.n	800185c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d0:	4a28      	ldr	r2, [pc, #160]	; (8001874 <HAL_RCC_ClockConfig+0x15c>)
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80017d8:	d1e0      	bne.n	800179c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80017da:	2001      	movs	r0, #1
 80017dc:	e03e      	b.n	800185c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017de:	4a25      	ldr	r2, [pc, #148]	; (8001874 <HAL_RCC_ClockConfig+0x15c>)
 80017e0:	6812      	ldr	r2, [r2, #0]
 80017e2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80017e6:	d1d9      	bne.n	800179c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80017e8:	2001      	movs	r0, #1
 80017ea:	e037      	b.n	800185c <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017ec:	4b20      	ldr	r3, [pc, #128]	; (8001870 <HAL_RCC_ClockConfig+0x158>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 030f 	and.w	r3, r3, #15
 80017f4:	42ab      	cmp	r3, r5
 80017f6:	d90a      	bls.n	800180e <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f8:	4a1d      	ldr	r2, [pc, #116]	; (8001870 <HAL_RCC_ClockConfig+0x158>)
 80017fa:	6813      	ldr	r3, [r2, #0]
 80017fc:	f023 030f 	bic.w	r3, r3, #15
 8001800:	432b      	orrs	r3, r5
 8001802:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001804:	6813      	ldr	r3, [r2, #0]
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	42ab      	cmp	r3, r5
 800180c:	d12d      	bne.n	800186a <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800180e:	6823      	ldr	r3, [r4, #0]
 8001810:	f013 0f04 	tst.w	r3, #4
 8001814:	d006      	beq.n	8001824 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001816:	4a17      	ldr	r2, [pc, #92]	; (8001874 <HAL_RCC_ClockConfig+0x15c>)
 8001818:	6893      	ldr	r3, [r2, #8]
 800181a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800181e:	68e1      	ldr	r1, [r4, #12]
 8001820:	430b      	orrs	r3, r1
 8001822:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001824:	6823      	ldr	r3, [r4, #0]
 8001826:	f013 0f08 	tst.w	r3, #8
 800182a:	d007      	beq.n	800183c <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800182c:	4a11      	ldr	r2, [pc, #68]	; (8001874 <HAL_RCC_ClockConfig+0x15c>)
 800182e:	6893      	ldr	r3, [r2, #8]
 8001830:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001834:	6921      	ldr	r1, [r4, #16]
 8001836:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800183a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800183c:	f7ff ff1c 	bl	8001678 <HAL_RCC_GetSysClockFreq>
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <HAL_RCC_ClockConfig+0x15c>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001848:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <HAL_RCC_ClockConfig+0x160>)
 800184a:	5cd3      	ldrb	r3, [r2, r3]
 800184c:	40d8      	lsrs	r0, r3
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_RCC_ClockConfig+0x164>)
 8001850:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_RCC_ClockConfig+0x168>)
 8001854:	6818      	ldr	r0, [r3, #0]
 8001856:	f7ff f869 	bl	800092c <HAL_InitTick>
  return HAL_OK;
 800185a:	2000      	movs	r0, #0
}
 800185c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800185e:	2001      	movs	r0, #1
}
 8001860:	4770      	bx	lr
      return HAL_ERROR;
 8001862:	2001      	movs	r0, #1
 8001864:	e7fa      	b.n	800185c <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8001866:	2001      	movs	r0, #1
 8001868:	e7f8      	b.n	800185c <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 800186a:	2001      	movs	r0, #1
 800186c:	e7f6      	b.n	800185c <HAL_RCC_ClockConfig+0x144>
 800186e:	bf00      	nop
 8001870:	40023c00 	.word	0x40023c00
 8001874:	40023800 	.word	0x40023800
 8001878:	08002b04 	.word	0x08002b04
 800187c:	20000000 	.word	0x20000000
 8001880:	20000008 	.word	0x20000008

08001884 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001884:	4b01      	ldr	r3, [pc, #4]	; (800188c <HAL_RCC_GetHCLKFreq+0x8>)
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000000 	.word	0x20000000

08001890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001890:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001892:	f7ff fff7 	bl	8001884 <HAL_RCC_GetHCLKFreq>
 8001896:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800189e:	4a03      	ldr	r2, [pc, #12]	; (80018ac <HAL_RCC_GetPCLK1Freq+0x1c>)
 80018a0:	5cd3      	ldrb	r3, [r2, r3]
}
 80018a2:	40d8      	lsrs	r0, r3
 80018a4:	bd08      	pop	{r3, pc}
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800
 80018ac:	08002b14 	.word	0x08002b14

080018b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018b0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018b2:	f7ff ffe7 	bl	8001884 <HAL_RCC_GetHCLKFreq>
 80018b6:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80018be:	4a03      	ldr	r2, [pc, #12]	; (80018cc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80018c0:	5cd3      	ldrb	r3, [r2, r3]
}
 80018c2:	40d8      	lsrs	r0, r3
 80018c4:	bd08      	pop	{r3, pc}
 80018c6:	bf00      	nop
 80018c8:	40023800 	.word	0x40023800
 80018cc:	08002b14 	.word	0x08002b14

080018d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018d0:	b538      	push	{r3, r4, r5, lr}
 80018d2:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80018d4:	6883      	ldr	r3, [r0, #8]
 80018d6:	6902      	ldr	r2, [r0, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	6942      	ldr	r2, [r0, #20]
 80018dc:	4313      	orrs	r3, r2
 80018de:	69c2      	ldr	r2, [r0, #28]
 80018e0:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80018e2:	6801      	ldr	r1, [r0, #0]
 80018e4:	6808      	ldr	r0, [r1, #0]
 80018e6:	4a9f      	ldr	r2, [pc, #636]	; (8001b64 <UART_SetConfig+0x294>)
 80018e8:	4002      	ands	r2, r0
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018ee:	6822      	ldr	r2, [r4, #0]
 80018f0:	6853      	ldr	r3, [r2, #4]
 80018f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018f6:	68e1      	ldr	r1, [r4, #12]
 80018f8:	430b      	orrs	r3, r1
 80018fa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80018fc:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 80018fe:	6a23      	ldr	r3, [r4, #32]
 8001900:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001902:	6821      	ldr	r1, [r4, #0]
 8001904:	688b      	ldr	r3, [r1, #8]
 8001906:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800190a:	4313      	orrs	r3, r2
 800190c:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800190e:	6823      	ldr	r3, [r4, #0]
 8001910:	4a95      	ldr	r2, [pc, #596]	; (8001b68 <UART_SetConfig+0x298>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d019      	beq.n	800194a <UART_SetConfig+0x7a>
 8001916:	4a95      	ldr	r2, [pc, #596]	; (8001b6c <UART_SetConfig+0x29c>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d029      	beq.n	8001970 <UART_SetConfig+0xa0>
 800191c:	4a94      	ldr	r2, [pc, #592]	; (8001b70 <UART_SetConfig+0x2a0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d03e      	beq.n	80019a0 <UART_SetConfig+0xd0>
 8001922:	4a94      	ldr	r2, [pc, #592]	; (8001b74 <UART_SetConfig+0x2a4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d062      	beq.n	80019ee <UART_SetConfig+0x11e>
 8001928:	4a93      	ldr	r2, [pc, #588]	; (8001b78 <UART_SetConfig+0x2a8>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d071      	beq.n	8001a12 <UART_SetConfig+0x142>
 800192e:	4a93      	ldr	r2, [pc, #588]	; (8001b7c <UART_SetConfig+0x2ac>)
 8001930:	4293      	cmp	r3, r2
 8001932:	f000 8083 	beq.w	8001a3c <UART_SetConfig+0x16c>
 8001936:	4a92      	ldr	r2, [pc, #584]	; (8001b80 <UART_SetConfig+0x2b0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	f000 8094 	beq.w	8001a66 <UART_SetConfig+0x196>
 800193e:	4a91      	ldr	r2, [pc, #580]	; (8001b84 <UART_SetConfig+0x2b4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	f000 80a5 	beq.w	8001a90 <UART_SetConfig+0x1c0>
 8001946:	2510      	movs	r5, #16
 8001948:	e03a      	b.n	80019c0 <UART_SetConfig+0xf0>
 800194a:	4b8f      	ldr	r3, [pc, #572]	; (8001b88 <UART_SetConfig+0x2b8>)
 800194c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	2b03      	cmp	r3, #3
 8001956:	d809      	bhi.n	800196c <UART_SetConfig+0x9c>
 8001958:	e8df f003 	tbb	[pc, r3]
 800195c:	06ae0402 	.word	0x06ae0402
 8001960:	2501      	movs	r5, #1
 8001962:	e02d      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001964:	2504      	movs	r5, #4
 8001966:	e02b      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001968:	2508      	movs	r5, #8
 800196a:	e029      	b.n	80019c0 <UART_SetConfig+0xf0>
 800196c:	2510      	movs	r5, #16
 800196e:	e027      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001970:	4b85      	ldr	r3, [pc, #532]	; (8001b88 <UART_SetConfig+0x2b8>)
 8001972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	2b0c      	cmp	r3, #12
 800197c:	d80e      	bhi.n	800199c <UART_SetConfig+0xcc>
 800197e:	e8df f003 	tbb	[pc, r3]
 8001982:	0d07      	.short	0x0d07
 8001984:	0d090d0d 	.word	0x0d090d0d
 8001988:	0d9d0d0d 	.word	0x0d9d0d0d
 800198c:	0d0d      	.short	0x0d0d
 800198e:	0b          	.byte	0x0b
 800198f:	00          	.byte	0x00
 8001990:	2500      	movs	r5, #0
 8001992:	e015      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001994:	2504      	movs	r5, #4
 8001996:	e013      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001998:	2508      	movs	r5, #8
 800199a:	e011      	b.n	80019c0 <UART_SetConfig+0xf0>
 800199c:	2510      	movs	r5, #16
 800199e:	e00f      	b.n	80019c0 <UART_SetConfig+0xf0>
 80019a0:	4b79      	ldr	r3, [pc, #484]	; (8001b88 <UART_SetConfig+0x2b8>)
 80019a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80019aa:	2b20      	cmp	r3, #32
 80019ac:	f000 8088 	beq.w	8001ac0 <UART_SetConfig+0x1f0>
 80019b0:	d819      	bhi.n	80019e6 <UART_SetConfig+0x116>
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 8086 	beq.w	8001ac4 <UART_SetConfig+0x1f4>
 80019b8:	2b10      	cmp	r3, #16
 80019ba:	f040 8085 	bne.w	8001ac8 <UART_SetConfig+0x1f8>
 80019be:	2504      	movs	r5, #4

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019c0:	69e3      	ldr	r3, [r4, #28]
 80019c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019c6:	f000 80ab 	beq.w	8001b20 <UART_SetConfig+0x250>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 80019ca:	2d08      	cmp	r5, #8
 80019cc:	f200 8140 	bhi.w	8001c50 <UART_SetConfig+0x380>
 80019d0:	e8df f015 	tbh	[pc, r5, lsl #1]
 80019d4:	01180107 	.word	0x01180107
 80019d8:	013e0122 	.word	0x013e0122
 80019dc:	013e012b 	.word	0x013e012b
 80019e0:	013e013e 	.word	0x013e013e
 80019e4:	0135      	.short	0x0135
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019e6:	2b30      	cmp	r3, #48	; 0x30
 80019e8:	d170      	bne.n	8001acc <UART_SetConfig+0x1fc>
 80019ea:	2508      	movs	r5, #8
 80019ec:	e7e8      	b.n	80019c0 <UART_SetConfig+0xf0>
 80019ee:	4b66      	ldr	r3, [pc, #408]	; (8001b88 <UART_SetConfig+0x2b8>)
 80019f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80019f8:	2b80      	cmp	r3, #128	; 0x80
 80019fa:	d069      	beq.n	8001ad0 <UART_SetConfig+0x200>
 80019fc:	d805      	bhi.n	8001a0a <UART_SetConfig+0x13a>
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d068      	beq.n	8001ad4 <UART_SetConfig+0x204>
 8001a02:	2b40      	cmp	r3, #64	; 0x40
 8001a04:	d168      	bne.n	8001ad8 <UART_SetConfig+0x208>
 8001a06:	2504      	movs	r5, #4
 8001a08:	e7da      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001a0a:	2bc0      	cmp	r3, #192	; 0xc0
 8001a0c:	d166      	bne.n	8001adc <UART_SetConfig+0x20c>
 8001a0e:	2508      	movs	r5, #8
 8001a10:	e7d6      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001a12:	4b5d      	ldr	r3, [pc, #372]	; (8001b88 <UART_SetConfig+0x2b8>)
 8001a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a20:	d05e      	beq.n	8001ae0 <UART_SetConfig+0x210>
 8001a22:	d806      	bhi.n	8001a32 <UART_SetConfig+0x162>
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d05d      	beq.n	8001ae4 <UART_SetConfig+0x214>
 8001a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a2c:	d15c      	bne.n	8001ae8 <UART_SetConfig+0x218>
 8001a2e:	2504      	movs	r5, #4
 8001a30:	e7c6      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001a32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a36:	d159      	bne.n	8001aec <UART_SetConfig+0x21c>
 8001a38:	2508      	movs	r5, #8
 8001a3a:	e7c1      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001a3c:	4b52      	ldr	r3, [pc, #328]	; (8001b88 <UART_SetConfig+0x2b8>)
 8001a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a42:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a4a:	d051      	beq.n	8001af0 <UART_SetConfig+0x220>
 8001a4c:	d806      	bhi.n	8001a5c <UART_SetConfig+0x18c>
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d050      	beq.n	8001af4 <UART_SetConfig+0x224>
 8001a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a56:	d14f      	bne.n	8001af8 <UART_SetConfig+0x228>
 8001a58:	2504      	movs	r5, #4
 8001a5a:	e7b1      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001a5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001a60:	d14c      	bne.n	8001afc <UART_SetConfig+0x22c>
 8001a62:	2508      	movs	r5, #8
 8001a64:	e7ac      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001a66:	4b48      	ldr	r3, [pc, #288]	; (8001b88 <UART_SetConfig+0x2b8>)
 8001a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a6c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a74:	d044      	beq.n	8001b00 <UART_SetConfig+0x230>
 8001a76:	d806      	bhi.n	8001a86 <UART_SetConfig+0x1b6>
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d043      	beq.n	8001b04 <UART_SetConfig+0x234>
 8001a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a80:	d142      	bne.n	8001b08 <UART_SetConfig+0x238>
 8001a82:	2504      	movs	r5, #4
 8001a84:	e79c      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001a86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001a8a:	d13f      	bne.n	8001b0c <UART_SetConfig+0x23c>
 8001a8c:	2508      	movs	r5, #8
 8001a8e:	e797      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001a90:	4b3d      	ldr	r3, [pc, #244]	; (8001b88 <UART_SetConfig+0x2b8>)
 8001a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a9e:	d037      	beq.n	8001b10 <UART_SetConfig+0x240>
 8001aa0:	d805      	bhi.n	8001aae <UART_SetConfig+0x1de>
 8001aa2:	b3bb      	cbz	r3, 8001b14 <UART_SetConfig+0x244>
 8001aa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001aa8:	d136      	bne.n	8001b18 <UART_SetConfig+0x248>
 8001aaa:	2504      	movs	r5, #4
 8001aac:	e788      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001aae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001ab2:	d133      	bne.n	8001b1c <UART_SetConfig+0x24c>
 8001ab4:	2508      	movs	r5, #8
 8001ab6:	e783      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001ab8:	2502      	movs	r5, #2
 8001aba:	e781      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001abc:	2502      	movs	r5, #2
 8001abe:	e77f      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001ac0:	2502      	movs	r5, #2
 8001ac2:	e77d      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001ac4:	2500      	movs	r5, #0
 8001ac6:	e77b      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001ac8:	2510      	movs	r5, #16
 8001aca:	e779      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001acc:	2510      	movs	r5, #16
 8001ace:	e777      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001ad0:	2502      	movs	r5, #2
 8001ad2:	e775      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001ad4:	2500      	movs	r5, #0
 8001ad6:	e773      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001ad8:	2510      	movs	r5, #16
 8001ada:	e771      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001adc:	2510      	movs	r5, #16
 8001ade:	e76f      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001ae0:	2502      	movs	r5, #2
 8001ae2:	e76d      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001ae4:	2500      	movs	r5, #0
 8001ae6:	e76b      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001ae8:	2510      	movs	r5, #16
 8001aea:	e769      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001aec:	2510      	movs	r5, #16
 8001aee:	e767      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001af0:	2502      	movs	r5, #2
 8001af2:	e765      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001af4:	2501      	movs	r5, #1
 8001af6:	e763      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001af8:	2510      	movs	r5, #16
 8001afa:	e761      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001afc:	2510      	movs	r5, #16
 8001afe:	e75f      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001b00:	2502      	movs	r5, #2
 8001b02:	e75d      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001b04:	2500      	movs	r5, #0
 8001b06:	e75b      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001b08:	2510      	movs	r5, #16
 8001b0a:	e759      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001b0c:	2510      	movs	r5, #16
 8001b0e:	e757      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001b10:	2502      	movs	r5, #2
 8001b12:	e755      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001b14:	2500      	movs	r5, #0
 8001b16:	e753      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001b18:	2510      	movs	r5, #16
 8001b1a:	e751      	b.n	80019c0 <UART_SetConfig+0xf0>
 8001b1c:	2510      	movs	r5, #16
 8001b1e:	e74f      	b.n	80019c0 <UART_SetConfig+0xf0>
    switch (clocksource)
 8001b20:	2d08      	cmp	r5, #8
 8001b22:	d85b      	bhi.n	8001bdc <UART_SetConfig+0x30c>
 8001b24:	e8df f005 	tbb	[pc, r5]
 8001b28:	5a3d3205 	.word	0x5a3d3205
 8001b2c:	5a5a5a46 	.word	0x5a5a5a46
 8001b30:	51          	.byte	0x51
 8001b31:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8001b32:	f7ff fead 	bl	8001890 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001b36:	6862      	ldr	r2, [r4, #4]
 8001b38:	0853      	lsrs	r3, r2, #1
 8001b3a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001b3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b42:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b44:	f1a3 0110 	sub.w	r1, r3, #16
 8001b48:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001b4c:	4291      	cmp	r1, r2
 8001b4e:	f200 8082 	bhi.w	8001c56 <UART_SetConfig+0x386>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001b58:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001b5c:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8001b5e:	6822      	ldr	r2, [r4, #0]
 8001b60:	60d3      	str	r3, [r2, #12]
 8001b62:	e07b      	b.n	8001c5c <UART_SetConfig+0x38c>
 8001b64:	efff69f3 	.word	0xefff69f3
 8001b68:	40011000 	.word	0x40011000
 8001b6c:	40004400 	.word	0x40004400
 8001b70:	40004800 	.word	0x40004800
 8001b74:	40004c00 	.word	0x40004c00
 8001b78:	40005000 	.word	0x40005000
 8001b7c:	40011400 	.word	0x40011400
 8001b80:	40007800 	.word	0x40007800
 8001b84:	40007c00 	.word	0x40007c00
 8001b88:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK2Freq();
 8001b8c:	f7ff fe90 	bl	80018b0 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001b90:	6862      	ldr	r2, [r4, #4]
 8001b92:	0853      	lsrs	r3, r2, #1
 8001b94:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001b98:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b9c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001b9e:	2500      	movs	r5, #0
        break;
 8001ba0:	e7d0      	b.n	8001b44 <UART_SetConfig+0x274>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001ba2:	6862      	ldr	r2, [r4, #4]
 8001ba4:	4b30      	ldr	r3, [pc, #192]	; (8001c68 <UART_SetConfig+0x398>)
 8001ba6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8001baa:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bae:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001bb0:	2500      	movs	r5, #0
        break;
 8001bb2:	e7c7      	b.n	8001b44 <UART_SetConfig+0x274>
        pclk = HAL_RCC_GetSysClockFreq();
 8001bb4:	f7ff fd60 	bl	8001678 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001bb8:	6862      	ldr	r2, [r4, #4]
 8001bba:	0853      	lsrs	r3, r2, #1
 8001bbc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001bc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bc4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001bc6:	2500      	movs	r5, #0
        break;
 8001bc8:	e7bc      	b.n	8001b44 <UART_SetConfig+0x274>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001bca:	6862      	ldr	r2, [r4, #4]
 8001bcc:	0853      	lsrs	r3, r2, #1
 8001bce:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001bd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bd6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001bd8:	2500      	movs	r5, #0
        break;
 8001bda:	e7b3      	b.n	8001b44 <UART_SetConfig+0x274>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bdc:	2501      	movs	r5, #1
 8001bde:	2300      	movs	r3, #0
 8001be0:	e7b0      	b.n	8001b44 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001be2:	f7ff fe55 	bl	8001890 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001be6:	6862      	ldr	r2, [r4, #4]
 8001be8:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001bec:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bf0:	b29b      	uxth	r3, r3
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001bf2:	f1a3 0110 	sub.w	r1, r3, #16
 8001bf6:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001bfa:	4291      	cmp	r1, r2
 8001bfc:	d82d      	bhi.n	8001c5a <UART_SetConfig+0x38a>
    {
      huart->Instance->BRR = usartdiv;
 8001bfe:	6822      	ldr	r2, [r4, #0]
 8001c00:	60d3      	str	r3, [r2, #12]
 8001c02:	e02b      	b.n	8001c5c <UART_SetConfig+0x38c>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001c04:	f7ff fe54 	bl	80018b0 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001c08:	6862      	ldr	r2, [r4, #4]
 8001c0a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001c0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c12:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c14:	2500      	movs	r5, #0
        break;
 8001c16:	e7ec      	b.n	8001bf2 <UART_SetConfig+0x322>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001c18:	6862      	ldr	r2, [r4, #4]
 8001c1a:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <UART_SetConfig+0x39c>)
 8001c1c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8001c20:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c24:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c26:	2500      	movs	r5, #0
        break;
 8001c28:	e7e3      	b.n	8001bf2 <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetSysClockFreq();
 8001c2a:	f7ff fd25 	bl	8001678 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001c2e:	6862      	ldr	r2, [r4, #4]
 8001c30:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c38:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c3a:	2500      	movs	r5, #0
        break;
 8001c3c:	e7d9      	b.n	8001bf2 <UART_SetConfig+0x322>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001c3e:	6862      	ldr	r2, [r4, #4]
 8001c40:	0853      	lsrs	r3, r2, #1
 8001c42:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c46:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c4a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c4c:	2500      	movs	r5, #0
        break;
 8001c4e:	e7d0      	b.n	8001bf2 <UART_SetConfig+0x322>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c50:	2501      	movs	r5, #1
 8001c52:	2300      	movs	r3, #0
 8001c54:	e7cd      	b.n	8001bf2 <UART_SetConfig+0x322>
      ret = HAL_ERROR;
 8001c56:	2501      	movs	r5, #1
 8001c58:	e000      	b.n	8001c5c <UART_SetConfig+0x38c>
    }
    else
    {
      ret = HAL_ERROR;
 8001c5a:	2501      	movs	r5, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001c60:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001c62:	4628      	mov	r0, r5
 8001c64:	bd38      	pop	{r3, r4, r5, pc}
 8001c66:	bf00      	nop
 8001c68:	01e84800 	.word	0x01e84800
 8001c6c:	00f42400 	.word	0x00f42400

08001c70 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001c70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c72:	f013 0f01 	tst.w	r3, #1
 8001c76:	d006      	beq.n	8001c86 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001c78:	6802      	ldr	r2, [r0, #0]
 8001c7a:	6853      	ldr	r3, [r2, #4]
 8001c7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001c80:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001c82:	430b      	orrs	r3, r1
 8001c84:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001c86:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c88:	f013 0f02 	tst.w	r3, #2
 8001c8c:	d006      	beq.n	8001c9c <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001c8e:	6802      	ldr	r2, [r0, #0]
 8001c90:	6853      	ldr	r3, [r2, #4]
 8001c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c96:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001c98:	430b      	orrs	r3, r1
 8001c9a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001c9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c9e:	f013 0f04 	tst.w	r3, #4
 8001ca2:	d006      	beq.n	8001cb2 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001ca4:	6802      	ldr	r2, [r0, #0]
 8001ca6:	6853      	ldr	r3, [r2, #4]
 8001ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cac:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001cae:	430b      	orrs	r3, r1
 8001cb0:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001cb2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001cb4:	f013 0f08 	tst.w	r3, #8
 8001cb8:	d006      	beq.n	8001cc8 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001cba:	6802      	ldr	r2, [r0, #0]
 8001cbc:	6853      	ldr	r3, [r2, #4]
 8001cbe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001cc2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001cc4:	430b      	orrs	r3, r1
 8001cc6:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001cc8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001cca:	f013 0f10 	tst.w	r3, #16
 8001cce:	d006      	beq.n	8001cde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001cd0:	6802      	ldr	r2, [r0, #0]
 8001cd2:	6893      	ldr	r3, [r2, #8]
 8001cd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cd8:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001cda:	430b      	orrs	r3, r1
 8001cdc:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001cde:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ce0:	f013 0f20 	tst.w	r3, #32
 8001ce4:	d006      	beq.n	8001cf4 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001ce6:	6802      	ldr	r2, [r0, #0]
 8001ce8:	6893      	ldr	r3, [r2, #8]
 8001cea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001cee:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001cf0:	430b      	orrs	r3, r1
 8001cf2:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001cf4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001cf6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001cfa:	d00a      	beq.n	8001d12 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001cfc:	6802      	ldr	r2, [r0, #0]
 8001cfe:	6853      	ldr	r3, [r2, #4]
 8001d00:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001d04:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001d06:	430b      	orrs	r3, r1
 8001d08:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001d0a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001d0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d10:	d00b      	beq.n	8001d2a <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001d12:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d14:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001d18:	d006      	beq.n	8001d28 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001d1a:	6802      	ldr	r2, [r0, #0]
 8001d1c:	6853      	ldr	r3, [r2, #4]
 8001d1e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001d22:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001d24:	430b      	orrs	r3, r1
 8001d26:	6053      	str	r3, [r2, #4]
  }
}
 8001d28:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001d2a:	6802      	ldr	r2, [r0, #0]
 8001d2c:	6853      	ldr	r3, [r2, #4]
 8001d2e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001d32:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001d34:	430b      	orrs	r3, r1
 8001d36:	6053      	str	r3, [r2, #4]
 8001d38:	e7eb      	b.n	8001d12 <UART_AdvFeatureConfig+0xa2>

08001d3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001d3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d3e:	4605      	mov	r5, r0
 8001d40:	460f      	mov	r7, r1
 8001d42:	4616      	mov	r6, r2
 8001d44:	4699      	mov	r9, r3
 8001d46:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d4a:	682c      	ldr	r4, [r5, #0]
 8001d4c:	69e4      	ldr	r4, [r4, #28]
 8001d4e:	ea37 0304 	bics.w	r3, r7, r4
 8001d52:	bf0c      	ite	eq
 8001d54:	2401      	moveq	r4, #1
 8001d56:	2400      	movne	r4, #0
 8001d58:	42b4      	cmp	r4, r6
 8001d5a:	d13c      	bne.n	8001dd6 <UART_WaitOnFlagUntilTimeout+0x9c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d5c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001d60:	d0f3      	beq.n	8001d4a <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d62:	f7fe fe29 	bl	80009b8 <HAL_GetTick>
 8001d66:	eba0 0009 	sub.w	r0, r0, r9
 8001d6a:	4540      	cmp	r0, r8
 8001d6c:	d821      	bhi.n	8001db2 <UART_WaitOnFlagUntilTimeout+0x78>
 8001d6e:	f1b8 0f00 	cmp.w	r8, #0
 8001d72:	d01e      	beq.n	8001db2 <UART_WaitOnFlagUntilTimeout+0x78>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001d74:	682b      	ldr	r3, [r5, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	f012 0f04 	tst.w	r2, #4
 8001d7c:	d0e5      	beq.n	8001d4a <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001d7e:	69da      	ldr	r2, [r3, #28]
 8001d80:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001d84:	d0e1      	beq.n	8001d4a <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001d86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d8a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d8c:	682a      	ldr	r2, [r5, #0]
 8001d8e:	6813      	ldr	r3, [r2, #0]
 8001d90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001d94:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d96:	682a      	ldr	r2, [r5, #0]
 8001d98:	6893      	ldr	r3, [r2, #8]
 8001d9a:	f023 0301 	bic.w	r3, r3, #1
 8001d9e:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 8001da0:	2320      	movs	r3, #32
 8001da2:	676b      	str	r3, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001da4:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001da6:	67eb      	str	r3, [r5, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001da8:	2300      	movs	r3, #0
 8001daa:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8001dae:	2003      	movs	r0, #3
 8001db0:	e012      	b.n	8001dd8 <UART_WaitOnFlagUntilTimeout+0x9e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001db2:	682a      	ldr	r2, [r5, #0]
 8001db4:	6813      	ldr	r3, [r2, #0]
 8001db6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001dba:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dbc:	682a      	ldr	r2, [r5, #0]
 8001dbe:	6893      	ldr	r3, [r2, #8]
 8001dc0:	f023 0301 	bic.w	r3, r3, #1
 8001dc4:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001dc6:	2320      	movs	r3, #32
 8001dc8:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001dca:	67ab      	str	r3, [r5, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
        return HAL_TIMEOUT;
 8001dd2:	2003      	movs	r0, #3
 8001dd4:	e000      	b.n	8001dd8 <UART_WaitOnFlagUntilTimeout+0x9e>
        }
      }
    }
  }
  return HAL_OK;
 8001dd6:	2000      	movs	r0, #0
}
 8001dd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001ddc <HAL_UART_Transmit>:
{
 8001ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001de4:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001de6:	2b20      	cmp	r3, #32
 8001de8:	d159      	bne.n	8001e9e <HAL_UART_Transmit+0xc2>
 8001dea:	4604      	mov	r4, r0
 8001dec:	460d      	mov	r5, r1
 8001dee:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001df0:	fab2 f382 	clz	r3, r2
 8001df4:	095b      	lsrs	r3, r3, #5
 8001df6:	2900      	cmp	r1, #0
 8001df8:	bf08      	it	eq
 8001dfa:	2301      	moveq	r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d152      	bne.n	8001ea6 <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 8001e00:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d050      	beq.n	8001eaa <HAL_UART_Transmit+0xce>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e12:	2321      	movs	r3, #33	; 0x21
 8001e14:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8001e16:	f7fe fdcf 	bl	80009b8 <HAL_GetTick>
 8001e1a:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8001e1c:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8001e20:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e24:	68a3      	ldr	r3, [r4, #8]
 8001e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e2a:	d005      	beq.n	8001e38 <HAL_UART_Transmit+0x5c>
      pdata16bits = NULL;
 8001e2c:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8001e30:	2300      	movs	r3, #0
 8001e32:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 8001e36:	e014      	b.n	8001e62 <HAL_UART_Transmit+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e38:	6923      	ldr	r3, [r4, #16]
 8001e3a:	b113      	cbz	r3, 8001e42 <HAL_UART_Transmit+0x66>
      pdata16bits = NULL;
 8001e3c:	f04f 0800 	mov.w	r8, #0
 8001e40:	e7f6      	b.n	8001e30 <HAL_UART_Transmit+0x54>
      pdata16bits = (uint16_t *) pData;
 8001e42:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001e44:	2500      	movs	r5, #0
 8001e46:	e7f3      	b.n	8001e30 <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e48:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001e4c:	6822      	ldr	r2, [r4, #0]
 8001e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e52:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001e54:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001e58:	b292      	uxth	r2, r2
 8001e5a:	3a01      	subs	r2, #1
 8001e5c:	b292      	uxth	r2, r2
 8001e5e:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8001e62:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	b173      	cbz	r3, 8001e88 <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e6a:	9600      	str	r6, [sp, #0]
 8001e6c:	463b      	mov	r3, r7
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2180      	movs	r1, #128	; 0x80
 8001e72:	4620      	mov	r0, r4
 8001e74:	f7ff ff61 	bl	8001d3a <UART_WaitOnFlagUntilTimeout>
 8001e78:	b9c8      	cbnz	r0, 8001eae <HAL_UART_Transmit+0xd2>
      if (pdata8bits == NULL)
 8001e7a:	2d00      	cmp	r5, #0
 8001e7c:	d0e4      	beq.n	8001e48 <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e7e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001e82:	6823      	ldr	r3, [r4, #0]
 8001e84:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001e86:	e7e5      	b.n	8001e54 <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e88:	9600      	str	r6, [sp, #0]
 8001e8a:	463b      	mov	r3, r7
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2140      	movs	r1, #64	; 0x40
 8001e90:	4620      	mov	r0, r4
 8001e92:	f7ff ff52 	bl	8001d3a <UART_WaitOnFlagUntilTimeout>
 8001e96:	b960      	cbnz	r0, 8001eb2 <HAL_UART_Transmit+0xd6>
    huart->gState = HAL_UART_STATE_READY;
 8001e98:	2320      	movs	r3, #32
 8001e9a:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8001e9c:	e000      	b.n	8001ea0 <HAL_UART_Transmit+0xc4>
    return HAL_BUSY;
 8001e9e:	2002      	movs	r0, #2
}
 8001ea0:	b002      	add	sp, #8
 8001ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001ea6:	2001      	movs	r0, #1
 8001ea8:	e7fa      	b.n	8001ea0 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8001eaa:	2002      	movs	r0, #2
 8001eac:	e7f8      	b.n	8001ea0 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8001eae:	2003      	movs	r0, #3
 8001eb0:	e7f6      	b.n	8001ea0 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8001eb2:	2003      	movs	r0, #3
 8001eb4:	e7f4      	b.n	8001ea0 <HAL_UART_Transmit+0xc4>

08001eb6 <HAL_UART_Receive>:
{
 8001eb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ebe:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001ec0:	2b20      	cmp	r3, #32
 8001ec2:	f040 8081 	bne.w	8001fc8 <HAL_UART_Receive+0x112>
 8001ec6:	4604      	mov	r4, r0
 8001ec8:	460d      	mov	r5, r1
 8001eca:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001ecc:	fab2 f382 	clz	r3, r2
 8001ed0:	095b      	lsrs	r3, r3, #5
 8001ed2:	2900      	cmp	r1, #0
 8001ed4:	bf08      	it	eq
 8001ed6:	2301      	moveq	r3, #1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d179      	bne.n	8001fd0 <HAL_UART_Receive+0x11a>
    __HAL_LOCK(huart);
 8001edc:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d077      	beq.n	8001fd4 <HAL_UART_Receive+0x11e>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001eee:	2322      	movs	r3, #34	; 0x22
 8001ef0:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8001ef2:	f7fe fd61 	bl	80009b8 <HAL_GetTick>
 8001ef6:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 8001ef8:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 8001efc:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001f00:	68a3      	ldr	r3, [r4, #8]
 8001f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f06:	d006      	beq.n	8001f16 <HAL_UART_Receive+0x60>
 8001f08:	b9a3      	cbnz	r3, 8001f34 <HAL_UART_Receive+0x7e>
 8001f0a:	6922      	ldr	r2, [r4, #16]
 8001f0c:	b972      	cbnz	r2, 8001f2c <HAL_UART_Receive+0x76>
 8001f0e:	22ff      	movs	r2, #255	; 0xff
 8001f10:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001f14:	e014      	b.n	8001f40 <HAL_UART_Receive+0x8a>
 8001f16:	6922      	ldr	r2, [r4, #16]
 8001f18:	b922      	cbnz	r2, 8001f24 <HAL_UART_Receive+0x6e>
 8001f1a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001f1e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001f22:	e00d      	b.n	8001f40 <HAL_UART_Receive+0x8a>
 8001f24:	22ff      	movs	r2, #255	; 0xff
 8001f26:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001f2a:	e009      	b.n	8001f40 <HAL_UART_Receive+0x8a>
 8001f2c:	227f      	movs	r2, #127	; 0x7f
 8001f2e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001f32:	e005      	b.n	8001f40 <HAL_UART_Receive+0x8a>
 8001f34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f38:	d00d      	beq.n	8001f56 <HAL_UART_Receive+0xa0>
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8001f40:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f48:	d00f      	beq.n	8001f6a <HAL_UART_Receive+0xb4>
      pdata16bits = NULL;
 8001f4a:	f04f 0900 	mov.w	r9, #0
    __HAL_UNLOCK(huart);
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->RxXferCount > 0U)
 8001f54:	e01e      	b.n	8001f94 <HAL_UART_Receive+0xde>
    UART_MASK_COMPUTATION(huart);
 8001f56:	6922      	ldr	r2, [r4, #16]
 8001f58:	b91a      	cbnz	r2, 8001f62 <HAL_UART_Receive+0xac>
 8001f5a:	227f      	movs	r2, #127	; 0x7f
 8001f5c:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001f60:	e7ee      	b.n	8001f40 <HAL_UART_Receive+0x8a>
 8001f62:	223f      	movs	r2, #63	; 0x3f
 8001f64:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001f68:	e7ea      	b.n	8001f40 <HAL_UART_Receive+0x8a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f6a:	6923      	ldr	r3, [r4, #16]
 8001f6c:	b113      	cbz	r3, 8001f74 <HAL_UART_Receive+0xbe>
      pdata16bits = NULL;
 8001f6e:	f04f 0900 	mov.w	r9, #0
 8001f72:	e7ec      	b.n	8001f4e <HAL_UART_Receive+0x98>
      pdata16bits = (uint16_t *) pData;
 8001f74:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8001f76:	2500      	movs	r5, #0
 8001f78:	e7e9      	b.n	8001f4e <HAL_UART_Receive+0x98>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001f7a:	6823      	ldr	r3, [r4, #0]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	ea08 0303 	and.w	r3, r8, r3
 8001f82:	f829 3b02 	strh.w	r3, [r9], #2
      huart->RxXferCount--;
 8001f86:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8001f8a:	b292      	uxth	r2, r2
 8001f8c:	3a01      	subs	r2, #1
 8001f8e:	b292      	uxth	r2, r2
 8001f90:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8001f94:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	b18b      	cbz	r3, 8001fc0 <HAL_UART_Receive+0x10a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001f9c:	9600      	str	r6, [sp, #0]
 8001f9e:	463b      	mov	r3, r7
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2120      	movs	r1, #32
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	f7ff fec8 	bl	8001d3a <UART_WaitOnFlagUntilTimeout>
 8001faa:	b9a8      	cbnz	r0, 8001fd8 <HAL_UART_Receive+0x122>
      if (pdata8bits == NULL)
 8001fac:	2d00      	cmp	r5, #0
 8001fae:	d0e4      	beq.n	8001f7a <HAL_UART_Receive+0xc4>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001fb0:	6823      	ldr	r3, [r4, #0]
 8001fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fb4:	fa5f f388 	uxtb.w	r3, r8
 8001fb8:	4013      	ands	r3, r2
 8001fba:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 8001fbe:	e7e2      	b.n	8001f86 <HAL_UART_Receive+0xd0>
    huart->RxState = HAL_UART_STATE_READY;
 8001fc0:	2320      	movs	r3, #32
 8001fc2:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	e000      	b.n	8001fca <HAL_UART_Receive+0x114>
    return HAL_BUSY;
 8001fc8:	2002      	movs	r0, #2
}
 8001fca:	b003      	add	sp, #12
 8001fcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	e7fa      	b.n	8001fca <HAL_UART_Receive+0x114>
    __HAL_LOCK(huart);
 8001fd4:	2002      	movs	r0, #2
 8001fd6:	e7f8      	b.n	8001fca <HAL_UART_Receive+0x114>
        return HAL_TIMEOUT;
 8001fd8:	2003      	movs	r0, #3
 8001fda:	e7f6      	b.n	8001fca <HAL_UART_Receive+0x114>

08001fdc <UART_CheckIdleState>:
{
 8001fdc:	b530      	push	{r4, r5, lr}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001fe6:	f7fe fce7 	bl	80009b8 <HAL_GetTick>
 8001fea:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001fec:	6823      	ldr	r3, [r4, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f013 0f08 	tst.w	r3, #8
 8001ff4:	d10c      	bne.n	8002010 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001ff6:	6823      	ldr	r3, [r4, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f013 0f04 	tst.w	r3, #4
 8001ffe:	d115      	bne.n	800202c <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8002000:	2320      	movs	r3, #32
 8002002:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002004:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8002006:	2000      	movs	r0, #0
 8002008:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 800200c:	b003      	add	sp, #12
 800200e:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002010:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	4603      	mov	r3, r0
 8002018:	2200      	movs	r2, #0
 800201a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800201e:	4620      	mov	r0, r4
 8002020:	f7ff fe8b 	bl	8001d3a <UART_WaitOnFlagUntilTimeout>
 8002024:	2800      	cmp	r0, #0
 8002026:	d0e6      	beq.n	8001ff6 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8002028:	2003      	movs	r0, #3
 800202a:	e7ef      	b.n	800200c <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800202c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	462b      	mov	r3, r5
 8002034:	2200      	movs	r2, #0
 8002036:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800203a:	4620      	mov	r0, r4
 800203c:	f7ff fe7d 	bl	8001d3a <UART_WaitOnFlagUntilTimeout>
 8002040:	2800      	cmp	r0, #0
 8002042:	d0dd      	beq.n	8002000 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8002044:	2003      	movs	r0, #3
 8002046:	e7e1      	b.n	800200c <UART_CheckIdleState+0x30>

08002048 <HAL_UART_Init>:
  if (huart == NULL)
 8002048:	b368      	cbz	r0, 80020a6 <HAL_UART_Init+0x5e>
{
 800204a:	b510      	push	{r4, lr}
 800204c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800204e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002050:	b303      	cbz	r3, 8002094 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8002052:	2324      	movs	r3, #36	; 0x24
 8002054:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002056:	6822      	ldr	r2, [r4, #0]
 8002058:	6813      	ldr	r3, [r2, #0]
 800205a:	f023 0301 	bic.w	r3, r3, #1
 800205e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002060:	4620      	mov	r0, r4
 8002062:	f7ff fc35 	bl	80018d0 <UART_SetConfig>
 8002066:	2801      	cmp	r0, #1
 8002068:	d013      	beq.n	8002092 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800206a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800206c:	b9bb      	cbnz	r3, 800209e <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800206e:	6822      	ldr	r2, [r4, #0]
 8002070:	6853      	ldr	r3, [r2, #4]
 8002072:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002076:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002078:	6822      	ldr	r2, [r4, #0]
 800207a:	6893      	ldr	r3, [r2, #8]
 800207c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002080:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002082:	6822      	ldr	r2, [r4, #0]
 8002084:	6813      	ldr	r3, [r2, #0]
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800208c:	4620      	mov	r0, r4
 800208e:	f7ff ffa5 	bl	8001fdc <UART_CheckIdleState>
}
 8002092:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002094:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002098:	f7fe fb7c 	bl	8000794 <HAL_UART_MspInit>
 800209c:	e7d9      	b.n	8002052 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 800209e:	4620      	mov	r0, r4
 80020a0:	f7ff fde6 	bl	8001c70 <UART_AdvFeatureConfig>
 80020a4:	e7e3      	b.n	800206e <HAL_UART_Init+0x26>
    return HAL_ERROR;
 80020a6:	2001      	movs	r0, #1
}
 80020a8:	4770      	bx	lr
	...

080020ac <__libc_init_array>:
 80020ac:	b570      	push	{r4, r5, r6, lr}
 80020ae:	4d0d      	ldr	r5, [pc, #52]	; (80020e4 <__libc_init_array+0x38>)
 80020b0:	4c0d      	ldr	r4, [pc, #52]	; (80020e8 <__libc_init_array+0x3c>)
 80020b2:	1b64      	subs	r4, r4, r5
 80020b4:	10a4      	asrs	r4, r4, #2
 80020b6:	2600      	movs	r6, #0
 80020b8:	42a6      	cmp	r6, r4
 80020ba:	d109      	bne.n	80020d0 <__libc_init_array+0x24>
 80020bc:	4d0b      	ldr	r5, [pc, #44]	; (80020ec <__libc_init_array+0x40>)
 80020be:	4c0c      	ldr	r4, [pc, #48]	; (80020f0 <__libc_init_array+0x44>)
 80020c0:	f000 fd14 	bl	8002aec <_init>
 80020c4:	1b64      	subs	r4, r4, r5
 80020c6:	10a4      	asrs	r4, r4, #2
 80020c8:	2600      	movs	r6, #0
 80020ca:	42a6      	cmp	r6, r4
 80020cc:	d105      	bne.n	80020da <__libc_init_array+0x2e>
 80020ce:	bd70      	pop	{r4, r5, r6, pc}
 80020d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80020d4:	4798      	blx	r3
 80020d6:	3601      	adds	r6, #1
 80020d8:	e7ee      	b.n	80020b8 <__libc_init_array+0xc>
 80020da:	f855 3b04 	ldr.w	r3, [r5], #4
 80020de:	4798      	blx	r3
 80020e0:	3601      	adds	r6, #1
 80020e2:	e7f2      	b.n	80020ca <__libc_init_array+0x1e>
 80020e4:	08002bb4 	.word	0x08002bb4
 80020e8:	08002bb4 	.word	0x08002bb4
 80020ec:	08002bb4 	.word	0x08002bb4
 80020f0:	08002bb8 	.word	0x08002bb8

080020f4 <memset>:
 80020f4:	4402      	add	r2, r0
 80020f6:	4603      	mov	r3, r0
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d100      	bne.n	80020fe <memset+0xa>
 80020fc:	4770      	bx	lr
 80020fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002102:	e7f9      	b.n	80020f8 <memset+0x4>

08002104 <_puts_r>:
 8002104:	b570      	push	{r4, r5, r6, lr}
 8002106:	460e      	mov	r6, r1
 8002108:	4605      	mov	r5, r0
 800210a:	b118      	cbz	r0, 8002114 <_puts_r+0x10>
 800210c:	6983      	ldr	r3, [r0, #24]
 800210e:	b90b      	cbnz	r3, 8002114 <_puts_r+0x10>
 8002110:	f000 fa48 	bl	80025a4 <__sinit>
 8002114:	69ab      	ldr	r3, [r5, #24]
 8002116:	68ac      	ldr	r4, [r5, #8]
 8002118:	b913      	cbnz	r3, 8002120 <_puts_r+0x1c>
 800211a:	4628      	mov	r0, r5
 800211c:	f000 fa42 	bl	80025a4 <__sinit>
 8002120:	4b2c      	ldr	r3, [pc, #176]	; (80021d4 <_puts_r+0xd0>)
 8002122:	429c      	cmp	r4, r3
 8002124:	d120      	bne.n	8002168 <_puts_r+0x64>
 8002126:	686c      	ldr	r4, [r5, #4]
 8002128:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800212a:	07db      	lsls	r3, r3, #31
 800212c:	d405      	bmi.n	800213a <_puts_r+0x36>
 800212e:	89a3      	ldrh	r3, [r4, #12]
 8002130:	0598      	lsls	r0, r3, #22
 8002132:	d402      	bmi.n	800213a <_puts_r+0x36>
 8002134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002136:	f000 fad3 	bl	80026e0 <__retarget_lock_acquire_recursive>
 800213a:	89a3      	ldrh	r3, [r4, #12]
 800213c:	0719      	lsls	r1, r3, #28
 800213e:	d51d      	bpl.n	800217c <_puts_r+0x78>
 8002140:	6923      	ldr	r3, [r4, #16]
 8002142:	b1db      	cbz	r3, 800217c <_puts_r+0x78>
 8002144:	3e01      	subs	r6, #1
 8002146:	68a3      	ldr	r3, [r4, #8]
 8002148:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800214c:	3b01      	subs	r3, #1
 800214e:	60a3      	str	r3, [r4, #8]
 8002150:	bb39      	cbnz	r1, 80021a2 <_puts_r+0x9e>
 8002152:	2b00      	cmp	r3, #0
 8002154:	da38      	bge.n	80021c8 <_puts_r+0xc4>
 8002156:	4622      	mov	r2, r4
 8002158:	210a      	movs	r1, #10
 800215a:	4628      	mov	r0, r5
 800215c:	f000 f848 	bl	80021f0 <__swbuf_r>
 8002160:	3001      	adds	r0, #1
 8002162:	d011      	beq.n	8002188 <_puts_r+0x84>
 8002164:	250a      	movs	r5, #10
 8002166:	e011      	b.n	800218c <_puts_r+0x88>
 8002168:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <_puts_r+0xd4>)
 800216a:	429c      	cmp	r4, r3
 800216c:	d101      	bne.n	8002172 <_puts_r+0x6e>
 800216e:	68ac      	ldr	r4, [r5, #8]
 8002170:	e7da      	b.n	8002128 <_puts_r+0x24>
 8002172:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <_puts_r+0xd8>)
 8002174:	429c      	cmp	r4, r3
 8002176:	bf08      	it	eq
 8002178:	68ec      	ldreq	r4, [r5, #12]
 800217a:	e7d5      	b.n	8002128 <_puts_r+0x24>
 800217c:	4621      	mov	r1, r4
 800217e:	4628      	mov	r0, r5
 8002180:	f000 f888 	bl	8002294 <__swsetup_r>
 8002184:	2800      	cmp	r0, #0
 8002186:	d0dd      	beq.n	8002144 <_puts_r+0x40>
 8002188:	f04f 35ff 	mov.w	r5, #4294967295
 800218c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800218e:	07da      	lsls	r2, r3, #31
 8002190:	d405      	bmi.n	800219e <_puts_r+0x9a>
 8002192:	89a3      	ldrh	r3, [r4, #12]
 8002194:	059b      	lsls	r3, r3, #22
 8002196:	d402      	bmi.n	800219e <_puts_r+0x9a>
 8002198:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800219a:	f000 faa2 	bl	80026e2 <__retarget_lock_release_recursive>
 800219e:	4628      	mov	r0, r5
 80021a0:	bd70      	pop	{r4, r5, r6, pc}
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	da04      	bge.n	80021b0 <_puts_r+0xac>
 80021a6:	69a2      	ldr	r2, [r4, #24]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	dc06      	bgt.n	80021ba <_puts_r+0xb6>
 80021ac:	290a      	cmp	r1, #10
 80021ae:	d004      	beq.n	80021ba <_puts_r+0xb6>
 80021b0:	6823      	ldr	r3, [r4, #0]
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	6022      	str	r2, [r4, #0]
 80021b6:	7019      	strb	r1, [r3, #0]
 80021b8:	e7c5      	b.n	8002146 <_puts_r+0x42>
 80021ba:	4622      	mov	r2, r4
 80021bc:	4628      	mov	r0, r5
 80021be:	f000 f817 	bl	80021f0 <__swbuf_r>
 80021c2:	3001      	adds	r0, #1
 80021c4:	d1bf      	bne.n	8002146 <_puts_r+0x42>
 80021c6:	e7df      	b.n	8002188 <_puts_r+0x84>
 80021c8:	6823      	ldr	r3, [r4, #0]
 80021ca:	250a      	movs	r5, #10
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	6022      	str	r2, [r4, #0]
 80021d0:	701d      	strb	r5, [r3, #0]
 80021d2:	e7db      	b.n	800218c <_puts_r+0x88>
 80021d4:	08002b6c 	.word	0x08002b6c
 80021d8:	08002b8c 	.word	0x08002b8c
 80021dc:	08002b4c 	.word	0x08002b4c

080021e0 <puts>:
 80021e0:	4b02      	ldr	r3, [pc, #8]	; (80021ec <puts+0xc>)
 80021e2:	4601      	mov	r1, r0
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	f7ff bf8d 	b.w	8002104 <_puts_r>
 80021ea:	bf00      	nop
 80021ec:	2000000c 	.word	0x2000000c

080021f0 <__swbuf_r>:
 80021f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f2:	460e      	mov	r6, r1
 80021f4:	4614      	mov	r4, r2
 80021f6:	4605      	mov	r5, r0
 80021f8:	b118      	cbz	r0, 8002202 <__swbuf_r+0x12>
 80021fa:	6983      	ldr	r3, [r0, #24]
 80021fc:	b90b      	cbnz	r3, 8002202 <__swbuf_r+0x12>
 80021fe:	f000 f9d1 	bl	80025a4 <__sinit>
 8002202:	4b21      	ldr	r3, [pc, #132]	; (8002288 <__swbuf_r+0x98>)
 8002204:	429c      	cmp	r4, r3
 8002206:	d12b      	bne.n	8002260 <__swbuf_r+0x70>
 8002208:	686c      	ldr	r4, [r5, #4]
 800220a:	69a3      	ldr	r3, [r4, #24]
 800220c:	60a3      	str	r3, [r4, #8]
 800220e:	89a3      	ldrh	r3, [r4, #12]
 8002210:	071a      	lsls	r2, r3, #28
 8002212:	d52f      	bpl.n	8002274 <__swbuf_r+0x84>
 8002214:	6923      	ldr	r3, [r4, #16]
 8002216:	b36b      	cbz	r3, 8002274 <__swbuf_r+0x84>
 8002218:	6923      	ldr	r3, [r4, #16]
 800221a:	6820      	ldr	r0, [r4, #0]
 800221c:	1ac0      	subs	r0, r0, r3
 800221e:	6963      	ldr	r3, [r4, #20]
 8002220:	b2f6      	uxtb	r6, r6
 8002222:	4283      	cmp	r3, r0
 8002224:	4637      	mov	r7, r6
 8002226:	dc04      	bgt.n	8002232 <__swbuf_r+0x42>
 8002228:	4621      	mov	r1, r4
 800222a:	4628      	mov	r0, r5
 800222c:	f000 f926 	bl	800247c <_fflush_r>
 8002230:	bb30      	cbnz	r0, 8002280 <__swbuf_r+0x90>
 8002232:	68a3      	ldr	r3, [r4, #8]
 8002234:	3b01      	subs	r3, #1
 8002236:	60a3      	str	r3, [r4, #8]
 8002238:	6823      	ldr	r3, [r4, #0]
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	6022      	str	r2, [r4, #0]
 800223e:	701e      	strb	r6, [r3, #0]
 8002240:	6963      	ldr	r3, [r4, #20]
 8002242:	3001      	adds	r0, #1
 8002244:	4283      	cmp	r3, r0
 8002246:	d004      	beq.n	8002252 <__swbuf_r+0x62>
 8002248:	89a3      	ldrh	r3, [r4, #12]
 800224a:	07db      	lsls	r3, r3, #31
 800224c:	d506      	bpl.n	800225c <__swbuf_r+0x6c>
 800224e:	2e0a      	cmp	r6, #10
 8002250:	d104      	bne.n	800225c <__swbuf_r+0x6c>
 8002252:	4621      	mov	r1, r4
 8002254:	4628      	mov	r0, r5
 8002256:	f000 f911 	bl	800247c <_fflush_r>
 800225a:	b988      	cbnz	r0, 8002280 <__swbuf_r+0x90>
 800225c:	4638      	mov	r0, r7
 800225e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002260:	4b0a      	ldr	r3, [pc, #40]	; (800228c <__swbuf_r+0x9c>)
 8002262:	429c      	cmp	r4, r3
 8002264:	d101      	bne.n	800226a <__swbuf_r+0x7a>
 8002266:	68ac      	ldr	r4, [r5, #8]
 8002268:	e7cf      	b.n	800220a <__swbuf_r+0x1a>
 800226a:	4b09      	ldr	r3, [pc, #36]	; (8002290 <__swbuf_r+0xa0>)
 800226c:	429c      	cmp	r4, r3
 800226e:	bf08      	it	eq
 8002270:	68ec      	ldreq	r4, [r5, #12]
 8002272:	e7ca      	b.n	800220a <__swbuf_r+0x1a>
 8002274:	4621      	mov	r1, r4
 8002276:	4628      	mov	r0, r5
 8002278:	f000 f80c 	bl	8002294 <__swsetup_r>
 800227c:	2800      	cmp	r0, #0
 800227e:	d0cb      	beq.n	8002218 <__swbuf_r+0x28>
 8002280:	f04f 37ff 	mov.w	r7, #4294967295
 8002284:	e7ea      	b.n	800225c <__swbuf_r+0x6c>
 8002286:	bf00      	nop
 8002288:	08002b6c 	.word	0x08002b6c
 800228c:	08002b8c 	.word	0x08002b8c
 8002290:	08002b4c 	.word	0x08002b4c

08002294 <__swsetup_r>:
 8002294:	4b32      	ldr	r3, [pc, #200]	; (8002360 <__swsetup_r+0xcc>)
 8002296:	b570      	push	{r4, r5, r6, lr}
 8002298:	681d      	ldr	r5, [r3, #0]
 800229a:	4606      	mov	r6, r0
 800229c:	460c      	mov	r4, r1
 800229e:	b125      	cbz	r5, 80022aa <__swsetup_r+0x16>
 80022a0:	69ab      	ldr	r3, [r5, #24]
 80022a2:	b913      	cbnz	r3, 80022aa <__swsetup_r+0x16>
 80022a4:	4628      	mov	r0, r5
 80022a6:	f000 f97d 	bl	80025a4 <__sinit>
 80022aa:	4b2e      	ldr	r3, [pc, #184]	; (8002364 <__swsetup_r+0xd0>)
 80022ac:	429c      	cmp	r4, r3
 80022ae:	d10f      	bne.n	80022d0 <__swsetup_r+0x3c>
 80022b0:	686c      	ldr	r4, [r5, #4]
 80022b2:	89a3      	ldrh	r3, [r4, #12]
 80022b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80022b8:	0719      	lsls	r1, r3, #28
 80022ba:	d42c      	bmi.n	8002316 <__swsetup_r+0x82>
 80022bc:	06dd      	lsls	r5, r3, #27
 80022be:	d411      	bmi.n	80022e4 <__swsetup_r+0x50>
 80022c0:	2309      	movs	r3, #9
 80022c2:	6033      	str	r3, [r6, #0]
 80022c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80022c8:	81a3      	strh	r3, [r4, #12]
 80022ca:	f04f 30ff 	mov.w	r0, #4294967295
 80022ce:	e03e      	b.n	800234e <__swsetup_r+0xba>
 80022d0:	4b25      	ldr	r3, [pc, #148]	; (8002368 <__swsetup_r+0xd4>)
 80022d2:	429c      	cmp	r4, r3
 80022d4:	d101      	bne.n	80022da <__swsetup_r+0x46>
 80022d6:	68ac      	ldr	r4, [r5, #8]
 80022d8:	e7eb      	b.n	80022b2 <__swsetup_r+0x1e>
 80022da:	4b24      	ldr	r3, [pc, #144]	; (800236c <__swsetup_r+0xd8>)
 80022dc:	429c      	cmp	r4, r3
 80022de:	bf08      	it	eq
 80022e0:	68ec      	ldreq	r4, [r5, #12]
 80022e2:	e7e6      	b.n	80022b2 <__swsetup_r+0x1e>
 80022e4:	0758      	lsls	r0, r3, #29
 80022e6:	d512      	bpl.n	800230e <__swsetup_r+0x7a>
 80022e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022ea:	b141      	cbz	r1, 80022fe <__swsetup_r+0x6a>
 80022ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022f0:	4299      	cmp	r1, r3
 80022f2:	d002      	beq.n	80022fa <__swsetup_r+0x66>
 80022f4:	4630      	mov	r0, r6
 80022f6:	f000 fa59 	bl	80027ac <_free_r>
 80022fa:	2300      	movs	r3, #0
 80022fc:	6363      	str	r3, [r4, #52]	; 0x34
 80022fe:	89a3      	ldrh	r3, [r4, #12]
 8002300:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002304:	81a3      	strh	r3, [r4, #12]
 8002306:	2300      	movs	r3, #0
 8002308:	6063      	str	r3, [r4, #4]
 800230a:	6923      	ldr	r3, [r4, #16]
 800230c:	6023      	str	r3, [r4, #0]
 800230e:	89a3      	ldrh	r3, [r4, #12]
 8002310:	f043 0308 	orr.w	r3, r3, #8
 8002314:	81a3      	strh	r3, [r4, #12]
 8002316:	6923      	ldr	r3, [r4, #16]
 8002318:	b94b      	cbnz	r3, 800232e <__swsetup_r+0x9a>
 800231a:	89a3      	ldrh	r3, [r4, #12]
 800231c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002324:	d003      	beq.n	800232e <__swsetup_r+0x9a>
 8002326:	4621      	mov	r1, r4
 8002328:	4630      	mov	r0, r6
 800232a:	f000 f9ff 	bl	800272c <__smakebuf_r>
 800232e:	89a0      	ldrh	r0, [r4, #12]
 8002330:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002334:	f010 0301 	ands.w	r3, r0, #1
 8002338:	d00a      	beq.n	8002350 <__swsetup_r+0xbc>
 800233a:	2300      	movs	r3, #0
 800233c:	60a3      	str	r3, [r4, #8]
 800233e:	6963      	ldr	r3, [r4, #20]
 8002340:	425b      	negs	r3, r3
 8002342:	61a3      	str	r3, [r4, #24]
 8002344:	6923      	ldr	r3, [r4, #16]
 8002346:	b943      	cbnz	r3, 800235a <__swsetup_r+0xc6>
 8002348:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800234c:	d1ba      	bne.n	80022c4 <__swsetup_r+0x30>
 800234e:	bd70      	pop	{r4, r5, r6, pc}
 8002350:	0781      	lsls	r1, r0, #30
 8002352:	bf58      	it	pl
 8002354:	6963      	ldrpl	r3, [r4, #20]
 8002356:	60a3      	str	r3, [r4, #8]
 8002358:	e7f4      	b.n	8002344 <__swsetup_r+0xb0>
 800235a:	2000      	movs	r0, #0
 800235c:	e7f7      	b.n	800234e <__swsetup_r+0xba>
 800235e:	bf00      	nop
 8002360:	2000000c 	.word	0x2000000c
 8002364:	08002b6c 	.word	0x08002b6c
 8002368:	08002b8c 	.word	0x08002b8c
 800236c:	08002b4c 	.word	0x08002b4c

08002370 <__sflush_r>:
 8002370:	898a      	ldrh	r2, [r1, #12]
 8002372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002376:	4605      	mov	r5, r0
 8002378:	0710      	lsls	r0, r2, #28
 800237a:	460c      	mov	r4, r1
 800237c:	d458      	bmi.n	8002430 <__sflush_r+0xc0>
 800237e:	684b      	ldr	r3, [r1, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	dc05      	bgt.n	8002390 <__sflush_r+0x20>
 8002384:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002386:	2b00      	cmp	r3, #0
 8002388:	dc02      	bgt.n	8002390 <__sflush_r+0x20>
 800238a:	2000      	movs	r0, #0
 800238c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002390:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002392:	2e00      	cmp	r6, #0
 8002394:	d0f9      	beq.n	800238a <__sflush_r+0x1a>
 8002396:	2300      	movs	r3, #0
 8002398:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800239c:	682f      	ldr	r7, [r5, #0]
 800239e:	602b      	str	r3, [r5, #0]
 80023a0:	d032      	beq.n	8002408 <__sflush_r+0x98>
 80023a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80023a4:	89a3      	ldrh	r3, [r4, #12]
 80023a6:	075a      	lsls	r2, r3, #29
 80023a8:	d505      	bpl.n	80023b6 <__sflush_r+0x46>
 80023aa:	6863      	ldr	r3, [r4, #4]
 80023ac:	1ac0      	subs	r0, r0, r3
 80023ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80023b0:	b10b      	cbz	r3, 80023b6 <__sflush_r+0x46>
 80023b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023b4:	1ac0      	subs	r0, r0, r3
 80023b6:	2300      	movs	r3, #0
 80023b8:	4602      	mov	r2, r0
 80023ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80023bc:	6a21      	ldr	r1, [r4, #32]
 80023be:	4628      	mov	r0, r5
 80023c0:	47b0      	blx	r6
 80023c2:	1c43      	adds	r3, r0, #1
 80023c4:	89a3      	ldrh	r3, [r4, #12]
 80023c6:	d106      	bne.n	80023d6 <__sflush_r+0x66>
 80023c8:	6829      	ldr	r1, [r5, #0]
 80023ca:	291d      	cmp	r1, #29
 80023cc:	d82c      	bhi.n	8002428 <__sflush_r+0xb8>
 80023ce:	4a2a      	ldr	r2, [pc, #168]	; (8002478 <__sflush_r+0x108>)
 80023d0:	40ca      	lsrs	r2, r1
 80023d2:	07d6      	lsls	r6, r2, #31
 80023d4:	d528      	bpl.n	8002428 <__sflush_r+0xb8>
 80023d6:	2200      	movs	r2, #0
 80023d8:	6062      	str	r2, [r4, #4]
 80023da:	04d9      	lsls	r1, r3, #19
 80023dc:	6922      	ldr	r2, [r4, #16]
 80023de:	6022      	str	r2, [r4, #0]
 80023e0:	d504      	bpl.n	80023ec <__sflush_r+0x7c>
 80023e2:	1c42      	adds	r2, r0, #1
 80023e4:	d101      	bne.n	80023ea <__sflush_r+0x7a>
 80023e6:	682b      	ldr	r3, [r5, #0]
 80023e8:	b903      	cbnz	r3, 80023ec <__sflush_r+0x7c>
 80023ea:	6560      	str	r0, [r4, #84]	; 0x54
 80023ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80023ee:	602f      	str	r7, [r5, #0]
 80023f0:	2900      	cmp	r1, #0
 80023f2:	d0ca      	beq.n	800238a <__sflush_r+0x1a>
 80023f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80023f8:	4299      	cmp	r1, r3
 80023fa:	d002      	beq.n	8002402 <__sflush_r+0x92>
 80023fc:	4628      	mov	r0, r5
 80023fe:	f000 f9d5 	bl	80027ac <_free_r>
 8002402:	2000      	movs	r0, #0
 8002404:	6360      	str	r0, [r4, #52]	; 0x34
 8002406:	e7c1      	b.n	800238c <__sflush_r+0x1c>
 8002408:	6a21      	ldr	r1, [r4, #32]
 800240a:	2301      	movs	r3, #1
 800240c:	4628      	mov	r0, r5
 800240e:	47b0      	blx	r6
 8002410:	1c41      	adds	r1, r0, #1
 8002412:	d1c7      	bne.n	80023a4 <__sflush_r+0x34>
 8002414:	682b      	ldr	r3, [r5, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0c4      	beq.n	80023a4 <__sflush_r+0x34>
 800241a:	2b1d      	cmp	r3, #29
 800241c:	d001      	beq.n	8002422 <__sflush_r+0xb2>
 800241e:	2b16      	cmp	r3, #22
 8002420:	d101      	bne.n	8002426 <__sflush_r+0xb6>
 8002422:	602f      	str	r7, [r5, #0]
 8002424:	e7b1      	b.n	800238a <__sflush_r+0x1a>
 8002426:	89a3      	ldrh	r3, [r4, #12]
 8002428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800242c:	81a3      	strh	r3, [r4, #12]
 800242e:	e7ad      	b.n	800238c <__sflush_r+0x1c>
 8002430:	690f      	ldr	r7, [r1, #16]
 8002432:	2f00      	cmp	r7, #0
 8002434:	d0a9      	beq.n	800238a <__sflush_r+0x1a>
 8002436:	0793      	lsls	r3, r2, #30
 8002438:	680e      	ldr	r6, [r1, #0]
 800243a:	bf08      	it	eq
 800243c:	694b      	ldreq	r3, [r1, #20]
 800243e:	600f      	str	r7, [r1, #0]
 8002440:	bf18      	it	ne
 8002442:	2300      	movne	r3, #0
 8002444:	eba6 0807 	sub.w	r8, r6, r7
 8002448:	608b      	str	r3, [r1, #8]
 800244a:	f1b8 0f00 	cmp.w	r8, #0
 800244e:	dd9c      	ble.n	800238a <__sflush_r+0x1a>
 8002450:	6a21      	ldr	r1, [r4, #32]
 8002452:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002454:	4643      	mov	r3, r8
 8002456:	463a      	mov	r2, r7
 8002458:	4628      	mov	r0, r5
 800245a:	47b0      	blx	r6
 800245c:	2800      	cmp	r0, #0
 800245e:	dc06      	bgt.n	800246e <__sflush_r+0xfe>
 8002460:	89a3      	ldrh	r3, [r4, #12]
 8002462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002466:	81a3      	strh	r3, [r4, #12]
 8002468:	f04f 30ff 	mov.w	r0, #4294967295
 800246c:	e78e      	b.n	800238c <__sflush_r+0x1c>
 800246e:	4407      	add	r7, r0
 8002470:	eba8 0800 	sub.w	r8, r8, r0
 8002474:	e7e9      	b.n	800244a <__sflush_r+0xda>
 8002476:	bf00      	nop
 8002478:	20400001 	.word	0x20400001

0800247c <_fflush_r>:
 800247c:	b538      	push	{r3, r4, r5, lr}
 800247e:	690b      	ldr	r3, [r1, #16]
 8002480:	4605      	mov	r5, r0
 8002482:	460c      	mov	r4, r1
 8002484:	b913      	cbnz	r3, 800248c <_fflush_r+0x10>
 8002486:	2500      	movs	r5, #0
 8002488:	4628      	mov	r0, r5
 800248a:	bd38      	pop	{r3, r4, r5, pc}
 800248c:	b118      	cbz	r0, 8002496 <_fflush_r+0x1a>
 800248e:	6983      	ldr	r3, [r0, #24]
 8002490:	b90b      	cbnz	r3, 8002496 <_fflush_r+0x1a>
 8002492:	f000 f887 	bl	80025a4 <__sinit>
 8002496:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <_fflush_r+0x6c>)
 8002498:	429c      	cmp	r4, r3
 800249a:	d11b      	bne.n	80024d4 <_fflush_r+0x58>
 800249c:	686c      	ldr	r4, [r5, #4]
 800249e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0ef      	beq.n	8002486 <_fflush_r+0xa>
 80024a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80024a8:	07d0      	lsls	r0, r2, #31
 80024aa:	d404      	bmi.n	80024b6 <_fflush_r+0x3a>
 80024ac:	0599      	lsls	r1, r3, #22
 80024ae:	d402      	bmi.n	80024b6 <_fflush_r+0x3a>
 80024b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024b2:	f000 f915 	bl	80026e0 <__retarget_lock_acquire_recursive>
 80024b6:	4628      	mov	r0, r5
 80024b8:	4621      	mov	r1, r4
 80024ba:	f7ff ff59 	bl	8002370 <__sflush_r>
 80024be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80024c0:	07da      	lsls	r2, r3, #31
 80024c2:	4605      	mov	r5, r0
 80024c4:	d4e0      	bmi.n	8002488 <_fflush_r+0xc>
 80024c6:	89a3      	ldrh	r3, [r4, #12]
 80024c8:	059b      	lsls	r3, r3, #22
 80024ca:	d4dd      	bmi.n	8002488 <_fflush_r+0xc>
 80024cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024ce:	f000 f908 	bl	80026e2 <__retarget_lock_release_recursive>
 80024d2:	e7d9      	b.n	8002488 <_fflush_r+0xc>
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <_fflush_r+0x70>)
 80024d6:	429c      	cmp	r4, r3
 80024d8:	d101      	bne.n	80024de <_fflush_r+0x62>
 80024da:	68ac      	ldr	r4, [r5, #8]
 80024dc:	e7df      	b.n	800249e <_fflush_r+0x22>
 80024de:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <_fflush_r+0x74>)
 80024e0:	429c      	cmp	r4, r3
 80024e2:	bf08      	it	eq
 80024e4:	68ec      	ldreq	r4, [r5, #12]
 80024e6:	e7da      	b.n	800249e <_fflush_r+0x22>
 80024e8:	08002b6c 	.word	0x08002b6c
 80024ec:	08002b8c 	.word	0x08002b8c
 80024f0:	08002b4c 	.word	0x08002b4c

080024f4 <std>:
 80024f4:	2300      	movs	r3, #0
 80024f6:	b510      	push	{r4, lr}
 80024f8:	4604      	mov	r4, r0
 80024fa:	e9c0 3300 	strd	r3, r3, [r0]
 80024fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002502:	6083      	str	r3, [r0, #8]
 8002504:	8181      	strh	r1, [r0, #12]
 8002506:	6643      	str	r3, [r0, #100]	; 0x64
 8002508:	81c2      	strh	r2, [r0, #14]
 800250a:	6183      	str	r3, [r0, #24]
 800250c:	4619      	mov	r1, r3
 800250e:	2208      	movs	r2, #8
 8002510:	305c      	adds	r0, #92	; 0x5c
 8002512:	f7ff fdef 	bl	80020f4 <memset>
 8002516:	4b05      	ldr	r3, [pc, #20]	; (800252c <std+0x38>)
 8002518:	6263      	str	r3, [r4, #36]	; 0x24
 800251a:	4b05      	ldr	r3, [pc, #20]	; (8002530 <std+0x3c>)
 800251c:	62a3      	str	r3, [r4, #40]	; 0x28
 800251e:	4b05      	ldr	r3, [pc, #20]	; (8002534 <std+0x40>)
 8002520:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002522:	4b05      	ldr	r3, [pc, #20]	; (8002538 <std+0x44>)
 8002524:	6224      	str	r4, [r4, #32]
 8002526:	6323      	str	r3, [r4, #48]	; 0x30
 8002528:	bd10      	pop	{r4, pc}
 800252a:	bf00      	nop
 800252c:	08002921 	.word	0x08002921
 8002530:	08002943 	.word	0x08002943
 8002534:	0800297b 	.word	0x0800297b
 8002538:	0800299f 	.word	0x0800299f

0800253c <_cleanup_r>:
 800253c:	4901      	ldr	r1, [pc, #4]	; (8002544 <_cleanup_r+0x8>)
 800253e:	f000 b8af 	b.w	80026a0 <_fwalk_reent>
 8002542:	bf00      	nop
 8002544:	0800247d 	.word	0x0800247d

08002548 <__sfmoreglue>:
 8002548:	b570      	push	{r4, r5, r6, lr}
 800254a:	1e4a      	subs	r2, r1, #1
 800254c:	2568      	movs	r5, #104	; 0x68
 800254e:	4355      	muls	r5, r2
 8002550:	460e      	mov	r6, r1
 8002552:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002556:	f000 f979 	bl	800284c <_malloc_r>
 800255a:	4604      	mov	r4, r0
 800255c:	b140      	cbz	r0, 8002570 <__sfmoreglue+0x28>
 800255e:	2100      	movs	r1, #0
 8002560:	e9c0 1600 	strd	r1, r6, [r0]
 8002564:	300c      	adds	r0, #12
 8002566:	60a0      	str	r0, [r4, #8]
 8002568:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800256c:	f7ff fdc2 	bl	80020f4 <memset>
 8002570:	4620      	mov	r0, r4
 8002572:	bd70      	pop	{r4, r5, r6, pc}

08002574 <__sfp_lock_acquire>:
 8002574:	4801      	ldr	r0, [pc, #4]	; (800257c <__sfp_lock_acquire+0x8>)
 8002576:	f000 b8b3 	b.w	80026e0 <__retarget_lock_acquire_recursive>
 800257a:	bf00      	nop
 800257c:	20000184 	.word	0x20000184

08002580 <__sfp_lock_release>:
 8002580:	4801      	ldr	r0, [pc, #4]	; (8002588 <__sfp_lock_release+0x8>)
 8002582:	f000 b8ae 	b.w	80026e2 <__retarget_lock_release_recursive>
 8002586:	bf00      	nop
 8002588:	20000184 	.word	0x20000184

0800258c <__sinit_lock_acquire>:
 800258c:	4801      	ldr	r0, [pc, #4]	; (8002594 <__sinit_lock_acquire+0x8>)
 800258e:	f000 b8a7 	b.w	80026e0 <__retarget_lock_acquire_recursive>
 8002592:	bf00      	nop
 8002594:	2000017f 	.word	0x2000017f

08002598 <__sinit_lock_release>:
 8002598:	4801      	ldr	r0, [pc, #4]	; (80025a0 <__sinit_lock_release+0x8>)
 800259a:	f000 b8a2 	b.w	80026e2 <__retarget_lock_release_recursive>
 800259e:	bf00      	nop
 80025a0:	2000017f 	.word	0x2000017f

080025a4 <__sinit>:
 80025a4:	b510      	push	{r4, lr}
 80025a6:	4604      	mov	r4, r0
 80025a8:	f7ff fff0 	bl	800258c <__sinit_lock_acquire>
 80025ac:	69a3      	ldr	r3, [r4, #24]
 80025ae:	b11b      	cbz	r3, 80025b8 <__sinit+0x14>
 80025b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025b4:	f7ff bff0 	b.w	8002598 <__sinit_lock_release>
 80025b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80025bc:	6523      	str	r3, [r4, #80]	; 0x50
 80025be:	4b13      	ldr	r3, [pc, #76]	; (800260c <__sinit+0x68>)
 80025c0:	4a13      	ldr	r2, [pc, #76]	; (8002610 <__sinit+0x6c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80025c6:	42a3      	cmp	r3, r4
 80025c8:	bf04      	itt	eq
 80025ca:	2301      	moveq	r3, #1
 80025cc:	61a3      	streq	r3, [r4, #24]
 80025ce:	4620      	mov	r0, r4
 80025d0:	f000 f820 	bl	8002614 <__sfp>
 80025d4:	6060      	str	r0, [r4, #4]
 80025d6:	4620      	mov	r0, r4
 80025d8:	f000 f81c 	bl	8002614 <__sfp>
 80025dc:	60a0      	str	r0, [r4, #8]
 80025de:	4620      	mov	r0, r4
 80025e0:	f000 f818 	bl	8002614 <__sfp>
 80025e4:	2200      	movs	r2, #0
 80025e6:	60e0      	str	r0, [r4, #12]
 80025e8:	2104      	movs	r1, #4
 80025ea:	6860      	ldr	r0, [r4, #4]
 80025ec:	f7ff ff82 	bl	80024f4 <std>
 80025f0:	68a0      	ldr	r0, [r4, #8]
 80025f2:	2201      	movs	r2, #1
 80025f4:	2109      	movs	r1, #9
 80025f6:	f7ff ff7d 	bl	80024f4 <std>
 80025fa:	68e0      	ldr	r0, [r4, #12]
 80025fc:	2202      	movs	r2, #2
 80025fe:	2112      	movs	r1, #18
 8002600:	f7ff ff78 	bl	80024f4 <std>
 8002604:	2301      	movs	r3, #1
 8002606:	61a3      	str	r3, [r4, #24]
 8002608:	e7d2      	b.n	80025b0 <__sinit+0xc>
 800260a:	bf00      	nop
 800260c:	08002b48 	.word	0x08002b48
 8002610:	0800253d 	.word	0x0800253d

08002614 <__sfp>:
 8002614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002616:	4607      	mov	r7, r0
 8002618:	f7ff ffac 	bl	8002574 <__sfp_lock_acquire>
 800261c:	4b1e      	ldr	r3, [pc, #120]	; (8002698 <__sfp+0x84>)
 800261e:	681e      	ldr	r6, [r3, #0]
 8002620:	69b3      	ldr	r3, [r6, #24]
 8002622:	b913      	cbnz	r3, 800262a <__sfp+0x16>
 8002624:	4630      	mov	r0, r6
 8002626:	f7ff ffbd 	bl	80025a4 <__sinit>
 800262a:	3648      	adds	r6, #72	; 0x48
 800262c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002630:	3b01      	subs	r3, #1
 8002632:	d503      	bpl.n	800263c <__sfp+0x28>
 8002634:	6833      	ldr	r3, [r6, #0]
 8002636:	b30b      	cbz	r3, 800267c <__sfp+0x68>
 8002638:	6836      	ldr	r6, [r6, #0]
 800263a:	e7f7      	b.n	800262c <__sfp+0x18>
 800263c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002640:	b9d5      	cbnz	r5, 8002678 <__sfp+0x64>
 8002642:	4b16      	ldr	r3, [pc, #88]	; (800269c <__sfp+0x88>)
 8002644:	60e3      	str	r3, [r4, #12]
 8002646:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800264a:	6665      	str	r5, [r4, #100]	; 0x64
 800264c:	f000 f847 	bl	80026de <__retarget_lock_init_recursive>
 8002650:	f7ff ff96 	bl	8002580 <__sfp_lock_release>
 8002654:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002658:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800265c:	6025      	str	r5, [r4, #0]
 800265e:	61a5      	str	r5, [r4, #24]
 8002660:	2208      	movs	r2, #8
 8002662:	4629      	mov	r1, r5
 8002664:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002668:	f7ff fd44 	bl	80020f4 <memset>
 800266c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002670:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002674:	4620      	mov	r0, r4
 8002676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002678:	3468      	adds	r4, #104	; 0x68
 800267a:	e7d9      	b.n	8002630 <__sfp+0x1c>
 800267c:	2104      	movs	r1, #4
 800267e:	4638      	mov	r0, r7
 8002680:	f7ff ff62 	bl	8002548 <__sfmoreglue>
 8002684:	4604      	mov	r4, r0
 8002686:	6030      	str	r0, [r6, #0]
 8002688:	2800      	cmp	r0, #0
 800268a:	d1d5      	bne.n	8002638 <__sfp+0x24>
 800268c:	f7ff ff78 	bl	8002580 <__sfp_lock_release>
 8002690:	230c      	movs	r3, #12
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	e7ee      	b.n	8002674 <__sfp+0x60>
 8002696:	bf00      	nop
 8002698:	08002b48 	.word	0x08002b48
 800269c:	ffff0001 	.word	0xffff0001

080026a0 <_fwalk_reent>:
 80026a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026a4:	4606      	mov	r6, r0
 80026a6:	4688      	mov	r8, r1
 80026a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80026ac:	2700      	movs	r7, #0
 80026ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80026b2:	f1b9 0901 	subs.w	r9, r9, #1
 80026b6:	d505      	bpl.n	80026c4 <_fwalk_reent+0x24>
 80026b8:	6824      	ldr	r4, [r4, #0]
 80026ba:	2c00      	cmp	r4, #0
 80026bc:	d1f7      	bne.n	80026ae <_fwalk_reent+0xe>
 80026be:	4638      	mov	r0, r7
 80026c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026c4:	89ab      	ldrh	r3, [r5, #12]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d907      	bls.n	80026da <_fwalk_reent+0x3a>
 80026ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80026ce:	3301      	adds	r3, #1
 80026d0:	d003      	beq.n	80026da <_fwalk_reent+0x3a>
 80026d2:	4629      	mov	r1, r5
 80026d4:	4630      	mov	r0, r6
 80026d6:	47c0      	blx	r8
 80026d8:	4307      	orrs	r7, r0
 80026da:	3568      	adds	r5, #104	; 0x68
 80026dc:	e7e9      	b.n	80026b2 <_fwalk_reent+0x12>

080026de <__retarget_lock_init_recursive>:
 80026de:	4770      	bx	lr

080026e0 <__retarget_lock_acquire_recursive>:
 80026e0:	4770      	bx	lr

080026e2 <__retarget_lock_release_recursive>:
 80026e2:	4770      	bx	lr

080026e4 <__swhatbuf_r>:
 80026e4:	b570      	push	{r4, r5, r6, lr}
 80026e6:	460e      	mov	r6, r1
 80026e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026ec:	2900      	cmp	r1, #0
 80026ee:	b096      	sub	sp, #88	; 0x58
 80026f0:	4614      	mov	r4, r2
 80026f2:	461d      	mov	r5, r3
 80026f4:	da07      	bge.n	8002706 <__swhatbuf_r+0x22>
 80026f6:	2300      	movs	r3, #0
 80026f8:	602b      	str	r3, [r5, #0]
 80026fa:	89b3      	ldrh	r3, [r6, #12]
 80026fc:	061a      	lsls	r2, r3, #24
 80026fe:	d410      	bmi.n	8002722 <__swhatbuf_r+0x3e>
 8002700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002704:	e00e      	b.n	8002724 <__swhatbuf_r+0x40>
 8002706:	466a      	mov	r2, sp
 8002708:	f000 f970 	bl	80029ec <_fstat_r>
 800270c:	2800      	cmp	r0, #0
 800270e:	dbf2      	blt.n	80026f6 <__swhatbuf_r+0x12>
 8002710:	9a01      	ldr	r2, [sp, #4]
 8002712:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002716:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800271a:	425a      	negs	r2, r3
 800271c:	415a      	adcs	r2, r3
 800271e:	602a      	str	r2, [r5, #0]
 8002720:	e7ee      	b.n	8002700 <__swhatbuf_r+0x1c>
 8002722:	2340      	movs	r3, #64	; 0x40
 8002724:	2000      	movs	r0, #0
 8002726:	6023      	str	r3, [r4, #0]
 8002728:	b016      	add	sp, #88	; 0x58
 800272a:	bd70      	pop	{r4, r5, r6, pc}

0800272c <__smakebuf_r>:
 800272c:	898b      	ldrh	r3, [r1, #12]
 800272e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002730:	079d      	lsls	r5, r3, #30
 8002732:	4606      	mov	r6, r0
 8002734:	460c      	mov	r4, r1
 8002736:	d507      	bpl.n	8002748 <__smakebuf_r+0x1c>
 8002738:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800273c:	6023      	str	r3, [r4, #0]
 800273e:	6123      	str	r3, [r4, #16]
 8002740:	2301      	movs	r3, #1
 8002742:	6163      	str	r3, [r4, #20]
 8002744:	b002      	add	sp, #8
 8002746:	bd70      	pop	{r4, r5, r6, pc}
 8002748:	ab01      	add	r3, sp, #4
 800274a:	466a      	mov	r2, sp
 800274c:	f7ff ffca 	bl	80026e4 <__swhatbuf_r>
 8002750:	9900      	ldr	r1, [sp, #0]
 8002752:	4605      	mov	r5, r0
 8002754:	4630      	mov	r0, r6
 8002756:	f000 f879 	bl	800284c <_malloc_r>
 800275a:	b948      	cbnz	r0, 8002770 <__smakebuf_r+0x44>
 800275c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002760:	059a      	lsls	r2, r3, #22
 8002762:	d4ef      	bmi.n	8002744 <__smakebuf_r+0x18>
 8002764:	f023 0303 	bic.w	r3, r3, #3
 8002768:	f043 0302 	orr.w	r3, r3, #2
 800276c:	81a3      	strh	r3, [r4, #12]
 800276e:	e7e3      	b.n	8002738 <__smakebuf_r+0xc>
 8002770:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <__smakebuf_r+0x7c>)
 8002772:	62b3      	str	r3, [r6, #40]	; 0x28
 8002774:	89a3      	ldrh	r3, [r4, #12]
 8002776:	6020      	str	r0, [r4, #0]
 8002778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800277c:	81a3      	strh	r3, [r4, #12]
 800277e:	9b00      	ldr	r3, [sp, #0]
 8002780:	6163      	str	r3, [r4, #20]
 8002782:	9b01      	ldr	r3, [sp, #4]
 8002784:	6120      	str	r0, [r4, #16]
 8002786:	b15b      	cbz	r3, 80027a0 <__smakebuf_r+0x74>
 8002788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800278c:	4630      	mov	r0, r6
 800278e:	f000 f93f 	bl	8002a10 <_isatty_r>
 8002792:	b128      	cbz	r0, 80027a0 <__smakebuf_r+0x74>
 8002794:	89a3      	ldrh	r3, [r4, #12]
 8002796:	f023 0303 	bic.w	r3, r3, #3
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	81a3      	strh	r3, [r4, #12]
 80027a0:	89a0      	ldrh	r0, [r4, #12]
 80027a2:	4305      	orrs	r5, r0
 80027a4:	81a5      	strh	r5, [r4, #12]
 80027a6:	e7cd      	b.n	8002744 <__smakebuf_r+0x18>
 80027a8:	0800253d 	.word	0x0800253d

080027ac <_free_r>:
 80027ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80027ae:	2900      	cmp	r1, #0
 80027b0:	d048      	beq.n	8002844 <_free_r+0x98>
 80027b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027b6:	9001      	str	r0, [sp, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f1a1 0404 	sub.w	r4, r1, #4
 80027be:	bfb8      	it	lt
 80027c0:	18e4      	addlt	r4, r4, r3
 80027c2:	f000 f947 	bl	8002a54 <__malloc_lock>
 80027c6:	4a20      	ldr	r2, [pc, #128]	; (8002848 <_free_r+0x9c>)
 80027c8:	9801      	ldr	r0, [sp, #4]
 80027ca:	6813      	ldr	r3, [r2, #0]
 80027cc:	4615      	mov	r5, r2
 80027ce:	b933      	cbnz	r3, 80027de <_free_r+0x32>
 80027d0:	6063      	str	r3, [r4, #4]
 80027d2:	6014      	str	r4, [r2, #0]
 80027d4:	b003      	add	sp, #12
 80027d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80027da:	f000 b941 	b.w	8002a60 <__malloc_unlock>
 80027de:	42a3      	cmp	r3, r4
 80027e0:	d90b      	bls.n	80027fa <_free_r+0x4e>
 80027e2:	6821      	ldr	r1, [r4, #0]
 80027e4:	1862      	adds	r2, r4, r1
 80027e6:	4293      	cmp	r3, r2
 80027e8:	bf04      	itt	eq
 80027ea:	681a      	ldreq	r2, [r3, #0]
 80027ec:	685b      	ldreq	r3, [r3, #4]
 80027ee:	6063      	str	r3, [r4, #4]
 80027f0:	bf04      	itt	eq
 80027f2:	1852      	addeq	r2, r2, r1
 80027f4:	6022      	streq	r2, [r4, #0]
 80027f6:	602c      	str	r4, [r5, #0]
 80027f8:	e7ec      	b.n	80027d4 <_free_r+0x28>
 80027fa:	461a      	mov	r2, r3
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	b10b      	cbz	r3, 8002804 <_free_r+0x58>
 8002800:	42a3      	cmp	r3, r4
 8002802:	d9fa      	bls.n	80027fa <_free_r+0x4e>
 8002804:	6811      	ldr	r1, [r2, #0]
 8002806:	1855      	adds	r5, r2, r1
 8002808:	42a5      	cmp	r5, r4
 800280a:	d10b      	bne.n	8002824 <_free_r+0x78>
 800280c:	6824      	ldr	r4, [r4, #0]
 800280e:	4421      	add	r1, r4
 8002810:	1854      	adds	r4, r2, r1
 8002812:	42a3      	cmp	r3, r4
 8002814:	6011      	str	r1, [r2, #0]
 8002816:	d1dd      	bne.n	80027d4 <_free_r+0x28>
 8002818:	681c      	ldr	r4, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	6053      	str	r3, [r2, #4]
 800281e:	4421      	add	r1, r4
 8002820:	6011      	str	r1, [r2, #0]
 8002822:	e7d7      	b.n	80027d4 <_free_r+0x28>
 8002824:	d902      	bls.n	800282c <_free_r+0x80>
 8002826:	230c      	movs	r3, #12
 8002828:	6003      	str	r3, [r0, #0]
 800282a:	e7d3      	b.n	80027d4 <_free_r+0x28>
 800282c:	6825      	ldr	r5, [r4, #0]
 800282e:	1961      	adds	r1, r4, r5
 8002830:	428b      	cmp	r3, r1
 8002832:	bf04      	itt	eq
 8002834:	6819      	ldreq	r1, [r3, #0]
 8002836:	685b      	ldreq	r3, [r3, #4]
 8002838:	6063      	str	r3, [r4, #4]
 800283a:	bf04      	itt	eq
 800283c:	1949      	addeq	r1, r1, r5
 800283e:	6021      	streq	r1, [r4, #0]
 8002840:	6054      	str	r4, [r2, #4]
 8002842:	e7c7      	b.n	80027d4 <_free_r+0x28>
 8002844:	b003      	add	sp, #12
 8002846:	bd30      	pop	{r4, r5, pc}
 8002848:	2000008c 	.word	0x2000008c

0800284c <_malloc_r>:
 800284c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800284e:	1ccd      	adds	r5, r1, #3
 8002850:	f025 0503 	bic.w	r5, r5, #3
 8002854:	3508      	adds	r5, #8
 8002856:	2d0c      	cmp	r5, #12
 8002858:	bf38      	it	cc
 800285a:	250c      	movcc	r5, #12
 800285c:	2d00      	cmp	r5, #0
 800285e:	4606      	mov	r6, r0
 8002860:	db01      	blt.n	8002866 <_malloc_r+0x1a>
 8002862:	42a9      	cmp	r1, r5
 8002864:	d903      	bls.n	800286e <_malloc_r+0x22>
 8002866:	230c      	movs	r3, #12
 8002868:	6033      	str	r3, [r6, #0]
 800286a:	2000      	movs	r0, #0
 800286c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800286e:	f000 f8f1 	bl	8002a54 <__malloc_lock>
 8002872:	4921      	ldr	r1, [pc, #132]	; (80028f8 <_malloc_r+0xac>)
 8002874:	680a      	ldr	r2, [r1, #0]
 8002876:	4614      	mov	r4, r2
 8002878:	b99c      	cbnz	r4, 80028a2 <_malloc_r+0x56>
 800287a:	4f20      	ldr	r7, [pc, #128]	; (80028fc <_malloc_r+0xb0>)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	b923      	cbnz	r3, 800288a <_malloc_r+0x3e>
 8002880:	4621      	mov	r1, r4
 8002882:	4630      	mov	r0, r6
 8002884:	f000 f83c 	bl	8002900 <_sbrk_r>
 8002888:	6038      	str	r0, [r7, #0]
 800288a:	4629      	mov	r1, r5
 800288c:	4630      	mov	r0, r6
 800288e:	f000 f837 	bl	8002900 <_sbrk_r>
 8002892:	1c43      	adds	r3, r0, #1
 8002894:	d123      	bne.n	80028de <_malloc_r+0x92>
 8002896:	230c      	movs	r3, #12
 8002898:	6033      	str	r3, [r6, #0]
 800289a:	4630      	mov	r0, r6
 800289c:	f000 f8e0 	bl	8002a60 <__malloc_unlock>
 80028a0:	e7e3      	b.n	800286a <_malloc_r+0x1e>
 80028a2:	6823      	ldr	r3, [r4, #0]
 80028a4:	1b5b      	subs	r3, r3, r5
 80028a6:	d417      	bmi.n	80028d8 <_malloc_r+0x8c>
 80028a8:	2b0b      	cmp	r3, #11
 80028aa:	d903      	bls.n	80028b4 <_malloc_r+0x68>
 80028ac:	6023      	str	r3, [r4, #0]
 80028ae:	441c      	add	r4, r3
 80028b0:	6025      	str	r5, [r4, #0]
 80028b2:	e004      	b.n	80028be <_malloc_r+0x72>
 80028b4:	6863      	ldr	r3, [r4, #4]
 80028b6:	42a2      	cmp	r2, r4
 80028b8:	bf0c      	ite	eq
 80028ba:	600b      	streq	r3, [r1, #0]
 80028bc:	6053      	strne	r3, [r2, #4]
 80028be:	4630      	mov	r0, r6
 80028c0:	f000 f8ce 	bl	8002a60 <__malloc_unlock>
 80028c4:	f104 000b 	add.w	r0, r4, #11
 80028c8:	1d23      	adds	r3, r4, #4
 80028ca:	f020 0007 	bic.w	r0, r0, #7
 80028ce:	1ac2      	subs	r2, r0, r3
 80028d0:	d0cc      	beq.n	800286c <_malloc_r+0x20>
 80028d2:	1a1b      	subs	r3, r3, r0
 80028d4:	50a3      	str	r3, [r4, r2]
 80028d6:	e7c9      	b.n	800286c <_malloc_r+0x20>
 80028d8:	4622      	mov	r2, r4
 80028da:	6864      	ldr	r4, [r4, #4]
 80028dc:	e7cc      	b.n	8002878 <_malloc_r+0x2c>
 80028de:	1cc4      	adds	r4, r0, #3
 80028e0:	f024 0403 	bic.w	r4, r4, #3
 80028e4:	42a0      	cmp	r0, r4
 80028e6:	d0e3      	beq.n	80028b0 <_malloc_r+0x64>
 80028e8:	1a21      	subs	r1, r4, r0
 80028ea:	4630      	mov	r0, r6
 80028ec:	f000 f808 	bl	8002900 <_sbrk_r>
 80028f0:	3001      	adds	r0, #1
 80028f2:	d1dd      	bne.n	80028b0 <_malloc_r+0x64>
 80028f4:	e7cf      	b.n	8002896 <_malloc_r+0x4a>
 80028f6:	bf00      	nop
 80028f8:	2000008c 	.word	0x2000008c
 80028fc:	20000090 	.word	0x20000090

08002900 <_sbrk_r>:
 8002900:	b538      	push	{r3, r4, r5, lr}
 8002902:	4d06      	ldr	r5, [pc, #24]	; (800291c <_sbrk_r+0x1c>)
 8002904:	2300      	movs	r3, #0
 8002906:	4604      	mov	r4, r0
 8002908:	4608      	mov	r0, r1
 800290a:	602b      	str	r3, [r5, #0]
 800290c:	f000 f8e0 	bl	8002ad0 <_sbrk>
 8002910:	1c43      	adds	r3, r0, #1
 8002912:	d102      	bne.n	800291a <_sbrk_r+0x1a>
 8002914:	682b      	ldr	r3, [r5, #0]
 8002916:	b103      	cbz	r3, 800291a <_sbrk_r+0x1a>
 8002918:	6023      	str	r3, [r4, #0]
 800291a:	bd38      	pop	{r3, r4, r5, pc}
 800291c:	20000188 	.word	0x20000188

08002920 <__sread>:
 8002920:	b510      	push	{r4, lr}
 8002922:	460c      	mov	r4, r1
 8002924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002928:	f000 f8a0 	bl	8002a6c <_read_r>
 800292c:	2800      	cmp	r0, #0
 800292e:	bfab      	itete	ge
 8002930:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002932:	89a3      	ldrhlt	r3, [r4, #12]
 8002934:	181b      	addge	r3, r3, r0
 8002936:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800293a:	bfac      	ite	ge
 800293c:	6563      	strge	r3, [r4, #84]	; 0x54
 800293e:	81a3      	strhlt	r3, [r4, #12]
 8002940:	bd10      	pop	{r4, pc}

08002942 <__swrite>:
 8002942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002946:	461f      	mov	r7, r3
 8002948:	898b      	ldrh	r3, [r1, #12]
 800294a:	05db      	lsls	r3, r3, #23
 800294c:	4605      	mov	r5, r0
 800294e:	460c      	mov	r4, r1
 8002950:	4616      	mov	r6, r2
 8002952:	d505      	bpl.n	8002960 <__swrite+0x1e>
 8002954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002958:	2302      	movs	r3, #2
 800295a:	2200      	movs	r2, #0
 800295c:	f000 f868 	bl	8002a30 <_lseek_r>
 8002960:	89a3      	ldrh	r3, [r4, #12]
 8002962:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002966:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800296a:	81a3      	strh	r3, [r4, #12]
 800296c:	4632      	mov	r2, r6
 800296e:	463b      	mov	r3, r7
 8002970:	4628      	mov	r0, r5
 8002972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002976:	f000 b817 	b.w	80029a8 <_write_r>

0800297a <__sseek>:
 800297a:	b510      	push	{r4, lr}
 800297c:	460c      	mov	r4, r1
 800297e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002982:	f000 f855 	bl	8002a30 <_lseek_r>
 8002986:	1c43      	adds	r3, r0, #1
 8002988:	89a3      	ldrh	r3, [r4, #12]
 800298a:	bf15      	itete	ne
 800298c:	6560      	strne	r0, [r4, #84]	; 0x54
 800298e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002992:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002996:	81a3      	strheq	r3, [r4, #12]
 8002998:	bf18      	it	ne
 800299a:	81a3      	strhne	r3, [r4, #12]
 800299c:	bd10      	pop	{r4, pc}

0800299e <__sclose>:
 800299e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029a2:	f000 b813 	b.w	80029cc <_close_r>
	...

080029a8 <_write_r>:
 80029a8:	b538      	push	{r3, r4, r5, lr}
 80029aa:	4d07      	ldr	r5, [pc, #28]	; (80029c8 <_write_r+0x20>)
 80029ac:	4604      	mov	r4, r0
 80029ae:	4608      	mov	r0, r1
 80029b0:	4611      	mov	r1, r2
 80029b2:	2200      	movs	r2, #0
 80029b4:	602a      	str	r2, [r5, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	f7fd ff64 	bl	8000884 <_write>
 80029bc:	1c43      	adds	r3, r0, #1
 80029be:	d102      	bne.n	80029c6 <_write_r+0x1e>
 80029c0:	682b      	ldr	r3, [r5, #0]
 80029c2:	b103      	cbz	r3, 80029c6 <_write_r+0x1e>
 80029c4:	6023      	str	r3, [r4, #0]
 80029c6:	bd38      	pop	{r3, r4, r5, pc}
 80029c8:	20000188 	.word	0x20000188

080029cc <_close_r>:
 80029cc:	b538      	push	{r3, r4, r5, lr}
 80029ce:	4d06      	ldr	r5, [pc, #24]	; (80029e8 <_close_r+0x1c>)
 80029d0:	2300      	movs	r3, #0
 80029d2:	4604      	mov	r4, r0
 80029d4:	4608      	mov	r0, r1
 80029d6:	602b      	str	r3, [r5, #0]
 80029d8:	f000 f85a 	bl	8002a90 <_close>
 80029dc:	1c43      	adds	r3, r0, #1
 80029de:	d102      	bne.n	80029e6 <_close_r+0x1a>
 80029e0:	682b      	ldr	r3, [r5, #0]
 80029e2:	b103      	cbz	r3, 80029e6 <_close_r+0x1a>
 80029e4:	6023      	str	r3, [r4, #0]
 80029e6:	bd38      	pop	{r3, r4, r5, pc}
 80029e8:	20000188 	.word	0x20000188

080029ec <_fstat_r>:
 80029ec:	b538      	push	{r3, r4, r5, lr}
 80029ee:	4d07      	ldr	r5, [pc, #28]	; (8002a0c <_fstat_r+0x20>)
 80029f0:	2300      	movs	r3, #0
 80029f2:	4604      	mov	r4, r0
 80029f4:	4608      	mov	r0, r1
 80029f6:	4611      	mov	r1, r2
 80029f8:	602b      	str	r3, [r5, #0]
 80029fa:	f000 f851 	bl	8002aa0 <_fstat>
 80029fe:	1c43      	adds	r3, r0, #1
 8002a00:	d102      	bne.n	8002a08 <_fstat_r+0x1c>
 8002a02:	682b      	ldr	r3, [r5, #0]
 8002a04:	b103      	cbz	r3, 8002a08 <_fstat_r+0x1c>
 8002a06:	6023      	str	r3, [r4, #0]
 8002a08:	bd38      	pop	{r3, r4, r5, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000188 	.word	0x20000188

08002a10 <_isatty_r>:
 8002a10:	b538      	push	{r3, r4, r5, lr}
 8002a12:	4d06      	ldr	r5, [pc, #24]	; (8002a2c <_isatty_r+0x1c>)
 8002a14:	2300      	movs	r3, #0
 8002a16:	4604      	mov	r4, r0
 8002a18:	4608      	mov	r0, r1
 8002a1a:	602b      	str	r3, [r5, #0]
 8002a1c:	f000 f848 	bl	8002ab0 <_isatty>
 8002a20:	1c43      	adds	r3, r0, #1
 8002a22:	d102      	bne.n	8002a2a <_isatty_r+0x1a>
 8002a24:	682b      	ldr	r3, [r5, #0]
 8002a26:	b103      	cbz	r3, 8002a2a <_isatty_r+0x1a>
 8002a28:	6023      	str	r3, [r4, #0]
 8002a2a:	bd38      	pop	{r3, r4, r5, pc}
 8002a2c:	20000188 	.word	0x20000188

08002a30 <_lseek_r>:
 8002a30:	b538      	push	{r3, r4, r5, lr}
 8002a32:	4d07      	ldr	r5, [pc, #28]	; (8002a50 <_lseek_r+0x20>)
 8002a34:	4604      	mov	r4, r0
 8002a36:	4608      	mov	r0, r1
 8002a38:	4611      	mov	r1, r2
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	602a      	str	r2, [r5, #0]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f000 f83e 	bl	8002ac0 <_lseek>
 8002a44:	1c43      	adds	r3, r0, #1
 8002a46:	d102      	bne.n	8002a4e <_lseek_r+0x1e>
 8002a48:	682b      	ldr	r3, [r5, #0]
 8002a4a:	b103      	cbz	r3, 8002a4e <_lseek_r+0x1e>
 8002a4c:	6023      	str	r3, [r4, #0]
 8002a4e:	bd38      	pop	{r3, r4, r5, pc}
 8002a50:	20000188 	.word	0x20000188

08002a54 <__malloc_lock>:
 8002a54:	4801      	ldr	r0, [pc, #4]	; (8002a5c <__malloc_lock+0x8>)
 8002a56:	f7ff be43 	b.w	80026e0 <__retarget_lock_acquire_recursive>
 8002a5a:	bf00      	nop
 8002a5c:	20000180 	.word	0x20000180

08002a60 <__malloc_unlock>:
 8002a60:	4801      	ldr	r0, [pc, #4]	; (8002a68 <__malloc_unlock+0x8>)
 8002a62:	f7ff be3e 	b.w	80026e2 <__retarget_lock_release_recursive>
 8002a66:	bf00      	nop
 8002a68:	20000180 	.word	0x20000180

08002a6c <_read_r>:
 8002a6c:	b538      	push	{r3, r4, r5, lr}
 8002a6e:	4d07      	ldr	r5, [pc, #28]	; (8002a8c <_read_r+0x20>)
 8002a70:	4604      	mov	r4, r0
 8002a72:	4608      	mov	r0, r1
 8002a74:	4611      	mov	r1, r2
 8002a76:	2200      	movs	r2, #0
 8002a78:	602a      	str	r2, [r5, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f7fd ff0e 	bl	800089c <_read>
 8002a80:	1c43      	adds	r3, r0, #1
 8002a82:	d102      	bne.n	8002a8a <_read_r+0x1e>
 8002a84:	682b      	ldr	r3, [r5, #0]
 8002a86:	b103      	cbz	r3, 8002a8a <_read_r+0x1e>
 8002a88:	6023      	str	r3, [r4, #0]
 8002a8a:	bd38      	pop	{r3, r4, r5, pc}
 8002a8c:	20000188 	.word	0x20000188

08002a90 <_close>:
 8002a90:	4b02      	ldr	r3, [pc, #8]	; (8002a9c <_close+0xc>)
 8002a92:	2258      	movs	r2, #88	; 0x58
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9a:	4770      	bx	lr
 8002a9c:	20000188 	.word	0x20000188

08002aa0 <_fstat>:
 8002aa0:	4b02      	ldr	r3, [pc, #8]	; (8002aac <_fstat+0xc>)
 8002aa2:	2258      	movs	r2, #88	; 0x58
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8002aaa:	4770      	bx	lr
 8002aac:	20000188 	.word	0x20000188

08002ab0 <_isatty>:
 8002ab0:	4b02      	ldr	r3, [pc, #8]	; (8002abc <_isatty+0xc>)
 8002ab2:	2258      	movs	r2, #88	; 0x58
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	20000188 	.word	0x20000188

08002ac0 <_lseek>:
 8002ac0:	4b02      	ldr	r3, [pc, #8]	; (8002acc <_lseek+0xc>)
 8002ac2:	2258      	movs	r2, #88	; 0x58
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8002aca:	4770      	bx	lr
 8002acc:	20000188 	.word	0x20000188

08002ad0 <_sbrk>:
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <_sbrk+0x14>)
 8002ad2:	6819      	ldr	r1, [r3, #0]
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	b909      	cbnz	r1, 8002adc <_sbrk+0xc>
 8002ad8:	4903      	ldr	r1, [pc, #12]	; (8002ae8 <_sbrk+0x18>)
 8002ada:	6019      	str	r1, [r3, #0]
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	4402      	add	r2, r0
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	4770      	bx	lr
 8002ae4:	20000094 	.word	0x20000094
 8002ae8:	20000190 	.word	0x20000190

08002aec <_init>:
 8002aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aee:	bf00      	nop
 8002af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002af2:	bc08      	pop	{r3}
 8002af4:	469e      	mov	lr, r3
 8002af6:	4770      	bx	lr

08002af8 <_fini>:
 8002af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002afa:	bf00      	nop
 8002afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002afe:	bc08      	pop	{r3}
 8002b00:	469e      	mov	lr, r3
 8002b02:	4770      	bx	lr
