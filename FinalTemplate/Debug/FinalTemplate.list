
FinalTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050cc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  080052d0  080052d0  000152d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005724  08005724  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08005724  08005724  00015724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800572c  0800572c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800572c  0800572c  0001572c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005730  08005730  00015730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  200001dc  08005910  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  20000394  08005910  00020394  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ff2  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000250e  00000000  00000000  000311fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00004e05  00000000  00000000  0003370a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000858  00000000  00000000  00038510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007c0  00000000  00000000  00038d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e546  00000000  00000000  00039528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ddde  00000000  00000000  00067a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011952a  00000000  00000000  0007584c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0018ed76  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000247c  00000000  00000000  0018edcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         0000009c  00000000  00000000  00191248  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000014f  00000000  00000000  001912e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	080052b4 	.word	0x080052b4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	080052b4 	.word	0x080052b4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <pollADC>:
#include "ADC.h"
#include "ConfUart.h"
#include "Draw.h"

void pollADC(){
 80005e8:	b510      	push	{r4, lr}
	HAL_ADC_PollForConversion(&hadc1, 1000); //Start conversion
 80005ea:	4c22      	ldr	r4, [pc, #136]	; (8000674 <pollADC+0x8c>)
 80005ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005f0:	4620      	mov	r0, r4
 80005f2:	f000 fd31 	bl	8001058 <HAL_ADC_PollForConversion>
	adc_value = HAL_ADC_GetValue(&hadc1); //Get the value
 80005f6:	4620      	mov	r0, r4
 80005f8:	f000 fd89 	bl	800110e <HAL_ADC_GetValue>
 80005fc:	4c1e      	ldr	r4, [pc, #120]	; (8000678 <pollADC+0x90>)
 80005fe:	8020      	strh	r0, [r4, #0]
	HAL_Delay(10);
 8000600:	200a      	movs	r0, #10
 8000602:	f000 fbbd 	bl	8000d80 <HAL_Delay>
	//printf("Value: %d\r\n", adc_value);

	if ((adc_value > 3060) && (adc_value < 3085)){ //Down
 8000606:	8822      	ldrh	r2, [r4, #0]
 8000608:	f6a2 33f5 	subw	r3, r2, #3061	; 0xbf5
 800060c:	b29b      	uxth	r3, r3
 800060e:	2b17      	cmp	r3, #23
 8000610:	d80d      	bhi.n	800062e <pollADC+0x46>
		if (my_current_state != DOWN){
 8000612:	4b1a      	ldr	r3, [pc, #104]	; (800067c <pollADC+0x94>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b31      	cmp	r3, #49	; 0x31
 8000618:	d100      	bne.n	800061c <pollADC+0x34>
			HAL_UART_Transmit(&U6, (uint8_t*) &my_current_state, 1, 10); //Transmit input to other device
			//printf("Value: %d\r\n", adc_value);
			//printf("State: Neutral\r\n");
		}
	}
}
 800061a:	bd10      	pop	{r4, pc}
			my_current_state = DOWN;
 800061c:	4917      	ldr	r1, [pc, #92]	; (800067c <pollADC+0x94>)
 800061e:	2331      	movs	r3, #49	; 0x31
 8000620:	700b      	strb	r3, [r1, #0]
			HAL_UART_Transmit(&U6, (uint8_t*) &my_current_state, 1, 10); //Transmit input to other device
 8000622:	230a      	movs	r3, #10
 8000624:	2201      	movs	r2, #1
 8000626:	4816      	ldr	r0, [pc, #88]	; (8000680 <pollADC+0x98>)
 8000628:	f001 ff92 	bl	8002550 <HAL_UART_Transmit>
 800062c:	e7f5      	b.n	800061a <pollADC+0x32>
	else if (adc_value < 3060){ //Up
 800062e:	f640 33f3 	movw	r3, #3059	; 0xbf3
 8000632:	429a      	cmp	r2, r3
 8000634:	d80c      	bhi.n	8000650 <pollADC+0x68>
		if (my_current_state != UP){
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <pollADC+0x94>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b32      	cmp	r3, #50	; 0x32
 800063c:	d0ed      	beq.n	800061a <pollADC+0x32>
			my_current_state = UP;
 800063e:	490f      	ldr	r1, [pc, #60]	; (800067c <pollADC+0x94>)
 8000640:	2332      	movs	r3, #50	; 0x32
 8000642:	700b      	strb	r3, [r1, #0]
			HAL_UART_Transmit(&U6, (uint8_t*) &my_current_state, 1, 10); //Transmit input to other device
 8000644:	230a      	movs	r3, #10
 8000646:	2201      	movs	r2, #1
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <pollADC+0x98>)
 800064a:	f001 ff81 	bl	8002550 <HAL_UART_Transmit>
 800064e:	e7e4      	b.n	800061a <pollADC+0x32>
	else if (adc_value > 3110){ //State is neutral, otherwise
 8000650:	f640 4326 	movw	r3, #3110	; 0xc26
 8000654:	429a      	cmp	r2, r3
 8000656:	d9e0      	bls.n	800061a <pollADC+0x32>
		if (my_current_state != NEUTRAL){
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <pollADC+0x94>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b33      	cmp	r3, #51	; 0x33
 800065e:	d0dc      	beq.n	800061a <pollADC+0x32>
			my_current_state = NEUTRAL;
 8000660:	4906      	ldr	r1, [pc, #24]	; (800067c <pollADC+0x94>)
 8000662:	2333      	movs	r3, #51	; 0x33
 8000664:	700b      	strb	r3, [r1, #0]
			HAL_UART_Transmit(&U6, (uint8_t*) &my_current_state, 1, 10); //Transmit input to other device
 8000666:	230a      	movs	r3, #10
 8000668:	2201      	movs	r2, #1
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <pollADC+0x98>)
 800066c:	f001 ff70 	bl	8002550 <HAL_UART_Transmit>
}
 8000670:	e7d3      	b.n	800061a <pollADC+0x32>
 8000672:	bf00      	nop
 8000674:	20000298 	.word	0x20000298
 8000678:	20000296 	.word	0x20000296
 800067c:	2000020f 	.word	0x2000020f
 8000680:	200002e0 	.word	0x200002e0

08000684 <configureADC>:


void configureADC()
{
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	b083      	sub	sp, #12
	// Enable the ADC Clock.
	__HAL_RCC_ADC1_CLK_ENABLE();
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <configureADC+0x58>)
 800068a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800068c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000690:	645a      	str	r2, [r3, #68]	; 0x44
 8000692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	9b01      	ldr	r3, [sp, #4]


	 /* Configure the global features of the ADC (Clock, Resolution, Data Alignment and number
	 of conversion) */
	 hadc1.Instance = ADC1; //Using ADC1
 800069c:	4c10      	ldr	r4, [pc, #64]	; (80006e0 <configureADC+0x5c>)
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <configureADC+0x60>)
 80006a0:	6023      	str	r3, [r4, #0]
	 hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80006a2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80006a6:	6063      	str	r3, [r4, #4]
	 hadc1.Init.Resolution = ADC_RESOLUTION_12B; //12 Bit resolution
 80006a8:	2300      	movs	r3, #0
 80006aa:	60a3      	str	r3, [r4, #8]
	 hadc1.Init.ScanConvMode = DISABLE;
 80006ac:	6123      	str	r3, [r4, #16]
	 hadc1.Init.ContinuousConvMode = ENABLE;
 80006ae:	2501      	movs	r5, #1
 80006b0:	61a5      	str	r5, [r4, #24]
	 hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006b2:	f884 3020 	strb.w	r3, [r4, #32]
	 hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006b6:	60e3      	str	r3, [r4, #12]
	 hadc1.Init.NbrOfConversion = 1;
 80006b8:	61e5      	str	r5, [r4, #28]
	 hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ba:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	 hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80006be:	6163      	str	r3, [r4, #20]

	 HAL_ADC_Init(&hadc1); // Initialize the ADC
 80006c0:	4620      	mov	r0, r4
 80006c2:	f000 fc0b 	bl	8000edc <HAL_ADC_Init>

	 /* Configure for the selected ADC regular channel its corresponding rank in the sequence\r
	 Analog-To-Digital Conversion 406
	 and its sample time. */
	 sConfig.Channel = ADC_CHANNEL_12;
 80006c6:	4908      	ldr	r1, [pc, #32]	; (80006e8 <configureADC+0x64>)
 80006c8:	230c      	movs	r3, #12
 80006ca:	600b      	str	r3, [r1, #0]
	 sConfig.Rank = ADC_REGULAR_RANK_1;
 80006cc:	604d      	str	r5, [r1, #4]
	 sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80006ce:	608d      	str	r5, [r1, #8]
	 HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80006d0:	4620      	mov	r0, r4
 80006d2:	f000 fd1f 	bl	8001114 <HAL_ADC_ConfigChannel>
}
 80006d6:	b003      	add	sp, #12
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	20000298 	.word	0x20000298
 80006e4:	40012000 	.word	0x40012000
 80006e8:	20000360 	.word	0x20000360

080006ec <HAL_ADC_MspInit>:


void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 80006ec:	b500      	push	{lr}
 80006ee:	b087      	sub	sp, #28

// GPIO init
	GPIO_InitTypeDef GPIO_InitStruct;
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <HAL_ADC_MspInit+0x38>)
 80006f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006f4:	f042 0204 	orr.w	r2, r2, #4
 80006f8:	631a      	str	r2, [r3, #48]	; 0x30
 80006fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fc:	f003 0304 	and.w	r3, r3, #4
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	9b00      	ldr	r3, [sp, #0]
	GPIO_InitStruct.Mode      = GPIO_MODE_ANALOG; //Analog mode for pin
 8000704:	2303      	movs	r3, #3
 8000706:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8000708:	2200      	movs	r2, #0
 800070a:	9203      	str	r2, [sp, #12]
	GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 800070c:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800070e:	2304      	movs	r3, #4
 8000710:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //Pin C2, Arduino A2, ADC1, In 12
 8000712:	eb0d 0103 	add.w	r1, sp, r3
 8000716:	4804      	ldr	r0, [pc, #16]	; (8000728 <HAL_ADC_MspInit+0x3c>)
 8000718:	f000 fe5e 	bl	80013d8 <HAL_GPIO_Init>

}
 800071c:	b007      	add	sp, #28
 800071e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40020800 	.word	0x40020800

0800072c <configureUart>:
#include "ConfUart.h"

void configureUart(void){
 800072c:	b538      	push	{r3, r4, r5, lr}
	initUart(&U6, 38400, USART6); //Initialize UART with 38400 Baud and Instance USART6
 800072e:	4c0c      	ldr	r4, [pc, #48]	; (8000760 <configureUart+0x34>)
 8000730:	4a0c      	ldr	r2, [pc, #48]	; (8000764 <configureUart+0x38>)
 8000732:	f44f 4116 	mov.w	r1, #38400	; 0x9600
 8000736:	4620      	mov	r0, r4
 8000738:	f000 fa74 	bl	8000c24 <initUart>

	HAL_NVIC_EnableIRQ(USART1_IRQn); //Enable interrupt
 800073c:	2025      	movs	r0, #37	; 0x25
 800073e:	f000 fe13 	bl	8001368 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(USART6_IRQn); //Enable interrupt
 8000742:	2047      	movs	r0, #71	; 0x47
 8000744:	f000 fe10 	bl	8001368 <HAL_NVIC_EnableIRQ>

	HAL_UART_Receive_IT (&USB_UART, (uint8_t*) &opponent_current_state, 1); //Trigger receiving input for USB
 8000748:	4d07      	ldr	r5, [pc, #28]	; (8000768 <configureUart+0x3c>)
 800074a:	2201      	movs	r2, #1
 800074c:	4629      	mov	r1, r5
 800074e:	4807      	ldr	r0, [pc, #28]	; (800076c <configureUart+0x40>)
 8000750:	f001 face 	bl	8001cf0 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT (&U6, (uint8_t*) &opponent_current_state, 1); //Trigger receiving input for U6
 8000754:	2201      	movs	r2, #1
 8000756:	4629      	mov	r1, r5
 8000758:	4620      	mov	r0, r4
 800075a:	f001 fac9 	bl	8001cf0 <HAL_UART_Receive_IT>
}
 800075e:	bd38      	pop	{r3, r4, r5, pc}
 8000760:	200002e0 	.word	0x200002e0
 8000764:	40011400 	.word	0x40011400
 8000768:	2000020e 	.word	0x2000020e
 800076c:	20000214 	.word	0x20000214

08000770 <USART1_IRQHandler>:

//Handler for USART1
void USART1_IRQHandler(void) {
 8000770:	b508      	push	{r3, lr}
	HAL_UART_IRQHandler(&USB_UART);
 8000772:	4802      	ldr	r0, [pc, #8]	; (800077c <USART1_IRQHandler+0xc>)
 8000774:	f001 fba6 	bl	8001ec4 <HAL_UART_IRQHandler>
}
 8000778:	bd08      	pop	{r3, pc}
 800077a:	bf00      	nop
 800077c:	20000214 	.word	0x20000214

08000780 <USART6_IRQHandler>:

//Handler for USART6
void USART6_IRQHandler(void) {
 8000780:	b508      	push	{r3, lr}
	HAL_UART_IRQHandler(&U6);
 8000782:	4802      	ldr	r0, [pc, #8]	; (800078c <USART6_IRQHandler+0xc>)
 8000784:	f001 fb9e 	bl	8001ec4 <HAL_UART_IRQHandler>
}
 8000788:	bd08      	pop	{r3, pc}
 800078a:	bf00      	nop
 800078c:	200002e0 	.word	0x200002e0

08000790 <HAL_UART_RxCpltCallback>:

//Callback function
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	if (huart->Instance == USART6){ //Associated with USART6
 8000790:	6802      	ldr	r2, [r0, #0]
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <HAL_UART_RxCpltCallback+0x34>)
 8000794:	429a      	cmp	r2, r3
 8000796:	d000      	beq.n	800079a <HAL_UART_RxCpltCallback+0xa>
 8000798:	4770      	bx	lr
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800079a:	b510      	push	{r4, lr}
		HAL_UART_Receive_IT (&U6, (uint8_t*) &opponent_current_state, 1); //Trigger receiving input for U6
 800079c:	4c0a      	ldr	r4, [pc, #40]	; (80007c8 <HAL_UART_RxCpltCallback+0x38>)
 800079e:	2201      	movs	r2, #1
 80007a0:	4621      	mov	r1, r4
 80007a2:	480a      	ldr	r0, [pc, #40]	; (80007cc <HAL_UART_RxCpltCallback+0x3c>)
 80007a4:	f001 faa4 	bl	8001cf0 <HAL_UART_Receive_IT>
		if (input != opponent_current_state){ //Received input
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <HAL_UART_RxCpltCallback+0x40>)
 80007aa:	781a      	ldrb	r2, [r3, #0]
 80007ac:	7823      	ldrb	r3, [r4, #0]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d003      	beq.n	80007ba <HAL_UART_RxCpltCallback+0x2a>
			input = opponent_current_state;
 80007b2:	4a07      	ldr	r2, [pc, #28]	; (80007d0 <HAL_UART_RxCpltCallback+0x40>)
 80007b4:	7013      	strb	r3, [r2, #0]
			if (opponent_current_state == '\033'){ //Input was escape
 80007b6:	2b1b      	cmp	r3, #27
 80007b8:	d000      	beq.n	80007bc <HAL_UART_RxCpltCallback+0x2c>
				printf("Escape\r\n");
			}
			//HAL_UART_Transmit(&USB_UART, (uint8_t*) &my_current_state, 1, 10);  //Transmit input to device
		}
	}
}
 80007ba:	bd10      	pop	{r4, pc}
				printf("Escape\r\n");
 80007bc:	4805      	ldr	r0, [pc, #20]	; (80007d4 <HAL_UART_RxCpltCallback+0x44>)
 80007be:	f002 ff9b 	bl	80036f8 <puts>
}
 80007c2:	e7fa      	b.n	80007ba <HAL_UART_RxCpltCallback+0x2a>
 80007c4:	40011400 	.word	0x40011400
 80007c8:	2000020e 	.word	0x2000020e
 80007cc:	200002e0 	.word	0x200002e0
 80007d0:	20000210 	.word	0x20000210
 80007d4:	080052e8 	.word	0x080052e8

080007d8 <draw_paddle>:
#include "Draw.h"
#include "ADC.h"

void draw_paddle(paddle test_paddle){
 80007d8:	b510      	push	{r4, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	ab02      	add	r3, sp, #8
 80007de:	e903 0003 	stmdb	r3, {r0, r1}
	printf("\033[%u;%uH\033[;47m ", test_paddle.first_x, test_paddle.first_y);
 80007e2:	4c12      	ldr	r4, [pc, #72]	; (800082c <draw_paddle+0x54>)
 80007e4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80007e8:	f89d 1000 	ldrb.w	r1, [sp]
 80007ec:	4620      	mov	r0, r4
 80007ee:	f002 fefd 	bl	80035ec <iprintf>
	printf("\033[%u;%uH\033[;47m ", test_paddle.second_x, test_paddle.second_y);
 80007f2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80007f6:	f89d 1002 	ldrb.w	r1, [sp, #2]
 80007fa:	4620      	mov	r0, r4
 80007fc:	f002 fef6 	bl	80035ec <iprintf>
	printf("\033[%u;%uH\033[;47m ", test_paddle.third_x, test_paddle.third_y);
 8000800:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000804:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8000808:	4620      	mov	r0, r4
 800080a:	f002 feef 	bl	80035ec <iprintf>
	printf("\033[%u;%uH\033[;47m ", test_paddle.fourth_x, test_paddle.fourth_y);
 800080e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000812:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8000816:	4620      	mov	r0, r4
 8000818:	f002 fee8 	bl	80035ec <iprintf>
	fflush(stdout);
 800081c:	4b04      	ldr	r3, [pc, #16]	; (8000830 <draw_paddle+0x58>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	6898      	ldr	r0, [r3, #8]
 8000822:	f002 f8bf 	bl	80029a4 <fflush>
};
 8000826:	b002      	add	sp, #8
 8000828:	bd10      	pop	{r4, pc}
 800082a:	bf00      	nop
 800082c:	080052f0 	.word	0x080052f0
 8000830:	2000000c 	.word	0x2000000c

08000834 <update_paddle>:

paddle update_paddle(paddle test_paddle, char state){
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	4604      	mov	r4, r0
 800083a:	a802      	add	r0, sp, #8
 800083c:	e900 0006 	stmdb	r0, {r1, r2}
	if (state == UP){
 8000840:	2b32      	cmp	r3, #50	; 0x32
 8000842:	d008      	beq.n	8000856 <update_paddle+0x22>
			test_paddle.second_x -= 1;
			test_paddle.third_x -= 1;
			test_paddle.fourth_x -= 1;
		}
	}
	else if (state == DOWN){
 8000844:	2b31      	cmp	r3, #49	; 0x31
 8000846:	d023      	beq.n	8000890 <update_paddle+0x5c>
			test_paddle.second_x += 1;
			test_paddle.third_x += 1;
			test_paddle.fourth_x +=1;
		}
	}
	return test_paddle;
 8000848:	466b      	mov	r3, sp
 800084a:	cb03      	ldmia	r3!, {r0, r1}
 800084c:	6020      	str	r0, [r4, #0]
 800084e:	6061      	str	r1, [r4, #4]
};
 8000850:	4620      	mov	r0, r4
 8000852:	b002      	add	sp, #8
 8000854:	bd70      	pop	{r4, r5, r6, pc}
		if (test_paddle.first_x - 1 >= 2){
 8000856:	f89d 5000 	ldrb.w	r5, [sp]
 800085a:	2d02      	cmp	r5, #2
 800085c:	d9f4      	bls.n	8000848 <update_paddle+0x14>
			printf("\033[%u;%uH\033[;40m ", test_paddle.fourth_x, test_paddle.fourth_y);
 800085e:	f89d 6006 	ldrb.w	r6, [sp, #6]
 8000862:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000866:	4631      	mov	r1, r6
 8000868:	4818      	ldr	r0, [pc, #96]	; (80008cc <update_paddle+0x98>)
 800086a:	f002 febf 	bl	80035ec <iprintf>
			test_paddle.first_x -= 1;
 800086e:	3d01      	subs	r5, #1
 8000870:	f88d 5000 	strb.w	r5, [sp]
			test_paddle.second_x -= 1;
 8000874:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8000878:	3b01      	subs	r3, #1
 800087a:	f88d 3002 	strb.w	r3, [sp, #2]
			test_paddle.third_x -= 1;
 800087e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000882:	3b01      	subs	r3, #1
 8000884:	f88d 3004 	strb.w	r3, [sp, #4]
			test_paddle.fourth_x -= 1;
 8000888:	3e01      	subs	r6, #1
 800088a:	f88d 6006 	strb.w	r6, [sp, #6]
 800088e:	e7db      	b.n	8000848 <update_paddle+0x14>
		if (test_paddle.fourth_x + 1 <= 23){
 8000890:	f89d 5006 	ldrb.w	r5, [sp, #6]
 8000894:	2d16      	cmp	r5, #22
 8000896:	d8d7      	bhi.n	8000848 <update_paddle+0x14>
			printf("\033[%u;%uH\033[;40m ", test_paddle.first_x, test_paddle.first_y);
 8000898:	f89d 6000 	ldrb.w	r6, [sp]
 800089c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80008a0:	4631      	mov	r1, r6
 80008a2:	480a      	ldr	r0, [pc, #40]	; (80008cc <update_paddle+0x98>)
 80008a4:	f002 fea2 	bl	80035ec <iprintf>
			test_paddle.first_x += 1;
 80008a8:	3601      	adds	r6, #1
 80008aa:	f88d 6000 	strb.w	r6, [sp]
			test_paddle.second_x += 1;
 80008ae:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80008b2:	3301      	adds	r3, #1
 80008b4:	f88d 3002 	strb.w	r3, [sp, #2]
			test_paddle.third_x += 1;
 80008b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80008bc:	3301      	adds	r3, #1
 80008be:	f88d 3004 	strb.w	r3, [sp, #4]
			test_paddle.fourth_x +=1;
 80008c2:	3501      	adds	r5, #1
 80008c4:	f88d 5006 	strb.w	r5, [sp, #6]
 80008c8:	e7be      	b.n	8000848 <update_paddle+0x14>
 80008ca:	bf00      	nop
 80008cc:	08005300 	.word	0x08005300

080008d0 <draw_ball>:

void draw_ball(ball test_ball){
 80008d0:	b500      	push	{lr}
 80008d2:	b083      	sub	sp, #12
 80008d4:	ab02      	add	r3, sp, #8
 80008d6:	e903 0003 	stmdb	r3, {r0, r1}
	printf("\033[%u;%uH\033[;40m ", test_ball.last_x, test_ball.last_y); //Erase Last Ball Position
 80008da:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80008de:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80008e2:	4809      	ldr	r0, [pc, #36]	; (8000908 <draw_ball+0x38>)
 80008e4:	f002 fe82 	bl	80035ec <iprintf>
	printf("\033[%u;%uH\033[;43m ", test_ball.x_row, test_ball.y_column);
 80008e8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80008ec:	f89d 1000 	ldrb.w	r1, [sp]
 80008f0:	4806      	ldr	r0, [pc, #24]	; (800090c <draw_ball+0x3c>)
 80008f2:	f002 fe7b 	bl	80035ec <iprintf>
	fflush(stdout);
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <draw_ball+0x40>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	6898      	ldr	r0, [r3, #8]
 80008fc:	f002 f852 	bl	80029a4 <fflush>
};
 8000900:	b003      	add	sp, #12
 8000902:	f85d fb04 	ldr.w	pc, [sp], #4
 8000906:	bf00      	nop
 8000908:	08005300 	.word	0x08005300
 800090c:	08005310 	.word	0x08005310
 8000910:	2000000c 	.word	0x2000000c

08000914 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 8000914:	b500      	push	{lr}
 8000916:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000918:	2301      	movs	r3, #1
 800091a:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800091c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000920:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000922:	2302      	movs	r3, #2
 8000924:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000926:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800092a:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 800092c:	2219      	movs	r2, #25
 800092e:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000930:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8000934:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000936:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000938:	2309      	movs	r3, #9
 800093a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 800093c:	2307      	movs	r3, #7
 800093e:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000940:	4668      	mov	r0, sp
 8000942:	f000 fe77 	bl	8001634 <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 8000946:	b100      	cbz	r0, 800094a <SystemClock_Config+0x36>
    while(1) { ; }
 8000948:	e7fe      	b.n	8000948 <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 800094a:	f000 fe35 	bl	80015b8 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 800094e:	b100      	cbz	r0, 8000952 <SystemClock_Config+0x3e>
    while(1) { ; }
 8000950:	e7fe      	b.n	8000950 <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000952:	230f      	movs	r3, #15
 8000954:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000956:	2302      	movs	r3, #2
 8000958:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800095e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000962:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000968:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800096a:	2107      	movs	r1, #7
 800096c:	a80d      	add	r0, sp, #52	; 0x34
 800096e:	f001 f8d3 	bl	8001b18 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 8000972:	b100      	cbz	r0, 8000976 <SystemClock_Config+0x62>
    while(1) { ; }
 8000974:	e7fe      	b.n	8000974 <SystemClock_Config+0x60>
  }
}
 8000976:	b013      	add	sp, #76	; 0x4c
 8000978:	f85d fb04 	ldr.w	pc, [sp], #4

0800097c <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 800097c:	b410      	push	{r4}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800097e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000982:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000986:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <CPU_CACHE_Enable+0x7c>)
 8000988:	2100      	movs	r1, #0
 800098a:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800098e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000992:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000996:	695a      	ldr	r2, [r3, #20]
 8000998:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800099c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800099e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80009a2:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80009a6:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80009aa:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80009ae:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80009b2:	f3c0 324e 	ubfx	r2, r0, #13, #15
 80009b6:	e000      	b.n	80009ba <CPU_CACHE_Enable+0x3e>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 80009b8:	461a      	mov	r2, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80009ba:	f3c0 01c9 	ubfx	r1, r0, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009be:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80009c2:	ea03 1342 	and.w	r3, r3, r2, lsl #5
 80009c6:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 80009ca:	4c0b      	ldr	r4, [pc, #44]	; (80009f8 <CPU_CACHE_Enable+0x7c>)
 80009cc:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways-- != 0U);
 80009d0:	460b      	mov	r3, r1
 80009d2:	3901      	subs	r1, #1
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d1f2      	bne.n	80009be <CPU_CACHE_Enable+0x42>
    } while(sets-- != 0U);
 80009d8:	1e53      	subs	r3, r2, #1
 80009da:	2a00      	cmp	r2, #0
 80009dc:	d1ec      	bne.n	80009b8 <CPU_CACHE_Enable+0x3c>
 80009de:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80009e2:	6963      	ldr	r3, [r4, #20]
 80009e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009e8:	6163      	str	r3, [r4, #20]
 80009ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80009ee:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 80009f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <Sys_Init>:

// Unified System Initialization (equivalent of current MPS Sys_Init())
void Sys_Init(void) {
 80009fc:	b508      	push	{r3, lr}
	//Initialize the system
	CPU_CACHE_Enable();		// Enable CPU Caching
 80009fe:	f7ff ffbd 	bl	800097c <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 8000a02:	f000 f995 	bl	8000d30 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 8000a06:	f7ff ff85 	bl	8000914 <SystemClock_Config>
		- Stop Bit = No Stop bits
		- Parity = None
		- BaudRate = 115200 baud
		- Hardware flow control disabled (RTS and CTS signals)
	*/
	initUart(&USB_UART, 115200, USART1);
 8000a0a:	4a03      	ldr	r2, [pc, #12]	; (8000a18 <Sys_Init+0x1c>)
 8000a0c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <Sys_Init+0x20>)
 8000a12:	f000 f907 	bl	8000c24 <initUart>
}
 8000a16:	bd08      	pop	{r3, pc}
 8000a18:	40011000 	.word	0x40011000
 8000a1c:	20000214 	.word	0x20000214

08000a20 <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 8000a20:	b508      	push	{r3, lr}
  HAL_IncTick();
 8000a22:	f000 f99b 	bl	8000d5c <HAL_IncTick>
}
 8000a26:	bd08      	pop	{r3, pc}

08000a28 <main>:
#include "Draw.h"
#include "ADC.h"
#include "ConfUart.h"


int main(void){
 8000a28:	b570      	push	{r4, r5, r6, lr}
 8000a2a:	b082      	sub	sp, #8
	Sys_Init();
 8000a2c:	f7ff ffe6 	bl	80009fc <Sys_Init>
	HAL_Init();
 8000a30:	f000 f97e 	bl	8000d30 <HAL_Init>

	configureADC();
 8000a34:	f7ff fe26 	bl	8000684 <configureADC>
	configureUart();
 8000a38:	f7ff fe78 	bl	800072c <configureUart>

	HAL_ADC_Start(&hadc1);
 8000a3c:	483a      	ldr	r0, [pc, #232]	; (8000b28 <main+0x100>)
 8000a3e:	f000 fa79 	bl	8000f34 <HAL_ADC_Start>

	my_current_state = 0; //1 for Down, 2 for Up, 3 for Neutral
 8000a42:	2300      	movs	r3, #0
 8000a44:	4a39      	ldr	r2, [pc, #228]	; (8000b2c <main+0x104>)
 8000a46:	7013      	strb	r3, [r2, #0]
	input = 0;
 8000a48:	4a39      	ldr	r2, [pc, #228]	; (8000b30 <main+0x108>)
 8000a4a:	7013      	strb	r3, [r2, #0]
	int column = 1;
	printf("\033c\033[2J"); fflush(stdout);
 8000a4c:	4839      	ldr	r0, [pc, #228]	; (8000b34 <main+0x10c>)
 8000a4e:	f002 fdcd 	bl	80035ec <iprintf>
 8000a52:	4b39      	ldr	r3, [pc, #228]	; (8000b38 <main+0x110>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	6898      	ldr	r0, [r3, #8]
 8000a58:	f001 ffa4 	bl	80029a4 <fflush>
	int column = 1;
 8000a5c:	2401      	movs	r4, #1

	while (column < 81){
 8000a5e:	2c50      	cmp	r4, #80	; 0x50
 8000a60:	dc15      	bgt.n	8000a8e <main+0x66>
		printf("\033[%u;%uH-", 1, column); fflush(stdout);
 8000a62:	4e36      	ldr	r6, [pc, #216]	; (8000b3c <main+0x114>)
 8000a64:	4622      	mov	r2, r4
 8000a66:	2101      	movs	r1, #1
 8000a68:	4630      	mov	r0, r6
 8000a6a:	f002 fdbf 	bl	80035ec <iprintf>
 8000a6e:	4d32      	ldr	r5, [pc, #200]	; (8000b38 <main+0x110>)
 8000a70:	682b      	ldr	r3, [r5, #0]
 8000a72:	6898      	ldr	r0, [r3, #8]
 8000a74:	f001 ff96 	bl	80029a4 <fflush>
		printf("\033[%u;%uH-", 25, column); fflush(stdout);
 8000a78:	4622      	mov	r2, r4
 8000a7a:	2119      	movs	r1, #25
 8000a7c:	4630      	mov	r0, r6
 8000a7e:	f002 fdb5 	bl	80035ec <iprintf>
 8000a82:	682b      	ldr	r3, [r5, #0]
 8000a84:	6898      	ldr	r0, [r3, #8]
 8000a86:	f001 ff8d 	bl	80029a4 <fflush>
		column += 1;
 8000a8a:	3401      	adds	r4, #1
 8000a8c:	e7e7      	b.n	8000a5e <main+0x36>
	}

	play_ball.x_row = 2;
 8000a8e:	4b2c      	ldr	r3, [pc, #176]	; (8000b40 <main+0x118>)
 8000a90:	2202      	movs	r2, #2
 8000a92:	701a      	strb	r2, [r3, #0]
	play_ball.y_column = 2;
 8000a94:	705a      	strb	r2, [r3, #1]
	play_ball.last_x = 2;
 8000a96:	711a      	strb	r2, [r3, #4]
	play_ball.last_y = 2;
 8000a98:	715a      	strb	r2, [r3, #5]


	p1_paddle.first_x = 10;
 8000a9a:	4a2a      	ldr	r2, [pc, #168]	; (8000b44 <main+0x11c>)
 8000a9c:	210a      	movs	r1, #10
 8000a9e:	7011      	strb	r1, [r2, #0]
	p2_paddle.first_x = 10;
 8000aa0:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <main+0x120>)
 8000aa2:	7019      	strb	r1, [r3, #0]
	p1_paddle.first_y = 1;
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	7050      	strb	r0, [r2, #1]
	p2_paddle.first_y = 80;
 8000aa8:	2150      	movs	r1, #80	; 0x50
 8000aaa:	7059      	strb	r1, [r3, #1]

	p1_paddle.second_x = 11;
 8000aac:	240b      	movs	r4, #11
 8000aae:	7094      	strb	r4, [r2, #2]
	p2_paddle.second_x = 11;
 8000ab0:	709c      	strb	r4, [r3, #2]
	p1_paddle.second_y = 1;
 8000ab2:	70d0      	strb	r0, [r2, #3]
	p2_paddle.second_y = 80;
 8000ab4:	70d9      	strb	r1, [r3, #3]

	p1_paddle.third_x = 12;
 8000ab6:	240c      	movs	r4, #12
 8000ab8:	7114      	strb	r4, [r2, #4]
	p2_paddle.third_x = 12;
 8000aba:	711c      	strb	r4, [r3, #4]
	p1_paddle.third_y = 1;
 8000abc:	7150      	strb	r0, [r2, #5]
	p2_paddle.third_y = 80;
 8000abe:	7159      	strb	r1, [r3, #5]

	p1_paddle.fourth_x = 13;
 8000ac0:	240d      	movs	r4, #13
 8000ac2:	7194      	strb	r4, [r2, #6]
	p2_paddle.fourth_x = 13;
 8000ac4:	719c      	strb	r4, [r3, #6]
	p1_paddle.fourth_y = 1;
 8000ac6:	71d0      	strb	r0, [r2, #7]
	p2_paddle.fourth_y = 80;
 8000ac8:	71d9      	strb	r1, [r3, #7]

	while(1)
	{
		HAL_Delay(100);
 8000aca:	2064      	movs	r0, #100	; 0x64
 8000acc:	f000 f958 	bl	8000d80 <HAL_Delay>
		pollADC();
 8000ad0:	f7ff fd8a 	bl	80005e8 <pollADC>
		//my_current_state = UP;
		p1_paddle = update_paddle(p1_paddle, my_current_state);
 8000ad4:	4d1b      	ldr	r5, [pc, #108]	; (8000b44 <main+0x11c>)
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <main+0x104>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	6829      	ldr	r1, [r5, #0]
 8000adc:	686a      	ldr	r2, [r5, #4]
 8000ade:	4668      	mov	r0, sp
 8000ae0:	f7ff fea8 	bl	8000834 <update_paddle>
 8000ae4:	9a00      	ldr	r2, [sp, #0]
 8000ae6:	9b01      	ldr	r3, [sp, #4]
 8000ae8:	602a      	str	r2, [r5, #0]
 8000aea:	606b      	str	r3, [r5, #4]
		p2_paddle = update_paddle(p2_paddle, opponent_current_state);
 8000aec:	4c16      	ldr	r4, [pc, #88]	; (8000b48 <main+0x120>)
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <main+0x124>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	6821      	ldr	r1, [r4, #0]
 8000af4:	6862      	ldr	r2, [r4, #4]
 8000af6:	4668      	mov	r0, sp
 8000af8:	f7ff fe9c 	bl	8000834 <update_paddle>
 8000afc:	9a00      	ldr	r2, [sp, #0]
 8000afe:	9b01      	ldr	r3, [sp, #4]
 8000b00:	6022      	str	r2, [r4, #0]
 8000b02:	6063      	str	r3, [r4, #4]
		draw_paddle(p1_paddle);
 8000b04:	6828      	ldr	r0, [r5, #0]
 8000b06:	6869      	ldr	r1, [r5, #4]
 8000b08:	f7ff fe66 	bl	80007d8 <draw_paddle>
		draw_paddle(p2_paddle);
 8000b0c:	6820      	ldr	r0, [r4, #0]
 8000b0e:	6861      	ldr	r1, [r4, #4]
 8000b10:	f7ff fe62 	bl	80007d8 <draw_paddle>
		draw_ball(play_ball);
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <main+0x118>)
 8000b16:	791a      	ldrb	r2, [r3, #4]
 8000b18:	7959      	ldrb	r1, [r3, #5]
 8000b1a:	6818      	ldr	r0, [r3, #0]
 8000b1c:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 8000b20:	f7ff fed6 	bl	80008d0 <draw_ball>
	while(1)
 8000b24:	e7d1      	b.n	8000aca <main+0xa2>
 8000b26:	bf00      	nop
 8000b28:	20000298 	.word	0x20000298
 8000b2c:	2000020f 	.word	0x2000020f
 8000b30:	20000210 	.word	0x20000210
 8000b34:	08005330 	.word	0x08005330
 8000b38:	2000000c 	.word	0x2000000c
 8000b3c:	08005338 	.word	0x08005338
 8000b40:	20000370 	.word	0x20000370
 8000b44:	20000204 	.word	0x20000204
 8000b48:	20000378 	.word	0x20000378
 8000b4c:	2000020e 	.word	0x2000020e

08000b50 <HAL_UART_MspInit>:
#include "uart.h"

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000b50:	b530      	push	{r4, r5, lr}
 8000b52:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 8000b54:	6803      	ldr	r3, [r0, #0]
 8000b56:	4a2e      	ldr	r2, [pc, #184]	; (8000c10 <HAL_UART_MspInit+0xc0>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d004      	beq.n	8000b66 <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 8000b5c:	4a2d      	ldr	r2, [pc, #180]	; (8000c14 <HAL_UART_MspInit+0xc4>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d02c      	beq.n	8000bbc <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 8000b62:	b00b      	add	sp, #44	; 0x2c
 8000b64:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 8000b66:	4c2c      	ldr	r4, [pc, #176]	; (8000c18 <HAL_UART_MspInit+0xc8>)
 8000b68:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6323      	str	r3, [r4, #48]	; 0x30
 8000b70:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	9301      	str	r3, [sp, #4]
 8000b78:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8000b7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b7e:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b8c:	2307      	movs	r3, #7
 8000b8e:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 8000b90:	4d22      	ldr	r5, [pc, #136]	; (8000c1c <HAL_UART_MspInit+0xcc>)
 8000b92:	a905      	add	r1, sp, #20
 8000b94:	4628      	mov	r0, r5
 8000b96:	f000 fc1f 	bl	80013d8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b9e:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 8000ba0:	a905      	add	r1, sp, #20
 8000ba2:	4628      	mov	r0, r5
 8000ba4:	f000 fc18 	bl	80013d8 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 8000ba8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000baa:	f043 0310 	orr.w	r3, r3, #16
 8000bae:	6463      	str	r3, [r4, #68]	; 0x44
 8000bb0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000bb2:	f003 0310 	and.w	r3, r3, #16
 8000bb6:	9302      	str	r3, [sp, #8]
 8000bb8:	9b02      	ldr	r3, [sp, #8]
 8000bba:	e7d2      	b.n	8000b62 <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 8000bbc:	4c16      	ldr	r4, [pc, #88]	; (8000c18 <HAL_UART_MspInit+0xc8>)
 8000bbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000bc0:	f043 0304 	orr.w	r3, r3, #4
 8000bc4:	6323      	str	r3, [r4, #48]	; 0x30
 8000bc6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000bc8:	f003 0304 	and.w	r3, r3, #4
 8000bcc:	9303      	str	r3, [sp, #12]
 8000bce:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 8000bd0:	2340      	movs	r3, #64	; 0x40
 8000bd2:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000be0:	2308      	movs	r3, #8
 8000be2:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 8000be4:	4d0e      	ldr	r5, [pc, #56]	; (8000c20 <HAL_UART_MspInit+0xd0>)
 8000be6:	a905      	add	r1, sp, #20
 8000be8:	4628      	mov	r0, r5
 8000bea:	f000 fbf5 	bl	80013d8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bee:	2380      	movs	r3, #128	; 0x80
 8000bf0:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 8000bf2:	a905      	add	r1, sp, #20
 8000bf4:	4628      	mov	r0, r5
 8000bf6:	f000 fbef 	bl	80013d8 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 8000bfa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000bfc:	f043 0320 	orr.w	r3, r3, #32
 8000c00:	6463      	str	r3, [r4, #68]	; 0x44
 8000c02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c04:	f003 0320 	and.w	r3, r3, #32
 8000c08:	9304      	str	r3, [sp, #16]
 8000c0a:	9b04      	ldr	r3, [sp, #16]
}
 8000c0c:	e7a9      	b.n	8000b62 <HAL_UART_MspInit+0x12>
 8000c0e:	bf00      	nop
 8000c10:	40011000 	.word	0x40011000
 8000c14:	40011400 	.word	0x40011400
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020000 	.word	0x40020000
 8000c20:	40020800 	.word	0x40020800

08000c24 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 8000c24:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 8000c26:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 8000c28:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 8000c2e:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 8000c30:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 8000c32:	210c      	movs	r1, #12
 8000c34:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000c36:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 8000c38:	f001 fdc0 	bl	80027bc <HAL_UART_Init>
}
 8000c3c:	bd08      	pop	{r3, pc}
	...

08000c40 <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 8000c40:	b510      	push	{r4, lr}
 8000c42:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 8000c44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c48:	b292      	uxth	r2, r2
 8000c4a:	4802      	ldr	r0, [pc, #8]	; (8000c54 <_write+0x14>)
 8000c4c:	f001 fc80 	bl	8002550 <HAL_UART_Transmit>
	return len;
}
 8000c50:	4620      	mov	r0, r4
 8000c52:	bd10      	pop	{r4, pc}
 8000c54:	20000214 	.word	0x20000214

08000c58 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 8000c58:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c62:	2201      	movs	r2, #1
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <_read+0x18>)
 8000c66:	f001 fce0 	bl	800262a <HAL_UART_Receive>
	return len;
}
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	bd08      	pop	{r3, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000214 	.word	0x20000214

08000c74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c74:	480d      	ldr	r0, [pc, #52]	; (8000cac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c76:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c7a:	490e      	ldr	r1, [pc, #56]	; (8000cb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c7c:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <LoopForever+0xe>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a0b      	ldr	r2, [pc, #44]	; (8000cbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c90:	4c0b      	ldr	r4, [pc, #44]	; (8000cc0 <LoopForever+0x16>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c9e:	f000 f813 	bl	8000cc8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000ca2:	f001 ff87 	bl	8002bb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ca6:	f7ff febf 	bl	8000a28 <main>

08000caa <LoopForever>:

LoopForever:
    b LoopForever
 8000caa:	e7fe      	b.n	8000caa <LoopForever>
  ldr   r0, =_estack
 8000cac:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8000cb8:	08005734 	.word	0x08005734
  ldr r2, =_sbss
 8000cbc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000cc0:	20000394 	.word	0x20000394

08000cc4 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC_IRQHandler>
	...

08000cc8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <SystemInit+0x18>)
 8000cca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000cce:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000cd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cda:	609a      	str	r2, [r3, #8]
#endif
}
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000ce4:	4770      	bx	lr
	...

08000ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce8:	b510      	push	{r4, lr}
 8000cea:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cec:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <HAL_InitTick+0x40>)
 8000cee:	7818      	ldrb	r0, [r3, #0]
 8000cf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf4:	fbb3 f3f0 	udiv	r3, r3, r0
 8000cf8:	4a0c      	ldr	r2, [pc, #48]	; (8000d2c <HAL_InitTick+0x44>)
 8000cfa:	6810      	ldr	r0, [r2, #0]
 8000cfc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d00:	f000 fb40 	bl	8001384 <HAL_SYSTICK_Config>
 8000d04:	b968      	cbnz	r0, 8000d22 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d06:	2c0f      	cmp	r4, #15
 8000d08:	d901      	bls.n	8000d0e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	e00a      	b.n	8000d24 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	4621      	mov	r1, r4
 8000d12:	f04f 30ff 	mov.w	r0, #4294967295
 8000d16:	f000 faf5 	bl	8001304 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d1a:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <HAL_InitTick+0x40>)
 8000d1c:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000d1e:	2000      	movs	r0, #0
 8000d20:	e000      	b.n	8000d24 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000d22:	2001      	movs	r0, #1
}
 8000d24:	bd10      	pop	{r4, pc}
 8000d26:	bf00      	nop
 8000d28:	20000004 	.word	0x20000004
 8000d2c:	20000000 	.word	0x20000000

08000d30 <HAL_Init>:
{
 8000d30:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_Init+0x28>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d3a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d42:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f000 facb 	bl	80012e0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4a:	200f      	movs	r0, #15
 8000d4c:	f7ff ffcc 	bl	8000ce8 <HAL_InitTick>
  HAL_MspInit();
 8000d50:	f7ff ffc8 	bl	8000ce4 <HAL_MspInit>
}
 8000d54:	2000      	movs	r0, #0
 8000d56:	bd08      	pop	{r3, pc}
 8000d58:	40023c00 	.word	0x40023c00

08000d5c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d5c:	4a03      	ldr	r2, [pc, #12]	; (8000d6c <HAL_IncTick+0x10>)
 8000d5e:	6811      	ldr	r1, [r2, #0]
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <HAL_IncTick+0x14>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	440b      	add	r3, r1
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000380 	.word	0x20000380
 8000d70:	20000004 	.word	0x20000004

08000d74 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d74:	4b01      	ldr	r3, [pc, #4]	; (8000d7c <HAL_GetTick+0x8>)
 8000d76:	6818      	ldr	r0, [r3, #0]
}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000380 	.word	0x20000380

08000d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d80:	b538      	push	{r3, r4, r5, lr}
 8000d82:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d84:	f7ff fff6 	bl	8000d74 <HAL_GetTick>
 8000d88:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000d8e:	d002      	beq.n	8000d96 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <HAL_Delay+0x24>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d96:	f7ff ffed 	bl	8000d74 <HAL_GetTick>
 8000d9a:	1b40      	subs	r0, r0, r5
 8000d9c:	42a0      	cmp	r0, r4
 8000d9e:	d3fa      	bcc.n	8000d96 <HAL_Delay+0x16>
  {
  }
}
 8000da0:	bd38      	pop	{r3, r4, r5, pc}
 8000da2:	bf00      	nop
 8000da4:	20000004 	.word	0x20000004

08000da8 <ADC_Init>:
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000da8:	4b4a      	ldr	r3, [pc, #296]	; (8000ed4 <ADC_Init+0x12c>)
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000db0:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000db2:	685a      	ldr	r2, [r3, #4]
 8000db4:	6841      	ldr	r1, [r0, #4]
 8000db6:	430a      	orrs	r2, r1
 8000db8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000dba:	6802      	ldr	r2, [r0, #0]
 8000dbc:	6853      	ldr	r3, [r2, #4]
 8000dbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000dc2:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000dc4:	6802      	ldr	r2, [r0, #0]
 8000dc6:	6853      	ldr	r3, [r2, #4]
 8000dc8:	6901      	ldr	r1, [r0, #16]
 8000dca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000dce:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000dd0:	6802      	ldr	r2, [r0, #0]
 8000dd2:	6853      	ldr	r3, [r2, #4]
 8000dd4:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000dd8:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000dda:	6802      	ldr	r2, [r0, #0]
 8000ddc:	6853      	ldr	r3, [r2, #4]
 8000dde:	6881      	ldr	r1, [r0, #8]
 8000de0:	430b      	orrs	r3, r1
 8000de2:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000de4:	6802      	ldr	r2, [r0, #0]
 8000de6:	6893      	ldr	r3, [r2, #8]
 8000de8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000dec:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000dee:	6802      	ldr	r2, [r0, #0]
 8000df0:	6893      	ldr	r3, [r2, #8]
 8000df2:	68c1      	ldr	r1, [r0, #12]
 8000df4:	430b      	orrs	r3, r1
 8000df6:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000df8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000dfa:	4b37      	ldr	r3, [pc, #220]	; (8000ed8 <ADC_Init+0x130>)
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d057      	beq.n	8000eb0 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e00:	6802      	ldr	r2, [r0, #0]
 8000e02:	6893      	ldr	r3, [r2, #8]
 8000e04:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000e08:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000e0a:	6802      	ldr	r2, [r0, #0]
 8000e0c:	6893      	ldr	r3, [r2, #8]
 8000e0e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8000e10:	430b      	orrs	r3, r1
 8000e12:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e14:	6802      	ldr	r2, [r0, #0]
 8000e16:	6893      	ldr	r3, [r2, #8]
 8000e18:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000e1c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000e1e:	6802      	ldr	r2, [r0, #0]
 8000e20:	6893      	ldr	r3, [r2, #8]
 8000e22:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8000e24:	430b      	orrs	r3, r1
 8000e26:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000e28:	6802      	ldr	r2, [r0, #0]
 8000e2a:	6893      	ldr	r3, [r2, #8]
 8000e2c:	f023 0302 	bic.w	r3, r3, #2
 8000e30:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000e32:	6802      	ldr	r2, [r0, #0]
 8000e34:	6893      	ldr	r3, [r2, #8]
 8000e36:	6981      	ldr	r1, [r0, #24]
 8000e38:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8000e3c:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000e3e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d03f      	beq.n	8000ec6 <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000e46:	6802      	ldr	r2, [r0, #0]
 8000e48:	6853      	ldr	r3, [r2, #4]
 8000e4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e4e:	6053      	str	r3, [r2, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000e50:	6802      	ldr	r2, [r0, #0]
 8000e52:	6853      	ldr	r3, [r2, #4]
 8000e54:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000e58:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000e5a:	6801      	ldr	r1, [r0, #0]
 8000e5c:	684b      	ldr	r3, [r1, #4]
 8000e5e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000e60:	3a01      	subs	r2, #1
 8000e62:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8000e66:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000e68:	6802      	ldr	r2, [r0, #0]
 8000e6a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000e6c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000e70:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e72:	6801      	ldr	r1, [r0, #0]
 8000e74:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000e76:	69c2      	ldr	r2, [r0, #28]
 8000e78:	3a01      	subs	r2, #1
 8000e7a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8000e7e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000e80:	6802      	ldr	r2, [r0, #0]
 8000e82:	6893      	ldr	r3, [r2, #8]
 8000e84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000e88:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000e8a:	6802      	ldr	r2, [r0, #0]
 8000e8c:	6893      	ldr	r3, [r2, #8]
 8000e8e:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8000e92:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8000e96:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000e98:	6802      	ldr	r2, [r0, #0]
 8000e9a:	6893      	ldr	r3, [r2, #8]
 8000e9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ea0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000ea2:	6802      	ldr	r2, [r0, #0]
 8000ea4:	6893      	ldr	r3, [r2, #8]
 8000ea6:	6941      	ldr	r1, [r0, #20]
 8000ea8:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8000eac:	6093      	str	r3, [r2, #8]
}
 8000eae:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000eb0:	6802      	ldr	r2, [r0, #0]
 8000eb2:	6893      	ldr	r3, [r2, #8]
 8000eb4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000eb8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000eba:	6802      	ldr	r2, [r0, #0]
 8000ebc:	6893      	ldr	r3, [r2, #8]
 8000ebe:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000ec2:	6093      	str	r3, [r2, #8]
 8000ec4:	e7b0      	b.n	8000e28 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000ec6:	6802      	ldr	r2, [r0, #0]
 8000ec8:	6853      	ldr	r3, [r2, #4]
 8000eca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ece:	6053      	str	r3, [r2, #4]
 8000ed0:	e7ca      	b.n	8000e68 <ADC_Init+0xc0>
 8000ed2:	bf00      	nop
 8000ed4:	40012300 	.word	0x40012300
 8000ed8:	0f000001 	.word	0x0f000001

08000edc <HAL_ADC_Init>:
  if(hadc == NULL)
 8000edc:	b328      	cbz	r0, 8000f2a <HAL_ADC_Init+0x4e>
{
 8000ede:	b510      	push	{r4, lr}
 8000ee0:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000ee2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000ee4:	b143      	cbz	r3, 8000ef8 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ee8:	f013 0f10 	tst.w	r3, #16
 8000eec:	d00b      	beq.n	8000f06 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8000eee:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8000ef6:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8000ef8:	f7ff fbf8 	bl	80006ec <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8000efc:	2300      	movs	r3, #0
 8000efe:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8000f00:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8000f04:	e7ef      	b.n	8000ee6 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8000f06:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <HAL_ADC_Init+0x54>)
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	f043 0302 	orr.w	r3, r3, #2
 8000f10:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8000f12:	4620      	mov	r0, r4
 8000f14:	f7ff ff48 	bl	8000da8 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8000f18:	2000      	movs	r0, #0
 8000f1a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000f1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f1e:	f023 0303 	bic.w	r3, r3, #3
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	6423      	str	r3, [r4, #64]	; 0x40
 8000f28:	e7e2      	b.n	8000ef0 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8000f2a:	2001      	movs	r0, #1
}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	ffffeefd 	.word	0xffffeefd

08000f34 <HAL_ADC_Start>:
{
 8000f34:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000f3a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d073      	beq.n	800102a <HAL_ADC_Start+0xf6>
 8000f42:	2301      	movs	r3, #1
 8000f44:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f48:	6803      	ldr	r3, [r0, #0]
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	f012 0f01 	tst.w	r2, #1
 8000f50:	d113      	bne.n	8000f7a <HAL_ADC_Start+0x46>
    __HAL_ADC_ENABLE(hadc);
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	f042 0201 	orr.w	r2, r2, #1
 8000f58:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000f5a:	4b39      	ldr	r3, [pc, #228]	; (8001040 <HAL_ADC_Start+0x10c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a39      	ldr	r2, [pc, #228]	; (8001044 <HAL_ADC_Start+0x110>)
 8000f60:	fba2 2303 	umull	r2, r3, r2, r3
 8000f64:	0c9b      	lsrs	r3, r3, #18
 8000f66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000f6a:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8000f6c:	e002      	b.n	8000f74 <HAL_ADC_Start+0x40>
      counter--;
 8000f6e:	9b01      	ldr	r3, [sp, #4]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8000f74:	9b01      	ldr	r3, [sp, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f9      	bne.n	8000f6e <HAL_ADC_Start+0x3a>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f7a:	6803      	ldr	r3, [r0, #0]
 8000f7c:	689a      	ldr	r2, [r3, #8]
 8000f7e:	f012 0f01 	tst.w	r2, #1
 8000f82:	d054      	beq.n	800102e <HAL_ADC_Start+0xfa>
    ADC_STATE_CLR_SET(hadc->State,
 8000f84:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000f86:	4a30      	ldr	r2, [pc, #192]	; (8001048 <HAL_ADC_Start+0x114>)
 8000f88:	400a      	ands	r2, r1
 8000f8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f8e:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000f96:	d005      	beq.n	8000fa4 <HAL_ADC_Start+0x70>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f98:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000f9a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000f9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000fa2:	6402      	str	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fa4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000fa6:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8000faa:	d019      	beq.n	8000fe0 <HAL_ADC_Start+0xac>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000fae:	f022 0206 	bic.w	r2, r2, #6
 8000fb2:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000fba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000fbe:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000fc0:	4b22      	ldr	r3, [pc, #136]	; (800104c <HAL_ADC_Start+0x118>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f013 0f1f 	tst.w	r3, #31
 8000fc8:	d10d      	bne.n	8000fe6 <HAL_ADC_Start+0xb2>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000fca:	6803      	ldr	r3, [r0, #0]
 8000fcc:	689a      	ldr	r2, [r3, #8]
 8000fce:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000fd2:	d12f      	bne.n	8001034 <HAL_ADC_Start+0x100>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000fda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8000fdc:	2000      	movs	r0, #0
 8000fde:	e027      	b.n	8001030 <HAL_ADC_Start+0xfc>
      ADC_CLEAR_ERRORCODE(hadc);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	6442      	str	r2, [r0, #68]	; 0x44
 8000fe4:	e7e6      	b.n	8000fb4 <HAL_ADC_Start+0x80>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000fe6:	6803      	ldr	r3, [r0, #0]
 8000fe8:	4a19      	ldr	r2, [pc, #100]	; (8001050 <HAL_ADC_Start+0x11c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d00a      	beq.n	8001004 <HAL_ADC_Start+0xd0>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_ADC_Start+0x118>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f013 0f10 	tst.w	r3, #16
 8000ff6:	d11f      	bne.n	8001038 <HAL_ADC_Start+0x104>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000ff8:	6803      	ldr	r3, [r0, #0]
 8000ffa:	4a16      	ldr	r2, [pc, #88]	; (8001054 <HAL_ADC_Start+0x120>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d00a      	beq.n	8001016 <HAL_ADC_Start+0xe2>
  return HAL_OK;
 8001000:	2000      	movs	r0, #0
 8001002:	e015      	b.n	8001030 <HAL_ADC_Start+0xfc>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800100a:	d1f0      	bne.n	8000fee <HAL_ADC_Start+0xba>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	e7eb      	b.n	8000fee <HAL_ADC_Start+0xba>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800101c:	d10e      	bne.n	800103c <HAL_ADC_Start+0x108>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001024:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001026:	2000      	movs	r0, #0
 8001028:	e002      	b.n	8001030 <HAL_ADC_Start+0xfc>
  __HAL_LOCK(hadc);
 800102a:	2002      	movs	r0, #2
 800102c:	e000      	b.n	8001030 <HAL_ADC_Start+0xfc>
  return HAL_OK;
 800102e:	2000      	movs	r0, #0
}
 8001030:	b002      	add	sp, #8
 8001032:	4770      	bx	lr
  return HAL_OK;
 8001034:	2000      	movs	r0, #0
 8001036:	e7fb      	b.n	8001030 <HAL_ADC_Start+0xfc>
 8001038:	2000      	movs	r0, #0
 800103a:	e7f9      	b.n	8001030 <HAL_ADC_Start+0xfc>
 800103c:	2000      	movs	r0, #0
 800103e:	e7f7      	b.n	8001030 <HAL_ADC_Start+0xfc>
 8001040:	20000000 	.word	0x20000000
 8001044:	431bde83 	.word	0x431bde83
 8001048:	fffff8fe 	.word	0xfffff8fe
 800104c:	40012300 	.word	0x40012300
 8001050:	40012000 	.word	0x40012000
 8001054:	40012200 	.word	0x40012200

08001058 <HAL_ADC_PollForConversion>:
{
 8001058:	b570      	push	{r4, r5, r6, lr}
 800105a:	4604      	mov	r4, r0
 800105c:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800105e:	6803      	ldr	r3, [r0, #0]
 8001060:	689a      	ldr	r2, [r3, #8]
 8001062:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001066:	d003      	beq.n	8001070 <HAL_ADC_PollForConversion+0x18>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001068:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800106a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800106e:	d119      	bne.n	80010a4 <HAL_ADC_PollForConversion+0x4c>
  tickstart = HAL_GetTick();
 8001070:	f7ff fe80 	bl	8000d74 <HAL_GetTick>
 8001074:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001076:	6823      	ldr	r3, [r4, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	f012 0f02 	tst.w	r2, #2
 800107e:	d11a      	bne.n	80010b6 <HAL_ADC_PollForConversion+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8001080:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001084:	d0f7      	beq.n	8001076 <HAL_ADC_PollForConversion+0x1e>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001086:	b125      	cbz	r5, 8001092 <HAL_ADC_PollForConversion+0x3a>
 8001088:	f7ff fe74 	bl	8000d74 <HAL_GetTick>
 800108c:	1b80      	subs	r0, r0, r6
 800108e:	42a8      	cmp	r0, r5
 8001090:	d9f1      	bls.n	8001076 <HAL_ADC_PollForConversion+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001092:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 800109a:	2300      	movs	r3, #0
 800109c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 80010a0:	2003      	movs	r0, #3
 80010a2:	e02d      	b.n	8001100 <HAL_ADC_PollForConversion+0xa8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010a4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80010a6:	f043 0320 	orr.w	r3, r3, #32
 80010aa:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 80010ac:	2300      	movs	r3, #0
 80010ae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 80010b2:	2001      	movs	r0, #1
 80010b4:	e024      	b.n	8001100 <HAL_ADC_PollForConversion+0xa8>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80010b6:	f06f 0212 	mvn.w	r2, #18
 80010ba:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c2:	6423      	str	r3, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010c4:	6823      	ldr	r3, [r4, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80010cc:	d117      	bne.n	80010fe <HAL_ADC_PollForConversion+0xa6>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010ce:	69a2      	ldr	r2, [r4, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010d0:	b9ba      	cbnz	r2, 8001102 <HAL_ADC_PollForConversion+0xaa>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80010d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010d4:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80010d8:	d003      	beq.n	80010e2 <HAL_ADC_PollForConversion+0x8a>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80010da:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80010dc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80010e0:	d111      	bne.n	8001106 <HAL_ADC_PollForConversion+0xae>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010e8:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010ec:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80010f0:	d10b      	bne.n	800110a <HAL_ADC_PollForConversion+0xb2>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6423      	str	r3, [r4, #64]	; 0x40
  return HAL_OK;
 80010fa:	2000      	movs	r0, #0
 80010fc:	e000      	b.n	8001100 <HAL_ADC_PollForConversion+0xa8>
 80010fe:	2000      	movs	r0, #0
}
 8001100:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001102:	2000      	movs	r0, #0
 8001104:	e7fc      	b.n	8001100 <HAL_ADC_PollForConversion+0xa8>
 8001106:	2000      	movs	r0, #0
 8001108:	e7fa      	b.n	8001100 <HAL_ADC_PollForConversion+0xa8>
 800110a:	2000      	movs	r0, #0
 800110c:	e7f8      	b.n	8001100 <HAL_ADC_PollForConversion+0xa8>

0800110e <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 800110e:	6803      	ldr	r3, [r0, #0]
 8001110:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8001112:	4770      	bx	lr

08001114 <HAL_ADC_ConfigChannel>:
{
 8001114:	b430      	push	{r4, r5}
 8001116:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800111c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001120:	2b01      	cmp	r3, #1
 8001122:	f000 80d1 	beq.w	80012c8 <HAL_ADC_ConfigChannel+0x1b4>
 8001126:	2301      	movs	r3, #1
 8001128:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800112c:	680b      	ldr	r3, [r1, #0]
 800112e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001132:	bf18      	it	ne
 8001134:	2b09      	cmpne	r3, #9
 8001136:	d922      	bls.n	800117e <HAL_ADC_ConfigChannel+0x6a>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001138:	6805      	ldr	r5, [r0, #0]
 800113a:	68ea      	ldr	r2, [r5, #12]
 800113c:	b29b      	uxth	r3, r3
 800113e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001142:	3b1e      	subs	r3, #30
 8001144:	2407      	movs	r4, #7
 8001146:	fa04 f303 	lsl.w	r3, r4, r3
 800114a:	ea22 0303 	bic.w	r3, r2, r3
 800114e:	60eb      	str	r3, [r5, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001150:	680b      	ldr	r3, [r1, #0]
 8001152:	4a5e      	ldr	r2, [pc, #376]	; (80012cc <HAL_ADC_ConfigChannel+0x1b8>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d00b      	beq.n	8001170 <HAL_ADC_ConfigChannel+0x5c>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001158:	6805      	ldr	r5, [r0, #0]
 800115a:	68ea      	ldr	r2, [r5, #12]
 800115c:	688c      	ldr	r4, [r1, #8]
 800115e:	b29b      	uxth	r3, r3
 8001160:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001164:	3b1e      	subs	r3, #30
 8001166:	fa04 f303 	lsl.w	r3, r4, r3
 800116a:	4313      	orrs	r3, r2
 800116c:	60eb      	str	r3, [r5, #12]
 800116e:	e01b      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x94>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001170:	6802      	ldr	r2, [r0, #0]
 8001172:	68d3      	ldr	r3, [r2, #12]
 8001174:	688c      	ldr	r4, [r1, #8]
 8001176:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 800117a:	60d3      	str	r3, [r2, #12]
 800117c:	e014      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x94>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800117e:	6805      	ldr	r5, [r0, #0]
 8001180:	692a      	ldr	r2, [r5, #16]
 8001182:	b29b      	uxth	r3, r3
 8001184:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001188:	2407      	movs	r4, #7
 800118a:	fa04 f303 	lsl.w	r3, r4, r3
 800118e:	ea22 0303 	bic.w	r3, r2, r3
 8001192:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001194:	6805      	ldr	r5, [r0, #0]
 8001196:	692a      	ldr	r2, [r5, #16]
 8001198:	688c      	ldr	r4, [r1, #8]
 800119a:	880b      	ldrh	r3, [r1, #0]
 800119c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80011a0:	fa04 f303 	lsl.w	r3, r4, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	612b      	str	r3, [r5, #16]
  if (sConfig->Rank < 7)
 80011a8:	684b      	ldr	r3, [r1, #4]
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d828      	bhi.n	8001200 <HAL_ADC_ConfigChannel+0xec>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011ae:	6805      	ldr	r5, [r0, #0]
 80011b0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80011b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80011b6:	3b05      	subs	r3, #5
 80011b8:	241f      	movs	r4, #31
 80011ba:	fa04 f303 	lsl.w	r3, r4, r3
 80011be:	ea22 0303 	bic.w	r3, r2, r3
 80011c2:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011c4:	6805      	ldr	r5, [r0, #0]
 80011c6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80011c8:	684b      	ldr	r3, [r1, #4]
 80011ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80011ce:	3b05      	subs	r3, #5
 80011d0:	880c      	ldrh	r4, [r1, #0]
 80011d2:	fa04 f303 	lsl.w	r3, r4, r3
 80011d6:	4313      	orrs	r3, r2
 80011d8:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80011da:	6802      	ldr	r2, [r0, #0]
 80011dc:	4b3c      	ldr	r3, [pc, #240]	; (80012d0 <HAL_ADC_ConfigChannel+0x1bc>)
 80011de:	429a      	cmp	r2, r3
 80011e0:	d03e      	beq.n	8001260 <HAL_ADC_ConfigChannel+0x14c>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011e2:	6802      	ldr	r2, [r0, #0]
 80011e4:	4b3a      	ldr	r3, [pc, #232]	; (80012d0 <HAL_ADC_ConfigChannel+0x1bc>)
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d044      	beq.n	8001274 <HAL_ADC_ConfigChannel+0x160>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011ea:	6802      	ldr	r2, [r0, #0]
 80011ec:	4b38      	ldr	r3, [pc, #224]	; (80012d0 <HAL_ADC_ConfigChannel+0x1bc>)
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d049      	beq.n	8001286 <HAL_ADC_ConfigChannel+0x172>
  __HAL_UNLOCK(hadc);
 80011f2:	2300      	movs	r3, #0
 80011f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80011f8:	4618      	mov	r0, r3
}
 80011fa:	b002      	add	sp, #8
 80011fc:	bc30      	pop	{r4, r5}
 80011fe:	4770      	bx	lr
  else if (sConfig->Rank < 13)
 8001200:	2b0c      	cmp	r3, #12
 8001202:	d816      	bhi.n	8001232 <HAL_ADC_ConfigChannel+0x11e>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001204:	6805      	ldr	r5, [r0, #0]
 8001206:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001208:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800120c:	3b23      	subs	r3, #35	; 0x23
 800120e:	241f      	movs	r4, #31
 8001210:	fa04 f303 	lsl.w	r3, r4, r3
 8001214:	ea22 0303 	bic.w	r3, r2, r3
 8001218:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800121a:	6805      	ldr	r5, [r0, #0]
 800121c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800121e:	684b      	ldr	r3, [r1, #4]
 8001220:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001224:	3b23      	subs	r3, #35	; 0x23
 8001226:	880c      	ldrh	r4, [r1, #0]
 8001228:	fa04 f303 	lsl.w	r3, r4, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	632b      	str	r3, [r5, #48]	; 0x30
 8001230:	e7d3      	b.n	80011da <HAL_ADC_ConfigChannel+0xc6>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001232:	6805      	ldr	r5, [r0, #0]
 8001234:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001236:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800123a:	3b41      	subs	r3, #65	; 0x41
 800123c:	241f      	movs	r4, #31
 800123e:	fa04 f303 	lsl.w	r3, r4, r3
 8001242:	ea22 0303 	bic.w	r3, r2, r3
 8001246:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001248:	6805      	ldr	r5, [r0, #0]
 800124a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800124c:	684b      	ldr	r3, [r1, #4]
 800124e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001252:	3b41      	subs	r3, #65	; 0x41
 8001254:	880c      	ldrh	r4, [r1, #0]
 8001256:	fa04 f303 	lsl.w	r3, r4, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	62eb      	str	r3, [r5, #44]	; 0x2c
 800125e:	e7bc      	b.n	80011da <HAL_ADC_ConfigChannel+0xc6>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001260:	680b      	ldr	r3, [r1, #0]
 8001262:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001266:	d1bc      	bne.n	80011e2 <HAL_ADC_ConfigChannel+0xce>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001268:	4a1a      	ldr	r2, [pc, #104]	; (80012d4 <HAL_ADC_ConfigChannel+0x1c0>)
 800126a:	6853      	ldr	r3, [r2, #4]
 800126c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001270:	6053      	str	r3, [r2, #4]
 8001272:	e7b6      	b.n	80011e2 <HAL_ADC_ConfigChannel+0xce>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001274:	680b      	ldr	r3, [r1, #0]
 8001276:	2b12      	cmp	r3, #18
 8001278:	d1b7      	bne.n	80011ea <HAL_ADC_ConfigChannel+0xd6>
    ADC->CCR |= ADC_CCR_VBATE;
 800127a:	4a16      	ldr	r2, [pc, #88]	; (80012d4 <HAL_ADC_ConfigChannel+0x1c0>)
 800127c:	6853      	ldr	r3, [r2, #4]
 800127e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001282:	6053      	str	r3, [r2, #4]
 8001284:	e7b1      	b.n	80011ea <HAL_ADC_ConfigChannel+0xd6>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001286:	680b      	ldr	r3, [r1, #0]
 8001288:	4a10      	ldr	r2, [pc, #64]	; (80012cc <HAL_ADC_ConfigChannel+0x1b8>)
 800128a:	2b11      	cmp	r3, #17
 800128c:	bf18      	it	ne
 800128e:	4293      	cmpne	r3, r2
 8001290:	d1af      	bne.n	80011f2 <HAL_ADC_ConfigChannel+0xde>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001292:	4a10      	ldr	r2, [pc, #64]	; (80012d4 <HAL_ADC_ConfigChannel+0x1c0>)
 8001294:	6853      	ldr	r3, [r2, #4]
 8001296:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800129a:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800129c:	680a      	ldr	r2, [r1, #0]
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <HAL_ADC_ConfigChannel+0x1b8>)
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d1a6      	bne.n	80011f2 <HAL_ADC_ConfigChannel+0xde>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <HAL_ADC_ConfigChannel+0x1c4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0c      	ldr	r2, [pc, #48]	; (80012dc <HAL_ADC_ConfigChannel+0x1c8>)
 80012aa:	fba2 2303 	umull	r2, r3, r2, r3
 80012ae:	0c9b      	lsrs	r3, r3, #18
 80012b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80012b8:	e002      	b.n	80012c0 <HAL_ADC_ConfigChannel+0x1ac>
        counter--;
 80012ba:	9b01      	ldr	r3, [sp, #4]
 80012bc:	3b01      	subs	r3, #1
 80012be:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80012c0:	9b01      	ldr	r3, [sp, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f9      	bne.n	80012ba <HAL_ADC_ConfigChannel+0x1a6>
 80012c6:	e794      	b.n	80011f2 <HAL_ADC_ConfigChannel+0xde>
  __HAL_LOCK(hadc);
 80012c8:	2002      	movs	r0, #2
 80012ca:	e796      	b.n	80011fa <HAL_ADC_ConfigChannel+0xe6>
 80012cc:	10000012 	.word	0x10000012
 80012d0:	40012000 	.word	0x40012000
 80012d4:	40012300 	.word	0x40012300
 80012d8:	20000000 	.word	0x20000000
 80012dc:	431bde83 	.word	0x431bde83

080012e0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e0:	4906      	ldr	r1, [pc, #24]	; (80012fc <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80012e2:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012e8:	041b      	lsls	r3, r3, #16
 80012ea:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ec:	0200      	lsls	r0, r0, #8
 80012ee:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80012f4:	4a02      	ldr	r2, [pc, #8]	; (8001300 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80012f6:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80012f8:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00
 8001300:	05fa0000 	.word	0x05fa0000

08001304 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001304:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_NVIC_SetPriority+0x58>)
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800130e:	f1c3 0407 	rsb	r4, r3, #7
 8001312:	2c04      	cmp	r4, #4
 8001314:	bf28      	it	cs
 8001316:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001318:	1d1d      	adds	r5, r3, #4
 800131a:	2d06      	cmp	r5, #6
 800131c:	d914      	bls.n	8001348 <HAL_NVIC_SetPriority+0x44>
 800131e:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	f04f 35ff 	mov.w	r5, #4294967295
 8001324:	fa05 f404 	lsl.w	r4, r5, r4
 8001328:	ea21 0104 	bic.w	r1, r1, r4
 800132c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800132e:	fa05 f303 	lsl.w	r3, r5, r3
 8001332:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001336:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001338:	2800      	cmp	r0, #0
 800133a:	db07      	blt.n	800134c <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133c:	0109      	lsls	r1, r1, #4
 800133e:	b2c9      	uxtb	r1, r1
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <HAL_NVIC_SetPriority+0x5c>)
 8001342:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001344:	bc30      	pop	{r4, r5}
 8001346:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001348:	2300      	movs	r3, #0
 800134a:	e7e9      	b.n	8001320 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134c:	f000 000f 	and.w	r0, r0, #15
 8001350:	0109      	lsls	r1, r1, #4
 8001352:	b2c9      	uxtb	r1, r1
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_NVIC_SetPriority+0x60>)
 8001356:	5419      	strb	r1, [r3, r0]
 8001358:	e7f4      	b.n	8001344 <HAL_NVIC_SetPriority+0x40>
 800135a:	bf00      	nop
 800135c:	e000ed00 	.word	0xe000ed00
 8001360:	e000e400 	.word	0xe000e400
 8001364:	e000ed14 	.word	0xe000ed14

08001368 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001368:	2800      	cmp	r0, #0
 800136a:	db07      	blt.n	800137c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136c:	f000 021f 	and.w	r2, r0, #31
 8001370:	0940      	lsrs	r0, r0, #5
 8001372:	2301      	movs	r3, #1
 8001374:	4093      	lsls	r3, r2
 8001376:	4a02      	ldr	r2, [pc, #8]	; (8001380 <HAL_NVIC_EnableIRQ+0x18>)
 8001378:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000e100 	.word	0xe000e100

08001384 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001384:	3801      	subs	r0, #1
 8001386:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800138a:	d20a      	bcs.n	80013a2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_SYSTICK_Config+0x24>)
 800138e:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001390:	4a06      	ldr	r2, [pc, #24]	; (80013ac <HAL_SYSTICK_Config+0x28>)
 8001392:	21f0      	movs	r1, #240	; 0xf0
 8001394:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001398:	2000      	movs	r0, #0
 800139a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139c:	2207      	movs	r2, #7
 800139e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013a2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000e010 	.word	0xe000e010
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013b0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d003      	beq.n	80013c2 <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80013be:	2001      	movs	r0, #1
 80013c0:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013c2:	2305      	movs	r3, #5
 80013c4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013c8:	6802      	ldr	r2, [r0, #0]
 80013ca:	6813      	ldr	r3, [r2, #0]
 80013cc:	f023 0301 	bic.w	r3, r3, #1
 80013d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80013d2:	2000      	movs	r0, #0
}
 80013d4:	4770      	bx	lr
	...

080013d8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80013d8:	2300      	movs	r3, #0
 80013da:	2b0f      	cmp	r3, #15
 80013dc:	f200 80e3 	bhi.w	80015a6 <HAL_GPIO_Init+0x1ce>
{
 80013e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013e2:	b083      	sub	sp, #12
 80013e4:	e039      	b.n	800145a <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013e6:	2209      	movs	r2, #9
 80013e8:	e000      	b.n	80013ec <HAL_GPIO_Init+0x14>
 80013ea:	2200      	movs	r2, #0
 80013ec:	40b2      	lsls	r2, r6
 80013ee:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 80013f0:	3402      	adds	r4, #2
 80013f2:	4e6d      	ldr	r6, [pc, #436]	; (80015a8 <HAL_GPIO_Init+0x1d0>)
 80013f4:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013f8:	4a6c      	ldr	r2, [pc, #432]	; (80015ac <HAL_GPIO_Init+0x1d4>)
 80013fa:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80013fc:	43ea      	mvns	r2, r5
 80013fe:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001402:	684f      	ldr	r7, [r1, #4]
 8001404:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001408:	d001      	beq.n	800140e <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 800140a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 800140e:	4c67      	ldr	r4, [pc, #412]	; (80015ac <HAL_GPIO_Init+0x1d4>)
 8001410:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8001412:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001414:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001418:	684f      	ldr	r7, [r1, #4]
 800141a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800141e:	d001      	beq.n	8001424 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8001420:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8001424:	4c61      	ldr	r4, [pc, #388]	; (80015ac <HAL_GPIO_Init+0x1d4>)
 8001426:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001428:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800142a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800142e:	684f      	ldr	r7, [r1, #4]
 8001430:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001434:	d001      	beq.n	800143a <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8001436:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 800143a:	4c5c      	ldr	r4, [pc, #368]	; (80015ac <HAL_GPIO_Init+0x1d4>)
 800143c:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 800143e:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001440:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001442:	684e      	ldr	r6, [r1, #4]
 8001444:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001448:	d001      	beq.n	800144e <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 800144a:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 800144e:	4c57      	ldr	r4, [pc, #348]	; (80015ac <HAL_GPIO_Init+0x1d4>)
 8001450:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001452:	3301      	adds	r3, #1
 8001454:	2b0f      	cmp	r3, #15
 8001456:	f200 80a4 	bhi.w	80015a2 <HAL_GPIO_Init+0x1ca>
    ioposition = ((uint32_t)0x01) << position;
 800145a:	2201      	movs	r2, #1
 800145c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145e:	680c      	ldr	r4, [r1, #0]
 8001460:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8001464:	ea32 0404 	bics.w	r4, r2, r4
 8001468:	d1f3      	bne.n	8001452 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800146a:	684c      	ldr	r4, [r1, #4]
 800146c:	1e66      	subs	r6, r4, #1
 800146e:	2c11      	cmp	r4, #17
 8001470:	bf18      	it	ne
 8001472:	2e01      	cmpne	r6, #1
 8001474:	d901      	bls.n	800147a <HAL_GPIO_Init+0xa2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001476:	2c12      	cmp	r4, #18
 8001478:	d112      	bne.n	80014a0 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->OSPEEDR; 
 800147a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800147c:	005f      	lsls	r7, r3, #1
 800147e:	2403      	movs	r4, #3
 8001480:	40bc      	lsls	r4, r7
 8001482:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8001486:	68cc      	ldr	r4, [r1, #12]
 8001488:	40bc      	lsls	r4, r7
 800148a:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 800148c:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800148e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001490:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001494:	684c      	ldr	r4, [r1, #4]
 8001496:	f3c4 1200 	ubfx	r2, r4, #4, #1
 800149a:	409a      	lsls	r2, r3
 800149c:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 800149e:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80014a0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80014a2:	005e      	lsls	r6, r3, #1
 80014a4:	2403      	movs	r4, #3
 80014a6:	40b4      	lsls	r4, r6
 80014a8:	43e2      	mvns	r2, r4
 80014aa:	ea27 0704 	bic.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80014ae:	688c      	ldr	r4, [r1, #8]
 80014b0:	40b4      	lsls	r4, r6
 80014b2:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 80014b4:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014b6:	684c      	ldr	r4, [r1, #4]
 80014b8:	2c12      	cmp	r4, #18
 80014ba:	bf18      	it	ne
 80014bc:	2c02      	cmpne	r4, #2
 80014be:	d113      	bne.n	80014e8 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3];
 80014c0:	08df      	lsrs	r7, r3, #3
 80014c2:	3708      	adds	r7, #8
 80014c4:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80014c8:	f003 0407 	and.w	r4, r3, #7
 80014cc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80014d0:	240f      	movs	r4, #15
 80014d2:	fa04 f40c 	lsl.w	r4, r4, ip
 80014d6:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80014da:	690c      	ldr	r4, [r1, #16]
 80014dc:	fa04 f40c 	lsl.w	r4, r4, ip
 80014e0:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 80014e4:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 80014e8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80014ea:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80014ec:	684a      	ldr	r2, [r1, #4]
 80014ee:	f002 0203 	and.w	r2, r2, #3
 80014f2:	40b2      	lsls	r2, r6
 80014f4:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80014f6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014f8:	684a      	ldr	r2, [r1, #4]
 80014fa:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80014fe:	d0a8      	beq.n	8001452 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001500:	4a2b      	ldr	r2, [pc, #172]	; (80015b0 <HAL_GPIO_Init+0x1d8>)
 8001502:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001504:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001508:	6454      	str	r4, [r2, #68]	; 0x44
 800150a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800150c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001510:	9201      	str	r2, [sp, #4]
 8001512:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001514:	089c      	lsrs	r4, r3, #2
 8001516:	1ca6      	adds	r6, r4, #2
 8001518:	4a23      	ldr	r2, [pc, #140]	; (80015a8 <HAL_GPIO_Init+0x1d0>)
 800151a:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800151e:	f003 0203 	and.w	r2, r3, #3
 8001522:	0096      	lsls	r6, r2, #2
 8001524:	220f      	movs	r2, #15
 8001526:	40b2      	lsls	r2, r6
 8001528:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800152c:	4a21      	ldr	r2, [pc, #132]	; (80015b4 <HAL_GPIO_Init+0x1dc>)
 800152e:	4290      	cmp	r0, r2
 8001530:	f43f af5b 	beq.w	80013ea <HAL_GPIO_Init+0x12>
 8001534:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001538:	4290      	cmp	r0, r2
 800153a:	d022      	beq.n	8001582 <HAL_GPIO_Init+0x1aa>
 800153c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001540:	4290      	cmp	r0, r2
 8001542:	d020      	beq.n	8001586 <HAL_GPIO_Init+0x1ae>
 8001544:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001548:	4290      	cmp	r0, r2
 800154a:	d01e      	beq.n	800158a <HAL_GPIO_Init+0x1b2>
 800154c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001550:	4290      	cmp	r0, r2
 8001552:	d01c      	beq.n	800158e <HAL_GPIO_Init+0x1b6>
 8001554:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001558:	4290      	cmp	r0, r2
 800155a:	d01a      	beq.n	8001592 <HAL_GPIO_Init+0x1ba>
 800155c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001560:	4290      	cmp	r0, r2
 8001562:	d018      	beq.n	8001596 <HAL_GPIO_Init+0x1be>
 8001564:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001568:	4290      	cmp	r0, r2
 800156a:	d016      	beq.n	800159a <HAL_GPIO_Init+0x1c2>
 800156c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001570:	4290      	cmp	r0, r2
 8001572:	d014      	beq.n	800159e <HAL_GPIO_Init+0x1c6>
 8001574:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001578:	4290      	cmp	r0, r2
 800157a:	f43f af34 	beq.w	80013e6 <HAL_GPIO_Init+0xe>
 800157e:	220a      	movs	r2, #10
 8001580:	e734      	b.n	80013ec <HAL_GPIO_Init+0x14>
 8001582:	2201      	movs	r2, #1
 8001584:	e732      	b.n	80013ec <HAL_GPIO_Init+0x14>
 8001586:	2202      	movs	r2, #2
 8001588:	e730      	b.n	80013ec <HAL_GPIO_Init+0x14>
 800158a:	2203      	movs	r2, #3
 800158c:	e72e      	b.n	80013ec <HAL_GPIO_Init+0x14>
 800158e:	2204      	movs	r2, #4
 8001590:	e72c      	b.n	80013ec <HAL_GPIO_Init+0x14>
 8001592:	2205      	movs	r2, #5
 8001594:	e72a      	b.n	80013ec <HAL_GPIO_Init+0x14>
 8001596:	2206      	movs	r2, #6
 8001598:	e728      	b.n	80013ec <HAL_GPIO_Init+0x14>
 800159a:	2207      	movs	r2, #7
 800159c:	e726      	b.n	80013ec <HAL_GPIO_Init+0x14>
 800159e:	2208      	movs	r2, #8
 80015a0:	e724      	b.n	80013ec <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 80015a2:	b003      	add	sp, #12
 80015a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015a6:	4770      	bx	lr
 80015a8:	40013800 	.word	0x40013800
 80015ac:	40013c00 	.word	0x40013c00
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40020000 	.word	0x40020000

080015b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80015b8:	b510      	push	{r4, lr}
 80015ba:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <HAL_PWREx_EnableOverDrive+0x74>)
 80015be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015c4:	641a      	str	r2, [r3, #64]	; 0x40
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80015d0:	4a17      	ldr	r2, [pc, #92]	; (8001630 <HAL_PWREx_EnableOverDrive+0x78>)
 80015d2:	6813      	ldr	r3, [r2, #0]
 80015d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015da:	f7ff fbcb 	bl	8000d74 <HAL_GetTick>
 80015de:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <HAL_PWREx_EnableOverDrive+0x78>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80015e8:	d108      	bne.n	80015fc <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015ea:	f7ff fbc3 	bl	8000d74 <HAL_GetTick>
 80015ee:	1b00      	subs	r0, r0, r4
 80015f0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80015f4:	d9f4      	bls.n	80015e0 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 80015f6:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 80015f8:	b002      	add	sp, #8
 80015fa:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015fc:	4a0c      	ldr	r2, [pc, #48]	; (8001630 <HAL_PWREx_EnableOverDrive+0x78>)
 80015fe:	6813      	ldr	r3, [r2, #0]
 8001600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001604:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8001606:	f7ff fbb5 	bl	8000d74 <HAL_GetTick>
 800160a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <HAL_PWREx_EnableOverDrive+0x78>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001614:	d107      	bne.n	8001626 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001616:	f7ff fbad 	bl	8000d74 <HAL_GetTick>
 800161a:	1b00      	subs	r0, r0, r4
 800161c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001620:	d9f4      	bls.n	800160c <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8001622:	2003      	movs	r0, #3
 8001624:	e7e8      	b.n	80015f8 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8001626:	2000      	movs	r0, #0
 8001628:	e7e6      	b.n	80015f8 <HAL_PWREx_EnableOverDrive+0x40>
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800
 8001630:	40007000 	.word	0x40007000

08001634 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001634:	2800      	cmp	r0, #0
 8001636:	f000 8206 	beq.w	8001a46 <HAL_RCC_OscConfig+0x412>
{
 800163a:	b570      	push	{r4, r5, r6, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001640:	6803      	ldr	r3, [r0, #0]
 8001642:	f013 0f01 	tst.w	r3, #1
 8001646:	d029      	beq.n	800169c <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001648:	4ba7      	ldr	r3, [pc, #668]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 030c 	and.w	r3, r3, #12
 8001650:	2b04      	cmp	r3, #4
 8001652:	d01a      	beq.n	800168a <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001654:	4ba4      	ldr	r3, [pc, #656]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 030c 	and.w	r3, r3, #12
 800165c:	2b08      	cmp	r3, #8
 800165e:	d00f      	beq.n	8001680 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001660:	6863      	ldr	r3, [r4, #4]
 8001662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001666:	d040      	beq.n	80016ea <HAL_RCC_OscConfig+0xb6>
 8001668:	2b00      	cmp	r3, #0
 800166a:	d154      	bne.n	8001716 <HAL_RCC_OscConfig+0xe2>
 800166c:	4b9e      	ldr	r3, [pc, #632]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	e039      	b.n	80016f4 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001680:	4b99      	ldr	r3, [pc, #612]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001688:	d0ea      	beq.n	8001660 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800168a:	4b97      	ldr	r3, [pc, #604]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001692:	d003      	beq.n	800169c <HAL_RCC_OscConfig+0x68>
 8001694:	6863      	ldr	r3, [r4, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 81d7 	beq.w	8001a4a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169c:	6823      	ldr	r3, [r4, #0]
 800169e:	f013 0f02 	tst.w	r3, #2
 80016a2:	d074      	beq.n	800178e <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016a4:	4b90      	ldr	r3, [pc, #576]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f013 0f0c 	tst.w	r3, #12
 80016ac:	d05e      	beq.n	800176c <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ae:	4b8e      	ldr	r3, [pc, #568]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 030c 	and.w	r3, r3, #12
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d053      	beq.n	8001762 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016ba:	68e3      	ldr	r3, [r4, #12]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 8089 	beq.w	80017d4 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016c2:	4a89      	ldr	r2, [pc, #548]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 80016c4:	6813      	ldr	r3, [r2, #0]
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016cc:	f7ff fb52 	bl	8000d74 <HAL_GetTick>
 80016d0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d2:	4b85      	ldr	r3, [pc, #532]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f013 0f02 	tst.w	r3, #2
 80016da:	d172      	bne.n	80017c2 <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016dc:	f7ff fb4a 	bl	8000d74 <HAL_GetTick>
 80016e0:	1b40      	subs	r0, r0, r5
 80016e2:	2802      	cmp	r0, #2
 80016e4:	d9f5      	bls.n	80016d2 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 80016e6:	2003      	movs	r0, #3
 80016e8:	e1b4      	b.n	8001a54 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ea:	4a7f      	ldr	r2, [pc, #508]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 80016ec:	6813      	ldr	r3, [r2, #0]
 80016ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f2:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f4:	6863      	ldr	r3, [r4, #4]
 80016f6:	b32b      	cbz	r3, 8001744 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80016f8:	f7ff fb3c 	bl	8000d74 <HAL_GetTick>
 80016fc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fe:	4b7a      	ldr	r3, [pc, #488]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001706:	d1c9      	bne.n	800169c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001708:	f7ff fb34 	bl	8000d74 <HAL_GetTick>
 800170c:	1b40      	subs	r0, r0, r5
 800170e:	2864      	cmp	r0, #100	; 0x64
 8001710:	d9f5      	bls.n	80016fe <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8001712:	2003      	movs	r0, #3
 8001714:	e19e      	b.n	8001a54 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001716:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800171a:	d009      	beq.n	8001730 <HAL_RCC_OscConfig+0xfc>
 800171c:	4b72      	ldr	r3, [pc, #456]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	e7e1      	b.n	80016f4 <HAL_RCC_OscConfig+0xc0>
 8001730:	4b6d      	ldr	r3, [pc, #436]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	e7d7      	b.n	80016f4 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8001744:	f7ff fb16 	bl	8000d74 <HAL_GetTick>
 8001748:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174a:	4b67      	ldr	r3, [pc, #412]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001752:	d0a3      	beq.n	800169c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001754:	f7ff fb0e 	bl	8000d74 <HAL_GetTick>
 8001758:	1b40      	subs	r0, r0, r5
 800175a:	2864      	cmp	r0, #100	; 0x64
 800175c:	d9f5      	bls.n	800174a <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 800175e:	2003      	movs	r0, #3
 8001760:	e178      	b.n	8001a54 <HAL_RCC_OscConfig+0x420>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001762:	4b61      	ldr	r3, [pc, #388]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800176a:	d1a6      	bne.n	80016ba <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176c:	4b5e      	ldr	r3, [pc, #376]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f013 0f02 	tst.w	r3, #2
 8001774:	d003      	beq.n	800177e <HAL_RCC_OscConfig+0x14a>
 8001776:	68e3      	ldr	r3, [r4, #12]
 8001778:	2b01      	cmp	r3, #1
 800177a:	f040 8168 	bne.w	8001a4e <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177e:	4a5a      	ldr	r2, [pc, #360]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 8001780:	6813      	ldr	r3, [r2, #0]
 8001782:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001786:	6921      	ldr	r1, [r4, #16]
 8001788:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800178c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800178e:	6823      	ldr	r3, [r4, #0]
 8001790:	f013 0f08 	tst.w	r3, #8
 8001794:	d046      	beq.n	8001824 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001796:	6963      	ldr	r3, [r4, #20]
 8001798:	b383      	cbz	r3, 80017fc <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800179a:	4a53      	ldr	r2, [pc, #332]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 800179c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a4:	f7ff fae6 	bl	8000d74 <HAL_GetTick>
 80017a8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017aa:	4b4f      	ldr	r3, [pc, #316]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 80017ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ae:	f013 0f02 	tst.w	r3, #2
 80017b2:	d137      	bne.n	8001824 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b4:	f7ff fade 	bl	8000d74 <HAL_GetTick>
 80017b8:	1b40      	subs	r0, r0, r5
 80017ba:	2802      	cmp	r0, #2
 80017bc:	d9f5      	bls.n	80017aa <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 80017be:	2003      	movs	r0, #3
 80017c0:	e148      	b.n	8001a54 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c2:	4a49      	ldr	r2, [pc, #292]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 80017c4:	6813      	ldr	r3, [r2, #0]
 80017c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017ca:	6921      	ldr	r1, [r4, #16]
 80017cc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	e7dc      	b.n	800178e <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 80017d4:	4a44      	ldr	r2, [pc, #272]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 80017d6:	6813      	ldr	r3, [r2, #0]
 80017d8:	f023 0301 	bic.w	r3, r3, #1
 80017dc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80017de:	f7ff fac9 	bl	8000d74 <HAL_GetTick>
 80017e2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e4:	4b40      	ldr	r3, [pc, #256]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f013 0f02 	tst.w	r3, #2
 80017ec:	d0cf      	beq.n	800178e <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ee:	f7ff fac1 	bl	8000d74 <HAL_GetTick>
 80017f2:	1b40      	subs	r0, r0, r5
 80017f4:	2802      	cmp	r0, #2
 80017f6:	d9f5      	bls.n	80017e4 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 80017f8:	2003      	movs	r0, #3
 80017fa:	e12b      	b.n	8001a54 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017fc:	4a3a      	ldr	r2, [pc, #232]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 80017fe:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001800:	f023 0301 	bic.w	r3, r3, #1
 8001804:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001806:	f7ff fab5 	bl	8000d74 <HAL_GetTick>
 800180a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800180c:	4b36      	ldr	r3, [pc, #216]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 800180e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001810:	f013 0f02 	tst.w	r3, #2
 8001814:	d006      	beq.n	8001824 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001816:	f7ff faad 	bl	8000d74 <HAL_GetTick>
 800181a:	1b40      	subs	r0, r0, r5
 800181c:	2802      	cmp	r0, #2
 800181e:	d9f5      	bls.n	800180c <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8001820:	2003      	movs	r0, #3
 8001822:	e117      	b.n	8001a54 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001824:	6823      	ldr	r3, [r4, #0]
 8001826:	f013 0f04 	tst.w	r3, #4
 800182a:	d07d      	beq.n	8001928 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800182c:	4b2e      	ldr	r3, [pc, #184]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001834:	d10b      	bne.n	800184e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	4b2c      	ldr	r3, [pc, #176]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 8001838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800183a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800183e:	641a      	str	r2, [r3, #64]	; 0x40
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	9301      	str	r3, [sp, #4]
 8001848:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800184a:	2501      	movs	r5, #1
 800184c:	e000      	b.n	8001850 <HAL_RCC_OscConfig+0x21c>
  FlagStatus pwrclkchanged = RESET;
 800184e:	2500      	movs	r5, #0
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001850:	4b26      	ldr	r3, [pc, #152]	; (80018ec <HAL_RCC_OscConfig+0x2b8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001858:	d00e      	beq.n	8001878 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800185a:	68a3      	ldr	r3, [r4, #8]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d01f      	beq.n	80018a0 <HAL_RCC_OscConfig+0x26c>
 8001860:	2b00      	cmp	r3, #0
 8001862:	d135      	bne.n	80018d0 <HAL_RCC_OscConfig+0x29c>
 8001864:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 8001866:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001868:	f022 0201 	bic.w	r2, r2, #1
 800186c:	671a      	str	r2, [r3, #112]	; 0x70
 800186e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001870:	f022 0204 	bic.w	r2, r2, #4
 8001874:	671a      	str	r2, [r3, #112]	; 0x70
 8001876:	e018      	b.n	80018aa <HAL_RCC_OscConfig+0x276>
      PWR->CR1 |= PWR_CR1_DBP;
 8001878:	4a1c      	ldr	r2, [pc, #112]	; (80018ec <HAL_RCC_OscConfig+0x2b8>)
 800187a:	6813      	ldr	r3, [r2, #0]
 800187c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001880:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001882:	f7ff fa77 	bl	8000d74 <HAL_GetTick>
 8001886:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <HAL_RCC_OscConfig+0x2b8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001890:	d1e3      	bne.n	800185a <HAL_RCC_OscConfig+0x226>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001892:	f7ff fa6f 	bl	8000d74 <HAL_GetTick>
 8001896:	1b80      	subs	r0, r0, r6
 8001898:	2864      	cmp	r0, #100	; 0x64
 800189a:	d9f5      	bls.n	8001888 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 800189c:	2003      	movs	r0, #3
 800189e:	e0d9      	b.n	8001a54 <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a0:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 80018a2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018aa:	68a3      	ldr	r3, [r4, #8]
 80018ac:	b353      	cbz	r3, 8001904 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ae:	f7ff fa61 	bl	8000d74 <HAL_GetTick>
 80018b2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 80018b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b8:	f013 0f02 	tst.w	r3, #2
 80018bc:	d133      	bne.n	8001926 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018be:	f7ff fa59 	bl	8000d74 <HAL_GetTick>
 80018c2:	1b80      	subs	r0, r0, r6
 80018c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80018c8:	4298      	cmp	r0, r3
 80018ca:	d9f3      	bls.n	80018b4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80018cc:	2003      	movs	r0, #3
 80018ce:	e0c1      	b.n	8001a54 <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d0:	2b05      	cmp	r3, #5
 80018d2:	d00d      	beq.n	80018f0 <HAL_RCC_OscConfig+0x2bc>
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 80018d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018d8:	f022 0201 	bic.w	r2, r2, #1
 80018dc:	671a      	str	r2, [r3, #112]	; 0x70
 80018de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018e0:	f022 0204 	bic.w	r2, r2, #4
 80018e4:	671a      	str	r2, [r3, #112]	; 0x70
 80018e6:	e7e0      	b.n	80018aa <HAL_RCC_OscConfig+0x276>
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40007000 	.word	0x40007000
 80018f0:	4b60      	ldr	r3, [pc, #384]	; (8001a74 <HAL_RCC_OscConfig+0x440>)
 80018f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018f4:	f042 0204 	orr.w	r2, r2, #4
 80018f8:	671a      	str	r2, [r3, #112]	; 0x70
 80018fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018fc:	f042 0201 	orr.w	r2, r2, #1
 8001900:	671a      	str	r2, [r3, #112]	; 0x70
 8001902:	e7d2      	b.n	80018aa <HAL_RCC_OscConfig+0x276>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001904:	f7ff fa36 	bl	8000d74 <HAL_GetTick>
 8001908:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800190a:	4b5a      	ldr	r3, [pc, #360]	; (8001a74 <HAL_RCC_OscConfig+0x440>)
 800190c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190e:	f013 0f02 	tst.w	r3, #2
 8001912:	d008      	beq.n	8001926 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001914:	f7ff fa2e 	bl	8000d74 <HAL_GetTick>
 8001918:	1b80      	subs	r0, r0, r6
 800191a:	f241 3388 	movw	r3, #5000	; 0x1388
 800191e:	4298      	cmp	r0, r3
 8001920:	d9f3      	bls.n	800190a <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8001922:	2003      	movs	r0, #3
 8001924:	e096      	b.n	8001a54 <HAL_RCC_OscConfig+0x420>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001926:	b9fd      	cbnz	r5, 8001968 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001928:	69a3      	ldr	r3, [r4, #24]
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 8091 	beq.w	8001a52 <HAL_RCC_OscConfig+0x41e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001930:	4a50      	ldr	r2, [pc, #320]	; (8001a74 <HAL_RCC_OscConfig+0x440>)
 8001932:	6892      	ldr	r2, [r2, #8]
 8001934:	f002 020c 	and.w	r2, r2, #12
 8001938:	2a08      	cmp	r2, #8
 800193a:	d059      	beq.n	80019f0 <HAL_RCC_OscConfig+0x3bc>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800193c:	2b02      	cmp	r3, #2
 800193e:	d019      	beq.n	8001974 <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001940:	4a4c      	ldr	r2, [pc, #304]	; (8001a74 <HAL_RCC_OscConfig+0x440>)
 8001942:	6813      	ldr	r3, [r2, #0]
 8001944:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194a:	f7ff fa13 	bl	8000d74 <HAL_GetTick>
 800194e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001950:	4b48      	ldr	r3, [pc, #288]	; (8001a74 <HAL_RCC_OscConfig+0x440>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001958:	d048      	beq.n	80019ec <HAL_RCC_OscConfig+0x3b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195a:	f7ff fa0b 	bl	8000d74 <HAL_GetTick>
 800195e:	1b00      	subs	r0, r0, r4
 8001960:	2802      	cmp	r0, #2
 8001962:	d9f5      	bls.n	8001950 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8001964:	2003      	movs	r0, #3
 8001966:	e075      	b.n	8001a54 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001968:	4a42      	ldr	r2, [pc, #264]	; (8001a74 <HAL_RCC_OscConfig+0x440>)
 800196a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800196c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001970:	6413      	str	r3, [r2, #64]	; 0x40
 8001972:	e7d9      	b.n	8001928 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8001974:	4a3f      	ldr	r2, [pc, #252]	; (8001a74 <HAL_RCC_OscConfig+0x440>)
 8001976:	6813      	ldr	r3, [r2, #0]
 8001978:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800197c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800197e:	f7ff f9f9 	bl	8000d74 <HAL_GetTick>
 8001982:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001984:	4b3b      	ldr	r3, [pc, #236]	; (8001a74 <HAL_RCC_OscConfig+0x440>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800198c:	d006      	beq.n	800199c <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198e:	f7ff f9f1 	bl	8000d74 <HAL_GetTick>
 8001992:	1b40      	subs	r0, r0, r5
 8001994:	2802      	cmp	r0, #2
 8001996:	d9f5      	bls.n	8001984 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 8001998:	2003      	movs	r0, #3
 800199a:	e05b      	b.n	8001a54 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800199c:	69e3      	ldr	r3, [r4, #28]
 800199e:	6a22      	ldr	r2, [r4, #32]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019a4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80019a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80019aa:	0852      	lsrs	r2, r2, #1
 80019ac:	3a01      	subs	r2, #1
 80019ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80019b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80019b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80019b8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80019ba:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80019be:	4a2d      	ldr	r2, [pc, #180]	; (8001a74 <HAL_RCC_OscConfig+0x440>)
 80019c0:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80019c2:	6813      	ldr	r3, [r2, #0]
 80019c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80019ca:	f7ff f9d3 	bl	8000d74 <HAL_GetTick>
 80019ce:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d0:	4b28      	ldr	r3, [pc, #160]	; (8001a74 <HAL_RCC_OscConfig+0x440>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80019d8:	d106      	bne.n	80019e8 <HAL_RCC_OscConfig+0x3b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019da:	f7ff f9cb 	bl	8000d74 <HAL_GetTick>
 80019de:	1b00      	subs	r0, r0, r4
 80019e0:	2802      	cmp	r0, #2
 80019e2:	d9f5      	bls.n	80019d0 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 80019e4:	2003      	movs	r0, #3
 80019e6:	e035      	b.n	8001a54 <HAL_RCC_OscConfig+0x420>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80019e8:	2000      	movs	r0, #0
 80019ea:	e033      	b.n	8001a54 <HAL_RCC_OscConfig+0x420>
 80019ec:	2000      	movs	r0, #0
 80019ee:	e031      	b.n	8001a54 <HAL_RCC_OscConfig+0x420>
      pll_config = RCC->PLLCFGR;
 80019f0:	4a20      	ldr	r2, [pc, #128]	; (8001a74 <HAL_RCC_OscConfig+0x440>)
 80019f2:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d02f      	beq.n	8001a58 <HAL_RCC_OscConfig+0x424>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80019fc:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019fe:	428b      	cmp	r3, r1
 8001a00:	d12c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x428>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a02:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8001a06:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a08:	428b      	cmp	r3, r1
 8001a0a:	d129      	bne.n	8001a60 <HAL_RCC_OscConfig+0x42c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a12:	4013      	ands	r3, r2
 8001a14:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8001a18:	d124      	bne.n	8001a64 <HAL_RCC_OscConfig+0x430>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a1a:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8001a1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a20:	085b      	lsrs	r3, r3, #1
 8001a22:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a24:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8001a28:	d11e      	bne.n	8001a68 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a2a:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 8001a2e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a30:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 8001a34:	d11a      	bne.n	8001a6c <HAL_RCC_OscConfig+0x438>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a36:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001a3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a3c:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 8001a40:	d116      	bne.n	8001a70 <HAL_RCC_OscConfig+0x43c>
  return HAL_OK;
 8001a42:	2000      	movs	r0, #0
 8001a44:	e006      	b.n	8001a54 <HAL_RCC_OscConfig+0x420>
    return HAL_ERROR;
 8001a46:	2001      	movs	r0, #1
}
 8001a48:	4770      	bx	lr
        return HAL_ERROR;
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	e002      	b.n	8001a54 <HAL_RCC_OscConfig+0x420>
        return HAL_ERROR;
 8001a4e:	2001      	movs	r0, #1
 8001a50:	e000      	b.n	8001a54 <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 8001a52:	2000      	movs	r0, #0
}
 8001a54:	b002      	add	sp, #8
 8001a56:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001a58:	2001      	movs	r0, #1
 8001a5a:	e7fb      	b.n	8001a54 <HAL_RCC_OscConfig+0x420>
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	e7f9      	b.n	8001a54 <HAL_RCC_OscConfig+0x420>
 8001a60:	2001      	movs	r0, #1
 8001a62:	e7f7      	b.n	8001a54 <HAL_RCC_OscConfig+0x420>
 8001a64:	2001      	movs	r0, #1
 8001a66:	e7f5      	b.n	8001a54 <HAL_RCC_OscConfig+0x420>
 8001a68:	2001      	movs	r0, #1
 8001a6a:	e7f3      	b.n	8001a54 <HAL_RCC_OscConfig+0x420>
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	e7f1      	b.n	8001a54 <HAL_RCC_OscConfig+0x420>
 8001a70:	2001      	movs	r0, #1
 8001a72:	e7ef      	b.n	8001a54 <HAL_RCC_OscConfig+0x420>
 8001a74:	40023800 	.word	0x40023800

08001a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a7a:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d03d      	beq.n	8001b02 <HAL_RCC_GetSysClockFreq+0x8a>
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d13d      	bne.n	8001b06 <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a8a:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001a98:	d012      	beq.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a9a:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001a9c:	6859      	ldr	r1, [r3, #4]
 8001a9e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	481a      	ldr	r0, [pc, #104]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aa6:	fba1 0100 	umull	r0, r1, r1, r0
 8001aaa:	f7fe fc21 	bl	80002f0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001aae:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001aba:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001abe:	e023      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001ac8:	015c      	lsls	r4, r3, #5
 8001aca:	2500      	movs	r5, #0
 8001acc:	1ae4      	subs	r4, r4, r3
 8001ace:	f165 0500 	sbc.w	r5, r5, #0
 8001ad2:	01ae      	lsls	r6, r5, #6
 8001ad4:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8001ad8:	01a7      	lsls	r7, r4, #6
 8001ada:	1b38      	subs	r0, r7, r4
 8001adc:	eb66 0105 	sbc.w	r1, r6, r5
 8001ae0:	00cc      	lsls	r4, r1, #3
 8001ae2:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8001ae6:	00c5      	lsls	r5, r0, #3
 8001ae8:	18e8      	adds	r0, r5, r3
 8001aea:	f144 0100 	adc.w	r1, r4, #0
 8001aee:	028b      	lsls	r3, r1, #10
 8001af0:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001af4:	0284      	lsls	r4, r0, #10
 8001af6:	4620      	mov	r0, r4
 8001af8:	4619      	mov	r1, r3
 8001afa:	2300      	movs	r3, #0
 8001afc:	f7fe fbf8 	bl	80002f0 <__aeabi_uldivmod>
 8001b00:	e7d5      	b.n	8001aae <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001b02:	4803      	ldr	r0, [pc, #12]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b04:	e000      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b06:	4803      	ldr	r0, [pc, #12]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	017d7840 	.word	0x017d7840
 8001b14:	00f42400 	.word	0x00f42400

08001b18 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001b18:	2800      	cmp	r0, #0
 8001b1a:	f000 80a0 	beq.w	8001c5e <HAL_RCC_ClockConfig+0x146>
{
 8001b1e:	b570      	push	{r4, r5, r6, lr}
 8001b20:	460d      	mov	r5, r1
 8001b22:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b24:	4b52      	ldr	r3, [pc, #328]	; (8001c70 <HAL_RCC_ClockConfig+0x158>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 030f 	and.w	r3, r3, #15
 8001b2c:	428b      	cmp	r3, r1
 8001b2e:	d20b      	bcs.n	8001b48 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b30:	4a4f      	ldr	r2, [pc, #316]	; (8001c70 <HAL_RCC_ClockConfig+0x158>)
 8001b32:	6813      	ldr	r3, [r2, #0]
 8001b34:	f023 030f 	bic.w	r3, r3, #15
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3c:	6813      	ldr	r3, [r2, #0]
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	428b      	cmp	r3, r1
 8001b44:	f040 808d 	bne.w	8001c62 <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	f013 0f02 	tst.w	r3, #2
 8001b4e:	d017      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b50:	f013 0f04 	tst.w	r3, #4
 8001b54:	d004      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b56:	4a47      	ldr	r2, [pc, #284]	; (8001c74 <HAL_RCC_ClockConfig+0x15c>)
 8001b58:	6893      	ldr	r3, [r2, #8]
 8001b5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b5e:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b60:	6823      	ldr	r3, [r4, #0]
 8001b62:	f013 0f08 	tst.w	r3, #8
 8001b66:	d004      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b68:	4a42      	ldr	r2, [pc, #264]	; (8001c74 <HAL_RCC_ClockConfig+0x15c>)
 8001b6a:	6893      	ldr	r3, [r2, #8]
 8001b6c:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b70:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b72:	4a40      	ldr	r2, [pc, #256]	; (8001c74 <HAL_RCC_ClockConfig+0x15c>)
 8001b74:	6893      	ldr	r3, [r2, #8]
 8001b76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b7a:	68a1      	ldr	r1, [r4, #8]
 8001b7c:	430b      	orrs	r3, r1
 8001b7e:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b80:	6823      	ldr	r3, [r4, #0]
 8001b82:	f013 0f01 	tst.w	r3, #1
 8001b86:	d031      	beq.n	8001bec <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b88:	6863      	ldr	r3, [r4, #4]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d020      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d025      	beq.n	8001bde <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b92:	4a38      	ldr	r2, [pc, #224]	; (8001c74 <HAL_RCC_ClockConfig+0x15c>)
 8001b94:	6812      	ldr	r2, [r2, #0]
 8001b96:	f012 0f02 	tst.w	r2, #2
 8001b9a:	d064      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b9c:	4935      	ldr	r1, [pc, #212]	; (8001c74 <HAL_RCC_ClockConfig+0x15c>)
 8001b9e:	688a      	ldr	r2, [r1, #8]
 8001ba0:	f022 0203 	bic.w	r2, r2, #3
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001ba8:	f7ff f8e4 	bl	8000d74 <HAL_GetTick>
 8001bac:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bae:	4b31      	ldr	r3, [pc, #196]	; (8001c74 <HAL_RCC_ClockConfig+0x15c>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	6862      	ldr	r2, [r4, #4]
 8001bb8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001bbc:	d016      	beq.n	8001bec <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bbe:	f7ff f8d9 	bl	8000d74 <HAL_GetTick>
 8001bc2:	1b80      	subs	r0, r0, r6
 8001bc4:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bc8:	4298      	cmp	r0, r3
 8001bca:	d9f0      	bls.n	8001bae <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8001bcc:	2003      	movs	r0, #3
 8001bce:	e045      	b.n	8001c5c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd0:	4a28      	ldr	r2, [pc, #160]	; (8001c74 <HAL_RCC_ClockConfig+0x15c>)
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001bd8:	d1e0      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001bda:	2001      	movs	r0, #1
 8001bdc:	e03e      	b.n	8001c5c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bde:	4a25      	ldr	r2, [pc, #148]	; (8001c74 <HAL_RCC_ClockConfig+0x15c>)
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001be6:	d1d9      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001be8:	2001      	movs	r0, #1
 8001bea:	e037      	b.n	8001c5c <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bec:	4b20      	ldr	r3, [pc, #128]	; (8001c70 <HAL_RCC_ClockConfig+0x158>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 030f 	and.w	r3, r3, #15
 8001bf4:	42ab      	cmp	r3, r5
 8001bf6:	d90a      	bls.n	8001c0e <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf8:	4a1d      	ldr	r2, [pc, #116]	; (8001c70 <HAL_RCC_ClockConfig+0x158>)
 8001bfa:	6813      	ldr	r3, [r2, #0]
 8001bfc:	f023 030f 	bic.w	r3, r3, #15
 8001c00:	432b      	orrs	r3, r5
 8001c02:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c04:	6813      	ldr	r3, [r2, #0]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	42ab      	cmp	r3, r5
 8001c0c:	d12d      	bne.n	8001c6a <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c0e:	6823      	ldr	r3, [r4, #0]
 8001c10:	f013 0f04 	tst.w	r3, #4
 8001c14:	d006      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c16:	4a17      	ldr	r2, [pc, #92]	; (8001c74 <HAL_RCC_ClockConfig+0x15c>)
 8001c18:	6893      	ldr	r3, [r2, #8]
 8001c1a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001c1e:	68e1      	ldr	r1, [r4, #12]
 8001c20:	430b      	orrs	r3, r1
 8001c22:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	f013 0f08 	tst.w	r3, #8
 8001c2a:	d007      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c2c:	4a11      	ldr	r2, [pc, #68]	; (8001c74 <HAL_RCC_ClockConfig+0x15c>)
 8001c2e:	6893      	ldr	r3, [r2, #8]
 8001c30:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001c34:	6921      	ldr	r1, [r4, #16]
 8001c36:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c3a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c3c:	f7ff ff1c 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <HAL_RCC_ClockConfig+0x15c>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c48:	4a0b      	ldr	r2, [pc, #44]	; (8001c78 <HAL_RCC_ClockConfig+0x160>)
 8001c4a:	5cd3      	ldrb	r3, [r2, r3]
 8001c4c:	40d8      	lsrs	r0, r3
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_RCC_ClockConfig+0x164>)
 8001c50:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_RCC_ClockConfig+0x168>)
 8001c54:	6818      	ldr	r0, [r3, #0]
 8001c56:	f7ff f847 	bl	8000ce8 <HAL_InitTick>
  return HAL_OK;
 8001c5a:	2000      	movs	r0, #0
}
 8001c5c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001c5e:	2001      	movs	r0, #1
}
 8001c60:	4770      	bx	lr
      return HAL_ERROR;
 8001c62:	2001      	movs	r0, #1
 8001c64:	e7fa      	b.n	8001c5c <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8001c66:	2001      	movs	r0, #1
 8001c68:	e7f8      	b.n	8001c5c <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	e7f6      	b.n	8001c5c <HAL_RCC_ClockConfig+0x144>
 8001c6e:	bf00      	nop
 8001c70:	40023c00 	.word	0x40023c00
 8001c74:	40023800 	.word	0x40023800
 8001c78:	080052d0 	.word	0x080052d0
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	20000008 	.word	0x20000008

08001c84 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001c84:	4b01      	ldr	r3, [pc, #4]	; (8001c8c <HAL_RCC_GetHCLKFreq+0x8>)
 8001c86:	6818      	ldr	r0, [r3, #0]
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000000 	.word	0x20000000

08001c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c90:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c92:	f7ff fff7 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001c96:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001c9e:	4a03      	ldr	r2, [pc, #12]	; (8001cac <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001ca0:	5cd3      	ldrb	r3, [r2, r3]
}
 8001ca2:	40d8      	lsrs	r0, r3
 8001ca4:	bd08      	pop	{r3, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	080052e0 	.word	0x080052e0

08001cb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cb0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cb2:	f7ff ffe7 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001cb6:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001cbe:	4a03      	ldr	r2, [pc, #12]	; (8001ccc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001cc0:	5cd3      	ldrb	r3, [r2, r3]
}
 8001cc2:	40d8      	lsrs	r0, r3
 8001cc4:	bd08      	pop	{r3, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	080052e0 	.word	0x080052e0

08001cd0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001cd0:	6802      	ldr	r2, [r0, #0]
 8001cd2:	6813      	ldr	r3, [r2, #0]
 8001cd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001cd8:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cda:	6802      	ldr	r2, [r0, #0]
 8001cdc:	6893      	ldr	r3, [r2, #8]
 8001cde:	f023 0301 	bic.w	r3, r3, #1
 8001ce2:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ce4:	2320      	movs	r3, #32
 8001ce6:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	6603      	str	r3, [r0, #96]	; 0x60
}
 8001cec:	4770      	bx	lr
	...

08001cf0 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cf0:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001cf2:	2b20      	cmp	r3, #32
 8001cf4:	d15e      	bne.n	8001db4 <HAL_UART_Receive_IT+0xc4>
    if ((pData == NULL) || (Size == 0U))
 8001cf6:	fab2 f382 	clz	r3, r2
 8001cfa:	095b      	lsrs	r3, r3, #5
 8001cfc:	2900      	cmp	r1, #0
 8001cfe:	bf08      	it	eq
 8001d00:	2301      	moveq	r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d158      	bne.n	8001db8 <HAL_UART_Receive_IT+0xc8>
    __HAL_LOCK(huart);
 8001d06:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d056      	beq.n	8001dbc <HAL_UART_Receive_IT+0xcc>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pRxBuffPtr  = pData;
 8001d14:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize  = Size;
 8001d16:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8001d1a:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    huart->RxISR       = NULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	6603      	str	r3, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8001d22:	6883      	ldr	r3, [r0, #8]
 8001d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d28:	d006      	beq.n	8001d38 <HAL_UART_Receive_IT+0x48>
 8001d2a:	b9a3      	cbnz	r3, 8001d56 <HAL_UART_Receive_IT+0x66>
 8001d2c:	6903      	ldr	r3, [r0, #16]
 8001d2e:	b973      	cbnz	r3, 8001d4e <HAL_UART_Receive_IT+0x5e>
 8001d30:	23ff      	movs	r3, #255	; 0xff
 8001d32:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001d36:	e014      	b.n	8001d62 <HAL_UART_Receive_IT+0x72>
 8001d38:	6903      	ldr	r3, [r0, #16]
 8001d3a:	b923      	cbnz	r3, 8001d46 <HAL_UART_Receive_IT+0x56>
 8001d3c:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001d40:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001d44:	e00d      	b.n	8001d62 <HAL_UART_Receive_IT+0x72>
 8001d46:	23ff      	movs	r3, #255	; 0xff
 8001d48:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001d4c:	e009      	b.n	8001d62 <HAL_UART_Receive_IT+0x72>
 8001d4e:	237f      	movs	r3, #127	; 0x7f
 8001d50:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001d54:	e005      	b.n	8001d62 <HAL_UART_Receive_IT+0x72>
 8001d56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d5a:	d01b      	beq.n	8001d94 <HAL_UART_Receive_IT+0xa4>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d66:	2322      	movs	r3, #34	; 0x22
 8001d68:	6783      	str	r3, [r0, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d6a:	6802      	ldr	r2, [r0, #0]
 8001d6c:	6893      	ldr	r3, [r2, #8]
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6093      	str	r3, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d74:	6883      	ldr	r3, [r0, #8]
 8001d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d7a:	d015      	beq.n	8001da8 <HAL_UART_Receive_IT+0xb8>
      huart->RxISR = UART_RxISR_8BIT;
 8001d7c:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <HAL_UART_Receive_IT+0xd0>)
 8001d7e:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_UNLOCK(huart);
 8001d80:	2300      	movs	r3, #0
 8001d82:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001d86:	6801      	ldr	r1, [r0, #0]
 8001d88:	680a      	ldr	r2, [r1, #0]
 8001d8a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8001d8e:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8001d90:	4618      	mov	r0, r3
 8001d92:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8001d94:	6903      	ldr	r3, [r0, #16]
 8001d96:	b91b      	cbnz	r3, 8001da0 <HAL_UART_Receive_IT+0xb0>
 8001d98:	237f      	movs	r3, #127	; 0x7f
 8001d9a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001d9e:	e7e0      	b.n	8001d62 <HAL_UART_Receive_IT+0x72>
 8001da0:	233f      	movs	r3, #63	; 0x3f
 8001da2:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001da6:	e7dc      	b.n	8001d62 <HAL_UART_Receive_IT+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001da8:	6903      	ldr	r3, [r0, #16]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1e6      	bne.n	8001d7c <HAL_UART_Receive_IT+0x8c>
      huart->RxISR = UART_RxISR_16BIT;
 8001dae:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <HAL_UART_Receive_IT+0xd4>)
 8001db0:	6603      	str	r3, [r0, #96]	; 0x60
 8001db2:	e7e5      	b.n	8001d80 <HAL_UART_Receive_IT+0x90>
    return HAL_BUSY;
 8001db4:	2002      	movs	r0, #2
 8001db6:	4770      	bx	lr
      return HAL_ERROR;
 8001db8:	2001      	movs	r0, #1
 8001dba:	4770      	bx	lr
    __HAL_LOCK(huart);
 8001dbc:	2002      	movs	r0, #2
}
 8001dbe:	4770      	bx	lr
 8001dc0:	08001de5 	.word	0x08001de5
 8001dc4:	08001e49 	.word	0x08001e49

08001dc8 <HAL_UART_TxCpltCallback>:
}
 8001dc8:	4770      	bx	lr

08001dca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001dca:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001dcc:	6801      	ldr	r1, [r0, #0]
 8001dce:	680a      	ldr	r2, [r1, #0]
 8001dd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dd4:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	6742      	str	r2, [r0, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8001dda:	2200      	movs	r2, #0
 8001ddc:	6642      	str	r2, [r0, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001dde:	f7ff fff3 	bl	8001dc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001de2:	bd08      	pop	{r3, pc}

08001de4 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8001de4:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8001de6:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001dea:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8001dec:	2a22      	cmp	r2, #34	; 0x22
 8001dee:	d005      	beq.n	8001dfc <UART_RxISR_8BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001df0:	6802      	ldr	r2, [r0, #0]
 8001df2:	6993      	ldr	r3, [r2, #24]
 8001df4:	f043 0308 	orr.w	r3, r3, #8
 8001df8:	6193      	str	r3, [r2, #24]
  }
}
 8001dfa:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001dfc:	6802      	ldr	r2, [r0, #0]
 8001dfe:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001e04:	400b      	ands	r3, r1
 8001e06:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8001e08:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001e0e:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8001e1c:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1e9      	bne.n	8001dfa <UART_RxISR_8BIT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e26:	6802      	ldr	r2, [r0, #0]
 8001e28:	6813      	ldr	r3, [r2, #0]
 8001e2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001e2e:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e30:	6802      	ldr	r2, [r0, #0]
 8001e32:	6893      	ldr	r3, [r2, #8]
 8001e34:	f023 0301 	bic.w	r3, r3, #1
 8001e38:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8001e3a:	2320      	movs	r3, #32
 8001e3c:	6783      	str	r3, [r0, #120]	; 0x78
      huart->RxISR = NULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 8001e42:	f7fe fca5 	bl	8000790 <HAL_UART_RxCpltCallback>
 8001e46:	e7d8      	b.n	8001dfa <UART_RxISR_8BIT+0x16>

08001e48 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8001e48:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8001e4a:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001e4e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001e50:	2b22      	cmp	r3, #34	; 0x22
 8001e52:	d005      	beq.n	8001e60 <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001e54:	6802      	ldr	r2, [r0, #0]
 8001e56:	6993      	ldr	r3, [r2, #24]
 8001e58:	f043 0308 	orr.w	r3, r3, #8
 8001e5c:	6193      	str	r3, [r2, #24]
  }
}
 8001e5e:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001e60:	6803      	ldr	r3, [r0, #0]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8001e64:	6d41      	ldr	r1, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8001e66:	4013      	ands	r3, r2
 8001e68:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8001e6a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001e6c:	3302      	adds	r3, #2
 8001e6e:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001e70:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	3b01      	subs	r3, #1
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8001e7e:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1ea      	bne.n	8001e5e <UART_RxISR_16BIT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e88:	6802      	ldr	r2, [r0, #0]
 8001e8a:	6813      	ldr	r3, [r2, #0]
 8001e8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001e90:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e92:	6802      	ldr	r2, [r0, #0]
 8001e94:	6893      	ldr	r3, [r2, #8]
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8001e9c:	2320      	movs	r3, #32
 8001e9e:	6783      	str	r3, [r0, #120]	; 0x78
      huart->RxISR = NULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 8001ea4:	f7fe fc74 	bl	8000790 <HAL_UART_RxCpltCallback>
 8001ea8:	e7d9      	b.n	8001e5e <UART_RxISR_16BIT+0x16>

08001eaa <HAL_UART_ErrorCallback>:
}
 8001eaa:	4770      	bx	lr

08001eac <UART_DMAAbortOnError>:
{
 8001eac:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001eae:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8001eb6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8001eba:	f7ff fff6 	bl	8001eaa <HAL_UART_ErrorCallback>
}
 8001ebe:	bd08      	pop	{r3, pc}

08001ec0 <HAL_UARTEx_WakeupCallback>:
}
 8001ec0:	4770      	bx	lr
	...

08001ec4 <HAL_UART_IRQHandler>:
{
 8001ec4:	b538      	push	{r3, r4, r5, lr}
 8001ec6:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001ec8:	6801      	ldr	r1, [r0, #0]
 8001eca:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ecc:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ece:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001ed0:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8001ed4:	401a      	ands	r2, r3
 8001ed6:	d105      	bne.n	8001ee4 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001ed8:	f013 0f20 	tst.w	r3, #32
 8001edc:	d002      	beq.n	8001ee4 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001ede:	f010 0f20 	tst.w	r0, #32
 8001ee2:	d11c      	bne.n	8001f1e <HAL_UART_IRQHandler+0x5a>
  if ((errorflags != 0U)
 8001ee4:	b12a      	cbz	r2, 8001ef2 <HAL_UART_IRQHandler+0x2e>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001ee6:	f015 0201 	ands.w	r2, r5, #1
 8001eea:	d11e      	bne.n	8001f2a <HAL_UART_IRQHandler+0x66>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8001eec:	f410 7f90 	tst.w	r0, #288	; 0x120
 8001ef0:	d11b      	bne.n	8001f2a <HAL_UART_IRQHandler+0x66>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001ef2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001ef6:	d003      	beq.n	8001f00 <HAL_UART_IRQHandler+0x3c>
 8001ef8:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8001efc:	f040 808e 	bne.w	800201c <HAL_UART_IRQHandler+0x158>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001f00:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f04:	d003      	beq.n	8001f0e <HAL_UART_IRQHandler+0x4a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001f06:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001f0a:	f040 808e 	bne.w	800202a <HAL_UART_IRQHandler+0x166>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001f0e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001f12:	d003      	beq.n	8001f1c <HAL_UART_IRQHandler+0x58>
 8001f14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001f18:	f040 808e 	bne.w	8002038 <HAL_UART_IRQHandler+0x174>
}
 8001f1c:	bd38      	pop	{r3, r4, r5, pc}
      if (huart->RxISR != NULL)
 8001f1e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0fb      	beq.n	8001f1c <HAL_UART_IRQHandler+0x58>
        huart->RxISR(huart);
 8001f24:	4620      	mov	r0, r4
 8001f26:	4798      	blx	r3
      return;
 8001f28:	e7f8      	b.n	8001f1c <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001f2a:	f013 0f01 	tst.w	r3, #1
 8001f2e:	d007      	beq.n	8001f40 <HAL_UART_IRQHandler+0x7c>
 8001f30:	f410 7f80 	tst.w	r0, #256	; 0x100
 8001f34:	d004      	beq.n	8001f40 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001f36:	2501      	movs	r5, #1
 8001f38:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f3a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001f3c:	4329      	orrs	r1, r5
 8001f3e:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001f40:	f013 0f02 	tst.w	r3, #2
 8001f44:	d007      	beq.n	8001f56 <HAL_UART_IRQHandler+0x92>
 8001f46:	b132      	cbz	r2, 8001f56 <HAL_UART_IRQHandler+0x92>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001f48:	6821      	ldr	r1, [r4, #0]
 8001f4a:	2502      	movs	r5, #2
 8001f4c:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f4e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001f50:	f041 0104 	orr.w	r1, r1, #4
 8001f54:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001f56:	f013 0f04 	tst.w	r3, #4
 8001f5a:	d007      	beq.n	8001f6c <HAL_UART_IRQHandler+0xa8>
 8001f5c:	b132      	cbz	r2, 8001f6c <HAL_UART_IRQHandler+0xa8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001f5e:	6821      	ldr	r1, [r4, #0]
 8001f60:	2504      	movs	r5, #4
 8001f62:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f64:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001f66:	f041 0102 	orr.w	r1, r1, #2
 8001f6a:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001f6c:	f013 0f08 	tst.w	r3, #8
 8001f70:	d009      	beq.n	8001f86 <HAL_UART_IRQHandler+0xc2>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001f72:	f010 0f20 	tst.w	r0, #32
 8001f76:	d100      	bne.n	8001f7a <HAL_UART_IRQHandler+0xb6>
 8001f78:	b12a      	cbz	r2, 8001f86 <HAL_UART_IRQHandler+0xc2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001f7a:	6822      	ldr	r2, [r4, #0]
 8001f7c:	2108      	movs	r1, #8
 8001f7e:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f80:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8001f82:	430a      	orrs	r2, r1
 8001f84:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001f86:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001f8a:	d00a      	beq.n	8001fa2 <HAL_UART_IRQHandler+0xde>
 8001f8c:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8001f90:	d007      	beq.n	8001fa2 <HAL_UART_IRQHandler+0xde>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001f92:	6822      	ldr	r2, [r4, #0]
 8001f94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f98:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001f9a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8001f9c:	f042 0220 	orr.w	r2, r2, #32
 8001fa0:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fa2:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8001fa4:	2a00      	cmp	r2, #0
 8001fa6:	d0b9      	beq.n	8001f1c <HAL_UART_IRQHandler+0x58>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001fa8:	f013 0f20 	tst.w	r3, #32
 8001fac:	d006      	beq.n	8001fbc <HAL_UART_IRQHandler+0xf8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001fae:	f010 0f20 	tst.w	r0, #32
 8001fb2:	d003      	beq.n	8001fbc <HAL_UART_IRQHandler+0xf8>
        if (huart->RxISR != NULL)
 8001fb4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001fb6:	b10b      	cbz	r3, 8001fbc <HAL_UART_IRQHandler+0xf8>
          huart->RxISR(huart);
 8001fb8:	4620      	mov	r0, r4
 8001fba:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8001fbc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001fbe:	6823      	ldr	r3, [r4, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001fc6:	d102      	bne.n	8001fce <HAL_UART_IRQHandler+0x10a>
 8001fc8:	f012 0f28 	tst.w	r2, #40	; 0x28
 8001fcc:	d020      	beq.n	8002010 <HAL_UART_IRQHandler+0x14c>
        UART_EndRxTransfer(huart);
 8001fce:	4620      	mov	r0, r4
 8001fd0:	f7ff fe7e 	bl	8001cd0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fd4:	6823      	ldr	r3, [r4, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001fdc:	d014      	beq.n	8002008 <HAL_UART_IRQHandler+0x144>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fe4:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001fe6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001fe8:	b153      	cbz	r3, 8002000 <HAL_UART_IRQHandler+0x13c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001fea:	4a15      	ldr	r2, [pc, #84]	; (8002040 <HAL_UART_IRQHandler+0x17c>)
 8001fec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001fee:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001ff0:	f7ff f9de 	bl	80013b0 <HAL_DMA_Abort_IT>
 8001ff4:	2800      	cmp	r0, #0
 8001ff6:	d091      	beq.n	8001f1c <HAL_UART_IRQHandler+0x58>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ff8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001ffa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001ffc:	4798      	blx	r3
 8001ffe:	e78d      	b.n	8001f1c <HAL_UART_IRQHandler+0x58>
            HAL_UART_ErrorCallback(huart);
 8002000:	4620      	mov	r0, r4
 8002002:	f7ff ff52 	bl	8001eaa <HAL_UART_ErrorCallback>
 8002006:	e789      	b.n	8001f1c <HAL_UART_IRQHandler+0x58>
          HAL_UART_ErrorCallback(huart);
 8002008:	4620      	mov	r0, r4
 800200a:	f7ff ff4e 	bl	8001eaa <HAL_UART_ErrorCallback>
 800200e:	e785      	b.n	8001f1c <HAL_UART_IRQHandler+0x58>
        HAL_UART_ErrorCallback(huart);
 8002010:	4620      	mov	r0, r4
 8002012:	f7ff ff4a 	bl	8001eaa <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002016:	2300      	movs	r3, #0
 8002018:	67e3      	str	r3, [r4, #124]	; 0x7c
    return;
 800201a:	e77f      	b.n	8001f1c <HAL_UART_IRQHandler+0x58>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800201c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002020:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8002022:	4620      	mov	r0, r4
 8002024:	f7ff ff4c 	bl	8001ec0 <HAL_UARTEx_WakeupCallback>
    return;
 8002028:	e778      	b.n	8001f1c <HAL_UART_IRQHandler+0x58>
    if (huart->TxISR != NULL)
 800202a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800202c:	2b00      	cmp	r3, #0
 800202e:	f43f af75 	beq.w	8001f1c <HAL_UART_IRQHandler+0x58>
      huart->TxISR(huart);
 8002032:	4620      	mov	r0, r4
 8002034:	4798      	blx	r3
    return;
 8002036:	e771      	b.n	8001f1c <HAL_UART_IRQHandler+0x58>
    UART_EndTransmit_IT(huart);
 8002038:	4620      	mov	r0, r4
 800203a:	f7ff fec6 	bl	8001dca <UART_EndTransmit_IT>
    return;
 800203e:	e76d      	b.n	8001f1c <HAL_UART_IRQHandler+0x58>
 8002040:	08001ead 	.word	0x08001ead

08002044 <UART_SetConfig>:
{
 8002044:	b538      	push	{r3, r4, r5, lr}
 8002046:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002048:	6883      	ldr	r3, [r0, #8]
 800204a:	6902      	ldr	r2, [r0, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	6942      	ldr	r2, [r0, #20]
 8002050:	4313      	orrs	r3, r2
 8002052:	69c2      	ldr	r2, [r0, #28]
 8002054:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002056:	6801      	ldr	r1, [r0, #0]
 8002058:	6808      	ldr	r0, [r1, #0]
 800205a:	4a9f      	ldr	r2, [pc, #636]	; (80022d8 <UART_SetConfig+0x294>)
 800205c:	4002      	ands	r2, r0
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002062:	6822      	ldr	r2, [r4, #0]
 8002064:	6853      	ldr	r3, [r2, #4]
 8002066:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800206a:	68e1      	ldr	r1, [r4, #12]
 800206c:	430b      	orrs	r3, r1
 800206e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002070:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 8002072:	6a23      	ldr	r3, [r4, #32]
 8002074:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002076:	6821      	ldr	r1, [r4, #0]
 8002078:	688b      	ldr	r3, [r1, #8]
 800207a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800207e:	4313      	orrs	r3, r2
 8002080:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002082:	6823      	ldr	r3, [r4, #0]
 8002084:	4a95      	ldr	r2, [pc, #596]	; (80022dc <UART_SetConfig+0x298>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d019      	beq.n	80020be <UART_SetConfig+0x7a>
 800208a:	4a95      	ldr	r2, [pc, #596]	; (80022e0 <UART_SetConfig+0x29c>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d029      	beq.n	80020e4 <UART_SetConfig+0xa0>
 8002090:	4a94      	ldr	r2, [pc, #592]	; (80022e4 <UART_SetConfig+0x2a0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d03e      	beq.n	8002114 <UART_SetConfig+0xd0>
 8002096:	4a94      	ldr	r2, [pc, #592]	; (80022e8 <UART_SetConfig+0x2a4>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d062      	beq.n	8002162 <UART_SetConfig+0x11e>
 800209c:	4a93      	ldr	r2, [pc, #588]	; (80022ec <UART_SetConfig+0x2a8>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d071      	beq.n	8002186 <UART_SetConfig+0x142>
 80020a2:	4a93      	ldr	r2, [pc, #588]	; (80022f0 <UART_SetConfig+0x2ac>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	f000 8083 	beq.w	80021b0 <UART_SetConfig+0x16c>
 80020aa:	4a92      	ldr	r2, [pc, #584]	; (80022f4 <UART_SetConfig+0x2b0>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	f000 8094 	beq.w	80021da <UART_SetConfig+0x196>
 80020b2:	4a91      	ldr	r2, [pc, #580]	; (80022f8 <UART_SetConfig+0x2b4>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	f000 80a5 	beq.w	8002204 <UART_SetConfig+0x1c0>
 80020ba:	2510      	movs	r5, #16
 80020bc:	e03a      	b.n	8002134 <UART_SetConfig+0xf0>
 80020be:	4b8f      	ldr	r3, [pc, #572]	; (80022fc <UART_SetConfig+0x2b8>)
 80020c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	d809      	bhi.n	80020e0 <UART_SetConfig+0x9c>
 80020cc:	e8df f003 	tbb	[pc, r3]
 80020d0:	06ae0402 	.word	0x06ae0402
 80020d4:	2501      	movs	r5, #1
 80020d6:	e02d      	b.n	8002134 <UART_SetConfig+0xf0>
 80020d8:	2504      	movs	r5, #4
 80020da:	e02b      	b.n	8002134 <UART_SetConfig+0xf0>
 80020dc:	2508      	movs	r5, #8
 80020de:	e029      	b.n	8002134 <UART_SetConfig+0xf0>
 80020e0:	2510      	movs	r5, #16
 80020e2:	e027      	b.n	8002134 <UART_SetConfig+0xf0>
 80020e4:	4b85      	ldr	r3, [pc, #532]	; (80022fc <UART_SetConfig+0x2b8>)
 80020e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	2b0c      	cmp	r3, #12
 80020f0:	d80e      	bhi.n	8002110 <UART_SetConfig+0xcc>
 80020f2:	e8df f003 	tbb	[pc, r3]
 80020f6:	0d07      	.short	0x0d07
 80020f8:	0d090d0d 	.word	0x0d090d0d
 80020fc:	0d9d0d0d 	.word	0x0d9d0d0d
 8002100:	0d0d      	.short	0x0d0d
 8002102:	0b          	.byte	0x0b
 8002103:	00          	.byte	0x00
 8002104:	2500      	movs	r5, #0
 8002106:	e015      	b.n	8002134 <UART_SetConfig+0xf0>
 8002108:	2504      	movs	r5, #4
 800210a:	e013      	b.n	8002134 <UART_SetConfig+0xf0>
 800210c:	2508      	movs	r5, #8
 800210e:	e011      	b.n	8002134 <UART_SetConfig+0xf0>
 8002110:	2510      	movs	r5, #16
 8002112:	e00f      	b.n	8002134 <UART_SetConfig+0xf0>
 8002114:	4b79      	ldr	r3, [pc, #484]	; (80022fc <UART_SetConfig+0x2b8>)
 8002116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800211e:	2b20      	cmp	r3, #32
 8002120:	f000 8088 	beq.w	8002234 <UART_SetConfig+0x1f0>
 8002124:	d819      	bhi.n	800215a <UART_SetConfig+0x116>
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 8086 	beq.w	8002238 <UART_SetConfig+0x1f4>
 800212c:	2b10      	cmp	r3, #16
 800212e:	f040 8085 	bne.w	800223c <UART_SetConfig+0x1f8>
 8002132:	2504      	movs	r5, #4
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002134:	69e3      	ldr	r3, [r4, #28]
 8002136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800213a:	f000 80ab 	beq.w	8002294 <UART_SetConfig+0x250>
    switch (clocksource)
 800213e:	2d08      	cmp	r5, #8
 8002140:	f200 8140 	bhi.w	80023c4 <UART_SetConfig+0x380>
 8002144:	e8df f015 	tbh	[pc, r5, lsl #1]
 8002148:	01180107 	.word	0x01180107
 800214c:	013e0122 	.word	0x013e0122
 8002150:	013e012b 	.word	0x013e012b
 8002154:	013e013e 	.word	0x013e013e
 8002158:	0135      	.short	0x0135
  UART_GETCLOCKSOURCE(huart, clocksource);
 800215a:	2b30      	cmp	r3, #48	; 0x30
 800215c:	d170      	bne.n	8002240 <UART_SetConfig+0x1fc>
 800215e:	2508      	movs	r5, #8
 8002160:	e7e8      	b.n	8002134 <UART_SetConfig+0xf0>
 8002162:	4b66      	ldr	r3, [pc, #408]	; (80022fc <UART_SetConfig+0x2b8>)
 8002164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002168:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800216c:	2b80      	cmp	r3, #128	; 0x80
 800216e:	d069      	beq.n	8002244 <UART_SetConfig+0x200>
 8002170:	d805      	bhi.n	800217e <UART_SetConfig+0x13a>
 8002172:	2b00      	cmp	r3, #0
 8002174:	d068      	beq.n	8002248 <UART_SetConfig+0x204>
 8002176:	2b40      	cmp	r3, #64	; 0x40
 8002178:	d168      	bne.n	800224c <UART_SetConfig+0x208>
 800217a:	2504      	movs	r5, #4
 800217c:	e7da      	b.n	8002134 <UART_SetConfig+0xf0>
 800217e:	2bc0      	cmp	r3, #192	; 0xc0
 8002180:	d166      	bne.n	8002250 <UART_SetConfig+0x20c>
 8002182:	2508      	movs	r5, #8
 8002184:	e7d6      	b.n	8002134 <UART_SetConfig+0xf0>
 8002186:	4b5d      	ldr	r3, [pc, #372]	; (80022fc <UART_SetConfig+0x2b8>)
 8002188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002194:	d05e      	beq.n	8002254 <UART_SetConfig+0x210>
 8002196:	d806      	bhi.n	80021a6 <UART_SetConfig+0x162>
 8002198:	2b00      	cmp	r3, #0
 800219a:	d05d      	beq.n	8002258 <UART_SetConfig+0x214>
 800219c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021a0:	d15c      	bne.n	800225c <UART_SetConfig+0x218>
 80021a2:	2504      	movs	r5, #4
 80021a4:	e7c6      	b.n	8002134 <UART_SetConfig+0xf0>
 80021a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021aa:	d159      	bne.n	8002260 <UART_SetConfig+0x21c>
 80021ac:	2508      	movs	r5, #8
 80021ae:	e7c1      	b.n	8002134 <UART_SetConfig+0xf0>
 80021b0:	4b52      	ldr	r3, [pc, #328]	; (80022fc <UART_SetConfig+0x2b8>)
 80021b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021be:	d051      	beq.n	8002264 <UART_SetConfig+0x220>
 80021c0:	d806      	bhi.n	80021d0 <UART_SetConfig+0x18c>
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d050      	beq.n	8002268 <UART_SetConfig+0x224>
 80021c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ca:	d14f      	bne.n	800226c <UART_SetConfig+0x228>
 80021cc:	2504      	movs	r5, #4
 80021ce:	e7b1      	b.n	8002134 <UART_SetConfig+0xf0>
 80021d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80021d4:	d14c      	bne.n	8002270 <UART_SetConfig+0x22c>
 80021d6:	2508      	movs	r5, #8
 80021d8:	e7ac      	b.n	8002134 <UART_SetConfig+0xf0>
 80021da:	4b48      	ldr	r3, [pc, #288]	; (80022fc <UART_SetConfig+0x2b8>)
 80021dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80021e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021e8:	d044      	beq.n	8002274 <UART_SetConfig+0x230>
 80021ea:	d806      	bhi.n	80021fa <UART_SetConfig+0x1b6>
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d043      	beq.n	8002278 <UART_SetConfig+0x234>
 80021f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f4:	d142      	bne.n	800227c <UART_SetConfig+0x238>
 80021f6:	2504      	movs	r5, #4
 80021f8:	e79c      	b.n	8002134 <UART_SetConfig+0xf0>
 80021fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80021fe:	d13f      	bne.n	8002280 <UART_SetConfig+0x23c>
 8002200:	2508      	movs	r5, #8
 8002202:	e797      	b.n	8002134 <UART_SetConfig+0xf0>
 8002204:	4b3d      	ldr	r3, [pc, #244]	; (80022fc <UART_SetConfig+0x2b8>)
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800220e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002212:	d037      	beq.n	8002284 <UART_SetConfig+0x240>
 8002214:	d805      	bhi.n	8002222 <UART_SetConfig+0x1de>
 8002216:	b3bb      	cbz	r3, 8002288 <UART_SetConfig+0x244>
 8002218:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800221c:	d136      	bne.n	800228c <UART_SetConfig+0x248>
 800221e:	2504      	movs	r5, #4
 8002220:	e788      	b.n	8002134 <UART_SetConfig+0xf0>
 8002222:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002226:	d133      	bne.n	8002290 <UART_SetConfig+0x24c>
 8002228:	2508      	movs	r5, #8
 800222a:	e783      	b.n	8002134 <UART_SetConfig+0xf0>
 800222c:	2502      	movs	r5, #2
 800222e:	e781      	b.n	8002134 <UART_SetConfig+0xf0>
 8002230:	2502      	movs	r5, #2
 8002232:	e77f      	b.n	8002134 <UART_SetConfig+0xf0>
 8002234:	2502      	movs	r5, #2
 8002236:	e77d      	b.n	8002134 <UART_SetConfig+0xf0>
 8002238:	2500      	movs	r5, #0
 800223a:	e77b      	b.n	8002134 <UART_SetConfig+0xf0>
 800223c:	2510      	movs	r5, #16
 800223e:	e779      	b.n	8002134 <UART_SetConfig+0xf0>
 8002240:	2510      	movs	r5, #16
 8002242:	e777      	b.n	8002134 <UART_SetConfig+0xf0>
 8002244:	2502      	movs	r5, #2
 8002246:	e775      	b.n	8002134 <UART_SetConfig+0xf0>
 8002248:	2500      	movs	r5, #0
 800224a:	e773      	b.n	8002134 <UART_SetConfig+0xf0>
 800224c:	2510      	movs	r5, #16
 800224e:	e771      	b.n	8002134 <UART_SetConfig+0xf0>
 8002250:	2510      	movs	r5, #16
 8002252:	e76f      	b.n	8002134 <UART_SetConfig+0xf0>
 8002254:	2502      	movs	r5, #2
 8002256:	e76d      	b.n	8002134 <UART_SetConfig+0xf0>
 8002258:	2500      	movs	r5, #0
 800225a:	e76b      	b.n	8002134 <UART_SetConfig+0xf0>
 800225c:	2510      	movs	r5, #16
 800225e:	e769      	b.n	8002134 <UART_SetConfig+0xf0>
 8002260:	2510      	movs	r5, #16
 8002262:	e767      	b.n	8002134 <UART_SetConfig+0xf0>
 8002264:	2502      	movs	r5, #2
 8002266:	e765      	b.n	8002134 <UART_SetConfig+0xf0>
 8002268:	2501      	movs	r5, #1
 800226a:	e763      	b.n	8002134 <UART_SetConfig+0xf0>
 800226c:	2510      	movs	r5, #16
 800226e:	e761      	b.n	8002134 <UART_SetConfig+0xf0>
 8002270:	2510      	movs	r5, #16
 8002272:	e75f      	b.n	8002134 <UART_SetConfig+0xf0>
 8002274:	2502      	movs	r5, #2
 8002276:	e75d      	b.n	8002134 <UART_SetConfig+0xf0>
 8002278:	2500      	movs	r5, #0
 800227a:	e75b      	b.n	8002134 <UART_SetConfig+0xf0>
 800227c:	2510      	movs	r5, #16
 800227e:	e759      	b.n	8002134 <UART_SetConfig+0xf0>
 8002280:	2510      	movs	r5, #16
 8002282:	e757      	b.n	8002134 <UART_SetConfig+0xf0>
 8002284:	2502      	movs	r5, #2
 8002286:	e755      	b.n	8002134 <UART_SetConfig+0xf0>
 8002288:	2500      	movs	r5, #0
 800228a:	e753      	b.n	8002134 <UART_SetConfig+0xf0>
 800228c:	2510      	movs	r5, #16
 800228e:	e751      	b.n	8002134 <UART_SetConfig+0xf0>
 8002290:	2510      	movs	r5, #16
 8002292:	e74f      	b.n	8002134 <UART_SetConfig+0xf0>
    switch (clocksource)
 8002294:	2d08      	cmp	r5, #8
 8002296:	d85b      	bhi.n	8002350 <UART_SetConfig+0x30c>
 8002298:	e8df f005 	tbb	[pc, r5]
 800229c:	5a3d3205 	.word	0x5a3d3205
 80022a0:	5a5a5a46 	.word	0x5a5a5a46
 80022a4:	51          	.byte	0x51
 80022a5:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 80022a6:	f7ff fcf3 	bl	8001c90 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80022aa:	6862      	ldr	r2, [r4, #4]
 80022ac:	0853      	lsrs	r3, r2, #1
 80022ae:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80022b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80022b6:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022b8:	f1a3 0110 	sub.w	r1, r3, #16
 80022bc:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80022c0:	4291      	cmp	r1, r2
 80022c2:	f200 8082 	bhi.w	80023ca <UART_SetConfig+0x386>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80022cc:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80022d0:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 80022d2:	6822      	ldr	r2, [r4, #0]
 80022d4:	60d3      	str	r3, [r2, #12]
 80022d6:	e07b      	b.n	80023d0 <UART_SetConfig+0x38c>
 80022d8:	efff69f3 	.word	0xefff69f3
 80022dc:	40011000 	.word	0x40011000
 80022e0:	40004400 	.word	0x40004400
 80022e4:	40004800 	.word	0x40004800
 80022e8:	40004c00 	.word	0x40004c00
 80022ec:	40005000 	.word	0x40005000
 80022f0:	40011400 	.word	0x40011400
 80022f4:	40007800 	.word	0x40007800
 80022f8:	40007c00 	.word	0x40007c00
 80022fc:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK2Freq();
 8002300:	f7ff fcd6 	bl	8001cb0 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002304:	6862      	ldr	r2, [r4, #4]
 8002306:	0853      	lsrs	r3, r2, #1
 8002308:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800230c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002310:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002312:	2500      	movs	r5, #0
        break;
 8002314:	e7d0      	b.n	80022b8 <UART_SetConfig+0x274>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002316:	6862      	ldr	r2, [r4, #4]
 8002318:	4b30      	ldr	r3, [pc, #192]	; (80023dc <UART_SetConfig+0x398>)
 800231a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800231e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002322:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002324:	2500      	movs	r5, #0
        break;
 8002326:	e7c7      	b.n	80022b8 <UART_SetConfig+0x274>
        pclk = HAL_RCC_GetSysClockFreq();
 8002328:	f7ff fba6 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800232c:	6862      	ldr	r2, [r4, #4]
 800232e:	0853      	lsrs	r3, r2, #1
 8002330:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002334:	fbb3 f3f2 	udiv	r3, r3, r2
 8002338:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800233a:	2500      	movs	r5, #0
        break;
 800233c:	e7bc      	b.n	80022b8 <UART_SetConfig+0x274>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800233e:	6862      	ldr	r2, [r4, #4]
 8002340:	0853      	lsrs	r3, r2, #1
 8002342:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002346:	fbb3 f3f2 	udiv	r3, r3, r2
 800234a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800234c:	2500      	movs	r5, #0
        break;
 800234e:	e7b3      	b.n	80022b8 <UART_SetConfig+0x274>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002350:	2501      	movs	r5, #1
 8002352:	2300      	movs	r3, #0
 8002354:	e7b0      	b.n	80022b8 <UART_SetConfig+0x274>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002356:	f7ff fc9b 	bl	8001c90 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800235a:	6862      	ldr	r2, [r4, #4]
 800235c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002360:	fbb3 f3f2 	udiv	r3, r3, r2
 8002364:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002366:	f1a3 0110 	sub.w	r1, r3, #16
 800236a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800236e:	4291      	cmp	r1, r2
 8002370:	d82d      	bhi.n	80023ce <UART_SetConfig+0x38a>
      huart->Instance->BRR = usartdiv;
 8002372:	6822      	ldr	r2, [r4, #0]
 8002374:	60d3      	str	r3, [r2, #12]
 8002376:	e02b      	b.n	80023d0 <UART_SetConfig+0x38c>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002378:	f7ff fc9a 	bl	8001cb0 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800237c:	6862      	ldr	r2, [r4, #4]
 800237e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002382:	fbb3 f3f2 	udiv	r3, r3, r2
 8002386:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002388:	2500      	movs	r5, #0
        break;
 800238a:	e7ec      	b.n	8002366 <UART_SetConfig+0x322>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800238c:	6862      	ldr	r2, [r4, #4]
 800238e:	4b14      	ldr	r3, [pc, #80]	; (80023e0 <UART_SetConfig+0x39c>)
 8002390:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002394:	fbb3 f3f2 	udiv	r3, r3, r2
 8002398:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800239a:	2500      	movs	r5, #0
        break;
 800239c:	e7e3      	b.n	8002366 <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetSysClockFreq();
 800239e:	f7ff fb6b 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80023a2:	6862      	ldr	r2, [r4, #4]
 80023a4:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80023a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80023ac:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80023ae:	2500      	movs	r5, #0
        break;
 80023b0:	e7d9      	b.n	8002366 <UART_SetConfig+0x322>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80023b2:	6862      	ldr	r2, [r4, #4]
 80023b4:	0853      	lsrs	r3, r2, #1
 80023b6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80023ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80023be:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80023c0:	2500      	movs	r5, #0
        break;
 80023c2:	e7d0      	b.n	8002366 <UART_SetConfig+0x322>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023c4:	2501      	movs	r5, #1
 80023c6:	2300      	movs	r3, #0
 80023c8:	e7cd      	b.n	8002366 <UART_SetConfig+0x322>
      ret = HAL_ERROR;
 80023ca:	2501      	movs	r5, #1
 80023cc:	e000      	b.n	80023d0 <UART_SetConfig+0x38c>
      ret = HAL_ERROR;
 80023ce:	2501      	movs	r5, #1
  huart->RxISR = NULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80023d4:	6663      	str	r3, [r4, #100]	; 0x64
}
 80023d6:	4628      	mov	r0, r5
 80023d8:	bd38      	pop	{r3, r4, r5, pc}
 80023da:	bf00      	nop
 80023dc:	01e84800 	.word	0x01e84800
 80023e0:	00f42400 	.word	0x00f42400

080023e4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80023e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023e6:	f013 0f01 	tst.w	r3, #1
 80023ea:	d006      	beq.n	80023fa <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80023ec:	6802      	ldr	r2, [r0, #0]
 80023ee:	6853      	ldr	r3, [r2, #4]
 80023f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80023f4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80023f6:	430b      	orrs	r3, r1
 80023f8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80023fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023fc:	f013 0f02 	tst.w	r3, #2
 8002400:	d006      	beq.n	8002410 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002402:	6802      	ldr	r2, [r0, #0]
 8002404:	6853      	ldr	r3, [r2, #4]
 8002406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800240c:	430b      	orrs	r3, r1
 800240e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002410:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002412:	f013 0f04 	tst.w	r3, #4
 8002416:	d006      	beq.n	8002426 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002418:	6802      	ldr	r2, [r0, #0]
 800241a:	6853      	ldr	r3, [r2, #4]
 800241c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002420:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002422:	430b      	orrs	r3, r1
 8002424:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002426:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002428:	f013 0f08 	tst.w	r3, #8
 800242c:	d006      	beq.n	800243c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800242e:	6802      	ldr	r2, [r0, #0]
 8002430:	6853      	ldr	r3, [r2, #4]
 8002432:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002436:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002438:	430b      	orrs	r3, r1
 800243a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800243c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800243e:	f013 0f10 	tst.w	r3, #16
 8002442:	d006      	beq.n	8002452 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002444:	6802      	ldr	r2, [r0, #0]
 8002446:	6893      	ldr	r3, [r2, #8]
 8002448:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800244c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800244e:	430b      	orrs	r3, r1
 8002450:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002452:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002454:	f013 0f20 	tst.w	r3, #32
 8002458:	d006      	beq.n	8002468 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800245a:	6802      	ldr	r2, [r0, #0]
 800245c:	6893      	ldr	r3, [r2, #8]
 800245e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002462:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002464:	430b      	orrs	r3, r1
 8002466:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002468:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800246a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800246e:	d00a      	beq.n	8002486 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002470:	6802      	ldr	r2, [r0, #0]
 8002472:	6853      	ldr	r3, [r2, #4]
 8002474:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002478:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800247a:	430b      	orrs	r3, r1
 800247c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800247e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002480:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002484:	d00b      	beq.n	800249e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002486:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002488:	f013 0f80 	tst.w	r3, #128	; 0x80
 800248c:	d006      	beq.n	800249c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800248e:	6802      	ldr	r2, [r0, #0]
 8002490:	6853      	ldr	r3, [r2, #4]
 8002492:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002496:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002498:	430b      	orrs	r3, r1
 800249a:	6053      	str	r3, [r2, #4]
}
 800249c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800249e:	6802      	ldr	r2, [r0, #0]
 80024a0:	6853      	ldr	r3, [r2, #4]
 80024a2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80024a6:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80024a8:	430b      	orrs	r3, r1
 80024aa:	6053      	str	r3, [r2, #4]
 80024ac:	e7eb      	b.n	8002486 <UART_AdvFeatureConfig+0xa2>

080024ae <UART_WaitOnFlagUntilTimeout>:
{
 80024ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024b2:	4605      	mov	r5, r0
 80024b4:	460f      	mov	r7, r1
 80024b6:	4616      	mov	r6, r2
 80024b8:	4699      	mov	r9, r3
 80024ba:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024be:	682c      	ldr	r4, [r5, #0]
 80024c0:	69e4      	ldr	r4, [r4, #28]
 80024c2:	ea37 0304 	bics.w	r3, r7, r4
 80024c6:	bf0c      	ite	eq
 80024c8:	2401      	moveq	r4, #1
 80024ca:	2400      	movne	r4, #0
 80024cc:	42b4      	cmp	r4, r6
 80024ce:	d13c      	bne.n	800254a <UART_WaitOnFlagUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 80024d0:	f1b8 3fff 	cmp.w	r8, #4294967295
 80024d4:	d0f3      	beq.n	80024be <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d6:	f7fe fc4d 	bl	8000d74 <HAL_GetTick>
 80024da:	eba0 0009 	sub.w	r0, r0, r9
 80024de:	4540      	cmp	r0, r8
 80024e0:	d821      	bhi.n	8002526 <UART_WaitOnFlagUntilTimeout+0x78>
 80024e2:	f1b8 0f00 	cmp.w	r8, #0
 80024e6:	d01e      	beq.n	8002526 <UART_WaitOnFlagUntilTimeout+0x78>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80024e8:	682b      	ldr	r3, [r5, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	f012 0f04 	tst.w	r2, #4
 80024f0:	d0e5      	beq.n	80024be <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80024f2:	69da      	ldr	r2, [r3, #28]
 80024f4:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80024f8:	d0e1      	beq.n	80024be <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80024fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024fe:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002500:	682a      	ldr	r2, [r5, #0]
 8002502:	6813      	ldr	r3, [r2, #0]
 8002504:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002508:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800250a:	682a      	ldr	r2, [r5, #0]
 800250c:	6893      	ldr	r3, [r2, #8]
 800250e:	f023 0301 	bic.w	r3, r3, #1
 8002512:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 8002514:	2320      	movs	r3, #32
 8002516:	676b      	str	r3, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002518:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800251a:	67eb      	str	r3, [r5, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 800251c:	2300      	movs	r3, #0
 800251e:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
          return HAL_TIMEOUT;
 8002522:	2003      	movs	r0, #3
 8002524:	e012      	b.n	800254c <UART_WaitOnFlagUntilTimeout+0x9e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002526:	682a      	ldr	r2, [r5, #0]
 8002528:	6813      	ldr	r3, [r2, #0]
 800252a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800252e:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002530:	682a      	ldr	r2, [r5, #0]
 8002532:	6893      	ldr	r3, [r2, #8]
 8002534:	f023 0301 	bic.w	r3, r3, #1
 8002538:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 800253a:	2320      	movs	r3, #32
 800253c:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800253e:	67ab      	str	r3, [r5, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8002540:	2300      	movs	r3, #0
 8002542:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
        return HAL_TIMEOUT;
 8002546:	2003      	movs	r0, #3
 8002548:	e000      	b.n	800254c <UART_WaitOnFlagUntilTimeout+0x9e>
  return HAL_OK;
 800254a:	2000      	movs	r0, #0
}
 800254c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002550 <HAL_UART_Transmit>:
{
 8002550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002558:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800255a:	2b20      	cmp	r3, #32
 800255c:	d159      	bne.n	8002612 <HAL_UART_Transmit+0xc2>
 800255e:	4604      	mov	r4, r0
 8002560:	460d      	mov	r5, r1
 8002562:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002564:	fab2 f382 	clz	r3, r2
 8002568:	095b      	lsrs	r3, r3, #5
 800256a:	2900      	cmp	r1, #0
 800256c:	bf08      	it	eq
 800256e:	2301      	moveq	r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d152      	bne.n	800261a <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 8002574:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002578:	2b01      	cmp	r3, #1
 800257a:	d050      	beq.n	800261e <HAL_UART_Transmit+0xce>
 800257c:	2301      	movs	r3, #1
 800257e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002582:	2300      	movs	r3, #0
 8002584:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002586:	2321      	movs	r3, #33	; 0x21
 8002588:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 800258a:	f7fe fbf3 	bl	8000d74 <HAL_GetTick>
 800258e:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8002590:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8002594:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002598:	68a3      	ldr	r3, [r4, #8]
 800259a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800259e:	d005      	beq.n	80025ac <HAL_UART_Transmit+0x5c>
      pdata16bits = NULL;
 80025a0:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 80025a4:	2300      	movs	r3, #0
 80025a6:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 80025aa:	e014      	b.n	80025d6 <HAL_UART_Transmit+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ac:	6923      	ldr	r3, [r4, #16]
 80025ae:	b113      	cbz	r3, 80025b6 <HAL_UART_Transmit+0x66>
      pdata16bits = NULL;
 80025b0:	f04f 0800 	mov.w	r8, #0
 80025b4:	e7f6      	b.n	80025a4 <HAL_UART_Transmit+0x54>
      pdata16bits = (uint16_t *) pData;
 80025b6:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80025b8:	2500      	movs	r5, #0
 80025ba:	e7f3      	b.n	80025a4 <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025bc:	f838 3b02 	ldrh.w	r3, [r8], #2
 80025c0:	6822      	ldr	r2, [r4, #0]
 80025c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025c6:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80025c8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80025cc:	b292      	uxth	r2, r2
 80025ce:	3a01      	subs	r2, #1
 80025d0:	b292      	uxth	r2, r2
 80025d2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80025d6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80025da:	b29b      	uxth	r3, r3
 80025dc:	b173      	cbz	r3, 80025fc <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025de:	9600      	str	r6, [sp, #0]
 80025e0:	463b      	mov	r3, r7
 80025e2:	2200      	movs	r2, #0
 80025e4:	2180      	movs	r1, #128	; 0x80
 80025e6:	4620      	mov	r0, r4
 80025e8:	f7ff ff61 	bl	80024ae <UART_WaitOnFlagUntilTimeout>
 80025ec:	b9c8      	cbnz	r0, 8002622 <HAL_UART_Transmit+0xd2>
      if (pdata8bits == NULL)
 80025ee:	2d00      	cmp	r5, #0
 80025f0:	d0e4      	beq.n	80025bc <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025f2:	f815 2b01 	ldrb.w	r2, [r5], #1
 80025f6:	6823      	ldr	r3, [r4, #0]
 80025f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80025fa:	e7e5      	b.n	80025c8 <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025fc:	9600      	str	r6, [sp, #0]
 80025fe:	463b      	mov	r3, r7
 8002600:	2200      	movs	r2, #0
 8002602:	2140      	movs	r1, #64	; 0x40
 8002604:	4620      	mov	r0, r4
 8002606:	f7ff ff52 	bl	80024ae <UART_WaitOnFlagUntilTimeout>
 800260a:	b960      	cbnz	r0, 8002626 <HAL_UART_Transmit+0xd6>
    huart->gState = HAL_UART_STATE_READY;
 800260c:	2320      	movs	r3, #32
 800260e:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8002610:	e000      	b.n	8002614 <HAL_UART_Transmit+0xc4>
    return HAL_BUSY;
 8002612:	2002      	movs	r0, #2
}
 8002614:	b002      	add	sp, #8
 8002616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800261a:	2001      	movs	r0, #1
 800261c:	e7fa      	b.n	8002614 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 800261e:	2002      	movs	r0, #2
 8002620:	e7f8      	b.n	8002614 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8002622:	2003      	movs	r0, #3
 8002624:	e7f6      	b.n	8002614 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8002626:	2003      	movs	r0, #3
 8002628:	e7f4      	b.n	8002614 <HAL_UART_Transmit+0xc4>

0800262a <HAL_UART_Receive>:
{
 800262a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800262e:	b083      	sub	sp, #12
 8002630:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8002632:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002634:	2b20      	cmp	r3, #32
 8002636:	f040 8081 	bne.w	800273c <HAL_UART_Receive+0x112>
 800263a:	4604      	mov	r4, r0
 800263c:	460d      	mov	r5, r1
 800263e:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002640:	fab2 f382 	clz	r3, r2
 8002644:	095b      	lsrs	r3, r3, #5
 8002646:	2900      	cmp	r1, #0
 8002648:	bf08      	it	eq
 800264a:	2301      	moveq	r3, #1
 800264c:	2b00      	cmp	r3, #0
 800264e:	d179      	bne.n	8002744 <HAL_UART_Receive+0x11a>
    __HAL_LOCK(huart);
 8002650:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002654:	2b01      	cmp	r3, #1
 8002656:	d077      	beq.n	8002748 <HAL_UART_Receive+0x11e>
 8002658:	2301      	movs	r3, #1
 800265a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800265e:	2300      	movs	r3, #0
 8002660:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002662:	2322      	movs	r3, #34	; 0x22
 8002664:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8002666:	f7fe fb85 	bl	8000d74 <HAL_GetTick>
 800266a:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 800266c:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 8002670:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8002674:	68a3      	ldr	r3, [r4, #8]
 8002676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800267a:	d006      	beq.n	800268a <HAL_UART_Receive+0x60>
 800267c:	b9a3      	cbnz	r3, 80026a8 <HAL_UART_Receive+0x7e>
 800267e:	6922      	ldr	r2, [r4, #16]
 8002680:	b972      	cbnz	r2, 80026a0 <HAL_UART_Receive+0x76>
 8002682:	22ff      	movs	r2, #255	; 0xff
 8002684:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8002688:	e014      	b.n	80026b4 <HAL_UART_Receive+0x8a>
 800268a:	6922      	ldr	r2, [r4, #16]
 800268c:	b922      	cbnz	r2, 8002698 <HAL_UART_Receive+0x6e>
 800268e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002692:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8002696:	e00d      	b.n	80026b4 <HAL_UART_Receive+0x8a>
 8002698:	22ff      	movs	r2, #255	; 0xff
 800269a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 800269e:	e009      	b.n	80026b4 <HAL_UART_Receive+0x8a>
 80026a0:	227f      	movs	r2, #127	; 0x7f
 80026a2:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80026a6:	e005      	b.n	80026b4 <HAL_UART_Receive+0x8a>
 80026a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026ac:	d00d      	beq.n	80026ca <HAL_UART_Receive+0xa0>
 80026ae:	2200      	movs	r2, #0
 80026b0:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 80026b4:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026bc:	d00f      	beq.n	80026de <HAL_UART_Receive+0xb4>
      pdata16bits = NULL;
 80026be:	f04f 0900 	mov.w	r9, #0
    __HAL_UNLOCK(huart);
 80026c2:	2300      	movs	r3, #0
 80026c4:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->RxXferCount > 0U)
 80026c8:	e01e      	b.n	8002708 <HAL_UART_Receive+0xde>
    UART_MASK_COMPUTATION(huart);
 80026ca:	6922      	ldr	r2, [r4, #16]
 80026cc:	b91a      	cbnz	r2, 80026d6 <HAL_UART_Receive+0xac>
 80026ce:	227f      	movs	r2, #127	; 0x7f
 80026d0:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80026d4:	e7ee      	b.n	80026b4 <HAL_UART_Receive+0x8a>
 80026d6:	223f      	movs	r2, #63	; 0x3f
 80026d8:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80026dc:	e7ea      	b.n	80026b4 <HAL_UART_Receive+0x8a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026de:	6923      	ldr	r3, [r4, #16]
 80026e0:	b113      	cbz	r3, 80026e8 <HAL_UART_Receive+0xbe>
      pdata16bits = NULL;
 80026e2:	f04f 0900 	mov.w	r9, #0
 80026e6:	e7ec      	b.n	80026c2 <HAL_UART_Receive+0x98>
      pdata16bits = (uint16_t *) pData;
 80026e8:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 80026ea:	2500      	movs	r5, #0
 80026ec:	e7e9      	b.n	80026c2 <HAL_UART_Receive+0x98>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80026ee:	6823      	ldr	r3, [r4, #0]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	ea08 0303 	and.w	r3, r8, r3
 80026f6:	f829 3b02 	strh.w	r3, [r9], #2
      huart->RxXferCount--;
 80026fa:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 80026fe:	b292      	uxth	r2, r2
 8002700:	3a01      	subs	r2, #1
 8002702:	b292      	uxth	r2, r2
 8002704:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002708:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800270c:	b29b      	uxth	r3, r3
 800270e:	b18b      	cbz	r3, 8002734 <HAL_UART_Receive+0x10a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002710:	9600      	str	r6, [sp, #0]
 8002712:	463b      	mov	r3, r7
 8002714:	2200      	movs	r2, #0
 8002716:	2120      	movs	r1, #32
 8002718:	4620      	mov	r0, r4
 800271a:	f7ff fec8 	bl	80024ae <UART_WaitOnFlagUntilTimeout>
 800271e:	b9a8      	cbnz	r0, 800274c <HAL_UART_Receive+0x122>
      if (pdata8bits == NULL)
 8002720:	2d00      	cmp	r5, #0
 8002722:	d0e4      	beq.n	80026ee <HAL_UART_Receive+0xc4>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002724:	6823      	ldr	r3, [r4, #0]
 8002726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002728:	fa5f f388 	uxtb.w	r3, r8
 800272c:	4013      	ands	r3, r2
 800272e:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 8002732:	e7e2      	b.n	80026fa <HAL_UART_Receive+0xd0>
    huart->RxState = HAL_UART_STATE_READY;
 8002734:	2320      	movs	r3, #32
 8002736:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8002738:	2000      	movs	r0, #0
 800273a:	e000      	b.n	800273e <HAL_UART_Receive+0x114>
    return HAL_BUSY;
 800273c:	2002      	movs	r0, #2
}
 800273e:	b003      	add	sp, #12
 8002740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8002744:	2001      	movs	r0, #1
 8002746:	e7fa      	b.n	800273e <HAL_UART_Receive+0x114>
    __HAL_LOCK(huart);
 8002748:	2002      	movs	r0, #2
 800274a:	e7f8      	b.n	800273e <HAL_UART_Receive+0x114>
        return HAL_TIMEOUT;
 800274c:	2003      	movs	r0, #3
 800274e:	e7f6      	b.n	800273e <HAL_UART_Receive+0x114>

08002750 <UART_CheckIdleState>:
{
 8002750:	b530      	push	{r4, r5, lr}
 8002752:	b083      	sub	sp, #12
 8002754:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002756:	2300      	movs	r3, #0
 8002758:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800275a:	f7fe fb0b 	bl	8000d74 <HAL_GetTick>
 800275e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002760:	6823      	ldr	r3, [r4, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f013 0f08 	tst.w	r3, #8
 8002768:	d10c      	bne.n	8002784 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800276a:	6823      	ldr	r3, [r4, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f013 0f04 	tst.w	r3, #4
 8002772:	d115      	bne.n	80027a0 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8002774:	2320      	movs	r3, #32
 8002776:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002778:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800277a:	2000      	movs	r0, #0
 800277c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8002780:	b003      	add	sp, #12
 8002782:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002784:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	4603      	mov	r3, r0
 800278c:	2200      	movs	r2, #0
 800278e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002792:	4620      	mov	r0, r4
 8002794:	f7ff fe8b 	bl	80024ae <UART_WaitOnFlagUntilTimeout>
 8002798:	2800      	cmp	r0, #0
 800279a:	d0e6      	beq.n	800276a <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800279c:	2003      	movs	r0, #3
 800279e:	e7ef      	b.n	8002780 <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	462b      	mov	r3, r5
 80027a8:	2200      	movs	r2, #0
 80027aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80027ae:	4620      	mov	r0, r4
 80027b0:	f7ff fe7d 	bl	80024ae <UART_WaitOnFlagUntilTimeout>
 80027b4:	2800      	cmp	r0, #0
 80027b6:	d0dd      	beq.n	8002774 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 80027b8:	2003      	movs	r0, #3
 80027ba:	e7e1      	b.n	8002780 <UART_CheckIdleState+0x30>

080027bc <HAL_UART_Init>:
  if (huart == NULL)
 80027bc:	b368      	cbz	r0, 800281a <HAL_UART_Init+0x5e>
{
 80027be:	b510      	push	{r4, lr}
 80027c0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80027c2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80027c4:	b303      	cbz	r3, 8002808 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 80027c6:	2324      	movs	r3, #36	; 0x24
 80027c8:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80027ca:	6822      	ldr	r2, [r4, #0]
 80027cc:	6813      	ldr	r3, [r2, #0]
 80027ce:	f023 0301 	bic.w	r3, r3, #1
 80027d2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027d4:	4620      	mov	r0, r4
 80027d6:	f7ff fc35 	bl	8002044 <UART_SetConfig>
 80027da:	2801      	cmp	r0, #1
 80027dc:	d013      	beq.n	8002806 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027e0:	b9bb      	cbnz	r3, 8002812 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027e2:	6822      	ldr	r2, [r4, #0]
 80027e4:	6853      	ldr	r3, [r2, #4]
 80027e6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80027ea:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027ec:	6822      	ldr	r2, [r4, #0]
 80027ee:	6893      	ldr	r3, [r2, #8]
 80027f0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80027f4:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80027f6:	6822      	ldr	r2, [r4, #0]
 80027f8:	6813      	ldr	r3, [r2, #0]
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002800:	4620      	mov	r0, r4
 8002802:	f7ff ffa5 	bl	8002750 <UART_CheckIdleState>
}
 8002806:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002808:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800280c:	f7fe f9a0 	bl	8000b50 <HAL_UART_MspInit>
 8002810:	e7d9      	b.n	80027c6 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8002812:	4620      	mov	r0, r4
 8002814:	f7ff fde6 	bl	80023e4 <UART_AdvFeatureConfig>
 8002818:	e7e3      	b.n	80027e2 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 800281a:	2001      	movs	r0, #1
}
 800281c:	4770      	bx	lr
	...

08002820 <__sflush_r>:
 8002820:	898a      	ldrh	r2, [r1, #12]
 8002822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002826:	4605      	mov	r5, r0
 8002828:	0710      	lsls	r0, r2, #28
 800282a:	460c      	mov	r4, r1
 800282c:	d458      	bmi.n	80028e0 <__sflush_r+0xc0>
 800282e:	684b      	ldr	r3, [r1, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	dc05      	bgt.n	8002840 <__sflush_r+0x20>
 8002834:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002836:	2b00      	cmp	r3, #0
 8002838:	dc02      	bgt.n	8002840 <__sflush_r+0x20>
 800283a:	2000      	movs	r0, #0
 800283c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002840:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002842:	2e00      	cmp	r6, #0
 8002844:	d0f9      	beq.n	800283a <__sflush_r+0x1a>
 8002846:	2300      	movs	r3, #0
 8002848:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800284c:	682f      	ldr	r7, [r5, #0]
 800284e:	602b      	str	r3, [r5, #0]
 8002850:	d032      	beq.n	80028b8 <__sflush_r+0x98>
 8002852:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002854:	89a3      	ldrh	r3, [r4, #12]
 8002856:	075a      	lsls	r2, r3, #29
 8002858:	d505      	bpl.n	8002866 <__sflush_r+0x46>
 800285a:	6863      	ldr	r3, [r4, #4]
 800285c:	1ac0      	subs	r0, r0, r3
 800285e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002860:	b10b      	cbz	r3, 8002866 <__sflush_r+0x46>
 8002862:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002864:	1ac0      	subs	r0, r0, r3
 8002866:	2300      	movs	r3, #0
 8002868:	4602      	mov	r2, r0
 800286a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800286c:	6a21      	ldr	r1, [r4, #32]
 800286e:	4628      	mov	r0, r5
 8002870:	47b0      	blx	r6
 8002872:	1c43      	adds	r3, r0, #1
 8002874:	89a3      	ldrh	r3, [r4, #12]
 8002876:	d106      	bne.n	8002886 <__sflush_r+0x66>
 8002878:	6829      	ldr	r1, [r5, #0]
 800287a:	291d      	cmp	r1, #29
 800287c:	d82c      	bhi.n	80028d8 <__sflush_r+0xb8>
 800287e:	4a2a      	ldr	r2, [pc, #168]	; (8002928 <__sflush_r+0x108>)
 8002880:	40ca      	lsrs	r2, r1
 8002882:	07d6      	lsls	r6, r2, #31
 8002884:	d528      	bpl.n	80028d8 <__sflush_r+0xb8>
 8002886:	2200      	movs	r2, #0
 8002888:	6062      	str	r2, [r4, #4]
 800288a:	04d9      	lsls	r1, r3, #19
 800288c:	6922      	ldr	r2, [r4, #16]
 800288e:	6022      	str	r2, [r4, #0]
 8002890:	d504      	bpl.n	800289c <__sflush_r+0x7c>
 8002892:	1c42      	adds	r2, r0, #1
 8002894:	d101      	bne.n	800289a <__sflush_r+0x7a>
 8002896:	682b      	ldr	r3, [r5, #0]
 8002898:	b903      	cbnz	r3, 800289c <__sflush_r+0x7c>
 800289a:	6560      	str	r0, [r4, #84]	; 0x54
 800289c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800289e:	602f      	str	r7, [r5, #0]
 80028a0:	2900      	cmp	r1, #0
 80028a2:	d0ca      	beq.n	800283a <__sflush_r+0x1a>
 80028a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80028a8:	4299      	cmp	r1, r3
 80028aa:	d002      	beq.n	80028b2 <__sflush_r+0x92>
 80028ac:	4628      	mov	r0, r5
 80028ae:	f000 f9b1 	bl	8002c14 <_free_r>
 80028b2:	2000      	movs	r0, #0
 80028b4:	6360      	str	r0, [r4, #52]	; 0x34
 80028b6:	e7c1      	b.n	800283c <__sflush_r+0x1c>
 80028b8:	6a21      	ldr	r1, [r4, #32]
 80028ba:	2301      	movs	r3, #1
 80028bc:	4628      	mov	r0, r5
 80028be:	47b0      	blx	r6
 80028c0:	1c41      	adds	r1, r0, #1
 80028c2:	d1c7      	bne.n	8002854 <__sflush_r+0x34>
 80028c4:	682b      	ldr	r3, [r5, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0c4      	beq.n	8002854 <__sflush_r+0x34>
 80028ca:	2b1d      	cmp	r3, #29
 80028cc:	d001      	beq.n	80028d2 <__sflush_r+0xb2>
 80028ce:	2b16      	cmp	r3, #22
 80028d0:	d101      	bne.n	80028d6 <__sflush_r+0xb6>
 80028d2:	602f      	str	r7, [r5, #0]
 80028d4:	e7b1      	b.n	800283a <__sflush_r+0x1a>
 80028d6:	89a3      	ldrh	r3, [r4, #12]
 80028d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028dc:	81a3      	strh	r3, [r4, #12]
 80028de:	e7ad      	b.n	800283c <__sflush_r+0x1c>
 80028e0:	690f      	ldr	r7, [r1, #16]
 80028e2:	2f00      	cmp	r7, #0
 80028e4:	d0a9      	beq.n	800283a <__sflush_r+0x1a>
 80028e6:	0793      	lsls	r3, r2, #30
 80028e8:	680e      	ldr	r6, [r1, #0]
 80028ea:	bf08      	it	eq
 80028ec:	694b      	ldreq	r3, [r1, #20]
 80028ee:	600f      	str	r7, [r1, #0]
 80028f0:	bf18      	it	ne
 80028f2:	2300      	movne	r3, #0
 80028f4:	eba6 0807 	sub.w	r8, r6, r7
 80028f8:	608b      	str	r3, [r1, #8]
 80028fa:	f1b8 0f00 	cmp.w	r8, #0
 80028fe:	dd9c      	ble.n	800283a <__sflush_r+0x1a>
 8002900:	6a21      	ldr	r1, [r4, #32]
 8002902:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002904:	4643      	mov	r3, r8
 8002906:	463a      	mov	r2, r7
 8002908:	4628      	mov	r0, r5
 800290a:	47b0      	blx	r6
 800290c:	2800      	cmp	r0, #0
 800290e:	dc06      	bgt.n	800291e <__sflush_r+0xfe>
 8002910:	89a3      	ldrh	r3, [r4, #12]
 8002912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002916:	81a3      	strh	r3, [r4, #12]
 8002918:	f04f 30ff 	mov.w	r0, #4294967295
 800291c:	e78e      	b.n	800283c <__sflush_r+0x1c>
 800291e:	4407      	add	r7, r0
 8002920:	eba8 0800 	sub.w	r8, r8, r0
 8002924:	e7e9      	b.n	80028fa <__sflush_r+0xda>
 8002926:	bf00      	nop
 8002928:	20400001 	.word	0x20400001

0800292c <_fflush_r>:
 800292c:	b538      	push	{r3, r4, r5, lr}
 800292e:	690b      	ldr	r3, [r1, #16]
 8002930:	4605      	mov	r5, r0
 8002932:	460c      	mov	r4, r1
 8002934:	b913      	cbnz	r3, 800293c <_fflush_r+0x10>
 8002936:	2500      	movs	r5, #0
 8002938:	4628      	mov	r0, r5
 800293a:	bd38      	pop	{r3, r4, r5, pc}
 800293c:	b118      	cbz	r0, 8002946 <_fflush_r+0x1a>
 800293e:	6983      	ldr	r3, [r0, #24]
 8002940:	b90b      	cbnz	r3, 8002946 <_fflush_r+0x1a>
 8002942:	f000 f899 	bl	8002a78 <__sinit>
 8002946:	4b14      	ldr	r3, [pc, #80]	; (8002998 <_fflush_r+0x6c>)
 8002948:	429c      	cmp	r4, r3
 800294a:	d11b      	bne.n	8002984 <_fflush_r+0x58>
 800294c:	686c      	ldr	r4, [r5, #4]
 800294e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0ef      	beq.n	8002936 <_fflush_r+0xa>
 8002956:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002958:	07d0      	lsls	r0, r2, #31
 800295a:	d404      	bmi.n	8002966 <_fflush_r+0x3a>
 800295c:	0599      	lsls	r1, r3, #22
 800295e:	d402      	bmi.n	8002966 <_fflush_r+0x3a>
 8002960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002962:	f000 f94c 	bl	8002bfe <__retarget_lock_acquire_recursive>
 8002966:	4628      	mov	r0, r5
 8002968:	4621      	mov	r1, r4
 800296a:	f7ff ff59 	bl	8002820 <__sflush_r>
 800296e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002970:	07da      	lsls	r2, r3, #31
 8002972:	4605      	mov	r5, r0
 8002974:	d4e0      	bmi.n	8002938 <_fflush_r+0xc>
 8002976:	89a3      	ldrh	r3, [r4, #12]
 8002978:	059b      	lsls	r3, r3, #22
 800297a:	d4dd      	bmi.n	8002938 <_fflush_r+0xc>
 800297c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800297e:	f000 f93f 	bl	8002c00 <__retarget_lock_release_recursive>
 8002982:	e7d9      	b.n	8002938 <_fflush_r+0xc>
 8002984:	4b05      	ldr	r3, [pc, #20]	; (800299c <_fflush_r+0x70>)
 8002986:	429c      	cmp	r4, r3
 8002988:	d101      	bne.n	800298e <_fflush_r+0x62>
 800298a:	68ac      	ldr	r4, [r5, #8]
 800298c:	e7df      	b.n	800294e <_fflush_r+0x22>
 800298e:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <_fflush_r+0x74>)
 8002990:	429c      	cmp	r4, r3
 8002992:	bf08      	it	eq
 8002994:	68ec      	ldreq	r4, [r5, #12]
 8002996:	e7da      	b.n	800294e <_fflush_r+0x22>
 8002998:	08005364 	.word	0x08005364
 800299c:	08005384 	.word	0x08005384
 80029a0:	08005344 	.word	0x08005344

080029a4 <fflush>:
 80029a4:	4601      	mov	r1, r0
 80029a6:	b920      	cbnz	r0, 80029b2 <fflush+0xe>
 80029a8:	4b04      	ldr	r3, [pc, #16]	; (80029bc <fflush+0x18>)
 80029aa:	4905      	ldr	r1, [pc, #20]	; (80029c0 <fflush+0x1c>)
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	f000 b8e1 	b.w	8002b74 <_fwalk_reent>
 80029b2:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <fflush+0x20>)
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	f7ff bfb9 	b.w	800292c <_fflush_r>
 80029ba:	bf00      	nop
 80029bc:	080053a4 	.word	0x080053a4
 80029c0:	0800292d 	.word	0x0800292d
 80029c4:	2000000c 	.word	0x2000000c

080029c8 <std>:
 80029c8:	2300      	movs	r3, #0
 80029ca:	b510      	push	{r4, lr}
 80029cc:	4604      	mov	r4, r0
 80029ce:	e9c0 3300 	strd	r3, r3, [r0]
 80029d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80029d6:	6083      	str	r3, [r0, #8]
 80029d8:	8181      	strh	r1, [r0, #12]
 80029da:	6643      	str	r3, [r0, #100]	; 0x64
 80029dc:	81c2      	strh	r2, [r0, #14]
 80029de:	6183      	str	r3, [r0, #24]
 80029e0:	4619      	mov	r1, r3
 80029e2:	2208      	movs	r2, #8
 80029e4:	305c      	adds	r0, #92	; 0x5c
 80029e6:	f000 f90c 	bl	8002c02 <memset>
 80029ea:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <std+0x38>)
 80029ec:	6263      	str	r3, [r4, #36]	; 0x24
 80029ee:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <std+0x3c>)
 80029f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80029f2:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <std+0x40>)
 80029f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80029f6:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <std+0x44>)
 80029f8:	6224      	str	r4, [r4, #32]
 80029fa:	6323      	str	r3, [r4, #48]	; 0x30
 80029fc:	bd10      	pop	{r4, pc}
 80029fe:	bf00      	nop
 8002a00:	08003729 	.word	0x08003729
 8002a04:	0800374b 	.word	0x0800374b
 8002a08:	08003783 	.word	0x08003783
 8002a0c:	080037a7 	.word	0x080037a7

08002a10 <_cleanup_r>:
 8002a10:	4901      	ldr	r1, [pc, #4]	; (8002a18 <_cleanup_r+0x8>)
 8002a12:	f000 b8af 	b.w	8002b74 <_fwalk_reent>
 8002a16:	bf00      	nop
 8002a18:	0800292d 	.word	0x0800292d

08002a1c <__sfmoreglue>:
 8002a1c:	b570      	push	{r4, r5, r6, lr}
 8002a1e:	1e4a      	subs	r2, r1, #1
 8002a20:	2568      	movs	r5, #104	; 0x68
 8002a22:	4355      	muls	r5, r2
 8002a24:	460e      	mov	r6, r1
 8002a26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002a2a:	f000 f943 	bl	8002cb4 <_malloc_r>
 8002a2e:	4604      	mov	r4, r0
 8002a30:	b140      	cbz	r0, 8002a44 <__sfmoreglue+0x28>
 8002a32:	2100      	movs	r1, #0
 8002a34:	e9c0 1600 	strd	r1, r6, [r0]
 8002a38:	300c      	adds	r0, #12
 8002a3a:	60a0      	str	r0, [r4, #8]
 8002a3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002a40:	f000 f8df 	bl	8002c02 <memset>
 8002a44:	4620      	mov	r0, r4
 8002a46:	bd70      	pop	{r4, r5, r6, pc}

08002a48 <__sfp_lock_acquire>:
 8002a48:	4801      	ldr	r0, [pc, #4]	; (8002a50 <__sfp_lock_acquire+0x8>)
 8002a4a:	f000 b8d8 	b.w	8002bfe <__retarget_lock_acquire_recursive>
 8002a4e:	bf00      	nop
 8002a50:	2000038c 	.word	0x2000038c

08002a54 <__sfp_lock_release>:
 8002a54:	4801      	ldr	r0, [pc, #4]	; (8002a5c <__sfp_lock_release+0x8>)
 8002a56:	f000 b8d3 	b.w	8002c00 <__retarget_lock_release_recursive>
 8002a5a:	bf00      	nop
 8002a5c:	2000038c 	.word	0x2000038c

08002a60 <__sinit_lock_acquire>:
 8002a60:	4801      	ldr	r0, [pc, #4]	; (8002a68 <__sinit_lock_acquire+0x8>)
 8002a62:	f000 b8cc 	b.w	8002bfe <__retarget_lock_acquire_recursive>
 8002a66:	bf00      	nop
 8002a68:	20000387 	.word	0x20000387

08002a6c <__sinit_lock_release>:
 8002a6c:	4801      	ldr	r0, [pc, #4]	; (8002a74 <__sinit_lock_release+0x8>)
 8002a6e:	f000 b8c7 	b.w	8002c00 <__retarget_lock_release_recursive>
 8002a72:	bf00      	nop
 8002a74:	20000387 	.word	0x20000387

08002a78 <__sinit>:
 8002a78:	b510      	push	{r4, lr}
 8002a7a:	4604      	mov	r4, r0
 8002a7c:	f7ff fff0 	bl	8002a60 <__sinit_lock_acquire>
 8002a80:	69a3      	ldr	r3, [r4, #24]
 8002a82:	b11b      	cbz	r3, 8002a8c <__sinit+0x14>
 8002a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a88:	f7ff bff0 	b.w	8002a6c <__sinit_lock_release>
 8002a8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002a90:	6523      	str	r3, [r4, #80]	; 0x50
 8002a92:	4b13      	ldr	r3, [pc, #76]	; (8002ae0 <__sinit+0x68>)
 8002a94:	4a13      	ldr	r2, [pc, #76]	; (8002ae4 <__sinit+0x6c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	62a2      	str	r2, [r4, #40]	; 0x28
 8002a9a:	42a3      	cmp	r3, r4
 8002a9c:	bf04      	itt	eq
 8002a9e:	2301      	moveq	r3, #1
 8002aa0:	61a3      	streq	r3, [r4, #24]
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	f000 f820 	bl	8002ae8 <__sfp>
 8002aa8:	6060      	str	r0, [r4, #4]
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f000 f81c 	bl	8002ae8 <__sfp>
 8002ab0:	60a0      	str	r0, [r4, #8]
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	f000 f818 	bl	8002ae8 <__sfp>
 8002ab8:	2200      	movs	r2, #0
 8002aba:	60e0      	str	r0, [r4, #12]
 8002abc:	2104      	movs	r1, #4
 8002abe:	6860      	ldr	r0, [r4, #4]
 8002ac0:	f7ff ff82 	bl	80029c8 <std>
 8002ac4:	68a0      	ldr	r0, [r4, #8]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	2109      	movs	r1, #9
 8002aca:	f7ff ff7d 	bl	80029c8 <std>
 8002ace:	68e0      	ldr	r0, [r4, #12]
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	2112      	movs	r1, #18
 8002ad4:	f7ff ff78 	bl	80029c8 <std>
 8002ad8:	2301      	movs	r3, #1
 8002ada:	61a3      	str	r3, [r4, #24]
 8002adc:	e7d2      	b.n	8002a84 <__sinit+0xc>
 8002ade:	bf00      	nop
 8002ae0:	080053a4 	.word	0x080053a4
 8002ae4:	08002a11 	.word	0x08002a11

08002ae8 <__sfp>:
 8002ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aea:	4607      	mov	r7, r0
 8002aec:	f7ff ffac 	bl	8002a48 <__sfp_lock_acquire>
 8002af0:	4b1e      	ldr	r3, [pc, #120]	; (8002b6c <__sfp+0x84>)
 8002af2:	681e      	ldr	r6, [r3, #0]
 8002af4:	69b3      	ldr	r3, [r6, #24]
 8002af6:	b913      	cbnz	r3, 8002afe <__sfp+0x16>
 8002af8:	4630      	mov	r0, r6
 8002afa:	f7ff ffbd 	bl	8002a78 <__sinit>
 8002afe:	3648      	adds	r6, #72	; 0x48
 8002b00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002b04:	3b01      	subs	r3, #1
 8002b06:	d503      	bpl.n	8002b10 <__sfp+0x28>
 8002b08:	6833      	ldr	r3, [r6, #0]
 8002b0a:	b30b      	cbz	r3, 8002b50 <__sfp+0x68>
 8002b0c:	6836      	ldr	r6, [r6, #0]
 8002b0e:	e7f7      	b.n	8002b00 <__sfp+0x18>
 8002b10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002b14:	b9d5      	cbnz	r5, 8002b4c <__sfp+0x64>
 8002b16:	4b16      	ldr	r3, [pc, #88]	; (8002b70 <__sfp+0x88>)
 8002b18:	60e3      	str	r3, [r4, #12]
 8002b1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002b1e:	6665      	str	r5, [r4, #100]	; 0x64
 8002b20:	f000 f86c 	bl	8002bfc <__retarget_lock_init_recursive>
 8002b24:	f7ff ff96 	bl	8002a54 <__sfp_lock_release>
 8002b28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002b2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002b30:	6025      	str	r5, [r4, #0]
 8002b32:	61a5      	str	r5, [r4, #24]
 8002b34:	2208      	movs	r2, #8
 8002b36:	4629      	mov	r1, r5
 8002b38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002b3c:	f000 f861 	bl	8002c02 <memset>
 8002b40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002b44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002b48:	4620      	mov	r0, r4
 8002b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b4c:	3468      	adds	r4, #104	; 0x68
 8002b4e:	e7d9      	b.n	8002b04 <__sfp+0x1c>
 8002b50:	2104      	movs	r1, #4
 8002b52:	4638      	mov	r0, r7
 8002b54:	f7ff ff62 	bl	8002a1c <__sfmoreglue>
 8002b58:	4604      	mov	r4, r0
 8002b5a:	6030      	str	r0, [r6, #0]
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	d1d5      	bne.n	8002b0c <__sfp+0x24>
 8002b60:	f7ff ff78 	bl	8002a54 <__sfp_lock_release>
 8002b64:	230c      	movs	r3, #12
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	e7ee      	b.n	8002b48 <__sfp+0x60>
 8002b6a:	bf00      	nop
 8002b6c:	080053a4 	.word	0x080053a4
 8002b70:	ffff0001 	.word	0xffff0001

08002b74 <_fwalk_reent>:
 8002b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b78:	4606      	mov	r6, r0
 8002b7a:	4688      	mov	r8, r1
 8002b7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002b80:	2700      	movs	r7, #0
 8002b82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b86:	f1b9 0901 	subs.w	r9, r9, #1
 8002b8a:	d505      	bpl.n	8002b98 <_fwalk_reent+0x24>
 8002b8c:	6824      	ldr	r4, [r4, #0]
 8002b8e:	2c00      	cmp	r4, #0
 8002b90:	d1f7      	bne.n	8002b82 <_fwalk_reent+0xe>
 8002b92:	4638      	mov	r0, r7
 8002b94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b98:	89ab      	ldrh	r3, [r5, #12]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d907      	bls.n	8002bae <_fwalk_reent+0x3a>
 8002b9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	d003      	beq.n	8002bae <_fwalk_reent+0x3a>
 8002ba6:	4629      	mov	r1, r5
 8002ba8:	4630      	mov	r0, r6
 8002baa:	47c0      	blx	r8
 8002bac:	4307      	orrs	r7, r0
 8002bae:	3568      	adds	r5, #104	; 0x68
 8002bb0:	e7e9      	b.n	8002b86 <_fwalk_reent+0x12>
	...

08002bb4 <__libc_init_array>:
 8002bb4:	b570      	push	{r4, r5, r6, lr}
 8002bb6:	4d0d      	ldr	r5, [pc, #52]	; (8002bec <__libc_init_array+0x38>)
 8002bb8:	4c0d      	ldr	r4, [pc, #52]	; (8002bf0 <__libc_init_array+0x3c>)
 8002bba:	1b64      	subs	r4, r4, r5
 8002bbc:	10a4      	asrs	r4, r4, #2
 8002bbe:	2600      	movs	r6, #0
 8002bc0:	42a6      	cmp	r6, r4
 8002bc2:	d109      	bne.n	8002bd8 <__libc_init_array+0x24>
 8002bc4:	4d0b      	ldr	r5, [pc, #44]	; (8002bf4 <__libc_init_array+0x40>)
 8002bc6:	4c0c      	ldr	r4, [pc, #48]	; (8002bf8 <__libc_init_array+0x44>)
 8002bc8:	f002 fb74 	bl	80052b4 <_init>
 8002bcc:	1b64      	subs	r4, r4, r5
 8002bce:	10a4      	asrs	r4, r4, #2
 8002bd0:	2600      	movs	r6, #0
 8002bd2:	42a6      	cmp	r6, r4
 8002bd4:	d105      	bne.n	8002be2 <__libc_init_array+0x2e>
 8002bd6:	bd70      	pop	{r4, r5, r6, pc}
 8002bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bdc:	4798      	blx	r3
 8002bde:	3601      	adds	r6, #1
 8002be0:	e7ee      	b.n	8002bc0 <__libc_init_array+0xc>
 8002be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be6:	4798      	blx	r3
 8002be8:	3601      	adds	r6, #1
 8002bea:	e7f2      	b.n	8002bd2 <__libc_init_array+0x1e>
 8002bec:	0800572c 	.word	0x0800572c
 8002bf0:	0800572c 	.word	0x0800572c
 8002bf4:	0800572c 	.word	0x0800572c
 8002bf8:	08005730 	.word	0x08005730

08002bfc <__retarget_lock_init_recursive>:
 8002bfc:	4770      	bx	lr

08002bfe <__retarget_lock_acquire_recursive>:
 8002bfe:	4770      	bx	lr

08002c00 <__retarget_lock_release_recursive>:
 8002c00:	4770      	bx	lr

08002c02 <memset>:
 8002c02:	4402      	add	r2, r0
 8002c04:	4603      	mov	r3, r0
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d100      	bne.n	8002c0c <memset+0xa>
 8002c0a:	4770      	bx	lr
 8002c0c:	f803 1b01 	strb.w	r1, [r3], #1
 8002c10:	e7f9      	b.n	8002c06 <memset+0x4>
	...

08002c14 <_free_r>:
 8002c14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c16:	2900      	cmp	r1, #0
 8002c18:	d048      	beq.n	8002cac <_free_r+0x98>
 8002c1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c1e:	9001      	str	r0, [sp, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f1a1 0404 	sub.w	r4, r1, #4
 8002c26:	bfb8      	it	lt
 8002c28:	18e4      	addlt	r4, r4, r3
 8002c2a:	f001 fd43 	bl	80046b4 <__malloc_lock>
 8002c2e:	4a20      	ldr	r2, [pc, #128]	; (8002cb0 <_free_r+0x9c>)
 8002c30:	9801      	ldr	r0, [sp, #4]
 8002c32:	6813      	ldr	r3, [r2, #0]
 8002c34:	4615      	mov	r5, r2
 8002c36:	b933      	cbnz	r3, 8002c46 <_free_r+0x32>
 8002c38:	6063      	str	r3, [r4, #4]
 8002c3a:	6014      	str	r4, [r2, #0]
 8002c3c:	b003      	add	sp, #12
 8002c3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c42:	f001 bd3d 	b.w	80046c0 <__malloc_unlock>
 8002c46:	42a3      	cmp	r3, r4
 8002c48:	d90b      	bls.n	8002c62 <_free_r+0x4e>
 8002c4a:	6821      	ldr	r1, [r4, #0]
 8002c4c:	1862      	adds	r2, r4, r1
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	bf04      	itt	eq
 8002c52:	681a      	ldreq	r2, [r3, #0]
 8002c54:	685b      	ldreq	r3, [r3, #4]
 8002c56:	6063      	str	r3, [r4, #4]
 8002c58:	bf04      	itt	eq
 8002c5a:	1852      	addeq	r2, r2, r1
 8002c5c:	6022      	streq	r2, [r4, #0]
 8002c5e:	602c      	str	r4, [r5, #0]
 8002c60:	e7ec      	b.n	8002c3c <_free_r+0x28>
 8002c62:	461a      	mov	r2, r3
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	b10b      	cbz	r3, 8002c6c <_free_r+0x58>
 8002c68:	42a3      	cmp	r3, r4
 8002c6a:	d9fa      	bls.n	8002c62 <_free_r+0x4e>
 8002c6c:	6811      	ldr	r1, [r2, #0]
 8002c6e:	1855      	adds	r5, r2, r1
 8002c70:	42a5      	cmp	r5, r4
 8002c72:	d10b      	bne.n	8002c8c <_free_r+0x78>
 8002c74:	6824      	ldr	r4, [r4, #0]
 8002c76:	4421      	add	r1, r4
 8002c78:	1854      	adds	r4, r2, r1
 8002c7a:	42a3      	cmp	r3, r4
 8002c7c:	6011      	str	r1, [r2, #0]
 8002c7e:	d1dd      	bne.n	8002c3c <_free_r+0x28>
 8002c80:	681c      	ldr	r4, [r3, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	6053      	str	r3, [r2, #4]
 8002c86:	4421      	add	r1, r4
 8002c88:	6011      	str	r1, [r2, #0]
 8002c8a:	e7d7      	b.n	8002c3c <_free_r+0x28>
 8002c8c:	d902      	bls.n	8002c94 <_free_r+0x80>
 8002c8e:	230c      	movs	r3, #12
 8002c90:	6003      	str	r3, [r0, #0]
 8002c92:	e7d3      	b.n	8002c3c <_free_r+0x28>
 8002c94:	6825      	ldr	r5, [r4, #0]
 8002c96:	1961      	adds	r1, r4, r5
 8002c98:	428b      	cmp	r3, r1
 8002c9a:	bf04      	itt	eq
 8002c9c:	6819      	ldreq	r1, [r3, #0]
 8002c9e:	685b      	ldreq	r3, [r3, #4]
 8002ca0:	6063      	str	r3, [r4, #4]
 8002ca2:	bf04      	itt	eq
 8002ca4:	1949      	addeq	r1, r1, r5
 8002ca6:	6021      	streq	r1, [r4, #0]
 8002ca8:	6054      	str	r4, [r2, #4]
 8002caa:	e7c7      	b.n	8002c3c <_free_r+0x28>
 8002cac:	b003      	add	sp, #12
 8002cae:	bd30      	pop	{r4, r5, pc}
 8002cb0:	200001f8 	.word	0x200001f8

08002cb4 <_malloc_r>:
 8002cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb6:	1ccd      	adds	r5, r1, #3
 8002cb8:	f025 0503 	bic.w	r5, r5, #3
 8002cbc:	3508      	adds	r5, #8
 8002cbe:	2d0c      	cmp	r5, #12
 8002cc0:	bf38      	it	cc
 8002cc2:	250c      	movcc	r5, #12
 8002cc4:	2d00      	cmp	r5, #0
 8002cc6:	4606      	mov	r6, r0
 8002cc8:	db01      	blt.n	8002cce <_malloc_r+0x1a>
 8002cca:	42a9      	cmp	r1, r5
 8002ccc:	d903      	bls.n	8002cd6 <_malloc_r+0x22>
 8002cce:	230c      	movs	r3, #12
 8002cd0:	6033      	str	r3, [r6, #0]
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cd6:	f001 fced 	bl	80046b4 <__malloc_lock>
 8002cda:	4921      	ldr	r1, [pc, #132]	; (8002d60 <_malloc_r+0xac>)
 8002cdc:	680a      	ldr	r2, [r1, #0]
 8002cde:	4614      	mov	r4, r2
 8002ce0:	b99c      	cbnz	r4, 8002d0a <_malloc_r+0x56>
 8002ce2:	4f20      	ldr	r7, [pc, #128]	; (8002d64 <_malloc_r+0xb0>)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	b923      	cbnz	r3, 8002cf2 <_malloc_r+0x3e>
 8002ce8:	4621      	mov	r1, r4
 8002cea:	4630      	mov	r0, r6
 8002cec:	f000 fd0c 	bl	8003708 <_sbrk_r>
 8002cf0:	6038      	str	r0, [r7, #0]
 8002cf2:	4629      	mov	r1, r5
 8002cf4:	4630      	mov	r0, r6
 8002cf6:	f000 fd07 	bl	8003708 <_sbrk_r>
 8002cfa:	1c43      	adds	r3, r0, #1
 8002cfc:	d123      	bne.n	8002d46 <_malloc_r+0x92>
 8002cfe:	230c      	movs	r3, #12
 8002d00:	6033      	str	r3, [r6, #0]
 8002d02:	4630      	mov	r0, r6
 8002d04:	f001 fcdc 	bl	80046c0 <__malloc_unlock>
 8002d08:	e7e3      	b.n	8002cd2 <_malloc_r+0x1e>
 8002d0a:	6823      	ldr	r3, [r4, #0]
 8002d0c:	1b5b      	subs	r3, r3, r5
 8002d0e:	d417      	bmi.n	8002d40 <_malloc_r+0x8c>
 8002d10:	2b0b      	cmp	r3, #11
 8002d12:	d903      	bls.n	8002d1c <_malloc_r+0x68>
 8002d14:	6023      	str	r3, [r4, #0]
 8002d16:	441c      	add	r4, r3
 8002d18:	6025      	str	r5, [r4, #0]
 8002d1a:	e004      	b.n	8002d26 <_malloc_r+0x72>
 8002d1c:	6863      	ldr	r3, [r4, #4]
 8002d1e:	42a2      	cmp	r2, r4
 8002d20:	bf0c      	ite	eq
 8002d22:	600b      	streq	r3, [r1, #0]
 8002d24:	6053      	strne	r3, [r2, #4]
 8002d26:	4630      	mov	r0, r6
 8002d28:	f001 fcca 	bl	80046c0 <__malloc_unlock>
 8002d2c:	f104 000b 	add.w	r0, r4, #11
 8002d30:	1d23      	adds	r3, r4, #4
 8002d32:	f020 0007 	bic.w	r0, r0, #7
 8002d36:	1ac2      	subs	r2, r0, r3
 8002d38:	d0cc      	beq.n	8002cd4 <_malloc_r+0x20>
 8002d3a:	1a1b      	subs	r3, r3, r0
 8002d3c:	50a3      	str	r3, [r4, r2]
 8002d3e:	e7c9      	b.n	8002cd4 <_malloc_r+0x20>
 8002d40:	4622      	mov	r2, r4
 8002d42:	6864      	ldr	r4, [r4, #4]
 8002d44:	e7cc      	b.n	8002ce0 <_malloc_r+0x2c>
 8002d46:	1cc4      	adds	r4, r0, #3
 8002d48:	f024 0403 	bic.w	r4, r4, #3
 8002d4c:	42a0      	cmp	r0, r4
 8002d4e:	d0e3      	beq.n	8002d18 <_malloc_r+0x64>
 8002d50:	1a21      	subs	r1, r4, r0
 8002d52:	4630      	mov	r0, r6
 8002d54:	f000 fcd8 	bl	8003708 <_sbrk_r>
 8002d58:	3001      	adds	r0, #1
 8002d5a:	d1dd      	bne.n	8002d18 <_malloc_r+0x64>
 8002d5c:	e7cf      	b.n	8002cfe <_malloc_r+0x4a>
 8002d5e:	bf00      	nop
 8002d60:	200001f8 	.word	0x200001f8
 8002d64:	200001fc 	.word	0x200001fc

08002d68 <__cvt>:
 8002d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d6a:	ed2d 8b02 	vpush	{d8}
 8002d6e:	eeb0 8b40 	vmov.f64	d8, d0
 8002d72:	b085      	sub	sp, #20
 8002d74:	4617      	mov	r7, r2
 8002d76:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8002d78:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8002d7a:	ee18 2a90 	vmov	r2, s17
 8002d7e:	f025 0520 	bic.w	r5, r5, #32
 8002d82:	2a00      	cmp	r2, #0
 8002d84:	bfb6      	itet	lt
 8002d86:	222d      	movlt	r2, #45	; 0x2d
 8002d88:	2200      	movge	r2, #0
 8002d8a:	eeb1 8b40 	vneglt.f64	d8, d0
 8002d8e:	2d46      	cmp	r5, #70	; 0x46
 8002d90:	460c      	mov	r4, r1
 8002d92:	701a      	strb	r2, [r3, #0]
 8002d94:	d004      	beq.n	8002da0 <__cvt+0x38>
 8002d96:	2d45      	cmp	r5, #69	; 0x45
 8002d98:	d100      	bne.n	8002d9c <__cvt+0x34>
 8002d9a:	3401      	adds	r4, #1
 8002d9c:	2102      	movs	r1, #2
 8002d9e:	e000      	b.n	8002da2 <__cvt+0x3a>
 8002da0:	2103      	movs	r1, #3
 8002da2:	ab03      	add	r3, sp, #12
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	ab02      	add	r3, sp, #8
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	4622      	mov	r2, r4
 8002dac:	4633      	mov	r3, r6
 8002dae:	eeb0 0b48 	vmov.f64	d0, d8
 8002db2:	f000 fe6d 	bl	8003a90 <_dtoa_r>
 8002db6:	2d47      	cmp	r5, #71	; 0x47
 8002db8:	d109      	bne.n	8002dce <__cvt+0x66>
 8002dba:	07fb      	lsls	r3, r7, #31
 8002dbc:	d407      	bmi.n	8002dce <__cvt+0x66>
 8002dbe:	9b03      	ldr	r3, [sp, #12]
 8002dc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002dc2:	1a1b      	subs	r3, r3, r0
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	b005      	add	sp, #20
 8002dc8:	ecbd 8b02 	vpop	{d8}
 8002dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dce:	2d46      	cmp	r5, #70	; 0x46
 8002dd0:	eb00 0204 	add.w	r2, r0, r4
 8002dd4:	d10c      	bne.n	8002df0 <__cvt+0x88>
 8002dd6:	7803      	ldrb	r3, [r0, #0]
 8002dd8:	2b30      	cmp	r3, #48	; 0x30
 8002dda:	d107      	bne.n	8002dec <__cvt+0x84>
 8002ddc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8002de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de4:	bf1c      	itt	ne
 8002de6:	f1c4 0401 	rsbne	r4, r4, #1
 8002dea:	6034      	strne	r4, [r6, #0]
 8002dec:	6833      	ldr	r3, [r6, #0]
 8002dee:	441a      	add	r2, r3
 8002df0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8002df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df8:	bf08      	it	eq
 8002dfa:	9203      	streq	r2, [sp, #12]
 8002dfc:	2130      	movs	r1, #48	; 0x30
 8002dfe:	9b03      	ldr	r3, [sp, #12]
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d2dc      	bcs.n	8002dbe <__cvt+0x56>
 8002e04:	1c5c      	adds	r4, r3, #1
 8002e06:	9403      	str	r4, [sp, #12]
 8002e08:	7019      	strb	r1, [r3, #0]
 8002e0a:	e7f8      	b.n	8002dfe <__cvt+0x96>

08002e0c <__exponent>:
 8002e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2900      	cmp	r1, #0
 8002e12:	bfb8      	it	lt
 8002e14:	4249      	neglt	r1, r1
 8002e16:	f803 2b02 	strb.w	r2, [r3], #2
 8002e1a:	bfb4      	ite	lt
 8002e1c:	222d      	movlt	r2, #45	; 0x2d
 8002e1e:	222b      	movge	r2, #43	; 0x2b
 8002e20:	2909      	cmp	r1, #9
 8002e22:	7042      	strb	r2, [r0, #1]
 8002e24:	dd2a      	ble.n	8002e7c <__exponent+0x70>
 8002e26:	f10d 0407 	add.w	r4, sp, #7
 8002e2a:	46a4      	mov	ip, r4
 8002e2c:	270a      	movs	r7, #10
 8002e2e:	46a6      	mov	lr, r4
 8002e30:	460a      	mov	r2, r1
 8002e32:	fb91 f6f7 	sdiv	r6, r1, r7
 8002e36:	fb07 1516 	mls	r5, r7, r6, r1
 8002e3a:	3530      	adds	r5, #48	; 0x30
 8002e3c:	2a63      	cmp	r2, #99	; 0x63
 8002e3e:	f104 34ff 	add.w	r4, r4, #4294967295
 8002e42:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002e46:	4631      	mov	r1, r6
 8002e48:	dcf1      	bgt.n	8002e2e <__exponent+0x22>
 8002e4a:	3130      	adds	r1, #48	; 0x30
 8002e4c:	f1ae 0502 	sub.w	r5, lr, #2
 8002e50:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002e54:	1c44      	adds	r4, r0, #1
 8002e56:	4629      	mov	r1, r5
 8002e58:	4561      	cmp	r1, ip
 8002e5a:	d30a      	bcc.n	8002e72 <__exponent+0x66>
 8002e5c:	f10d 0209 	add.w	r2, sp, #9
 8002e60:	eba2 020e 	sub.w	r2, r2, lr
 8002e64:	4565      	cmp	r5, ip
 8002e66:	bf88      	it	hi
 8002e68:	2200      	movhi	r2, #0
 8002e6a:	4413      	add	r3, r2
 8002e6c:	1a18      	subs	r0, r3, r0
 8002e6e:	b003      	add	sp, #12
 8002e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002e76:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002e7a:	e7ed      	b.n	8002e58 <__exponent+0x4c>
 8002e7c:	2330      	movs	r3, #48	; 0x30
 8002e7e:	3130      	adds	r1, #48	; 0x30
 8002e80:	7083      	strb	r3, [r0, #2]
 8002e82:	70c1      	strb	r1, [r0, #3]
 8002e84:	1d03      	adds	r3, r0, #4
 8002e86:	e7f1      	b.n	8002e6c <__exponent+0x60>

08002e88 <_printf_float>:
 8002e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e8c:	b08b      	sub	sp, #44	; 0x2c
 8002e8e:	460c      	mov	r4, r1
 8002e90:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8002e94:	4616      	mov	r6, r2
 8002e96:	461f      	mov	r7, r3
 8002e98:	4605      	mov	r5, r0
 8002e9a:	f001 fb7b 	bl	8004594 <_localeconv_r>
 8002e9e:	f8d0 b000 	ldr.w	fp, [r0]
 8002ea2:	4658      	mov	r0, fp
 8002ea4:	f7fd f9cc 	bl	8000240 <strlen>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	9308      	str	r3, [sp, #32]
 8002eac:	f8d8 3000 	ldr.w	r3, [r8]
 8002eb0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002eb4:	6822      	ldr	r2, [r4, #0]
 8002eb6:	3307      	adds	r3, #7
 8002eb8:	f023 0307 	bic.w	r3, r3, #7
 8002ebc:	f103 0108 	add.w	r1, r3, #8
 8002ec0:	f8c8 1000 	str.w	r1, [r8]
 8002ec4:	4682      	mov	sl, r0
 8002ec6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002eca:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8002ece:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8003130 <_printf_float+0x2a8>
 8002ed2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8002ed6:	eeb0 6bc0 	vabs.f64	d6, d0
 8002eda:	eeb4 6b47 	vcmp.f64	d6, d7
 8002ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee2:	dd24      	ble.n	8002f2e <_printf_float+0xa6>
 8002ee4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8002ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eec:	d502      	bpl.n	8002ef4 <_printf_float+0x6c>
 8002eee:	232d      	movs	r3, #45	; 0x2d
 8002ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ef4:	4b90      	ldr	r3, [pc, #576]	; (8003138 <_printf_float+0x2b0>)
 8002ef6:	4891      	ldr	r0, [pc, #580]	; (800313c <_printf_float+0x2b4>)
 8002ef8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002efc:	bf94      	ite	ls
 8002efe:	4698      	movls	r8, r3
 8002f00:	4680      	movhi	r8, r0
 8002f02:	2303      	movs	r3, #3
 8002f04:	6123      	str	r3, [r4, #16]
 8002f06:	f022 0204 	bic.w	r2, r2, #4
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	6022      	str	r2, [r4, #0]
 8002f0e:	9304      	str	r3, [sp, #16]
 8002f10:	9700      	str	r7, [sp, #0]
 8002f12:	4633      	mov	r3, r6
 8002f14:	aa09      	add	r2, sp, #36	; 0x24
 8002f16:	4621      	mov	r1, r4
 8002f18:	4628      	mov	r0, r5
 8002f1a:	f000 f9d3 	bl	80032c4 <_printf_common>
 8002f1e:	3001      	adds	r0, #1
 8002f20:	f040 808a 	bne.w	8003038 <_printf_float+0x1b0>
 8002f24:	f04f 30ff 	mov.w	r0, #4294967295
 8002f28:	b00b      	add	sp, #44	; 0x2c
 8002f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f2e:	eeb4 0b40 	vcmp.f64	d0, d0
 8002f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f36:	d709      	bvc.n	8002f4c <_printf_float+0xc4>
 8002f38:	ee10 3a90 	vmov	r3, s1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	bfbc      	itt	lt
 8002f40:	232d      	movlt	r3, #45	; 0x2d
 8002f42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002f46:	487e      	ldr	r0, [pc, #504]	; (8003140 <_printf_float+0x2b8>)
 8002f48:	4b7e      	ldr	r3, [pc, #504]	; (8003144 <_printf_float+0x2bc>)
 8002f4a:	e7d5      	b.n	8002ef8 <_printf_float+0x70>
 8002f4c:	6863      	ldr	r3, [r4, #4]
 8002f4e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002f52:	9104      	str	r1, [sp, #16]
 8002f54:	1c59      	adds	r1, r3, #1
 8002f56:	d13c      	bne.n	8002fd2 <_printf_float+0x14a>
 8002f58:	2306      	movs	r3, #6
 8002f5a:	6063      	str	r3, [r4, #4]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	9303      	str	r3, [sp, #12]
 8002f60:	ab08      	add	r3, sp, #32
 8002f62:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8002f66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f6a:	ab07      	add	r3, sp, #28
 8002f6c:	6861      	ldr	r1, [r4, #4]
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	6022      	str	r2, [r4, #0]
 8002f72:	f10d 031b 	add.w	r3, sp, #27
 8002f76:	4628      	mov	r0, r5
 8002f78:	f7ff fef6 	bl	8002d68 <__cvt>
 8002f7c:	9b04      	ldr	r3, [sp, #16]
 8002f7e:	9907      	ldr	r1, [sp, #28]
 8002f80:	2b47      	cmp	r3, #71	; 0x47
 8002f82:	4680      	mov	r8, r0
 8002f84:	d108      	bne.n	8002f98 <_printf_float+0x110>
 8002f86:	1cc8      	adds	r0, r1, #3
 8002f88:	db02      	blt.n	8002f90 <_printf_float+0x108>
 8002f8a:	6863      	ldr	r3, [r4, #4]
 8002f8c:	4299      	cmp	r1, r3
 8002f8e:	dd41      	ble.n	8003014 <_printf_float+0x18c>
 8002f90:	f1a9 0902 	sub.w	r9, r9, #2
 8002f94:	fa5f f989 	uxtb.w	r9, r9
 8002f98:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002f9c:	d820      	bhi.n	8002fe0 <_printf_float+0x158>
 8002f9e:	3901      	subs	r1, #1
 8002fa0:	464a      	mov	r2, r9
 8002fa2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002fa6:	9107      	str	r1, [sp, #28]
 8002fa8:	f7ff ff30 	bl	8002e0c <__exponent>
 8002fac:	9a08      	ldr	r2, [sp, #32]
 8002fae:	9004      	str	r0, [sp, #16]
 8002fb0:	1813      	adds	r3, r2, r0
 8002fb2:	2a01      	cmp	r2, #1
 8002fb4:	6123      	str	r3, [r4, #16]
 8002fb6:	dc02      	bgt.n	8002fbe <_printf_float+0x136>
 8002fb8:	6822      	ldr	r2, [r4, #0]
 8002fba:	07d2      	lsls	r2, r2, #31
 8002fbc:	d501      	bpl.n	8002fc2 <_printf_float+0x13a>
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	6123      	str	r3, [r4, #16]
 8002fc2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0a2      	beq.n	8002f10 <_printf_float+0x88>
 8002fca:	232d      	movs	r3, #45	; 0x2d
 8002fcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fd0:	e79e      	b.n	8002f10 <_printf_float+0x88>
 8002fd2:	9904      	ldr	r1, [sp, #16]
 8002fd4:	2947      	cmp	r1, #71	; 0x47
 8002fd6:	d1c1      	bne.n	8002f5c <_printf_float+0xd4>
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1bf      	bne.n	8002f5c <_printf_float+0xd4>
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e7bc      	b.n	8002f5a <_printf_float+0xd2>
 8002fe0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002fe4:	d118      	bne.n	8003018 <_printf_float+0x190>
 8002fe6:	2900      	cmp	r1, #0
 8002fe8:	6863      	ldr	r3, [r4, #4]
 8002fea:	dd0b      	ble.n	8003004 <_printf_float+0x17c>
 8002fec:	6121      	str	r1, [r4, #16]
 8002fee:	b913      	cbnz	r3, 8002ff6 <_printf_float+0x16e>
 8002ff0:	6822      	ldr	r2, [r4, #0]
 8002ff2:	07d0      	lsls	r0, r2, #31
 8002ff4:	d502      	bpl.n	8002ffc <_printf_float+0x174>
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	440b      	add	r3, r1
 8002ffa:	6123      	str	r3, [r4, #16]
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	65a1      	str	r1, [r4, #88]	; 0x58
 8003000:	9304      	str	r3, [sp, #16]
 8003002:	e7de      	b.n	8002fc2 <_printf_float+0x13a>
 8003004:	b913      	cbnz	r3, 800300c <_printf_float+0x184>
 8003006:	6822      	ldr	r2, [r4, #0]
 8003008:	07d2      	lsls	r2, r2, #31
 800300a:	d501      	bpl.n	8003010 <_printf_float+0x188>
 800300c:	3302      	adds	r3, #2
 800300e:	e7f4      	b.n	8002ffa <_printf_float+0x172>
 8003010:	2301      	movs	r3, #1
 8003012:	e7f2      	b.n	8002ffa <_printf_float+0x172>
 8003014:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003018:	9b08      	ldr	r3, [sp, #32]
 800301a:	4299      	cmp	r1, r3
 800301c:	db05      	blt.n	800302a <_printf_float+0x1a2>
 800301e:	6823      	ldr	r3, [r4, #0]
 8003020:	6121      	str	r1, [r4, #16]
 8003022:	07d8      	lsls	r0, r3, #31
 8003024:	d5ea      	bpl.n	8002ffc <_printf_float+0x174>
 8003026:	1c4b      	adds	r3, r1, #1
 8003028:	e7e7      	b.n	8002ffa <_printf_float+0x172>
 800302a:	2900      	cmp	r1, #0
 800302c:	bfd4      	ite	le
 800302e:	f1c1 0202 	rsble	r2, r1, #2
 8003032:	2201      	movgt	r2, #1
 8003034:	4413      	add	r3, r2
 8003036:	e7e0      	b.n	8002ffa <_printf_float+0x172>
 8003038:	6823      	ldr	r3, [r4, #0]
 800303a:	055a      	lsls	r2, r3, #21
 800303c:	d407      	bmi.n	800304e <_printf_float+0x1c6>
 800303e:	6923      	ldr	r3, [r4, #16]
 8003040:	4642      	mov	r2, r8
 8003042:	4631      	mov	r1, r6
 8003044:	4628      	mov	r0, r5
 8003046:	47b8      	blx	r7
 8003048:	3001      	adds	r0, #1
 800304a:	d12a      	bne.n	80030a2 <_printf_float+0x21a>
 800304c:	e76a      	b.n	8002f24 <_printf_float+0x9c>
 800304e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003052:	f240 80e2 	bls.w	800321a <_printf_float+0x392>
 8003056:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800305a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800305e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003062:	d133      	bne.n	80030cc <_printf_float+0x244>
 8003064:	4a38      	ldr	r2, [pc, #224]	; (8003148 <_printf_float+0x2c0>)
 8003066:	2301      	movs	r3, #1
 8003068:	4631      	mov	r1, r6
 800306a:	4628      	mov	r0, r5
 800306c:	47b8      	blx	r7
 800306e:	3001      	adds	r0, #1
 8003070:	f43f af58 	beq.w	8002f24 <_printf_float+0x9c>
 8003074:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003078:	429a      	cmp	r2, r3
 800307a:	db02      	blt.n	8003082 <_printf_float+0x1fa>
 800307c:	6823      	ldr	r3, [r4, #0]
 800307e:	07d8      	lsls	r0, r3, #31
 8003080:	d50f      	bpl.n	80030a2 <_printf_float+0x21a>
 8003082:	4653      	mov	r3, sl
 8003084:	465a      	mov	r2, fp
 8003086:	4631      	mov	r1, r6
 8003088:	4628      	mov	r0, r5
 800308a:	47b8      	blx	r7
 800308c:	3001      	adds	r0, #1
 800308e:	f43f af49 	beq.w	8002f24 <_printf_float+0x9c>
 8003092:	f04f 0800 	mov.w	r8, #0
 8003096:	f104 091a 	add.w	r9, r4, #26
 800309a:	9b08      	ldr	r3, [sp, #32]
 800309c:	3b01      	subs	r3, #1
 800309e:	4543      	cmp	r3, r8
 80030a0:	dc09      	bgt.n	80030b6 <_printf_float+0x22e>
 80030a2:	6823      	ldr	r3, [r4, #0]
 80030a4:	079b      	lsls	r3, r3, #30
 80030a6:	f100 8108 	bmi.w	80032ba <_printf_float+0x432>
 80030aa:	68e0      	ldr	r0, [r4, #12]
 80030ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030ae:	4298      	cmp	r0, r3
 80030b0:	bfb8      	it	lt
 80030b2:	4618      	movlt	r0, r3
 80030b4:	e738      	b.n	8002f28 <_printf_float+0xa0>
 80030b6:	2301      	movs	r3, #1
 80030b8:	464a      	mov	r2, r9
 80030ba:	4631      	mov	r1, r6
 80030bc:	4628      	mov	r0, r5
 80030be:	47b8      	blx	r7
 80030c0:	3001      	adds	r0, #1
 80030c2:	f43f af2f 	beq.w	8002f24 <_printf_float+0x9c>
 80030c6:	f108 0801 	add.w	r8, r8, #1
 80030ca:	e7e6      	b.n	800309a <_printf_float+0x212>
 80030cc:	9b07      	ldr	r3, [sp, #28]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	dc3c      	bgt.n	800314c <_printf_float+0x2c4>
 80030d2:	4a1d      	ldr	r2, [pc, #116]	; (8003148 <_printf_float+0x2c0>)
 80030d4:	2301      	movs	r3, #1
 80030d6:	4631      	mov	r1, r6
 80030d8:	4628      	mov	r0, r5
 80030da:	47b8      	blx	r7
 80030dc:	3001      	adds	r0, #1
 80030de:	f43f af21 	beq.w	8002f24 <_printf_float+0x9c>
 80030e2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	d102      	bne.n	80030f0 <_printf_float+0x268>
 80030ea:	6823      	ldr	r3, [r4, #0]
 80030ec:	07d9      	lsls	r1, r3, #31
 80030ee:	d5d8      	bpl.n	80030a2 <_printf_float+0x21a>
 80030f0:	4653      	mov	r3, sl
 80030f2:	465a      	mov	r2, fp
 80030f4:	4631      	mov	r1, r6
 80030f6:	4628      	mov	r0, r5
 80030f8:	47b8      	blx	r7
 80030fa:	3001      	adds	r0, #1
 80030fc:	f43f af12 	beq.w	8002f24 <_printf_float+0x9c>
 8003100:	f04f 0900 	mov.w	r9, #0
 8003104:	f104 0a1a 	add.w	sl, r4, #26
 8003108:	9b07      	ldr	r3, [sp, #28]
 800310a:	425b      	negs	r3, r3
 800310c:	454b      	cmp	r3, r9
 800310e:	dc01      	bgt.n	8003114 <_printf_float+0x28c>
 8003110:	9b08      	ldr	r3, [sp, #32]
 8003112:	e795      	b.n	8003040 <_printf_float+0x1b8>
 8003114:	2301      	movs	r3, #1
 8003116:	4652      	mov	r2, sl
 8003118:	4631      	mov	r1, r6
 800311a:	4628      	mov	r0, r5
 800311c:	47b8      	blx	r7
 800311e:	3001      	adds	r0, #1
 8003120:	f43f af00 	beq.w	8002f24 <_printf_float+0x9c>
 8003124:	f109 0901 	add.w	r9, r9, #1
 8003128:	e7ee      	b.n	8003108 <_printf_float+0x280>
 800312a:	bf00      	nop
 800312c:	f3af 8000 	nop.w
 8003130:	ffffffff 	.word	0xffffffff
 8003134:	7fefffff 	.word	0x7fefffff
 8003138:	080053a8 	.word	0x080053a8
 800313c:	080053ac 	.word	0x080053ac
 8003140:	080053b4 	.word	0x080053b4
 8003144:	080053b0 	.word	0x080053b0
 8003148:	080053b8 	.word	0x080053b8
 800314c:	9a08      	ldr	r2, [sp, #32]
 800314e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003150:	429a      	cmp	r2, r3
 8003152:	bfa8      	it	ge
 8003154:	461a      	movge	r2, r3
 8003156:	2a00      	cmp	r2, #0
 8003158:	4691      	mov	r9, r2
 800315a:	dc38      	bgt.n	80031ce <_printf_float+0x346>
 800315c:	2300      	movs	r3, #0
 800315e:	9305      	str	r3, [sp, #20]
 8003160:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003164:	f104 021a 	add.w	r2, r4, #26
 8003168:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800316a:	9905      	ldr	r1, [sp, #20]
 800316c:	9304      	str	r3, [sp, #16]
 800316e:	eba3 0309 	sub.w	r3, r3, r9
 8003172:	428b      	cmp	r3, r1
 8003174:	dc33      	bgt.n	80031de <_printf_float+0x356>
 8003176:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800317a:	429a      	cmp	r2, r3
 800317c:	db3c      	blt.n	80031f8 <_printf_float+0x370>
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	07da      	lsls	r2, r3, #31
 8003182:	d439      	bmi.n	80031f8 <_printf_float+0x370>
 8003184:	9a08      	ldr	r2, [sp, #32]
 8003186:	9b04      	ldr	r3, [sp, #16]
 8003188:	9907      	ldr	r1, [sp, #28]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	eba2 0901 	sub.w	r9, r2, r1
 8003190:	4599      	cmp	r9, r3
 8003192:	bfa8      	it	ge
 8003194:	4699      	movge	r9, r3
 8003196:	f1b9 0f00 	cmp.w	r9, #0
 800319a:	dc35      	bgt.n	8003208 <_printf_float+0x380>
 800319c:	f04f 0800 	mov.w	r8, #0
 80031a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80031a4:	f104 0a1a 	add.w	sl, r4, #26
 80031a8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	eba3 0309 	sub.w	r3, r3, r9
 80031b2:	4543      	cmp	r3, r8
 80031b4:	f77f af75 	ble.w	80030a2 <_printf_float+0x21a>
 80031b8:	2301      	movs	r3, #1
 80031ba:	4652      	mov	r2, sl
 80031bc:	4631      	mov	r1, r6
 80031be:	4628      	mov	r0, r5
 80031c0:	47b8      	blx	r7
 80031c2:	3001      	adds	r0, #1
 80031c4:	f43f aeae 	beq.w	8002f24 <_printf_float+0x9c>
 80031c8:	f108 0801 	add.w	r8, r8, #1
 80031cc:	e7ec      	b.n	80031a8 <_printf_float+0x320>
 80031ce:	4613      	mov	r3, r2
 80031d0:	4631      	mov	r1, r6
 80031d2:	4642      	mov	r2, r8
 80031d4:	4628      	mov	r0, r5
 80031d6:	47b8      	blx	r7
 80031d8:	3001      	adds	r0, #1
 80031da:	d1bf      	bne.n	800315c <_printf_float+0x2d4>
 80031dc:	e6a2      	b.n	8002f24 <_printf_float+0x9c>
 80031de:	2301      	movs	r3, #1
 80031e0:	4631      	mov	r1, r6
 80031e2:	4628      	mov	r0, r5
 80031e4:	9204      	str	r2, [sp, #16]
 80031e6:	47b8      	blx	r7
 80031e8:	3001      	adds	r0, #1
 80031ea:	f43f ae9b 	beq.w	8002f24 <_printf_float+0x9c>
 80031ee:	9b05      	ldr	r3, [sp, #20]
 80031f0:	9a04      	ldr	r2, [sp, #16]
 80031f2:	3301      	adds	r3, #1
 80031f4:	9305      	str	r3, [sp, #20]
 80031f6:	e7b7      	b.n	8003168 <_printf_float+0x2e0>
 80031f8:	4653      	mov	r3, sl
 80031fa:	465a      	mov	r2, fp
 80031fc:	4631      	mov	r1, r6
 80031fe:	4628      	mov	r0, r5
 8003200:	47b8      	blx	r7
 8003202:	3001      	adds	r0, #1
 8003204:	d1be      	bne.n	8003184 <_printf_float+0x2fc>
 8003206:	e68d      	b.n	8002f24 <_printf_float+0x9c>
 8003208:	9a04      	ldr	r2, [sp, #16]
 800320a:	464b      	mov	r3, r9
 800320c:	4442      	add	r2, r8
 800320e:	4631      	mov	r1, r6
 8003210:	4628      	mov	r0, r5
 8003212:	47b8      	blx	r7
 8003214:	3001      	adds	r0, #1
 8003216:	d1c1      	bne.n	800319c <_printf_float+0x314>
 8003218:	e684      	b.n	8002f24 <_printf_float+0x9c>
 800321a:	9a08      	ldr	r2, [sp, #32]
 800321c:	2a01      	cmp	r2, #1
 800321e:	dc01      	bgt.n	8003224 <_printf_float+0x39c>
 8003220:	07db      	lsls	r3, r3, #31
 8003222:	d537      	bpl.n	8003294 <_printf_float+0x40c>
 8003224:	2301      	movs	r3, #1
 8003226:	4642      	mov	r2, r8
 8003228:	4631      	mov	r1, r6
 800322a:	4628      	mov	r0, r5
 800322c:	47b8      	blx	r7
 800322e:	3001      	adds	r0, #1
 8003230:	f43f ae78 	beq.w	8002f24 <_printf_float+0x9c>
 8003234:	4653      	mov	r3, sl
 8003236:	465a      	mov	r2, fp
 8003238:	4631      	mov	r1, r6
 800323a:	4628      	mov	r0, r5
 800323c:	47b8      	blx	r7
 800323e:	3001      	adds	r0, #1
 8003240:	f43f ae70 	beq.w	8002f24 <_printf_float+0x9c>
 8003244:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8003248:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800324c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003250:	d01b      	beq.n	800328a <_printf_float+0x402>
 8003252:	9b08      	ldr	r3, [sp, #32]
 8003254:	f108 0201 	add.w	r2, r8, #1
 8003258:	3b01      	subs	r3, #1
 800325a:	4631      	mov	r1, r6
 800325c:	4628      	mov	r0, r5
 800325e:	47b8      	blx	r7
 8003260:	3001      	adds	r0, #1
 8003262:	d10e      	bne.n	8003282 <_printf_float+0x3fa>
 8003264:	e65e      	b.n	8002f24 <_printf_float+0x9c>
 8003266:	2301      	movs	r3, #1
 8003268:	464a      	mov	r2, r9
 800326a:	4631      	mov	r1, r6
 800326c:	4628      	mov	r0, r5
 800326e:	47b8      	blx	r7
 8003270:	3001      	adds	r0, #1
 8003272:	f43f ae57 	beq.w	8002f24 <_printf_float+0x9c>
 8003276:	f108 0801 	add.w	r8, r8, #1
 800327a:	9b08      	ldr	r3, [sp, #32]
 800327c:	3b01      	subs	r3, #1
 800327e:	4543      	cmp	r3, r8
 8003280:	dcf1      	bgt.n	8003266 <_printf_float+0x3de>
 8003282:	9b04      	ldr	r3, [sp, #16]
 8003284:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003288:	e6db      	b.n	8003042 <_printf_float+0x1ba>
 800328a:	f04f 0800 	mov.w	r8, #0
 800328e:	f104 091a 	add.w	r9, r4, #26
 8003292:	e7f2      	b.n	800327a <_printf_float+0x3f2>
 8003294:	2301      	movs	r3, #1
 8003296:	4642      	mov	r2, r8
 8003298:	e7df      	b.n	800325a <_printf_float+0x3d2>
 800329a:	2301      	movs	r3, #1
 800329c:	464a      	mov	r2, r9
 800329e:	4631      	mov	r1, r6
 80032a0:	4628      	mov	r0, r5
 80032a2:	47b8      	blx	r7
 80032a4:	3001      	adds	r0, #1
 80032a6:	f43f ae3d 	beq.w	8002f24 <_printf_float+0x9c>
 80032aa:	f108 0801 	add.w	r8, r8, #1
 80032ae:	68e3      	ldr	r3, [r4, #12]
 80032b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80032b2:	1a5b      	subs	r3, r3, r1
 80032b4:	4543      	cmp	r3, r8
 80032b6:	dcf0      	bgt.n	800329a <_printf_float+0x412>
 80032b8:	e6f7      	b.n	80030aa <_printf_float+0x222>
 80032ba:	f04f 0800 	mov.w	r8, #0
 80032be:	f104 0919 	add.w	r9, r4, #25
 80032c2:	e7f4      	b.n	80032ae <_printf_float+0x426>

080032c4 <_printf_common>:
 80032c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032c8:	4616      	mov	r6, r2
 80032ca:	4699      	mov	r9, r3
 80032cc:	688a      	ldr	r2, [r1, #8]
 80032ce:	690b      	ldr	r3, [r1, #16]
 80032d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032d4:	4293      	cmp	r3, r2
 80032d6:	bfb8      	it	lt
 80032d8:	4613      	movlt	r3, r2
 80032da:	6033      	str	r3, [r6, #0]
 80032dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032e0:	4607      	mov	r7, r0
 80032e2:	460c      	mov	r4, r1
 80032e4:	b10a      	cbz	r2, 80032ea <_printf_common+0x26>
 80032e6:	3301      	adds	r3, #1
 80032e8:	6033      	str	r3, [r6, #0]
 80032ea:	6823      	ldr	r3, [r4, #0]
 80032ec:	0699      	lsls	r1, r3, #26
 80032ee:	bf42      	ittt	mi
 80032f0:	6833      	ldrmi	r3, [r6, #0]
 80032f2:	3302      	addmi	r3, #2
 80032f4:	6033      	strmi	r3, [r6, #0]
 80032f6:	6825      	ldr	r5, [r4, #0]
 80032f8:	f015 0506 	ands.w	r5, r5, #6
 80032fc:	d106      	bne.n	800330c <_printf_common+0x48>
 80032fe:	f104 0a19 	add.w	sl, r4, #25
 8003302:	68e3      	ldr	r3, [r4, #12]
 8003304:	6832      	ldr	r2, [r6, #0]
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	42ab      	cmp	r3, r5
 800330a:	dc26      	bgt.n	800335a <_printf_common+0x96>
 800330c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003310:	1e13      	subs	r3, r2, #0
 8003312:	6822      	ldr	r2, [r4, #0]
 8003314:	bf18      	it	ne
 8003316:	2301      	movne	r3, #1
 8003318:	0692      	lsls	r2, r2, #26
 800331a:	d42b      	bmi.n	8003374 <_printf_common+0xb0>
 800331c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003320:	4649      	mov	r1, r9
 8003322:	4638      	mov	r0, r7
 8003324:	47c0      	blx	r8
 8003326:	3001      	adds	r0, #1
 8003328:	d01e      	beq.n	8003368 <_printf_common+0xa4>
 800332a:	6823      	ldr	r3, [r4, #0]
 800332c:	68e5      	ldr	r5, [r4, #12]
 800332e:	6832      	ldr	r2, [r6, #0]
 8003330:	f003 0306 	and.w	r3, r3, #6
 8003334:	2b04      	cmp	r3, #4
 8003336:	bf08      	it	eq
 8003338:	1aad      	subeq	r5, r5, r2
 800333a:	68a3      	ldr	r3, [r4, #8]
 800333c:	6922      	ldr	r2, [r4, #16]
 800333e:	bf0c      	ite	eq
 8003340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003344:	2500      	movne	r5, #0
 8003346:	4293      	cmp	r3, r2
 8003348:	bfc4      	itt	gt
 800334a:	1a9b      	subgt	r3, r3, r2
 800334c:	18ed      	addgt	r5, r5, r3
 800334e:	2600      	movs	r6, #0
 8003350:	341a      	adds	r4, #26
 8003352:	42b5      	cmp	r5, r6
 8003354:	d11a      	bne.n	800338c <_printf_common+0xc8>
 8003356:	2000      	movs	r0, #0
 8003358:	e008      	b.n	800336c <_printf_common+0xa8>
 800335a:	2301      	movs	r3, #1
 800335c:	4652      	mov	r2, sl
 800335e:	4649      	mov	r1, r9
 8003360:	4638      	mov	r0, r7
 8003362:	47c0      	blx	r8
 8003364:	3001      	adds	r0, #1
 8003366:	d103      	bne.n	8003370 <_printf_common+0xac>
 8003368:	f04f 30ff 	mov.w	r0, #4294967295
 800336c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003370:	3501      	adds	r5, #1
 8003372:	e7c6      	b.n	8003302 <_printf_common+0x3e>
 8003374:	18e1      	adds	r1, r4, r3
 8003376:	1c5a      	adds	r2, r3, #1
 8003378:	2030      	movs	r0, #48	; 0x30
 800337a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800337e:	4422      	add	r2, r4
 8003380:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003384:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003388:	3302      	adds	r3, #2
 800338a:	e7c7      	b.n	800331c <_printf_common+0x58>
 800338c:	2301      	movs	r3, #1
 800338e:	4622      	mov	r2, r4
 8003390:	4649      	mov	r1, r9
 8003392:	4638      	mov	r0, r7
 8003394:	47c0      	blx	r8
 8003396:	3001      	adds	r0, #1
 8003398:	d0e6      	beq.n	8003368 <_printf_common+0xa4>
 800339a:	3601      	adds	r6, #1
 800339c:	e7d9      	b.n	8003352 <_printf_common+0x8e>
	...

080033a0 <_printf_i>:
 80033a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033a4:	460c      	mov	r4, r1
 80033a6:	4691      	mov	r9, r2
 80033a8:	7e27      	ldrb	r7, [r4, #24]
 80033aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80033ac:	2f78      	cmp	r7, #120	; 0x78
 80033ae:	4680      	mov	r8, r0
 80033b0:	469a      	mov	sl, r3
 80033b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033b6:	d807      	bhi.n	80033c8 <_printf_i+0x28>
 80033b8:	2f62      	cmp	r7, #98	; 0x62
 80033ba:	d80a      	bhi.n	80033d2 <_printf_i+0x32>
 80033bc:	2f00      	cmp	r7, #0
 80033be:	f000 80d8 	beq.w	8003572 <_printf_i+0x1d2>
 80033c2:	2f58      	cmp	r7, #88	; 0x58
 80033c4:	f000 80a3 	beq.w	800350e <_printf_i+0x16e>
 80033c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80033cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033d0:	e03a      	b.n	8003448 <_printf_i+0xa8>
 80033d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033d6:	2b15      	cmp	r3, #21
 80033d8:	d8f6      	bhi.n	80033c8 <_printf_i+0x28>
 80033da:	a001      	add	r0, pc, #4	; (adr r0, 80033e0 <_printf_i+0x40>)
 80033dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80033e0:	08003439 	.word	0x08003439
 80033e4:	0800344d 	.word	0x0800344d
 80033e8:	080033c9 	.word	0x080033c9
 80033ec:	080033c9 	.word	0x080033c9
 80033f0:	080033c9 	.word	0x080033c9
 80033f4:	080033c9 	.word	0x080033c9
 80033f8:	0800344d 	.word	0x0800344d
 80033fc:	080033c9 	.word	0x080033c9
 8003400:	080033c9 	.word	0x080033c9
 8003404:	080033c9 	.word	0x080033c9
 8003408:	080033c9 	.word	0x080033c9
 800340c:	08003559 	.word	0x08003559
 8003410:	0800347d 	.word	0x0800347d
 8003414:	0800353b 	.word	0x0800353b
 8003418:	080033c9 	.word	0x080033c9
 800341c:	080033c9 	.word	0x080033c9
 8003420:	0800357b 	.word	0x0800357b
 8003424:	080033c9 	.word	0x080033c9
 8003428:	0800347d 	.word	0x0800347d
 800342c:	080033c9 	.word	0x080033c9
 8003430:	080033c9 	.word	0x080033c9
 8003434:	08003543 	.word	0x08003543
 8003438:	680b      	ldr	r3, [r1, #0]
 800343a:	1d1a      	adds	r2, r3, #4
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	600a      	str	r2, [r1, #0]
 8003440:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003444:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003448:	2301      	movs	r3, #1
 800344a:	e0a3      	b.n	8003594 <_printf_i+0x1f4>
 800344c:	6825      	ldr	r5, [r4, #0]
 800344e:	6808      	ldr	r0, [r1, #0]
 8003450:	062e      	lsls	r6, r5, #24
 8003452:	f100 0304 	add.w	r3, r0, #4
 8003456:	d50a      	bpl.n	800346e <_printf_i+0xce>
 8003458:	6805      	ldr	r5, [r0, #0]
 800345a:	600b      	str	r3, [r1, #0]
 800345c:	2d00      	cmp	r5, #0
 800345e:	da03      	bge.n	8003468 <_printf_i+0xc8>
 8003460:	232d      	movs	r3, #45	; 0x2d
 8003462:	426d      	negs	r5, r5
 8003464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003468:	485e      	ldr	r0, [pc, #376]	; (80035e4 <_printf_i+0x244>)
 800346a:	230a      	movs	r3, #10
 800346c:	e019      	b.n	80034a2 <_printf_i+0x102>
 800346e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003472:	6805      	ldr	r5, [r0, #0]
 8003474:	600b      	str	r3, [r1, #0]
 8003476:	bf18      	it	ne
 8003478:	b22d      	sxthne	r5, r5
 800347a:	e7ef      	b.n	800345c <_printf_i+0xbc>
 800347c:	680b      	ldr	r3, [r1, #0]
 800347e:	6825      	ldr	r5, [r4, #0]
 8003480:	1d18      	adds	r0, r3, #4
 8003482:	6008      	str	r0, [r1, #0]
 8003484:	0628      	lsls	r0, r5, #24
 8003486:	d501      	bpl.n	800348c <_printf_i+0xec>
 8003488:	681d      	ldr	r5, [r3, #0]
 800348a:	e002      	b.n	8003492 <_printf_i+0xf2>
 800348c:	0669      	lsls	r1, r5, #25
 800348e:	d5fb      	bpl.n	8003488 <_printf_i+0xe8>
 8003490:	881d      	ldrh	r5, [r3, #0]
 8003492:	4854      	ldr	r0, [pc, #336]	; (80035e4 <_printf_i+0x244>)
 8003494:	2f6f      	cmp	r7, #111	; 0x6f
 8003496:	bf0c      	ite	eq
 8003498:	2308      	moveq	r3, #8
 800349a:	230a      	movne	r3, #10
 800349c:	2100      	movs	r1, #0
 800349e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034a2:	6866      	ldr	r6, [r4, #4]
 80034a4:	60a6      	str	r6, [r4, #8]
 80034a6:	2e00      	cmp	r6, #0
 80034a8:	bfa2      	ittt	ge
 80034aa:	6821      	ldrge	r1, [r4, #0]
 80034ac:	f021 0104 	bicge.w	r1, r1, #4
 80034b0:	6021      	strge	r1, [r4, #0]
 80034b2:	b90d      	cbnz	r5, 80034b8 <_printf_i+0x118>
 80034b4:	2e00      	cmp	r6, #0
 80034b6:	d04d      	beq.n	8003554 <_printf_i+0x1b4>
 80034b8:	4616      	mov	r6, r2
 80034ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80034be:	fb03 5711 	mls	r7, r3, r1, r5
 80034c2:	5dc7      	ldrb	r7, [r0, r7]
 80034c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80034c8:	462f      	mov	r7, r5
 80034ca:	42bb      	cmp	r3, r7
 80034cc:	460d      	mov	r5, r1
 80034ce:	d9f4      	bls.n	80034ba <_printf_i+0x11a>
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d10b      	bne.n	80034ec <_printf_i+0x14c>
 80034d4:	6823      	ldr	r3, [r4, #0]
 80034d6:	07df      	lsls	r7, r3, #31
 80034d8:	d508      	bpl.n	80034ec <_printf_i+0x14c>
 80034da:	6923      	ldr	r3, [r4, #16]
 80034dc:	6861      	ldr	r1, [r4, #4]
 80034de:	4299      	cmp	r1, r3
 80034e0:	bfde      	ittt	le
 80034e2:	2330      	movle	r3, #48	; 0x30
 80034e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80034e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80034ec:	1b92      	subs	r2, r2, r6
 80034ee:	6122      	str	r2, [r4, #16]
 80034f0:	f8cd a000 	str.w	sl, [sp]
 80034f4:	464b      	mov	r3, r9
 80034f6:	aa03      	add	r2, sp, #12
 80034f8:	4621      	mov	r1, r4
 80034fa:	4640      	mov	r0, r8
 80034fc:	f7ff fee2 	bl	80032c4 <_printf_common>
 8003500:	3001      	adds	r0, #1
 8003502:	d14c      	bne.n	800359e <_printf_i+0x1fe>
 8003504:	f04f 30ff 	mov.w	r0, #4294967295
 8003508:	b004      	add	sp, #16
 800350a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800350e:	4835      	ldr	r0, [pc, #212]	; (80035e4 <_printf_i+0x244>)
 8003510:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003514:	6823      	ldr	r3, [r4, #0]
 8003516:	680e      	ldr	r6, [r1, #0]
 8003518:	061f      	lsls	r7, r3, #24
 800351a:	f856 5b04 	ldr.w	r5, [r6], #4
 800351e:	600e      	str	r6, [r1, #0]
 8003520:	d514      	bpl.n	800354c <_printf_i+0x1ac>
 8003522:	07d9      	lsls	r1, r3, #31
 8003524:	bf44      	itt	mi
 8003526:	f043 0320 	orrmi.w	r3, r3, #32
 800352a:	6023      	strmi	r3, [r4, #0]
 800352c:	b91d      	cbnz	r5, 8003536 <_printf_i+0x196>
 800352e:	6823      	ldr	r3, [r4, #0]
 8003530:	f023 0320 	bic.w	r3, r3, #32
 8003534:	6023      	str	r3, [r4, #0]
 8003536:	2310      	movs	r3, #16
 8003538:	e7b0      	b.n	800349c <_printf_i+0xfc>
 800353a:	6823      	ldr	r3, [r4, #0]
 800353c:	f043 0320 	orr.w	r3, r3, #32
 8003540:	6023      	str	r3, [r4, #0]
 8003542:	2378      	movs	r3, #120	; 0x78
 8003544:	4828      	ldr	r0, [pc, #160]	; (80035e8 <_printf_i+0x248>)
 8003546:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800354a:	e7e3      	b.n	8003514 <_printf_i+0x174>
 800354c:	065e      	lsls	r6, r3, #25
 800354e:	bf48      	it	mi
 8003550:	b2ad      	uxthmi	r5, r5
 8003552:	e7e6      	b.n	8003522 <_printf_i+0x182>
 8003554:	4616      	mov	r6, r2
 8003556:	e7bb      	b.n	80034d0 <_printf_i+0x130>
 8003558:	680b      	ldr	r3, [r1, #0]
 800355a:	6826      	ldr	r6, [r4, #0]
 800355c:	6960      	ldr	r0, [r4, #20]
 800355e:	1d1d      	adds	r5, r3, #4
 8003560:	600d      	str	r5, [r1, #0]
 8003562:	0635      	lsls	r5, r6, #24
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	d501      	bpl.n	800356c <_printf_i+0x1cc>
 8003568:	6018      	str	r0, [r3, #0]
 800356a:	e002      	b.n	8003572 <_printf_i+0x1d2>
 800356c:	0671      	lsls	r1, r6, #25
 800356e:	d5fb      	bpl.n	8003568 <_printf_i+0x1c8>
 8003570:	8018      	strh	r0, [r3, #0]
 8003572:	2300      	movs	r3, #0
 8003574:	6123      	str	r3, [r4, #16]
 8003576:	4616      	mov	r6, r2
 8003578:	e7ba      	b.n	80034f0 <_printf_i+0x150>
 800357a:	680b      	ldr	r3, [r1, #0]
 800357c:	1d1a      	adds	r2, r3, #4
 800357e:	600a      	str	r2, [r1, #0]
 8003580:	681e      	ldr	r6, [r3, #0]
 8003582:	6862      	ldr	r2, [r4, #4]
 8003584:	2100      	movs	r1, #0
 8003586:	4630      	mov	r0, r6
 8003588:	f7fc fe62 	bl	8000250 <memchr>
 800358c:	b108      	cbz	r0, 8003592 <_printf_i+0x1f2>
 800358e:	1b80      	subs	r0, r0, r6
 8003590:	6060      	str	r0, [r4, #4]
 8003592:	6863      	ldr	r3, [r4, #4]
 8003594:	6123      	str	r3, [r4, #16]
 8003596:	2300      	movs	r3, #0
 8003598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800359c:	e7a8      	b.n	80034f0 <_printf_i+0x150>
 800359e:	6923      	ldr	r3, [r4, #16]
 80035a0:	4632      	mov	r2, r6
 80035a2:	4649      	mov	r1, r9
 80035a4:	4640      	mov	r0, r8
 80035a6:	47d0      	blx	sl
 80035a8:	3001      	adds	r0, #1
 80035aa:	d0ab      	beq.n	8003504 <_printf_i+0x164>
 80035ac:	6823      	ldr	r3, [r4, #0]
 80035ae:	079b      	lsls	r3, r3, #30
 80035b0:	d413      	bmi.n	80035da <_printf_i+0x23a>
 80035b2:	68e0      	ldr	r0, [r4, #12]
 80035b4:	9b03      	ldr	r3, [sp, #12]
 80035b6:	4298      	cmp	r0, r3
 80035b8:	bfb8      	it	lt
 80035ba:	4618      	movlt	r0, r3
 80035bc:	e7a4      	b.n	8003508 <_printf_i+0x168>
 80035be:	2301      	movs	r3, #1
 80035c0:	4632      	mov	r2, r6
 80035c2:	4649      	mov	r1, r9
 80035c4:	4640      	mov	r0, r8
 80035c6:	47d0      	blx	sl
 80035c8:	3001      	adds	r0, #1
 80035ca:	d09b      	beq.n	8003504 <_printf_i+0x164>
 80035cc:	3501      	adds	r5, #1
 80035ce:	68e3      	ldr	r3, [r4, #12]
 80035d0:	9903      	ldr	r1, [sp, #12]
 80035d2:	1a5b      	subs	r3, r3, r1
 80035d4:	42ab      	cmp	r3, r5
 80035d6:	dcf2      	bgt.n	80035be <_printf_i+0x21e>
 80035d8:	e7eb      	b.n	80035b2 <_printf_i+0x212>
 80035da:	2500      	movs	r5, #0
 80035dc:	f104 0619 	add.w	r6, r4, #25
 80035e0:	e7f5      	b.n	80035ce <_printf_i+0x22e>
 80035e2:	bf00      	nop
 80035e4:	080053ba 	.word	0x080053ba
 80035e8:	080053cb 	.word	0x080053cb

080035ec <iprintf>:
 80035ec:	b40f      	push	{r0, r1, r2, r3}
 80035ee:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <iprintf+0x2c>)
 80035f0:	b513      	push	{r0, r1, r4, lr}
 80035f2:	681c      	ldr	r4, [r3, #0]
 80035f4:	b124      	cbz	r4, 8003600 <iprintf+0x14>
 80035f6:	69a3      	ldr	r3, [r4, #24]
 80035f8:	b913      	cbnz	r3, 8003600 <iprintf+0x14>
 80035fa:	4620      	mov	r0, r4
 80035fc:	f7ff fa3c 	bl	8002a78 <__sinit>
 8003600:	ab05      	add	r3, sp, #20
 8003602:	9a04      	ldr	r2, [sp, #16]
 8003604:	68a1      	ldr	r1, [r4, #8]
 8003606:	9301      	str	r3, [sp, #4]
 8003608:	4620      	mov	r0, r4
 800360a:	f001 fc15 	bl	8004e38 <_vfiprintf_r>
 800360e:	b002      	add	sp, #8
 8003610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003614:	b004      	add	sp, #16
 8003616:	4770      	bx	lr
 8003618:	2000000c 	.word	0x2000000c

0800361c <_puts_r>:
 800361c:	b570      	push	{r4, r5, r6, lr}
 800361e:	460e      	mov	r6, r1
 8003620:	4605      	mov	r5, r0
 8003622:	b118      	cbz	r0, 800362c <_puts_r+0x10>
 8003624:	6983      	ldr	r3, [r0, #24]
 8003626:	b90b      	cbnz	r3, 800362c <_puts_r+0x10>
 8003628:	f7ff fa26 	bl	8002a78 <__sinit>
 800362c:	69ab      	ldr	r3, [r5, #24]
 800362e:	68ac      	ldr	r4, [r5, #8]
 8003630:	b913      	cbnz	r3, 8003638 <_puts_r+0x1c>
 8003632:	4628      	mov	r0, r5
 8003634:	f7ff fa20 	bl	8002a78 <__sinit>
 8003638:	4b2c      	ldr	r3, [pc, #176]	; (80036ec <_puts_r+0xd0>)
 800363a:	429c      	cmp	r4, r3
 800363c:	d120      	bne.n	8003680 <_puts_r+0x64>
 800363e:	686c      	ldr	r4, [r5, #4]
 8003640:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003642:	07db      	lsls	r3, r3, #31
 8003644:	d405      	bmi.n	8003652 <_puts_r+0x36>
 8003646:	89a3      	ldrh	r3, [r4, #12]
 8003648:	0598      	lsls	r0, r3, #22
 800364a:	d402      	bmi.n	8003652 <_puts_r+0x36>
 800364c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800364e:	f7ff fad6 	bl	8002bfe <__retarget_lock_acquire_recursive>
 8003652:	89a3      	ldrh	r3, [r4, #12]
 8003654:	0719      	lsls	r1, r3, #28
 8003656:	d51d      	bpl.n	8003694 <_puts_r+0x78>
 8003658:	6923      	ldr	r3, [r4, #16]
 800365a:	b1db      	cbz	r3, 8003694 <_puts_r+0x78>
 800365c:	3e01      	subs	r6, #1
 800365e:	68a3      	ldr	r3, [r4, #8]
 8003660:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003664:	3b01      	subs	r3, #1
 8003666:	60a3      	str	r3, [r4, #8]
 8003668:	bb39      	cbnz	r1, 80036ba <_puts_r+0x9e>
 800366a:	2b00      	cmp	r3, #0
 800366c:	da38      	bge.n	80036e0 <_puts_r+0xc4>
 800366e:	4622      	mov	r2, r4
 8003670:	210a      	movs	r1, #10
 8003672:	4628      	mov	r0, r5
 8003674:	f000 f89c 	bl	80037b0 <__swbuf_r>
 8003678:	3001      	adds	r0, #1
 800367a:	d011      	beq.n	80036a0 <_puts_r+0x84>
 800367c:	250a      	movs	r5, #10
 800367e:	e011      	b.n	80036a4 <_puts_r+0x88>
 8003680:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <_puts_r+0xd4>)
 8003682:	429c      	cmp	r4, r3
 8003684:	d101      	bne.n	800368a <_puts_r+0x6e>
 8003686:	68ac      	ldr	r4, [r5, #8]
 8003688:	e7da      	b.n	8003640 <_puts_r+0x24>
 800368a:	4b1a      	ldr	r3, [pc, #104]	; (80036f4 <_puts_r+0xd8>)
 800368c:	429c      	cmp	r4, r3
 800368e:	bf08      	it	eq
 8003690:	68ec      	ldreq	r4, [r5, #12]
 8003692:	e7d5      	b.n	8003640 <_puts_r+0x24>
 8003694:	4621      	mov	r1, r4
 8003696:	4628      	mov	r0, r5
 8003698:	f000 f8ee 	bl	8003878 <__swsetup_r>
 800369c:	2800      	cmp	r0, #0
 800369e:	d0dd      	beq.n	800365c <_puts_r+0x40>
 80036a0:	f04f 35ff 	mov.w	r5, #4294967295
 80036a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036a6:	07da      	lsls	r2, r3, #31
 80036a8:	d405      	bmi.n	80036b6 <_puts_r+0x9a>
 80036aa:	89a3      	ldrh	r3, [r4, #12]
 80036ac:	059b      	lsls	r3, r3, #22
 80036ae:	d402      	bmi.n	80036b6 <_puts_r+0x9a>
 80036b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036b2:	f7ff faa5 	bl	8002c00 <__retarget_lock_release_recursive>
 80036b6:	4628      	mov	r0, r5
 80036b8:	bd70      	pop	{r4, r5, r6, pc}
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	da04      	bge.n	80036c8 <_puts_r+0xac>
 80036be:	69a2      	ldr	r2, [r4, #24]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	dc06      	bgt.n	80036d2 <_puts_r+0xb6>
 80036c4:	290a      	cmp	r1, #10
 80036c6:	d004      	beq.n	80036d2 <_puts_r+0xb6>
 80036c8:	6823      	ldr	r3, [r4, #0]
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	6022      	str	r2, [r4, #0]
 80036ce:	7019      	strb	r1, [r3, #0]
 80036d0:	e7c5      	b.n	800365e <_puts_r+0x42>
 80036d2:	4622      	mov	r2, r4
 80036d4:	4628      	mov	r0, r5
 80036d6:	f000 f86b 	bl	80037b0 <__swbuf_r>
 80036da:	3001      	adds	r0, #1
 80036dc:	d1bf      	bne.n	800365e <_puts_r+0x42>
 80036de:	e7df      	b.n	80036a0 <_puts_r+0x84>
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	250a      	movs	r5, #10
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	6022      	str	r2, [r4, #0]
 80036e8:	701d      	strb	r5, [r3, #0]
 80036ea:	e7db      	b.n	80036a4 <_puts_r+0x88>
 80036ec:	08005364 	.word	0x08005364
 80036f0:	08005384 	.word	0x08005384
 80036f4:	08005344 	.word	0x08005344

080036f8 <puts>:
 80036f8:	4b02      	ldr	r3, [pc, #8]	; (8003704 <puts+0xc>)
 80036fa:	4601      	mov	r1, r0
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	f7ff bf8d 	b.w	800361c <_puts_r>
 8003702:	bf00      	nop
 8003704:	2000000c 	.word	0x2000000c

08003708 <_sbrk_r>:
 8003708:	b538      	push	{r3, r4, r5, lr}
 800370a:	4d06      	ldr	r5, [pc, #24]	; (8003724 <_sbrk_r+0x1c>)
 800370c:	2300      	movs	r3, #0
 800370e:	4604      	mov	r4, r0
 8003710:	4608      	mov	r0, r1
 8003712:	602b      	str	r3, [r5, #0]
 8003714:	f001 fdbe 	bl	8005294 <_sbrk>
 8003718:	1c43      	adds	r3, r0, #1
 800371a:	d102      	bne.n	8003722 <_sbrk_r+0x1a>
 800371c:	682b      	ldr	r3, [r5, #0]
 800371e:	b103      	cbz	r3, 8003722 <_sbrk_r+0x1a>
 8003720:	6023      	str	r3, [r4, #0]
 8003722:	bd38      	pop	{r3, r4, r5, pc}
 8003724:	20000390 	.word	0x20000390

08003728 <__sread>:
 8003728:	b510      	push	{r4, lr}
 800372a:	460c      	mov	r4, r1
 800372c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003730:	f001 fcb2 	bl	8005098 <_read_r>
 8003734:	2800      	cmp	r0, #0
 8003736:	bfab      	itete	ge
 8003738:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800373a:	89a3      	ldrhlt	r3, [r4, #12]
 800373c:	181b      	addge	r3, r3, r0
 800373e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003742:	bfac      	ite	ge
 8003744:	6563      	strge	r3, [r4, #84]	; 0x54
 8003746:	81a3      	strhlt	r3, [r4, #12]
 8003748:	bd10      	pop	{r4, pc}

0800374a <__swrite>:
 800374a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800374e:	461f      	mov	r7, r3
 8003750:	898b      	ldrh	r3, [r1, #12]
 8003752:	05db      	lsls	r3, r3, #23
 8003754:	4605      	mov	r5, r0
 8003756:	460c      	mov	r4, r1
 8003758:	4616      	mov	r6, r2
 800375a:	d505      	bpl.n	8003768 <__swrite+0x1e>
 800375c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003760:	2302      	movs	r3, #2
 8003762:	2200      	movs	r2, #0
 8003764:	f000 ff1a 	bl	800459c <_lseek_r>
 8003768:	89a3      	ldrh	r3, [r4, #12]
 800376a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800376e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003772:	81a3      	strh	r3, [r4, #12]
 8003774:	4632      	mov	r2, r6
 8003776:	463b      	mov	r3, r7
 8003778:	4628      	mov	r0, r5
 800377a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800377e:	f000 b869 	b.w	8003854 <_write_r>

08003782 <__sseek>:
 8003782:	b510      	push	{r4, lr}
 8003784:	460c      	mov	r4, r1
 8003786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800378a:	f000 ff07 	bl	800459c <_lseek_r>
 800378e:	1c43      	adds	r3, r0, #1
 8003790:	89a3      	ldrh	r3, [r4, #12]
 8003792:	bf15      	itete	ne
 8003794:	6560      	strne	r0, [r4, #84]	; 0x54
 8003796:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800379a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800379e:	81a3      	strheq	r3, [r4, #12]
 80037a0:	bf18      	it	ne
 80037a2:	81a3      	strhne	r3, [r4, #12]
 80037a4:	bd10      	pop	{r4, pc}

080037a6 <__sclose>:
 80037a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037aa:	f000 b8d3 	b.w	8003954 <_close_r>
	...

080037b0 <__swbuf_r>:
 80037b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b2:	460e      	mov	r6, r1
 80037b4:	4614      	mov	r4, r2
 80037b6:	4605      	mov	r5, r0
 80037b8:	b118      	cbz	r0, 80037c2 <__swbuf_r+0x12>
 80037ba:	6983      	ldr	r3, [r0, #24]
 80037bc:	b90b      	cbnz	r3, 80037c2 <__swbuf_r+0x12>
 80037be:	f7ff f95b 	bl	8002a78 <__sinit>
 80037c2:	4b21      	ldr	r3, [pc, #132]	; (8003848 <__swbuf_r+0x98>)
 80037c4:	429c      	cmp	r4, r3
 80037c6:	d12b      	bne.n	8003820 <__swbuf_r+0x70>
 80037c8:	686c      	ldr	r4, [r5, #4]
 80037ca:	69a3      	ldr	r3, [r4, #24]
 80037cc:	60a3      	str	r3, [r4, #8]
 80037ce:	89a3      	ldrh	r3, [r4, #12]
 80037d0:	071a      	lsls	r2, r3, #28
 80037d2:	d52f      	bpl.n	8003834 <__swbuf_r+0x84>
 80037d4:	6923      	ldr	r3, [r4, #16]
 80037d6:	b36b      	cbz	r3, 8003834 <__swbuf_r+0x84>
 80037d8:	6923      	ldr	r3, [r4, #16]
 80037da:	6820      	ldr	r0, [r4, #0]
 80037dc:	1ac0      	subs	r0, r0, r3
 80037de:	6963      	ldr	r3, [r4, #20]
 80037e0:	b2f6      	uxtb	r6, r6
 80037e2:	4283      	cmp	r3, r0
 80037e4:	4637      	mov	r7, r6
 80037e6:	dc04      	bgt.n	80037f2 <__swbuf_r+0x42>
 80037e8:	4621      	mov	r1, r4
 80037ea:	4628      	mov	r0, r5
 80037ec:	f7ff f89e 	bl	800292c <_fflush_r>
 80037f0:	bb30      	cbnz	r0, 8003840 <__swbuf_r+0x90>
 80037f2:	68a3      	ldr	r3, [r4, #8]
 80037f4:	3b01      	subs	r3, #1
 80037f6:	60a3      	str	r3, [r4, #8]
 80037f8:	6823      	ldr	r3, [r4, #0]
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	6022      	str	r2, [r4, #0]
 80037fe:	701e      	strb	r6, [r3, #0]
 8003800:	6963      	ldr	r3, [r4, #20]
 8003802:	3001      	adds	r0, #1
 8003804:	4283      	cmp	r3, r0
 8003806:	d004      	beq.n	8003812 <__swbuf_r+0x62>
 8003808:	89a3      	ldrh	r3, [r4, #12]
 800380a:	07db      	lsls	r3, r3, #31
 800380c:	d506      	bpl.n	800381c <__swbuf_r+0x6c>
 800380e:	2e0a      	cmp	r6, #10
 8003810:	d104      	bne.n	800381c <__swbuf_r+0x6c>
 8003812:	4621      	mov	r1, r4
 8003814:	4628      	mov	r0, r5
 8003816:	f7ff f889 	bl	800292c <_fflush_r>
 800381a:	b988      	cbnz	r0, 8003840 <__swbuf_r+0x90>
 800381c:	4638      	mov	r0, r7
 800381e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003820:	4b0a      	ldr	r3, [pc, #40]	; (800384c <__swbuf_r+0x9c>)
 8003822:	429c      	cmp	r4, r3
 8003824:	d101      	bne.n	800382a <__swbuf_r+0x7a>
 8003826:	68ac      	ldr	r4, [r5, #8]
 8003828:	e7cf      	b.n	80037ca <__swbuf_r+0x1a>
 800382a:	4b09      	ldr	r3, [pc, #36]	; (8003850 <__swbuf_r+0xa0>)
 800382c:	429c      	cmp	r4, r3
 800382e:	bf08      	it	eq
 8003830:	68ec      	ldreq	r4, [r5, #12]
 8003832:	e7ca      	b.n	80037ca <__swbuf_r+0x1a>
 8003834:	4621      	mov	r1, r4
 8003836:	4628      	mov	r0, r5
 8003838:	f000 f81e 	bl	8003878 <__swsetup_r>
 800383c:	2800      	cmp	r0, #0
 800383e:	d0cb      	beq.n	80037d8 <__swbuf_r+0x28>
 8003840:	f04f 37ff 	mov.w	r7, #4294967295
 8003844:	e7ea      	b.n	800381c <__swbuf_r+0x6c>
 8003846:	bf00      	nop
 8003848:	08005364 	.word	0x08005364
 800384c:	08005384 	.word	0x08005384
 8003850:	08005344 	.word	0x08005344

08003854 <_write_r>:
 8003854:	b538      	push	{r3, r4, r5, lr}
 8003856:	4d07      	ldr	r5, [pc, #28]	; (8003874 <_write_r+0x20>)
 8003858:	4604      	mov	r4, r0
 800385a:	4608      	mov	r0, r1
 800385c:	4611      	mov	r1, r2
 800385e:	2200      	movs	r2, #0
 8003860:	602a      	str	r2, [r5, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	f7fd f9ec 	bl	8000c40 <_write>
 8003868:	1c43      	adds	r3, r0, #1
 800386a:	d102      	bne.n	8003872 <_write_r+0x1e>
 800386c:	682b      	ldr	r3, [r5, #0]
 800386e:	b103      	cbz	r3, 8003872 <_write_r+0x1e>
 8003870:	6023      	str	r3, [r4, #0]
 8003872:	bd38      	pop	{r3, r4, r5, pc}
 8003874:	20000390 	.word	0x20000390

08003878 <__swsetup_r>:
 8003878:	4b32      	ldr	r3, [pc, #200]	; (8003944 <__swsetup_r+0xcc>)
 800387a:	b570      	push	{r4, r5, r6, lr}
 800387c:	681d      	ldr	r5, [r3, #0]
 800387e:	4606      	mov	r6, r0
 8003880:	460c      	mov	r4, r1
 8003882:	b125      	cbz	r5, 800388e <__swsetup_r+0x16>
 8003884:	69ab      	ldr	r3, [r5, #24]
 8003886:	b913      	cbnz	r3, 800388e <__swsetup_r+0x16>
 8003888:	4628      	mov	r0, r5
 800388a:	f7ff f8f5 	bl	8002a78 <__sinit>
 800388e:	4b2e      	ldr	r3, [pc, #184]	; (8003948 <__swsetup_r+0xd0>)
 8003890:	429c      	cmp	r4, r3
 8003892:	d10f      	bne.n	80038b4 <__swsetup_r+0x3c>
 8003894:	686c      	ldr	r4, [r5, #4]
 8003896:	89a3      	ldrh	r3, [r4, #12]
 8003898:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800389c:	0719      	lsls	r1, r3, #28
 800389e:	d42c      	bmi.n	80038fa <__swsetup_r+0x82>
 80038a0:	06dd      	lsls	r5, r3, #27
 80038a2:	d411      	bmi.n	80038c8 <__swsetup_r+0x50>
 80038a4:	2309      	movs	r3, #9
 80038a6:	6033      	str	r3, [r6, #0]
 80038a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80038ac:	81a3      	strh	r3, [r4, #12]
 80038ae:	f04f 30ff 	mov.w	r0, #4294967295
 80038b2:	e03e      	b.n	8003932 <__swsetup_r+0xba>
 80038b4:	4b25      	ldr	r3, [pc, #148]	; (800394c <__swsetup_r+0xd4>)
 80038b6:	429c      	cmp	r4, r3
 80038b8:	d101      	bne.n	80038be <__swsetup_r+0x46>
 80038ba:	68ac      	ldr	r4, [r5, #8]
 80038bc:	e7eb      	b.n	8003896 <__swsetup_r+0x1e>
 80038be:	4b24      	ldr	r3, [pc, #144]	; (8003950 <__swsetup_r+0xd8>)
 80038c0:	429c      	cmp	r4, r3
 80038c2:	bf08      	it	eq
 80038c4:	68ec      	ldreq	r4, [r5, #12]
 80038c6:	e7e6      	b.n	8003896 <__swsetup_r+0x1e>
 80038c8:	0758      	lsls	r0, r3, #29
 80038ca:	d512      	bpl.n	80038f2 <__swsetup_r+0x7a>
 80038cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038ce:	b141      	cbz	r1, 80038e2 <__swsetup_r+0x6a>
 80038d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038d4:	4299      	cmp	r1, r3
 80038d6:	d002      	beq.n	80038de <__swsetup_r+0x66>
 80038d8:	4630      	mov	r0, r6
 80038da:	f7ff f99b 	bl	8002c14 <_free_r>
 80038de:	2300      	movs	r3, #0
 80038e0:	6363      	str	r3, [r4, #52]	; 0x34
 80038e2:	89a3      	ldrh	r3, [r4, #12]
 80038e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80038e8:	81a3      	strh	r3, [r4, #12]
 80038ea:	2300      	movs	r3, #0
 80038ec:	6063      	str	r3, [r4, #4]
 80038ee:	6923      	ldr	r3, [r4, #16]
 80038f0:	6023      	str	r3, [r4, #0]
 80038f2:	89a3      	ldrh	r3, [r4, #12]
 80038f4:	f043 0308 	orr.w	r3, r3, #8
 80038f8:	81a3      	strh	r3, [r4, #12]
 80038fa:	6923      	ldr	r3, [r4, #16]
 80038fc:	b94b      	cbnz	r3, 8003912 <__swsetup_r+0x9a>
 80038fe:	89a3      	ldrh	r3, [r4, #12]
 8003900:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003908:	d003      	beq.n	8003912 <__swsetup_r+0x9a>
 800390a:	4621      	mov	r1, r4
 800390c:	4630      	mov	r0, r6
 800390e:	f000 fe7b 	bl	8004608 <__smakebuf_r>
 8003912:	89a0      	ldrh	r0, [r4, #12]
 8003914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003918:	f010 0301 	ands.w	r3, r0, #1
 800391c:	d00a      	beq.n	8003934 <__swsetup_r+0xbc>
 800391e:	2300      	movs	r3, #0
 8003920:	60a3      	str	r3, [r4, #8]
 8003922:	6963      	ldr	r3, [r4, #20]
 8003924:	425b      	negs	r3, r3
 8003926:	61a3      	str	r3, [r4, #24]
 8003928:	6923      	ldr	r3, [r4, #16]
 800392a:	b943      	cbnz	r3, 800393e <__swsetup_r+0xc6>
 800392c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003930:	d1ba      	bne.n	80038a8 <__swsetup_r+0x30>
 8003932:	bd70      	pop	{r4, r5, r6, pc}
 8003934:	0781      	lsls	r1, r0, #30
 8003936:	bf58      	it	pl
 8003938:	6963      	ldrpl	r3, [r4, #20]
 800393a:	60a3      	str	r3, [r4, #8]
 800393c:	e7f4      	b.n	8003928 <__swsetup_r+0xb0>
 800393e:	2000      	movs	r0, #0
 8003940:	e7f7      	b.n	8003932 <__swsetup_r+0xba>
 8003942:	bf00      	nop
 8003944:	2000000c 	.word	0x2000000c
 8003948:	08005364 	.word	0x08005364
 800394c:	08005384 	.word	0x08005384
 8003950:	08005344 	.word	0x08005344

08003954 <_close_r>:
 8003954:	b538      	push	{r3, r4, r5, lr}
 8003956:	4d06      	ldr	r5, [pc, #24]	; (8003970 <_close_r+0x1c>)
 8003958:	2300      	movs	r3, #0
 800395a:	4604      	mov	r4, r0
 800395c:	4608      	mov	r0, r1
 800395e:	602b      	str	r3, [r5, #0]
 8003960:	f001 fc68 	bl	8005234 <_close>
 8003964:	1c43      	adds	r3, r0, #1
 8003966:	d102      	bne.n	800396e <_close_r+0x1a>
 8003968:	682b      	ldr	r3, [r5, #0]
 800396a:	b103      	cbz	r3, 800396e <_close_r+0x1a>
 800396c:	6023      	str	r3, [r4, #0]
 800396e:	bd38      	pop	{r3, r4, r5, pc}
 8003970:	20000390 	.word	0x20000390

08003974 <quorem>:
 8003974:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003978:	6903      	ldr	r3, [r0, #16]
 800397a:	690c      	ldr	r4, [r1, #16]
 800397c:	42a3      	cmp	r3, r4
 800397e:	4607      	mov	r7, r0
 8003980:	f2c0 8081 	blt.w	8003a86 <quorem+0x112>
 8003984:	3c01      	subs	r4, #1
 8003986:	f101 0814 	add.w	r8, r1, #20
 800398a:	f100 0514 	add.w	r5, r0, #20
 800398e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003992:	9301      	str	r3, [sp, #4]
 8003994:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003998:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800399c:	3301      	adds	r3, #1
 800399e:	429a      	cmp	r2, r3
 80039a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80039a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80039a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80039ac:	d331      	bcc.n	8003a12 <quorem+0x9e>
 80039ae:	f04f 0e00 	mov.w	lr, #0
 80039b2:	4640      	mov	r0, r8
 80039b4:	46ac      	mov	ip, r5
 80039b6:	46f2      	mov	sl, lr
 80039b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80039bc:	b293      	uxth	r3, r2
 80039be:	fb06 e303 	mla	r3, r6, r3, lr
 80039c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	ebaa 0303 	sub.w	r3, sl, r3
 80039cc:	0c12      	lsrs	r2, r2, #16
 80039ce:	f8dc a000 	ldr.w	sl, [ip]
 80039d2:	fb06 e202 	mla	r2, r6, r2, lr
 80039d6:	fa13 f38a 	uxtah	r3, r3, sl
 80039da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80039de:	fa1f fa82 	uxth.w	sl, r2
 80039e2:	f8dc 2000 	ldr.w	r2, [ip]
 80039e6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80039ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80039f4:	4581      	cmp	r9, r0
 80039f6:	f84c 3b04 	str.w	r3, [ip], #4
 80039fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80039fe:	d2db      	bcs.n	80039b8 <quorem+0x44>
 8003a00:	f855 300b 	ldr.w	r3, [r5, fp]
 8003a04:	b92b      	cbnz	r3, 8003a12 <quorem+0x9e>
 8003a06:	9b01      	ldr	r3, [sp, #4]
 8003a08:	3b04      	subs	r3, #4
 8003a0a:	429d      	cmp	r5, r3
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	d32e      	bcc.n	8003a6e <quorem+0xfa>
 8003a10:	613c      	str	r4, [r7, #16]
 8003a12:	4638      	mov	r0, r7
 8003a14:	f001 f8d8 	bl	8004bc8 <__mcmp>
 8003a18:	2800      	cmp	r0, #0
 8003a1a:	db24      	blt.n	8003a66 <quorem+0xf2>
 8003a1c:	3601      	adds	r6, #1
 8003a1e:	4628      	mov	r0, r5
 8003a20:	f04f 0c00 	mov.w	ip, #0
 8003a24:	f858 2b04 	ldr.w	r2, [r8], #4
 8003a28:	f8d0 e000 	ldr.w	lr, [r0]
 8003a2c:	b293      	uxth	r3, r2
 8003a2e:	ebac 0303 	sub.w	r3, ip, r3
 8003a32:	0c12      	lsrs	r2, r2, #16
 8003a34:	fa13 f38e 	uxtah	r3, r3, lr
 8003a38:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003a3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a46:	45c1      	cmp	r9, r8
 8003a48:	f840 3b04 	str.w	r3, [r0], #4
 8003a4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003a50:	d2e8      	bcs.n	8003a24 <quorem+0xb0>
 8003a52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003a56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003a5a:	b922      	cbnz	r2, 8003a66 <quorem+0xf2>
 8003a5c:	3b04      	subs	r3, #4
 8003a5e:	429d      	cmp	r5, r3
 8003a60:	461a      	mov	r2, r3
 8003a62:	d30a      	bcc.n	8003a7a <quorem+0x106>
 8003a64:	613c      	str	r4, [r7, #16]
 8003a66:	4630      	mov	r0, r6
 8003a68:	b003      	add	sp, #12
 8003a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a6e:	6812      	ldr	r2, [r2, #0]
 8003a70:	3b04      	subs	r3, #4
 8003a72:	2a00      	cmp	r2, #0
 8003a74:	d1cc      	bne.n	8003a10 <quorem+0x9c>
 8003a76:	3c01      	subs	r4, #1
 8003a78:	e7c7      	b.n	8003a0a <quorem+0x96>
 8003a7a:	6812      	ldr	r2, [r2, #0]
 8003a7c:	3b04      	subs	r3, #4
 8003a7e:	2a00      	cmp	r2, #0
 8003a80:	d1f0      	bne.n	8003a64 <quorem+0xf0>
 8003a82:	3c01      	subs	r4, #1
 8003a84:	e7eb      	b.n	8003a5e <quorem+0xea>
 8003a86:	2000      	movs	r0, #0
 8003a88:	e7ee      	b.n	8003a68 <quorem+0xf4>
 8003a8a:	0000      	movs	r0, r0
 8003a8c:	0000      	movs	r0, r0
	...

08003a90 <_dtoa_r>:
 8003a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a94:	ec59 8b10 	vmov	r8, r9, d0
 8003a98:	b095      	sub	sp, #84	; 0x54
 8003a9a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003a9c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8003a9e:	9107      	str	r1, [sp, #28]
 8003aa0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003aa4:	4606      	mov	r6, r0
 8003aa6:	9209      	str	r2, [sp, #36]	; 0x24
 8003aa8:	9310      	str	r3, [sp, #64]	; 0x40
 8003aaa:	b975      	cbnz	r5, 8003aca <_dtoa_r+0x3a>
 8003aac:	2010      	movs	r0, #16
 8003aae:	f000 fdeb 	bl	8004688 <malloc>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	6270      	str	r0, [r6, #36]	; 0x24
 8003ab6:	b920      	cbnz	r0, 8003ac2 <_dtoa_r+0x32>
 8003ab8:	4bab      	ldr	r3, [pc, #684]	; (8003d68 <_dtoa_r+0x2d8>)
 8003aba:	21ea      	movs	r1, #234	; 0xea
 8003abc:	48ab      	ldr	r0, [pc, #684]	; (8003d6c <_dtoa_r+0x2dc>)
 8003abe:	f001 fafd 	bl	80050bc <__assert_func>
 8003ac2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003ac6:	6005      	str	r5, [r0, #0]
 8003ac8:	60c5      	str	r5, [r0, #12]
 8003aca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003acc:	6819      	ldr	r1, [r3, #0]
 8003ace:	b151      	cbz	r1, 8003ae6 <_dtoa_r+0x56>
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	604a      	str	r2, [r1, #4]
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	4093      	lsls	r3, r2
 8003ad8:	608b      	str	r3, [r1, #8]
 8003ada:	4630      	mov	r0, r6
 8003adc:	f000 fe36 	bl	800474c <_Bfree>
 8003ae0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	f1b9 0300 	subs.w	r3, r9, #0
 8003aea:	bfbb      	ittet	lt
 8003aec:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003af0:	9303      	strlt	r3, [sp, #12]
 8003af2:	2300      	movge	r3, #0
 8003af4:	2201      	movlt	r2, #1
 8003af6:	bfac      	ite	ge
 8003af8:	6023      	strge	r3, [r4, #0]
 8003afa:	6022      	strlt	r2, [r4, #0]
 8003afc:	4b9c      	ldr	r3, [pc, #624]	; (8003d70 <_dtoa_r+0x2e0>)
 8003afe:	9c03      	ldr	r4, [sp, #12]
 8003b00:	43a3      	bics	r3, r4
 8003b02:	d11a      	bne.n	8003b3a <_dtoa_r+0xaa>
 8003b04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003b06:	f242 730f 	movw	r3, #9999	; 0x270f
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8003b10:	ea53 0308 	orrs.w	r3, r3, r8
 8003b14:	f000 8512 	beq.w	800453c <_dtoa_r+0xaac>
 8003b18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003b1a:	b953      	cbnz	r3, 8003b32 <_dtoa_r+0xa2>
 8003b1c:	4b95      	ldr	r3, [pc, #596]	; (8003d74 <_dtoa_r+0x2e4>)
 8003b1e:	e01f      	b.n	8003b60 <_dtoa_r+0xd0>
 8003b20:	4b95      	ldr	r3, [pc, #596]	; (8003d78 <_dtoa_r+0x2e8>)
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	3308      	adds	r3, #8
 8003b26:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	9800      	ldr	r0, [sp, #0]
 8003b2c:	b015      	add	sp, #84	; 0x54
 8003b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b32:	4b90      	ldr	r3, [pc, #576]	; (8003d74 <_dtoa_r+0x2e4>)
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	3303      	adds	r3, #3
 8003b38:	e7f5      	b.n	8003b26 <_dtoa_r+0x96>
 8003b3a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003b3e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b46:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003b4a:	d10b      	bne.n	8003b64 <_dtoa_r+0xd4>
 8003b4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003b4e:	2301      	movs	r3, #1
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 84ee 	beq.w	8004536 <_dtoa_r+0xaa6>
 8003b5a:	4888      	ldr	r0, [pc, #544]	; (8003d7c <_dtoa_r+0x2ec>)
 8003b5c:	6018      	str	r0, [r3, #0]
 8003b5e:	1e43      	subs	r3, r0, #1
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	e7e2      	b.n	8003b2a <_dtoa_r+0x9a>
 8003b64:	a913      	add	r1, sp, #76	; 0x4c
 8003b66:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8003b6a:	aa12      	add	r2, sp, #72	; 0x48
 8003b6c:	4630      	mov	r0, r6
 8003b6e:	f001 f8cf 	bl	8004d10 <__d2b>
 8003b72:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8003b76:	4605      	mov	r5, r0
 8003b78:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003b7a:	2900      	cmp	r1, #0
 8003b7c:	d047      	beq.n	8003c0e <_dtoa_r+0x17e>
 8003b7e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003b80:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003b84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003b88:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8003b8c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003b90:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8003b94:	2400      	movs	r4, #0
 8003b96:	ec43 2b16 	vmov	d6, r2, r3
 8003b9a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8003b9e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8003d50 <_dtoa_r+0x2c0>
 8003ba2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003ba6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8003d58 <_dtoa_r+0x2c8>
 8003baa:	eea7 6b05 	vfma.f64	d6, d7, d5
 8003bae:	eeb0 7b46 	vmov.f64	d7, d6
 8003bb2:	ee06 1a90 	vmov	s13, r1
 8003bb6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8003bba:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8003d60 <_dtoa_r+0x2d0>
 8003bbe:	eea5 7b06 	vfma.f64	d7, d5, d6
 8003bc2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8003bc6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bce:	ee16 ba90 	vmov	fp, s13
 8003bd2:	9411      	str	r4, [sp, #68]	; 0x44
 8003bd4:	d508      	bpl.n	8003be8 <_dtoa_r+0x158>
 8003bd6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8003bda:	eeb4 6b47 	vcmp.f64	d6, d7
 8003bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be2:	bf18      	it	ne
 8003be4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8003be8:	f1bb 0f16 	cmp.w	fp, #22
 8003bec:	d832      	bhi.n	8003c54 <_dtoa_r+0x1c4>
 8003bee:	4b64      	ldr	r3, [pc, #400]	; (8003d80 <_dtoa_r+0x2f0>)
 8003bf0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003bf4:	ed93 7b00 	vldr	d7, [r3]
 8003bf8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8003bfc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c04:	d501      	bpl.n	8003c0a <_dtoa_r+0x17a>
 8003c06:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	e023      	b.n	8003c56 <_dtoa_r+0x1c6>
 8003c0e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8003c10:	4401      	add	r1, r0
 8003c12:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8003c16:	2b20      	cmp	r3, #32
 8003c18:	bfc3      	ittte	gt
 8003c1a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003c1e:	fa04 f303 	lslgt.w	r3, r4, r3
 8003c22:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8003c26:	f1c3 0320 	rsble	r3, r3, #32
 8003c2a:	bfc6      	itte	gt
 8003c2c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8003c30:	ea43 0308 	orrgt.w	r3, r3, r8
 8003c34:	fa08 f303 	lslle.w	r3, r8, r3
 8003c38:	ee07 3a90 	vmov	s15, r3
 8003c3c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003c40:	3901      	subs	r1, #1
 8003c42:	ed8d 7b00 	vstr	d7, [sp]
 8003c46:	9c01      	ldr	r4, [sp, #4]
 8003c48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c4c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8003c50:	2401      	movs	r4, #1
 8003c52:	e7a0      	b.n	8003b96 <_dtoa_r+0x106>
 8003c54:	2301      	movs	r3, #1
 8003c56:	930f      	str	r3, [sp, #60]	; 0x3c
 8003c58:	1a43      	subs	r3, r0, r1
 8003c5a:	1e5a      	subs	r2, r3, #1
 8003c5c:	bf45      	ittet	mi
 8003c5e:	f1c3 0301 	rsbmi	r3, r3, #1
 8003c62:	9305      	strmi	r3, [sp, #20]
 8003c64:	2300      	movpl	r3, #0
 8003c66:	2300      	movmi	r3, #0
 8003c68:	9206      	str	r2, [sp, #24]
 8003c6a:	bf54      	ite	pl
 8003c6c:	9305      	strpl	r3, [sp, #20]
 8003c6e:	9306      	strmi	r3, [sp, #24]
 8003c70:	f1bb 0f00 	cmp.w	fp, #0
 8003c74:	db18      	blt.n	8003ca8 <_dtoa_r+0x218>
 8003c76:	9b06      	ldr	r3, [sp, #24]
 8003c78:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8003c7c:	445b      	add	r3, fp
 8003c7e:	9306      	str	r3, [sp, #24]
 8003c80:	2300      	movs	r3, #0
 8003c82:	9a07      	ldr	r2, [sp, #28]
 8003c84:	2a09      	cmp	r2, #9
 8003c86:	d849      	bhi.n	8003d1c <_dtoa_r+0x28c>
 8003c88:	2a05      	cmp	r2, #5
 8003c8a:	bfc4      	itt	gt
 8003c8c:	3a04      	subgt	r2, #4
 8003c8e:	9207      	strgt	r2, [sp, #28]
 8003c90:	9a07      	ldr	r2, [sp, #28]
 8003c92:	f1a2 0202 	sub.w	r2, r2, #2
 8003c96:	bfcc      	ite	gt
 8003c98:	2400      	movgt	r4, #0
 8003c9a:	2401      	movle	r4, #1
 8003c9c:	2a03      	cmp	r2, #3
 8003c9e:	d848      	bhi.n	8003d32 <_dtoa_r+0x2a2>
 8003ca0:	e8df f002 	tbb	[pc, r2]
 8003ca4:	3a2c2e0b 	.word	0x3a2c2e0b
 8003ca8:	9b05      	ldr	r3, [sp, #20]
 8003caa:	2200      	movs	r2, #0
 8003cac:	eba3 030b 	sub.w	r3, r3, fp
 8003cb0:	9305      	str	r3, [sp, #20]
 8003cb2:	920e      	str	r2, [sp, #56]	; 0x38
 8003cb4:	f1cb 0300 	rsb	r3, fp, #0
 8003cb8:	e7e3      	b.n	8003c82 <_dtoa_r+0x1f2>
 8003cba:	2200      	movs	r2, #0
 8003cbc:	9208      	str	r2, [sp, #32]
 8003cbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cc0:	2a00      	cmp	r2, #0
 8003cc2:	dc39      	bgt.n	8003d38 <_dtoa_r+0x2a8>
 8003cc4:	f04f 0a01 	mov.w	sl, #1
 8003cc8:	46d1      	mov	r9, sl
 8003cca:	4652      	mov	r2, sl
 8003ccc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8003cd0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	6079      	str	r1, [r7, #4]
 8003cd6:	2004      	movs	r0, #4
 8003cd8:	f100 0c14 	add.w	ip, r0, #20
 8003cdc:	4594      	cmp	ip, r2
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	d92f      	bls.n	8003d42 <_dtoa_r+0x2b2>
 8003ce2:	4630      	mov	r0, r6
 8003ce4:	930c      	str	r3, [sp, #48]	; 0x30
 8003ce6:	f000 fcf1 	bl	80046cc <_Balloc>
 8003cea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003cec:	9000      	str	r0, [sp, #0]
 8003cee:	4602      	mov	r2, r0
 8003cf0:	2800      	cmp	r0, #0
 8003cf2:	d149      	bne.n	8003d88 <_dtoa_r+0x2f8>
 8003cf4:	4b23      	ldr	r3, [pc, #140]	; (8003d84 <_dtoa_r+0x2f4>)
 8003cf6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003cfa:	e6df      	b.n	8003abc <_dtoa_r+0x2c>
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	e7dd      	b.n	8003cbc <_dtoa_r+0x22c>
 8003d00:	2200      	movs	r2, #0
 8003d02:	9208      	str	r2, [sp, #32]
 8003d04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d06:	eb0b 0a02 	add.w	sl, fp, r2
 8003d0a:	f10a 0901 	add.w	r9, sl, #1
 8003d0e:	464a      	mov	r2, r9
 8003d10:	2a01      	cmp	r2, #1
 8003d12:	bfb8      	it	lt
 8003d14:	2201      	movlt	r2, #1
 8003d16:	e7db      	b.n	8003cd0 <_dtoa_r+0x240>
 8003d18:	2201      	movs	r2, #1
 8003d1a:	e7f2      	b.n	8003d02 <_dtoa_r+0x272>
 8003d1c:	2401      	movs	r4, #1
 8003d1e:	2200      	movs	r2, #0
 8003d20:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8003d24:	f04f 3aff 	mov.w	sl, #4294967295
 8003d28:	2100      	movs	r1, #0
 8003d2a:	46d1      	mov	r9, sl
 8003d2c:	2212      	movs	r2, #18
 8003d2e:	9109      	str	r1, [sp, #36]	; 0x24
 8003d30:	e7ce      	b.n	8003cd0 <_dtoa_r+0x240>
 8003d32:	2201      	movs	r2, #1
 8003d34:	9208      	str	r2, [sp, #32]
 8003d36:	e7f5      	b.n	8003d24 <_dtoa_r+0x294>
 8003d38:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8003d3c:	46d1      	mov	r9, sl
 8003d3e:	4652      	mov	r2, sl
 8003d40:	e7c6      	b.n	8003cd0 <_dtoa_r+0x240>
 8003d42:	3101      	adds	r1, #1
 8003d44:	6079      	str	r1, [r7, #4]
 8003d46:	0040      	lsls	r0, r0, #1
 8003d48:	e7c6      	b.n	8003cd8 <_dtoa_r+0x248>
 8003d4a:	bf00      	nop
 8003d4c:	f3af 8000 	nop.w
 8003d50:	636f4361 	.word	0x636f4361
 8003d54:	3fd287a7 	.word	0x3fd287a7
 8003d58:	8b60c8b3 	.word	0x8b60c8b3
 8003d5c:	3fc68a28 	.word	0x3fc68a28
 8003d60:	509f79fb 	.word	0x509f79fb
 8003d64:	3fd34413 	.word	0x3fd34413
 8003d68:	080053e9 	.word	0x080053e9
 8003d6c:	08005400 	.word	0x08005400
 8003d70:	7ff00000 	.word	0x7ff00000
 8003d74:	080053e5 	.word	0x080053e5
 8003d78:	080053dc 	.word	0x080053dc
 8003d7c:	080053b9 	.word	0x080053b9
 8003d80:	080054f8 	.word	0x080054f8
 8003d84:	0800545f 	.word	0x0800545f
 8003d88:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8003d8a:	9900      	ldr	r1, [sp, #0]
 8003d8c:	6011      	str	r1, [r2, #0]
 8003d8e:	f1b9 0f0e 	cmp.w	r9, #14
 8003d92:	d872      	bhi.n	8003e7a <_dtoa_r+0x3ea>
 8003d94:	2c00      	cmp	r4, #0
 8003d96:	d070      	beq.n	8003e7a <_dtoa_r+0x3ea>
 8003d98:	f1bb 0f00 	cmp.w	fp, #0
 8003d9c:	f340 80a6 	ble.w	8003eec <_dtoa_r+0x45c>
 8003da0:	49ca      	ldr	r1, [pc, #808]	; (80040cc <_dtoa_r+0x63c>)
 8003da2:	f00b 020f 	and.w	r2, fp, #15
 8003da6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8003daa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8003dae:	ed92 7b00 	vldr	d7, [r2]
 8003db2:	ea4f 112b 	mov.w	r1, fp, asr #4
 8003db6:	f000 808d 	beq.w	8003ed4 <_dtoa_r+0x444>
 8003dba:	4ac5      	ldr	r2, [pc, #788]	; (80040d0 <_dtoa_r+0x640>)
 8003dbc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8003dc0:	ed92 6b08 	vldr	d6, [r2, #32]
 8003dc4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8003dc8:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003dcc:	f001 010f 	and.w	r1, r1, #15
 8003dd0:	2203      	movs	r2, #3
 8003dd2:	48bf      	ldr	r0, [pc, #764]	; (80040d0 <_dtoa_r+0x640>)
 8003dd4:	2900      	cmp	r1, #0
 8003dd6:	d17f      	bne.n	8003ed8 <_dtoa_r+0x448>
 8003dd8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8003ddc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8003de0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003de4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003de6:	2900      	cmp	r1, #0
 8003de8:	f000 80b2 	beq.w	8003f50 <_dtoa_r+0x4c0>
 8003dec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003df0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003df4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfc:	f140 80a8 	bpl.w	8003f50 <_dtoa_r+0x4c0>
 8003e00:	f1b9 0f00 	cmp.w	r9, #0
 8003e04:	f000 80a4 	beq.w	8003f50 <_dtoa_r+0x4c0>
 8003e08:	f1ba 0f00 	cmp.w	sl, #0
 8003e0c:	dd31      	ble.n	8003e72 <_dtoa_r+0x3e2>
 8003e0e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8003e12:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003e16:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003e1a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8003e1e:	3201      	adds	r2, #1
 8003e20:	4650      	mov	r0, sl
 8003e22:	ed9d 6b02 	vldr	d6, [sp, #8]
 8003e26:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8003e2a:	ee07 2a90 	vmov	s15, r2
 8003e2e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003e32:	eea7 5b06 	vfma.f64	d5, d7, d6
 8003e36:	ed8d 5b02 	vstr	d5, [sp, #8]
 8003e3a:	9c03      	ldr	r4, [sp, #12]
 8003e3c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8003e40:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8003e44:	2800      	cmp	r0, #0
 8003e46:	f040 8086 	bne.w	8003f56 <_dtoa_r+0x4c6>
 8003e4a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8003e4e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003e52:	ec42 1b17 	vmov	d7, r1, r2
 8003e56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e5e:	f300 8272 	bgt.w	8004346 <_dtoa_r+0x8b6>
 8003e62:	eeb1 7b47 	vneg.f64	d7, d7
 8003e66:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e6e:	f100 8267 	bmi.w	8004340 <_dtoa_r+0x8b0>
 8003e72:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8003e76:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8003e7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003e7c:	2a00      	cmp	r2, #0
 8003e7e:	f2c0 8129 	blt.w	80040d4 <_dtoa_r+0x644>
 8003e82:	f1bb 0f0e 	cmp.w	fp, #14
 8003e86:	f300 8125 	bgt.w	80040d4 <_dtoa_r+0x644>
 8003e8a:	4b90      	ldr	r3, [pc, #576]	; (80040cc <_dtoa_r+0x63c>)
 8003e8c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003e90:	ed93 6b00 	vldr	d6, [r3]
 8003e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f280 80c3 	bge.w	8004022 <_dtoa_r+0x592>
 8003e9c:	f1b9 0f00 	cmp.w	r9, #0
 8003ea0:	f300 80bf 	bgt.w	8004022 <_dtoa_r+0x592>
 8003ea4:	f040 824c 	bne.w	8004340 <_dtoa_r+0x8b0>
 8003ea8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8003eac:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003eb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003eb4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ebc:	464c      	mov	r4, r9
 8003ebe:	464f      	mov	r7, r9
 8003ec0:	f280 8222 	bge.w	8004308 <_dtoa_r+0x878>
 8003ec4:	f8dd 8000 	ldr.w	r8, [sp]
 8003ec8:	2331      	movs	r3, #49	; 0x31
 8003eca:	f808 3b01 	strb.w	r3, [r8], #1
 8003ece:	f10b 0b01 	add.w	fp, fp, #1
 8003ed2:	e21e      	b.n	8004312 <_dtoa_r+0x882>
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	e77c      	b.n	8003dd2 <_dtoa_r+0x342>
 8003ed8:	07cc      	lsls	r4, r1, #31
 8003eda:	d504      	bpl.n	8003ee6 <_dtoa_r+0x456>
 8003edc:	ed90 6b00 	vldr	d6, [r0]
 8003ee0:	3201      	adds	r2, #1
 8003ee2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003ee6:	1049      	asrs	r1, r1, #1
 8003ee8:	3008      	adds	r0, #8
 8003eea:	e773      	b.n	8003dd4 <_dtoa_r+0x344>
 8003eec:	d02e      	beq.n	8003f4c <_dtoa_r+0x4bc>
 8003eee:	f1cb 0100 	rsb	r1, fp, #0
 8003ef2:	4a76      	ldr	r2, [pc, #472]	; (80040cc <_dtoa_r+0x63c>)
 8003ef4:	f001 000f 	and.w	r0, r1, #15
 8003ef8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8003efc:	ed92 7b00 	vldr	d7, [r2]
 8003f00:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8003f04:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003f08:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003f0c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8003f10:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8003f14:	486e      	ldr	r0, [pc, #440]	; (80040d0 <_dtoa_r+0x640>)
 8003f16:	1109      	asrs	r1, r1, #4
 8003f18:	2400      	movs	r4, #0
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	b939      	cbnz	r1, 8003f2e <_dtoa_r+0x49e>
 8003f1e:	2c00      	cmp	r4, #0
 8003f20:	f43f af60 	beq.w	8003de4 <_dtoa_r+0x354>
 8003f24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003f28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f2c:	e75a      	b.n	8003de4 <_dtoa_r+0x354>
 8003f2e:	07cf      	lsls	r7, r1, #31
 8003f30:	d509      	bpl.n	8003f46 <_dtoa_r+0x4b6>
 8003f32:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8003f36:	ed90 7b00 	vldr	d7, [r0]
 8003f3a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003f3e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003f42:	3201      	adds	r2, #1
 8003f44:	2401      	movs	r4, #1
 8003f46:	1049      	asrs	r1, r1, #1
 8003f48:	3008      	adds	r0, #8
 8003f4a:	e7e7      	b.n	8003f1c <_dtoa_r+0x48c>
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	e749      	b.n	8003de4 <_dtoa_r+0x354>
 8003f50:	465f      	mov	r7, fp
 8003f52:	4648      	mov	r0, r9
 8003f54:	e765      	b.n	8003e22 <_dtoa_r+0x392>
 8003f56:	ec42 1b17 	vmov	d7, r1, r2
 8003f5a:	4a5c      	ldr	r2, [pc, #368]	; (80040cc <_dtoa_r+0x63c>)
 8003f5c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8003f60:	ed12 4b02 	vldr	d4, [r2, #-8]
 8003f64:	9a00      	ldr	r2, [sp, #0]
 8003f66:	1814      	adds	r4, r2, r0
 8003f68:	9a08      	ldr	r2, [sp, #32]
 8003f6a:	b352      	cbz	r2, 8003fc2 <_dtoa_r+0x532>
 8003f6c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8003f70:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8003f74:	f8dd 8000 	ldr.w	r8, [sp]
 8003f78:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8003f7c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8003f80:	ee35 7b47 	vsub.f64	d7, d5, d7
 8003f84:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8003f88:	ee14 2a90 	vmov	r2, s9
 8003f8c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8003f90:	3230      	adds	r2, #48	; 0x30
 8003f92:	ee36 6b45 	vsub.f64	d6, d6, d5
 8003f96:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f9e:	f808 2b01 	strb.w	r2, [r8], #1
 8003fa2:	d439      	bmi.n	8004018 <_dtoa_r+0x588>
 8003fa4:	ee32 5b46 	vsub.f64	d5, d2, d6
 8003fa8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8003fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb0:	d472      	bmi.n	8004098 <_dtoa_r+0x608>
 8003fb2:	45a0      	cmp	r8, r4
 8003fb4:	f43f af5d 	beq.w	8003e72 <_dtoa_r+0x3e2>
 8003fb8:	ee27 7b03 	vmul.f64	d7, d7, d3
 8003fbc:	ee26 6b03 	vmul.f64	d6, d6, d3
 8003fc0:	e7e0      	b.n	8003f84 <_dtoa_r+0x4f4>
 8003fc2:	f8dd 8000 	ldr.w	r8, [sp]
 8003fc6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8003fca:	4621      	mov	r1, r4
 8003fcc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8003fd0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8003fd4:	ee14 2a90 	vmov	r2, s9
 8003fd8:	3230      	adds	r2, #48	; 0x30
 8003fda:	f808 2b01 	strb.w	r2, [r8], #1
 8003fde:	45a0      	cmp	r8, r4
 8003fe0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8003fe4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8003fe8:	d118      	bne.n	800401c <_dtoa_r+0x58c>
 8003fea:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8003fee:	ee37 4b05 	vadd.f64	d4, d7, d5
 8003ff2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8003ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ffa:	dc4d      	bgt.n	8004098 <_dtoa_r+0x608>
 8003ffc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004000:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004008:	f57f af33 	bpl.w	8003e72 <_dtoa_r+0x3e2>
 800400c:	4688      	mov	r8, r1
 800400e:	3901      	subs	r1, #1
 8004010:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8004014:	2b30      	cmp	r3, #48	; 0x30
 8004016:	d0f9      	beq.n	800400c <_dtoa_r+0x57c>
 8004018:	46bb      	mov	fp, r7
 800401a:	e02a      	b.n	8004072 <_dtoa_r+0x5e2>
 800401c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004020:	e7d6      	b.n	8003fd0 <_dtoa_r+0x540>
 8004022:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004026:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800402a:	f8dd 8000 	ldr.w	r8, [sp]
 800402e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8004032:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8004036:	ee15 3a10 	vmov	r3, s10
 800403a:	3330      	adds	r3, #48	; 0x30
 800403c:	f808 3b01 	strb.w	r3, [r8], #1
 8004040:	9b00      	ldr	r3, [sp, #0]
 8004042:	eba8 0303 	sub.w	r3, r8, r3
 8004046:	4599      	cmp	r9, r3
 8004048:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800404c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8004050:	d133      	bne.n	80040ba <_dtoa_r+0x62a>
 8004052:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004056:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800405a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800405e:	dc1a      	bgt.n	8004096 <_dtoa_r+0x606>
 8004060:	eeb4 7b46 	vcmp.f64	d7, d6
 8004064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004068:	d103      	bne.n	8004072 <_dtoa_r+0x5e2>
 800406a:	ee15 3a10 	vmov	r3, s10
 800406e:	07d9      	lsls	r1, r3, #31
 8004070:	d411      	bmi.n	8004096 <_dtoa_r+0x606>
 8004072:	4629      	mov	r1, r5
 8004074:	4630      	mov	r0, r6
 8004076:	f000 fb69 	bl	800474c <_Bfree>
 800407a:	2300      	movs	r3, #0
 800407c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800407e:	f888 3000 	strb.w	r3, [r8]
 8004082:	f10b 0301 	add.w	r3, fp, #1
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800408a:	2b00      	cmp	r3, #0
 800408c:	f43f ad4d 	beq.w	8003b2a <_dtoa_r+0x9a>
 8004090:	f8c3 8000 	str.w	r8, [r3]
 8004094:	e549      	b.n	8003b2a <_dtoa_r+0x9a>
 8004096:	465f      	mov	r7, fp
 8004098:	4643      	mov	r3, r8
 800409a:	4698      	mov	r8, r3
 800409c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80040a0:	2a39      	cmp	r2, #57	; 0x39
 80040a2:	d106      	bne.n	80040b2 <_dtoa_r+0x622>
 80040a4:	9a00      	ldr	r2, [sp, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d1f7      	bne.n	800409a <_dtoa_r+0x60a>
 80040aa:	9900      	ldr	r1, [sp, #0]
 80040ac:	2230      	movs	r2, #48	; 0x30
 80040ae:	3701      	adds	r7, #1
 80040b0:	700a      	strb	r2, [r1, #0]
 80040b2:	781a      	ldrb	r2, [r3, #0]
 80040b4:	3201      	adds	r2, #1
 80040b6:	701a      	strb	r2, [r3, #0]
 80040b8:	e7ae      	b.n	8004018 <_dtoa_r+0x588>
 80040ba:	ee27 7b04 	vmul.f64	d7, d7, d4
 80040be:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80040c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040c6:	d1b2      	bne.n	800402e <_dtoa_r+0x59e>
 80040c8:	e7d3      	b.n	8004072 <_dtoa_r+0x5e2>
 80040ca:	bf00      	nop
 80040cc:	080054f8 	.word	0x080054f8
 80040d0:	080054d0 	.word	0x080054d0
 80040d4:	9908      	ldr	r1, [sp, #32]
 80040d6:	2900      	cmp	r1, #0
 80040d8:	f000 80d1 	beq.w	800427e <_dtoa_r+0x7ee>
 80040dc:	9907      	ldr	r1, [sp, #28]
 80040de:	2901      	cmp	r1, #1
 80040e0:	f300 80b4 	bgt.w	800424c <_dtoa_r+0x7bc>
 80040e4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80040e6:	2900      	cmp	r1, #0
 80040e8:	f000 80ac 	beq.w	8004244 <_dtoa_r+0x7b4>
 80040ec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80040f0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80040f4:	461c      	mov	r4, r3
 80040f6:	930a      	str	r3, [sp, #40]	; 0x28
 80040f8:	9b05      	ldr	r3, [sp, #20]
 80040fa:	4413      	add	r3, r2
 80040fc:	9305      	str	r3, [sp, #20]
 80040fe:	9b06      	ldr	r3, [sp, #24]
 8004100:	2101      	movs	r1, #1
 8004102:	4413      	add	r3, r2
 8004104:	4630      	mov	r0, r6
 8004106:	9306      	str	r3, [sp, #24]
 8004108:	f000 fbdc 	bl	80048c4 <__i2b>
 800410c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800410e:	4607      	mov	r7, r0
 8004110:	f1b8 0f00 	cmp.w	r8, #0
 8004114:	dd0d      	ble.n	8004132 <_dtoa_r+0x6a2>
 8004116:	9a06      	ldr	r2, [sp, #24]
 8004118:	2a00      	cmp	r2, #0
 800411a:	dd0a      	ble.n	8004132 <_dtoa_r+0x6a2>
 800411c:	4542      	cmp	r2, r8
 800411e:	9905      	ldr	r1, [sp, #20]
 8004120:	bfa8      	it	ge
 8004122:	4642      	movge	r2, r8
 8004124:	1a89      	subs	r1, r1, r2
 8004126:	9105      	str	r1, [sp, #20]
 8004128:	9906      	ldr	r1, [sp, #24]
 800412a:	eba8 0802 	sub.w	r8, r8, r2
 800412e:	1a8a      	subs	r2, r1, r2
 8004130:	9206      	str	r2, [sp, #24]
 8004132:	b303      	cbz	r3, 8004176 <_dtoa_r+0x6e6>
 8004134:	9a08      	ldr	r2, [sp, #32]
 8004136:	2a00      	cmp	r2, #0
 8004138:	f000 80a6 	beq.w	8004288 <_dtoa_r+0x7f8>
 800413c:	2c00      	cmp	r4, #0
 800413e:	dd13      	ble.n	8004168 <_dtoa_r+0x6d8>
 8004140:	4639      	mov	r1, r7
 8004142:	4622      	mov	r2, r4
 8004144:	4630      	mov	r0, r6
 8004146:	930c      	str	r3, [sp, #48]	; 0x30
 8004148:	f000 fc78 	bl	8004a3c <__pow5mult>
 800414c:	462a      	mov	r2, r5
 800414e:	4601      	mov	r1, r0
 8004150:	4607      	mov	r7, r0
 8004152:	4630      	mov	r0, r6
 8004154:	f000 fbcc 	bl	80048f0 <__multiply>
 8004158:	4629      	mov	r1, r5
 800415a:	900a      	str	r0, [sp, #40]	; 0x28
 800415c:	4630      	mov	r0, r6
 800415e:	f000 faf5 	bl	800474c <_Bfree>
 8004162:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004164:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004166:	4615      	mov	r5, r2
 8004168:	1b1a      	subs	r2, r3, r4
 800416a:	d004      	beq.n	8004176 <_dtoa_r+0x6e6>
 800416c:	4629      	mov	r1, r5
 800416e:	4630      	mov	r0, r6
 8004170:	f000 fc64 	bl	8004a3c <__pow5mult>
 8004174:	4605      	mov	r5, r0
 8004176:	2101      	movs	r1, #1
 8004178:	4630      	mov	r0, r6
 800417a:	f000 fba3 	bl	80048c4 <__i2b>
 800417e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004180:	2b00      	cmp	r3, #0
 8004182:	4604      	mov	r4, r0
 8004184:	f340 8082 	ble.w	800428c <_dtoa_r+0x7fc>
 8004188:	461a      	mov	r2, r3
 800418a:	4601      	mov	r1, r0
 800418c:	4630      	mov	r0, r6
 800418e:	f000 fc55 	bl	8004a3c <__pow5mult>
 8004192:	9b07      	ldr	r3, [sp, #28]
 8004194:	2b01      	cmp	r3, #1
 8004196:	4604      	mov	r4, r0
 8004198:	dd7b      	ble.n	8004292 <_dtoa_r+0x802>
 800419a:	2300      	movs	r3, #0
 800419c:	930a      	str	r3, [sp, #40]	; 0x28
 800419e:	6922      	ldr	r2, [r4, #16]
 80041a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80041a4:	6910      	ldr	r0, [r2, #16]
 80041a6:	f000 fb3d 	bl	8004824 <__hi0bits>
 80041aa:	f1c0 0020 	rsb	r0, r0, #32
 80041ae:	9b06      	ldr	r3, [sp, #24]
 80041b0:	4418      	add	r0, r3
 80041b2:	f010 001f 	ands.w	r0, r0, #31
 80041b6:	f000 808d 	beq.w	80042d4 <_dtoa_r+0x844>
 80041ba:	f1c0 0220 	rsb	r2, r0, #32
 80041be:	2a04      	cmp	r2, #4
 80041c0:	f340 8086 	ble.w	80042d0 <_dtoa_r+0x840>
 80041c4:	f1c0 001c 	rsb	r0, r0, #28
 80041c8:	9b05      	ldr	r3, [sp, #20]
 80041ca:	4403      	add	r3, r0
 80041cc:	9305      	str	r3, [sp, #20]
 80041ce:	9b06      	ldr	r3, [sp, #24]
 80041d0:	4403      	add	r3, r0
 80041d2:	4480      	add	r8, r0
 80041d4:	9306      	str	r3, [sp, #24]
 80041d6:	9b05      	ldr	r3, [sp, #20]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	dd05      	ble.n	80041e8 <_dtoa_r+0x758>
 80041dc:	4629      	mov	r1, r5
 80041de:	461a      	mov	r2, r3
 80041e0:	4630      	mov	r0, r6
 80041e2:	f000 fc85 	bl	8004af0 <__lshift>
 80041e6:	4605      	mov	r5, r0
 80041e8:	9b06      	ldr	r3, [sp, #24]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	dd05      	ble.n	80041fa <_dtoa_r+0x76a>
 80041ee:	4621      	mov	r1, r4
 80041f0:	461a      	mov	r2, r3
 80041f2:	4630      	mov	r0, r6
 80041f4:	f000 fc7c 	bl	8004af0 <__lshift>
 80041f8:	4604      	mov	r4, r0
 80041fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d06b      	beq.n	80042d8 <_dtoa_r+0x848>
 8004200:	4621      	mov	r1, r4
 8004202:	4628      	mov	r0, r5
 8004204:	f000 fce0 	bl	8004bc8 <__mcmp>
 8004208:	2800      	cmp	r0, #0
 800420a:	da65      	bge.n	80042d8 <_dtoa_r+0x848>
 800420c:	2300      	movs	r3, #0
 800420e:	4629      	mov	r1, r5
 8004210:	220a      	movs	r2, #10
 8004212:	4630      	mov	r0, r6
 8004214:	f000 fabc 	bl	8004790 <__multadd>
 8004218:	9b08      	ldr	r3, [sp, #32]
 800421a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800421e:	4605      	mov	r5, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8192 	beq.w	800454a <_dtoa_r+0xaba>
 8004226:	4639      	mov	r1, r7
 8004228:	2300      	movs	r3, #0
 800422a:	220a      	movs	r2, #10
 800422c:	4630      	mov	r0, r6
 800422e:	f000 faaf 	bl	8004790 <__multadd>
 8004232:	f1ba 0f00 	cmp.w	sl, #0
 8004236:	4607      	mov	r7, r0
 8004238:	f300 808e 	bgt.w	8004358 <_dtoa_r+0x8c8>
 800423c:	9b07      	ldr	r3, [sp, #28]
 800423e:	2b02      	cmp	r3, #2
 8004240:	dc51      	bgt.n	80042e6 <_dtoa_r+0x856>
 8004242:	e089      	b.n	8004358 <_dtoa_r+0x8c8>
 8004244:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004246:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800424a:	e751      	b.n	80040f0 <_dtoa_r+0x660>
 800424c:	f109 34ff 	add.w	r4, r9, #4294967295
 8004250:	42a3      	cmp	r3, r4
 8004252:	bfbf      	itttt	lt
 8004254:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8004256:	1ae3      	sublt	r3, r4, r3
 8004258:	18d2      	addlt	r2, r2, r3
 800425a:	4613      	movlt	r3, r2
 800425c:	bfb7      	itett	lt
 800425e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004260:	1b1c      	subge	r4, r3, r4
 8004262:	4623      	movlt	r3, r4
 8004264:	2400      	movlt	r4, #0
 8004266:	f1b9 0f00 	cmp.w	r9, #0
 800426a:	bfb5      	itete	lt
 800426c:	9a05      	ldrlt	r2, [sp, #20]
 800426e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8004272:	eba2 0809 	sublt.w	r8, r2, r9
 8004276:	464a      	movge	r2, r9
 8004278:	bfb8      	it	lt
 800427a:	2200      	movlt	r2, #0
 800427c:	e73b      	b.n	80040f6 <_dtoa_r+0x666>
 800427e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8004282:	9f08      	ldr	r7, [sp, #32]
 8004284:	461c      	mov	r4, r3
 8004286:	e743      	b.n	8004110 <_dtoa_r+0x680>
 8004288:	461a      	mov	r2, r3
 800428a:	e76f      	b.n	800416c <_dtoa_r+0x6dc>
 800428c:	9b07      	ldr	r3, [sp, #28]
 800428e:	2b01      	cmp	r3, #1
 8004290:	dc18      	bgt.n	80042c4 <_dtoa_r+0x834>
 8004292:	9b02      	ldr	r3, [sp, #8]
 8004294:	b9b3      	cbnz	r3, 80042c4 <_dtoa_r+0x834>
 8004296:	9b03      	ldr	r3, [sp, #12]
 8004298:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800429c:	b9a2      	cbnz	r2, 80042c8 <_dtoa_r+0x838>
 800429e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042a2:	0d12      	lsrs	r2, r2, #20
 80042a4:	0512      	lsls	r2, r2, #20
 80042a6:	b18a      	cbz	r2, 80042cc <_dtoa_r+0x83c>
 80042a8:	9b05      	ldr	r3, [sp, #20]
 80042aa:	3301      	adds	r3, #1
 80042ac:	9305      	str	r3, [sp, #20]
 80042ae:	9b06      	ldr	r3, [sp, #24]
 80042b0:	3301      	adds	r3, #1
 80042b2:	9306      	str	r3, [sp, #24]
 80042b4:	2301      	movs	r3, #1
 80042b6:	930a      	str	r3, [sp, #40]	; 0x28
 80042b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f47f af6f 	bne.w	800419e <_dtoa_r+0x70e>
 80042c0:	2001      	movs	r0, #1
 80042c2:	e774      	b.n	80041ae <_dtoa_r+0x71e>
 80042c4:	2300      	movs	r3, #0
 80042c6:	e7f6      	b.n	80042b6 <_dtoa_r+0x826>
 80042c8:	9b02      	ldr	r3, [sp, #8]
 80042ca:	e7f4      	b.n	80042b6 <_dtoa_r+0x826>
 80042cc:	920a      	str	r2, [sp, #40]	; 0x28
 80042ce:	e7f3      	b.n	80042b8 <_dtoa_r+0x828>
 80042d0:	d081      	beq.n	80041d6 <_dtoa_r+0x746>
 80042d2:	4610      	mov	r0, r2
 80042d4:	301c      	adds	r0, #28
 80042d6:	e777      	b.n	80041c8 <_dtoa_r+0x738>
 80042d8:	f1b9 0f00 	cmp.w	r9, #0
 80042dc:	dc37      	bgt.n	800434e <_dtoa_r+0x8be>
 80042de:	9b07      	ldr	r3, [sp, #28]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	dd34      	ble.n	800434e <_dtoa_r+0x8be>
 80042e4:	46ca      	mov	sl, r9
 80042e6:	f1ba 0f00 	cmp.w	sl, #0
 80042ea:	d10d      	bne.n	8004308 <_dtoa_r+0x878>
 80042ec:	4621      	mov	r1, r4
 80042ee:	4653      	mov	r3, sl
 80042f0:	2205      	movs	r2, #5
 80042f2:	4630      	mov	r0, r6
 80042f4:	f000 fa4c 	bl	8004790 <__multadd>
 80042f8:	4601      	mov	r1, r0
 80042fa:	4604      	mov	r4, r0
 80042fc:	4628      	mov	r0, r5
 80042fe:	f000 fc63 	bl	8004bc8 <__mcmp>
 8004302:	2800      	cmp	r0, #0
 8004304:	f73f adde 	bgt.w	8003ec4 <_dtoa_r+0x434>
 8004308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800430a:	f8dd 8000 	ldr.w	r8, [sp]
 800430e:	ea6f 0b03 	mvn.w	fp, r3
 8004312:	f04f 0900 	mov.w	r9, #0
 8004316:	4621      	mov	r1, r4
 8004318:	4630      	mov	r0, r6
 800431a:	f000 fa17 	bl	800474c <_Bfree>
 800431e:	2f00      	cmp	r7, #0
 8004320:	f43f aea7 	beq.w	8004072 <_dtoa_r+0x5e2>
 8004324:	f1b9 0f00 	cmp.w	r9, #0
 8004328:	d005      	beq.n	8004336 <_dtoa_r+0x8a6>
 800432a:	45b9      	cmp	r9, r7
 800432c:	d003      	beq.n	8004336 <_dtoa_r+0x8a6>
 800432e:	4649      	mov	r1, r9
 8004330:	4630      	mov	r0, r6
 8004332:	f000 fa0b 	bl	800474c <_Bfree>
 8004336:	4639      	mov	r1, r7
 8004338:	4630      	mov	r0, r6
 800433a:	f000 fa07 	bl	800474c <_Bfree>
 800433e:	e698      	b.n	8004072 <_dtoa_r+0x5e2>
 8004340:	2400      	movs	r4, #0
 8004342:	4627      	mov	r7, r4
 8004344:	e7e0      	b.n	8004308 <_dtoa_r+0x878>
 8004346:	46bb      	mov	fp, r7
 8004348:	4604      	mov	r4, r0
 800434a:	4607      	mov	r7, r0
 800434c:	e5ba      	b.n	8003ec4 <_dtoa_r+0x434>
 800434e:	9b08      	ldr	r3, [sp, #32]
 8004350:	46ca      	mov	sl, r9
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 8100 	beq.w	8004558 <_dtoa_r+0xac8>
 8004358:	f1b8 0f00 	cmp.w	r8, #0
 800435c:	dd05      	ble.n	800436a <_dtoa_r+0x8da>
 800435e:	4639      	mov	r1, r7
 8004360:	4642      	mov	r2, r8
 8004362:	4630      	mov	r0, r6
 8004364:	f000 fbc4 	bl	8004af0 <__lshift>
 8004368:	4607      	mov	r7, r0
 800436a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800436c:	2b00      	cmp	r3, #0
 800436e:	d05d      	beq.n	800442c <_dtoa_r+0x99c>
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	4630      	mov	r0, r6
 8004374:	f000 f9aa 	bl	80046cc <_Balloc>
 8004378:	4680      	mov	r8, r0
 800437a:	b928      	cbnz	r0, 8004388 <_dtoa_r+0x8f8>
 800437c:	4b82      	ldr	r3, [pc, #520]	; (8004588 <_dtoa_r+0xaf8>)
 800437e:	4602      	mov	r2, r0
 8004380:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004384:	f7ff bb9a 	b.w	8003abc <_dtoa_r+0x2c>
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	3202      	adds	r2, #2
 800438c:	0092      	lsls	r2, r2, #2
 800438e:	f107 010c 	add.w	r1, r7, #12
 8004392:	300c      	adds	r0, #12
 8004394:	f000 f980 	bl	8004698 <memcpy>
 8004398:	2201      	movs	r2, #1
 800439a:	4641      	mov	r1, r8
 800439c:	4630      	mov	r0, r6
 800439e:	f000 fba7 	bl	8004af0 <__lshift>
 80043a2:	9b00      	ldr	r3, [sp, #0]
 80043a4:	3301      	adds	r3, #1
 80043a6:	9305      	str	r3, [sp, #20]
 80043a8:	9b00      	ldr	r3, [sp, #0]
 80043aa:	4453      	add	r3, sl
 80043ac:	9309      	str	r3, [sp, #36]	; 0x24
 80043ae:	9b02      	ldr	r3, [sp, #8]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	46b9      	mov	r9, r7
 80043b6:	9308      	str	r3, [sp, #32]
 80043b8:	4607      	mov	r7, r0
 80043ba:	9b05      	ldr	r3, [sp, #20]
 80043bc:	4621      	mov	r1, r4
 80043be:	3b01      	subs	r3, #1
 80043c0:	4628      	mov	r0, r5
 80043c2:	9302      	str	r3, [sp, #8]
 80043c4:	f7ff fad6 	bl	8003974 <quorem>
 80043c8:	4603      	mov	r3, r0
 80043ca:	3330      	adds	r3, #48	; 0x30
 80043cc:	9006      	str	r0, [sp, #24]
 80043ce:	4649      	mov	r1, r9
 80043d0:	4628      	mov	r0, r5
 80043d2:	930a      	str	r3, [sp, #40]	; 0x28
 80043d4:	f000 fbf8 	bl	8004bc8 <__mcmp>
 80043d8:	463a      	mov	r2, r7
 80043da:	4682      	mov	sl, r0
 80043dc:	4621      	mov	r1, r4
 80043de:	4630      	mov	r0, r6
 80043e0:	f000 fc0e 	bl	8004c00 <__mdiff>
 80043e4:	68c2      	ldr	r2, [r0, #12]
 80043e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043e8:	4680      	mov	r8, r0
 80043ea:	bb0a      	cbnz	r2, 8004430 <_dtoa_r+0x9a0>
 80043ec:	4601      	mov	r1, r0
 80043ee:	4628      	mov	r0, r5
 80043f0:	f000 fbea 	bl	8004bc8 <__mcmp>
 80043f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043f6:	4602      	mov	r2, r0
 80043f8:	4641      	mov	r1, r8
 80043fa:	4630      	mov	r0, r6
 80043fc:	920e      	str	r2, [sp, #56]	; 0x38
 80043fe:	930a      	str	r3, [sp, #40]	; 0x28
 8004400:	f000 f9a4 	bl	800474c <_Bfree>
 8004404:	9b07      	ldr	r3, [sp, #28]
 8004406:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004408:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800440c:	ea43 0102 	orr.w	r1, r3, r2
 8004410:	9b08      	ldr	r3, [sp, #32]
 8004412:	430b      	orrs	r3, r1
 8004414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004416:	d10d      	bne.n	8004434 <_dtoa_r+0x9a4>
 8004418:	2b39      	cmp	r3, #57	; 0x39
 800441a:	d029      	beq.n	8004470 <_dtoa_r+0x9e0>
 800441c:	f1ba 0f00 	cmp.w	sl, #0
 8004420:	dd01      	ble.n	8004426 <_dtoa_r+0x996>
 8004422:	9b06      	ldr	r3, [sp, #24]
 8004424:	3331      	adds	r3, #49	; 0x31
 8004426:	9a02      	ldr	r2, [sp, #8]
 8004428:	7013      	strb	r3, [r2, #0]
 800442a:	e774      	b.n	8004316 <_dtoa_r+0x886>
 800442c:	4638      	mov	r0, r7
 800442e:	e7b8      	b.n	80043a2 <_dtoa_r+0x912>
 8004430:	2201      	movs	r2, #1
 8004432:	e7e1      	b.n	80043f8 <_dtoa_r+0x968>
 8004434:	f1ba 0f00 	cmp.w	sl, #0
 8004438:	db06      	blt.n	8004448 <_dtoa_r+0x9b8>
 800443a:	9907      	ldr	r1, [sp, #28]
 800443c:	ea41 0a0a 	orr.w	sl, r1, sl
 8004440:	9908      	ldr	r1, [sp, #32]
 8004442:	ea5a 0101 	orrs.w	r1, sl, r1
 8004446:	d120      	bne.n	800448a <_dtoa_r+0x9fa>
 8004448:	2a00      	cmp	r2, #0
 800444a:	ddec      	ble.n	8004426 <_dtoa_r+0x996>
 800444c:	4629      	mov	r1, r5
 800444e:	2201      	movs	r2, #1
 8004450:	4630      	mov	r0, r6
 8004452:	9305      	str	r3, [sp, #20]
 8004454:	f000 fb4c 	bl	8004af0 <__lshift>
 8004458:	4621      	mov	r1, r4
 800445a:	4605      	mov	r5, r0
 800445c:	f000 fbb4 	bl	8004bc8 <__mcmp>
 8004460:	2800      	cmp	r0, #0
 8004462:	9b05      	ldr	r3, [sp, #20]
 8004464:	dc02      	bgt.n	800446c <_dtoa_r+0x9dc>
 8004466:	d1de      	bne.n	8004426 <_dtoa_r+0x996>
 8004468:	07da      	lsls	r2, r3, #31
 800446a:	d5dc      	bpl.n	8004426 <_dtoa_r+0x996>
 800446c:	2b39      	cmp	r3, #57	; 0x39
 800446e:	d1d8      	bne.n	8004422 <_dtoa_r+0x992>
 8004470:	9a02      	ldr	r2, [sp, #8]
 8004472:	2339      	movs	r3, #57	; 0x39
 8004474:	7013      	strb	r3, [r2, #0]
 8004476:	4643      	mov	r3, r8
 8004478:	4698      	mov	r8, r3
 800447a:	3b01      	subs	r3, #1
 800447c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8004480:	2a39      	cmp	r2, #57	; 0x39
 8004482:	d051      	beq.n	8004528 <_dtoa_r+0xa98>
 8004484:	3201      	adds	r2, #1
 8004486:	701a      	strb	r2, [r3, #0]
 8004488:	e745      	b.n	8004316 <_dtoa_r+0x886>
 800448a:	2a00      	cmp	r2, #0
 800448c:	dd03      	ble.n	8004496 <_dtoa_r+0xa06>
 800448e:	2b39      	cmp	r3, #57	; 0x39
 8004490:	d0ee      	beq.n	8004470 <_dtoa_r+0x9e0>
 8004492:	3301      	adds	r3, #1
 8004494:	e7c7      	b.n	8004426 <_dtoa_r+0x996>
 8004496:	9a05      	ldr	r2, [sp, #20]
 8004498:	9909      	ldr	r1, [sp, #36]	; 0x24
 800449a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800449e:	428a      	cmp	r2, r1
 80044a0:	d02b      	beq.n	80044fa <_dtoa_r+0xa6a>
 80044a2:	4629      	mov	r1, r5
 80044a4:	2300      	movs	r3, #0
 80044a6:	220a      	movs	r2, #10
 80044a8:	4630      	mov	r0, r6
 80044aa:	f000 f971 	bl	8004790 <__multadd>
 80044ae:	45b9      	cmp	r9, r7
 80044b0:	4605      	mov	r5, r0
 80044b2:	f04f 0300 	mov.w	r3, #0
 80044b6:	f04f 020a 	mov.w	r2, #10
 80044ba:	4649      	mov	r1, r9
 80044bc:	4630      	mov	r0, r6
 80044be:	d107      	bne.n	80044d0 <_dtoa_r+0xa40>
 80044c0:	f000 f966 	bl	8004790 <__multadd>
 80044c4:	4681      	mov	r9, r0
 80044c6:	4607      	mov	r7, r0
 80044c8:	9b05      	ldr	r3, [sp, #20]
 80044ca:	3301      	adds	r3, #1
 80044cc:	9305      	str	r3, [sp, #20]
 80044ce:	e774      	b.n	80043ba <_dtoa_r+0x92a>
 80044d0:	f000 f95e 	bl	8004790 <__multadd>
 80044d4:	4639      	mov	r1, r7
 80044d6:	4681      	mov	r9, r0
 80044d8:	2300      	movs	r3, #0
 80044da:	220a      	movs	r2, #10
 80044dc:	4630      	mov	r0, r6
 80044de:	f000 f957 	bl	8004790 <__multadd>
 80044e2:	4607      	mov	r7, r0
 80044e4:	e7f0      	b.n	80044c8 <_dtoa_r+0xa38>
 80044e6:	f1ba 0f00 	cmp.w	sl, #0
 80044ea:	9a00      	ldr	r2, [sp, #0]
 80044ec:	bfcc      	ite	gt
 80044ee:	46d0      	movgt	r8, sl
 80044f0:	f04f 0801 	movle.w	r8, #1
 80044f4:	4490      	add	r8, r2
 80044f6:	f04f 0900 	mov.w	r9, #0
 80044fa:	4629      	mov	r1, r5
 80044fc:	2201      	movs	r2, #1
 80044fe:	4630      	mov	r0, r6
 8004500:	9302      	str	r3, [sp, #8]
 8004502:	f000 faf5 	bl	8004af0 <__lshift>
 8004506:	4621      	mov	r1, r4
 8004508:	4605      	mov	r5, r0
 800450a:	f000 fb5d 	bl	8004bc8 <__mcmp>
 800450e:	2800      	cmp	r0, #0
 8004510:	dcb1      	bgt.n	8004476 <_dtoa_r+0x9e6>
 8004512:	d102      	bne.n	800451a <_dtoa_r+0xa8a>
 8004514:	9b02      	ldr	r3, [sp, #8]
 8004516:	07db      	lsls	r3, r3, #31
 8004518:	d4ad      	bmi.n	8004476 <_dtoa_r+0x9e6>
 800451a:	4643      	mov	r3, r8
 800451c:	4698      	mov	r8, r3
 800451e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004522:	2a30      	cmp	r2, #48	; 0x30
 8004524:	d0fa      	beq.n	800451c <_dtoa_r+0xa8c>
 8004526:	e6f6      	b.n	8004316 <_dtoa_r+0x886>
 8004528:	9a00      	ldr	r2, [sp, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d1a4      	bne.n	8004478 <_dtoa_r+0x9e8>
 800452e:	f10b 0b01 	add.w	fp, fp, #1
 8004532:	2331      	movs	r3, #49	; 0x31
 8004534:	e778      	b.n	8004428 <_dtoa_r+0x998>
 8004536:	4b15      	ldr	r3, [pc, #84]	; (800458c <_dtoa_r+0xafc>)
 8004538:	f7ff bb12 	b.w	8003b60 <_dtoa_r+0xd0>
 800453c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800453e:	2b00      	cmp	r3, #0
 8004540:	f47f aaee 	bne.w	8003b20 <_dtoa_r+0x90>
 8004544:	4b12      	ldr	r3, [pc, #72]	; (8004590 <_dtoa_r+0xb00>)
 8004546:	f7ff bb0b 	b.w	8003b60 <_dtoa_r+0xd0>
 800454a:	f1ba 0f00 	cmp.w	sl, #0
 800454e:	dc03      	bgt.n	8004558 <_dtoa_r+0xac8>
 8004550:	9b07      	ldr	r3, [sp, #28]
 8004552:	2b02      	cmp	r3, #2
 8004554:	f73f aec7 	bgt.w	80042e6 <_dtoa_r+0x856>
 8004558:	f8dd 8000 	ldr.w	r8, [sp]
 800455c:	4621      	mov	r1, r4
 800455e:	4628      	mov	r0, r5
 8004560:	f7ff fa08 	bl	8003974 <quorem>
 8004564:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004568:	f808 3b01 	strb.w	r3, [r8], #1
 800456c:	9a00      	ldr	r2, [sp, #0]
 800456e:	eba8 0202 	sub.w	r2, r8, r2
 8004572:	4592      	cmp	sl, r2
 8004574:	ddb7      	ble.n	80044e6 <_dtoa_r+0xa56>
 8004576:	4629      	mov	r1, r5
 8004578:	2300      	movs	r3, #0
 800457a:	220a      	movs	r2, #10
 800457c:	4630      	mov	r0, r6
 800457e:	f000 f907 	bl	8004790 <__multadd>
 8004582:	4605      	mov	r5, r0
 8004584:	e7ea      	b.n	800455c <_dtoa_r+0xacc>
 8004586:	bf00      	nop
 8004588:	0800545f 	.word	0x0800545f
 800458c:	080053b8 	.word	0x080053b8
 8004590:	080053dc 	.word	0x080053dc

08004594 <_localeconv_r>:
 8004594:	4800      	ldr	r0, [pc, #0]	; (8004598 <_localeconv_r+0x4>)
 8004596:	4770      	bx	lr
 8004598:	20000160 	.word	0x20000160

0800459c <_lseek_r>:
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	4d07      	ldr	r5, [pc, #28]	; (80045bc <_lseek_r+0x20>)
 80045a0:	4604      	mov	r4, r0
 80045a2:	4608      	mov	r0, r1
 80045a4:	4611      	mov	r1, r2
 80045a6:	2200      	movs	r2, #0
 80045a8:	602a      	str	r2, [r5, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	f000 fe6a 	bl	8005284 <_lseek>
 80045b0:	1c43      	adds	r3, r0, #1
 80045b2:	d102      	bne.n	80045ba <_lseek_r+0x1e>
 80045b4:	682b      	ldr	r3, [r5, #0]
 80045b6:	b103      	cbz	r3, 80045ba <_lseek_r+0x1e>
 80045b8:	6023      	str	r3, [r4, #0]
 80045ba:	bd38      	pop	{r3, r4, r5, pc}
 80045bc:	20000390 	.word	0x20000390

080045c0 <__swhatbuf_r>:
 80045c0:	b570      	push	{r4, r5, r6, lr}
 80045c2:	460e      	mov	r6, r1
 80045c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045c8:	2900      	cmp	r1, #0
 80045ca:	b096      	sub	sp, #88	; 0x58
 80045cc:	4614      	mov	r4, r2
 80045ce:	461d      	mov	r5, r3
 80045d0:	da07      	bge.n	80045e2 <__swhatbuf_r+0x22>
 80045d2:	2300      	movs	r3, #0
 80045d4:	602b      	str	r3, [r5, #0]
 80045d6:	89b3      	ldrh	r3, [r6, #12]
 80045d8:	061a      	lsls	r2, r3, #24
 80045da:	d410      	bmi.n	80045fe <__swhatbuf_r+0x3e>
 80045dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045e0:	e00e      	b.n	8004600 <__swhatbuf_r+0x40>
 80045e2:	466a      	mov	r2, sp
 80045e4:	f000 fd9a 	bl	800511c <_fstat_r>
 80045e8:	2800      	cmp	r0, #0
 80045ea:	dbf2      	blt.n	80045d2 <__swhatbuf_r+0x12>
 80045ec:	9a01      	ldr	r2, [sp, #4]
 80045ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80045f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80045f6:	425a      	negs	r2, r3
 80045f8:	415a      	adcs	r2, r3
 80045fa:	602a      	str	r2, [r5, #0]
 80045fc:	e7ee      	b.n	80045dc <__swhatbuf_r+0x1c>
 80045fe:	2340      	movs	r3, #64	; 0x40
 8004600:	2000      	movs	r0, #0
 8004602:	6023      	str	r3, [r4, #0]
 8004604:	b016      	add	sp, #88	; 0x58
 8004606:	bd70      	pop	{r4, r5, r6, pc}

08004608 <__smakebuf_r>:
 8004608:	898b      	ldrh	r3, [r1, #12]
 800460a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800460c:	079d      	lsls	r5, r3, #30
 800460e:	4606      	mov	r6, r0
 8004610:	460c      	mov	r4, r1
 8004612:	d507      	bpl.n	8004624 <__smakebuf_r+0x1c>
 8004614:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004618:	6023      	str	r3, [r4, #0]
 800461a:	6123      	str	r3, [r4, #16]
 800461c:	2301      	movs	r3, #1
 800461e:	6163      	str	r3, [r4, #20]
 8004620:	b002      	add	sp, #8
 8004622:	bd70      	pop	{r4, r5, r6, pc}
 8004624:	ab01      	add	r3, sp, #4
 8004626:	466a      	mov	r2, sp
 8004628:	f7ff ffca 	bl	80045c0 <__swhatbuf_r>
 800462c:	9900      	ldr	r1, [sp, #0]
 800462e:	4605      	mov	r5, r0
 8004630:	4630      	mov	r0, r6
 8004632:	f7fe fb3f 	bl	8002cb4 <_malloc_r>
 8004636:	b948      	cbnz	r0, 800464c <__smakebuf_r+0x44>
 8004638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800463c:	059a      	lsls	r2, r3, #22
 800463e:	d4ef      	bmi.n	8004620 <__smakebuf_r+0x18>
 8004640:	f023 0303 	bic.w	r3, r3, #3
 8004644:	f043 0302 	orr.w	r3, r3, #2
 8004648:	81a3      	strh	r3, [r4, #12]
 800464a:	e7e3      	b.n	8004614 <__smakebuf_r+0xc>
 800464c:	4b0d      	ldr	r3, [pc, #52]	; (8004684 <__smakebuf_r+0x7c>)
 800464e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004650:	89a3      	ldrh	r3, [r4, #12]
 8004652:	6020      	str	r0, [r4, #0]
 8004654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004658:	81a3      	strh	r3, [r4, #12]
 800465a:	9b00      	ldr	r3, [sp, #0]
 800465c:	6163      	str	r3, [r4, #20]
 800465e:	9b01      	ldr	r3, [sp, #4]
 8004660:	6120      	str	r0, [r4, #16]
 8004662:	b15b      	cbz	r3, 800467c <__smakebuf_r+0x74>
 8004664:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004668:	4630      	mov	r0, r6
 800466a:	f000 fd69 	bl	8005140 <_isatty_r>
 800466e:	b128      	cbz	r0, 800467c <__smakebuf_r+0x74>
 8004670:	89a3      	ldrh	r3, [r4, #12]
 8004672:	f023 0303 	bic.w	r3, r3, #3
 8004676:	f043 0301 	orr.w	r3, r3, #1
 800467a:	81a3      	strh	r3, [r4, #12]
 800467c:	89a0      	ldrh	r0, [r4, #12]
 800467e:	4305      	orrs	r5, r0
 8004680:	81a5      	strh	r5, [r4, #12]
 8004682:	e7cd      	b.n	8004620 <__smakebuf_r+0x18>
 8004684:	08002a11 	.word	0x08002a11

08004688 <malloc>:
 8004688:	4b02      	ldr	r3, [pc, #8]	; (8004694 <malloc+0xc>)
 800468a:	4601      	mov	r1, r0
 800468c:	6818      	ldr	r0, [r3, #0]
 800468e:	f7fe bb11 	b.w	8002cb4 <_malloc_r>
 8004692:	bf00      	nop
 8004694:	2000000c 	.word	0x2000000c

08004698 <memcpy>:
 8004698:	440a      	add	r2, r1
 800469a:	4291      	cmp	r1, r2
 800469c:	f100 33ff 	add.w	r3, r0, #4294967295
 80046a0:	d100      	bne.n	80046a4 <memcpy+0xc>
 80046a2:	4770      	bx	lr
 80046a4:	b510      	push	{r4, lr}
 80046a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046ae:	4291      	cmp	r1, r2
 80046b0:	d1f9      	bne.n	80046a6 <memcpy+0xe>
 80046b2:	bd10      	pop	{r4, pc}

080046b4 <__malloc_lock>:
 80046b4:	4801      	ldr	r0, [pc, #4]	; (80046bc <__malloc_lock+0x8>)
 80046b6:	f7fe baa2 	b.w	8002bfe <__retarget_lock_acquire_recursive>
 80046ba:	bf00      	nop
 80046bc:	20000388 	.word	0x20000388

080046c0 <__malloc_unlock>:
 80046c0:	4801      	ldr	r0, [pc, #4]	; (80046c8 <__malloc_unlock+0x8>)
 80046c2:	f7fe ba9d 	b.w	8002c00 <__retarget_lock_release_recursive>
 80046c6:	bf00      	nop
 80046c8:	20000388 	.word	0x20000388

080046cc <_Balloc>:
 80046cc:	b570      	push	{r4, r5, r6, lr}
 80046ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80046d0:	4604      	mov	r4, r0
 80046d2:	460d      	mov	r5, r1
 80046d4:	b976      	cbnz	r6, 80046f4 <_Balloc+0x28>
 80046d6:	2010      	movs	r0, #16
 80046d8:	f7ff ffd6 	bl	8004688 <malloc>
 80046dc:	4602      	mov	r2, r0
 80046de:	6260      	str	r0, [r4, #36]	; 0x24
 80046e0:	b920      	cbnz	r0, 80046ec <_Balloc+0x20>
 80046e2:	4b18      	ldr	r3, [pc, #96]	; (8004744 <_Balloc+0x78>)
 80046e4:	4818      	ldr	r0, [pc, #96]	; (8004748 <_Balloc+0x7c>)
 80046e6:	2166      	movs	r1, #102	; 0x66
 80046e8:	f000 fce8 	bl	80050bc <__assert_func>
 80046ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80046f0:	6006      	str	r6, [r0, #0]
 80046f2:	60c6      	str	r6, [r0, #12]
 80046f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80046f6:	68f3      	ldr	r3, [r6, #12]
 80046f8:	b183      	cbz	r3, 800471c <_Balloc+0x50>
 80046fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004702:	b9b8      	cbnz	r0, 8004734 <_Balloc+0x68>
 8004704:	2101      	movs	r1, #1
 8004706:	fa01 f605 	lsl.w	r6, r1, r5
 800470a:	1d72      	adds	r2, r6, #5
 800470c:	0092      	lsls	r2, r2, #2
 800470e:	4620      	mov	r0, r4
 8004710:	f000 fb5a 	bl	8004dc8 <_calloc_r>
 8004714:	b160      	cbz	r0, 8004730 <_Balloc+0x64>
 8004716:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800471a:	e00e      	b.n	800473a <_Balloc+0x6e>
 800471c:	2221      	movs	r2, #33	; 0x21
 800471e:	2104      	movs	r1, #4
 8004720:	4620      	mov	r0, r4
 8004722:	f000 fb51 	bl	8004dc8 <_calloc_r>
 8004726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004728:	60f0      	str	r0, [r6, #12]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1e4      	bne.n	80046fa <_Balloc+0x2e>
 8004730:	2000      	movs	r0, #0
 8004732:	bd70      	pop	{r4, r5, r6, pc}
 8004734:	6802      	ldr	r2, [r0, #0]
 8004736:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800473a:	2300      	movs	r3, #0
 800473c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004740:	e7f7      	b.n	8004732 <_Balloc+0x66>
 8004742:	bf00      	nop
 8004744:	080053e9 	.word	0x080053e9
 8004748:	08005470 	.word	0x08005470

0800474c <_Bfree>:
 800474c:	b570      	push	{r4, r5, r6, lr}
 800474e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004750:	4605      	mov	r5, r0
 8004752:	460c      	mov	r4, r1
 8004754:	b976      	cbnz	r6, 8004774 <_Bfree+0x28>
 8004756:	2010      	movs	r0, #16
 8004758:	f7ff ff96 	bl	8004688 <malloc>
 800475c:	4602      	mov	r2, r0
 800475e:	6268      	str	r0, [r5, #36]	; 0x24
 8004760:	b920      	cbnz	r0, 800476c <_Bfree+0x20>
 8004762:	4b09      	ldr	r3, [pc, #36]	; (8004788 <_Bfree+0x3c>)
 8004764:	4809      	ldr	r0, [pc, #36]	; (800478c <_Bfree+0x40>)
 8004766:	218a      	movs	r1, #138	; 0x8a
 8004768:	f000 fca8 	bl	80050bc <__assert_func>
 800476c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004770:	6006      	str	r6, [r0, #0]
 8004772:	60c6      	str	r6, [r0, #12]
 8004774:	b13c      	cbz	r4, 8004786 <_Bfree+0x3a>
 8004776:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004778:	6862      	ldr	r2, [r4, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004780:	6021      	str	r1, [r4, #0]
 8004782:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004786:	bd70      	pop	{r4, r5, r6, pc}
 8004788:	080053e9 	.word	0x080053e9
 800478c:	08005470 	.word	0x08005470

08004790 <__multadd>:
 8004790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004794:	690e      	ldr	r6, [r1, #16]
 8004796:	4607      	mov	r7, r0
 8004798:	4698      	mov	r8, r3
 800479a:	460c      	mov	r4, r1
 800479c:	f101 0014 	add.w	r0, r1, #20
 80047a0:	2300      	movs	r3, #0
 80047a2:	6805      	ldr	r5, [r0, #0]
 80047a4:	b2a9      	uxth	r1, r5
 80047a6:	fb02 8101 	mla	r1, r2, r1, r8
 80047aa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80047ae:	0c2d      	lsrs	r5, r5, #16
 80047b0:	fb02 c505 	mla	r5, r2, r5, ip
 80047b4:	b289      	uxth	r1, r1
 80047b6:	3301      	adds	r3, #1
 80047b8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80047bc:	429e      	cmp	r6, r3
 80047be:	f840 1b04 	str.w	r1, [r0], #4
 80047c2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80047c6:	dcec      	bgt.n	80047a2 <__multadd+0x12>
 80047c8:	f1b8 0f00 	cmp.w	r8, #0
 80047cc:	d022      	beq.n	8004814 <__multadd+0x84>
 80047ce:	68a3      	ldr	r3, [r4, #8]
 80047d0:	42b3      	cmp	r3, r6
 80047d2:	dc19      	bgt.n	8004808 <__multadd+0x78>
 80047d4:	6861      	ldr	r1, [r4, #4]
 80047d6:	4638      	mov	r0, r7
 80047d8:	3101      	adds	r1, #1
 80047da:	f7ff ff77 	bl	80046cc <_Balloc>
 80047de:	4605      	mov	r5, r0
 80047e0:	b928      	cbnz	r0, 80047ee <__multadd+0x5e>
 80047e2:	4602      	mov	r2, r0
 80047e4:	4b0d      	ldr	r3, [pc, #52]	; (800481c <__multadd+0x8c>)
 80047e6:	480e      	ldr	r0, [pc, #56]	; (8004820 <__multadd+0x90>)
 80047e8:	21b5      	movs	r1, #181	; 0xb5
 80047ea:	f000 fc67 	bl	80050bc <__assert_func>
 80047ee:	6922      	ldr	r2, [r4, #16]
 80047f0:	3202      	adds	r2, #2
 80047f2:	f104 010c 	add.w	r1, r4, #12
 80047f6:	0092      	lsls	r2, r2, #2
 80047f8:	300c      	adds	r0, #12
 80047fa:	f7ff ff4d 	bl	8004698 <memcpy>
 80047fe:	4621      	mov	r1, r4
 8004800:	4638      	mov	r0, r7
 8004802:	f7ff ffa3 	bl	800474c <_Bfree>
 8004806:	462c      	mov	r4, r5
 8004808:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800480c:	3601      	adds	r6, #1
 800480e:	f8c3 8014 	str.w	r8, [r3, #20]
 8004812:	6126      	str	r6, [r4, #16]
 8004814:	4620      	mov	r0, r4
 8004816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800481a:	bf00      	nop
 800481c:	0800545f 	.word	0x0800545f
 8004820:	08005470 	.word	0x08005470

08004824 <__hi0bits>:
 8004824:	0c03      	lsrs	r3, r0, #16
 8004826:	041b      	lsls	r3, r3, #16
 8004828:	b9d3      	cbnz	r3, 8004860 <__hi0bits+0x3c>
 800482a:	0400      	lsls	r0, r0, #16
 800482c:	2310      	movs	r3, #16
 800482e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004832:	bf04      	itt	eq
 8004834:	0200      	lsleq	r0, r0, #8
 8004836:	3308      	addeq	r3, #8
 8004838:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800483c:	bf04      	itt	eq
 800483e:	0100      	lsleq	r0, r0, #4
 8004840:	3304      	addeq	r3, #4
 8004842:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004846:	bf04      	itt	eq
 8004848:	0080      	lsleq	r0, r0, #2
 800484a:	3302      	addeq	r3, #2
 800484c:	2800      	cmp	r0, #0
 800484e:	db05      	blt.n	800485c <__hi0bits+0x38>
 8004850:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004854:	f103 0301 	add.w	r3, r3, #1
 8004858:	bf08      	it	eq
 800485a:	2320      	moveq	r3, #32
 800485c:	4618      	mov	r0, r3
 800485e:	4770      	bx	lr
 8004860:	2300      	movs	r3, #0
 8004862:	e7e4      	b.n	800482e <__hi0bits+0xa>

08004864 <__lo0bits>:
 8004864:	6803      	ldr	r3, [r0, #0]
 8004866:	f013 0207 	ands.w	r2, r3, #7
 800486a:	4601      	mov	r1, r0
 800486c:	d00b      	beq.n	8004886 <__lo0bits+0x22>
 800486e:	07da      	lsls	r2, r3, #31
 8004870:	d424      	bmi.n	80048bc <__lo0bits+0x58>
 8004872:	0798      	lsls	r0, r3, #30
 8004874:	bf49      	itett	mi
 8004876:	085b      	lsrmi	r3, r3, #1
 8004878:	089b      	lsrpl	r3, r3, #2
 800487a:	2001      	movmi	r0, #1
 800487c:	600b      	strmi	r3, [r1, #0]
 800487e:	bf5c      	itt	pl
 8004880:	600b      	strpl	r3, [r1, #0]
 8004882:	2002      	movpl	r0, #2
 8004884:	4770      	bx	lr
 8004886:	b298      	uxth	r0, r3
 8004888:	b9b0      	cbnz	r0, 80048b8 <__lo0bits+0x54>
 800488a:	0c1b      	lsrs	r3, r3, #16
 800488c:	2010      	movs	r0, #16
 800488e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004892:	bf04      	itt	eq
 8004894:	0a1b      	lsreq	r3, r3, #8
 8004896:	3008      	addeq	r0, #8
 8004898:	071a      	lsls	r2, r3, #28
 800489a:	bf04      	itt	eq
 800489c:	091b      	lsreq	r3, r3, #4
 800489e:	3004      	addeq	r0, #4
 80048a0:	079a      	lsls	r2, r3, #30
 80048a2:	bf04      	itt	eq
 80048a4:	089b      	lsreq	r3, r3, #2
 80048a6:	3002      	addeq	r0, #2
 80048a8:	07da      	lsls	r2, r3, #31
 80048aa:	d403      	bmi.n	80048b4 <__lo0bits+0x50>
 80048ac:	085b      	lsrs	r3, r3, #1
 80048ae:	f100 0001 	add.w	r0, r0, #1
 80048b2:	d005      	beq.n	80048c0 <__lo0bits+0x5c>
 80048b4:	600b      	str	r3, [r1, #0]
 80048b6:	4770      	bx	lr
 80048b8:	4610      	mov	r0, r2
 80048ba:	e7e8      	b.n	800488e <__lo0bits+0x2a>
 80048bc:	2000      	movs	r0, #0
 80048be:	4770      	bx	lr
 80048c0:	2020      	movs	r0, #32
 80048c2:	4770      	bx	lr

080048c4 <__i2b>:
 80048c4:	b510      	push	{r4, lr}
 80048c6:	460c      	mov	r4, r1
 80048c8:	2101      	movs	r1, #1
 80048ca:	f7ff feff 	bl	80046cc <_Balloc>
 80048ce:	4602      	mov	r2, r0
 80048d0:	b928      	cbnz	r0, 80048de <__i2b+0x1a>
 80048d2:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <__i2b+0x24>)
 80048d4:	4805      	ldr	r0, [pc, #20]	; (80048ec <__i2b+0x28>)
 80048d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80048da:	f000 fbef 	bl	80050bc <__assert_func>
 80048de:	2301      	movs	r3, #1
 80048e0:	6144      	str	r4, [r0, #20]
 80048e2:	6103      	str	r3, [r0, #16]
 80048e4:	bd10      	pop	{r4, pc}
 80048e6:	bf00      	nop
 80048e8:	0800545f 	.word	0x0800545f
 80048ec:	08005470 	.word	0x08005470

080048f0 <__multiply>:
 80048f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048f4:	4614      	mov	r4, r2
 80048f6:	690a      	ldr	r2, [r1, #16]
 80048f8:	6923      	ldr	r3, [r4, #16]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	bfb8      	it	lt
 80048fe:	460b      	movlt	r3, r1
 8004900:	460d      	mov	r5, r1
 8004902:	bfbc      	itt	lt
 8004904:	4625      	movlt	r5, r4
 8004906:	461c      	movlt	r4, r3
 8004908:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800490c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004910:	68ab      	ldr	r3, [r5, #8]
 8004912:	6869      	ldr	r1, [r5, #4]
 8004914:	eb0a 0709 	add.w	r7, sl, r9
 8004918:	42bb      	cmp	r3, r7
 800491a:	b085      	sub	sp, #20
 800491c:	bfb8      	it	lt
 800491e:	3101      	addlt	r1, #1
 8004920:	f7ff fed4 	bl	80046cc <_Balloc>
 8004924:	b930      	cbnz	r0, 8004934 <__multiply+0x44>
 8004926:	4602      	mov	r2, r0
 8004928:	4b42      	ldr	r3, [pc, #264]	; (8004a34 <__multiply+0x144>)
 800492a:	4843      	ldr	r0, [pc, #268]	; (8004a38 <__multiply+0x148>)
 800492c:	f240 115d 	movw	r1, #349	; 0x15d
 8004930:	f000 fbc4 	bl	80050bc <__assert_func>
 8004934:	f100 0614 	add.w	r6, r0, #20
 8004938:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800493c:	4633      	mov	r3, r6
 800493e:	2200      	movs	r2, #0
 8004940:	4543      	cmp	r3, r8
 8004942:	d31e      	bcc.n	8004982 <__multiply+0x92>
 8004944:	f105 0c14 	add.w	ip, r5, #20
 8004948:	f104 0314 	add.w	r3, r4, #20
 800494c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004950:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004954:	9202      	str	r2, [sp, #8]
 8004956:	ebac 0205 	sub.w	r2, ip, r5
 800495a:	3a15      	subs	r2, #21
 800495c:	f022 0203 	bic.w	r2, r2, #3
 8004960:	3204      	adds	r2, #4
 8004962:	f105 0115 	add.w	r1, r5, #21
 8004966:	458c      	cmp	ip, r1
 8004968:	bf38      	it	cc
 800496a:	2204      	movcc	r2, #4
 800496c:	9201      	str	r2, [sp, #4]
 800496e:	9a02      	ldr	r2, [sp, #8]
 8004970:	9303      	str	r3, [sp, #12]
 8004972:	429a      	cmp	r2, r3
 8004974:	d808      	bhi.n	8004988 <__multiply+0x98>
 8004976:	2f00      	cmp	r7, #0
 8004978:	dc55      	bgt.n	8004a26 <__multiply+0x136>
 800497a:	6107      	str	r7, [r0, #16]
 800497c:	b005      	add	sp, #20
 800497e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004982:	f843 2b04 	str.w	r2, [r3], #4
 8004986:	e7db      	b.n	8004940 <__multiply+0x50>
 8004988:	f8b3 a000 	ldrh.w	sl, [r3]
 800498c:	f1ba 0f00 	cmp.w	sl, #0
 8004990:	d020      	beq.n	80049d4 <__multiply+0xe4>
 8004992:	f105 0e14 	add.w	lr, r5, #20
 8004996:	46b1      	mov	r9, r6
 8004998:	2200      	movs	r2, #0
 800499a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800499e:	f8d9 b000 	ldr.w	fp, [r9]
 80049a2:	b2a1      	uxth	r1, r4
 80049a4:	fa1f fb8b 	uxth.w	fp, fp
 80049a8:	fb0a b101 	mla	r1, sl, r1, fp
 80049ac:	4411      	add	r1, r2
 80049ae:	f8d9 2000 	ldr.w	r2, [r9]
 80049b2:	0c24      	lsrs	r4, r4, #16
 80049b4:	0c12      	lsrs	r2, r2, #16
 80049b6:	fb0a 2404 	mla	r4, sl, r4, r2
 80049ba:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80049be:	b289      	uxth	r1, r1
 80049c0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80049c4:	45f4      	cmp	ip, lr
 80049c6:	f849 1b04 	str.w	r1, [r9], #4
 80049ca:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80049ce:	d8e4      	bhi.n	800499a <__multiply+0xaa>
 80049d0:	9901      	ldr	r1, [sp, #4]
 80049d2:	5072      	str	r2, [r6, r1]
 80049d4:	9a03      	ldr	r2, [sp, #12]
 80049d6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80049da:	3304      	adds	r3, #4
 80049dc:	f1b9 0f00 	cmp.w	r9, #0
 80049e0:	d01f      	beq.n	8004a22 <__multiply+0x132>
 80049e2:	6834      	ldr	r4, [r6, #0]
 80049e4:	f105 0114 	add.w	r1, r5, #20
 80049e8:	46b6      	mov	lr, r6
 80049ea:	f04f 0a00 	mov.w	sl, #0
 80049ee:	880a      	ldrh	r2, [r1, #0]
 80049f0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80049f4:	fb09 b202 	mla	r2, r9, r2, fp
 80049f8:	4492      	add	sl, r2
 80049fa:	b2a4      	uxth	r4, r4
 80049fc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004a00:	f84e 4b04 	str.w	r4, [lr], #4
 8004a04:	f851 4b04 	ldr.w	r4, [r1], #4
 8004a08:	f8be 2000 	ldrh.w	r2, [lr]
 8004a0c:	0c24      	lsrs	r4, r4, #16
 8004a0e:	fb09 2404 	mla	r4, r9, r4, r2
 8004a12:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004a16:	458c      	cmp	ip, r1
 8004a18:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004a1c:	d8e7      	bhi.n	80049ee <__multiply+0xfe>
 8004a1e:	9a01      	ldr	r2, [sp, #4]
 8004a20:	50b4      	str	r4, [r6, r2]
 8004a22:	3604      	adds	r6, #4
 8004a24:	e7a3      	b.n	800496e <__multiply+0x7e>
 8004a26:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1a5      	bne.n	800497a <__multiply+0x8a>
 8004a2e:	3f01      	subs	r7, #1
 8004a30:	e7a1      	b.n	8004976 <__multiply+0x86>
 8004a32:	bf00      	nop
 8004a34:	0800545f 	.word	0x0800545f
 8004a38:	08005470 	.word	0x08005470

08004a3c <__pow5mult>:
 8004a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a40:	4615      	mov	r5, r2
 8004a42:	f012 0203 	ands.w	r2, r2, #3
 8004a46:	4606      	mov	r6, r0
 8004a48:	460f      	mov	r7, r1
 8004a4a:	d007      	beq.n	8004a5c <__pow5mult+0x20>
 8004a4c:	4c25      	ldr	r4, [pc, #148]	; (8004ae4 <__pow5mult+0xa8>)
 8004a4e:	3a01      	subs	r2, #1
 8004a50:	2300      	movs	r3, #0
 8004a52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004a56:	f7ff fe9b 	bl	8004790 <__multadd>
 8004a5a:	4607      	mov	r7, r0
 8004a5c:	10ad      	asrs	r5, r5, #2
 8004a5e:	d03d      	beq.n	8004adc <__pow5mult+0xa0>
 8004a60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004a62:	b97c      	cbnz	r4, 8004a84 <__pow5mult+0x48>
 8004a64:	2010      	movs	r0, #16
 8004a66:	f7ff fe0f 	bl	8004688 <malloc>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	6270      	str	r0, [r6, #36]	; 0x24
 8004a6e:	b928      	cbnz	r0, 8004a7c <__pow5mult+0x40>
 8004a70:	4b1d      	ldr	r3, [pc, #116]	; (8004ae8 <__pow5mult+0xac>)
 8004a72:	481e      	ldr	r0, [pc, #120]	; (8004aec <__pow5mult+0xb0>)
 8004a74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004a78:	f000 fb20 	bl	80050bc <__assert_func>
 8004a7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004a80:	6004      	str	r4, [r0, #0]
 8004a82:	60c4      	str	r4, [r0, #12]
 8004a84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004a88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004a8c:	b94c      	cbnz	r4, 8004aa2 <__pow5mult+0x66>
 8004a8e:	f240 2171 	movw	r1, #625	; 0x271
 8004a92:	4630      	mov	r0, r6
 8004a94:	f7ff ff16 	bl	80048c4 <__i2b>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	6003      	str	r3, [r0, #0]
 8004aa2:	f04f 0900 	mov.w	r9, #0
 8004aa6:	07eb      	lsls	r3, r5, #31
 8004aa8:	d50a      	bpl.n	8004ac0 <__pow5mult+0x84>
 8004aaa:	4639      	mov	r1, r7
 8004aac:	4622      	mov	r2, r4
 8004aae:	4630      	mov	r0, r6
 8004ab0:	f7ff ff1e 	bl	80048f0 <__multiply>
 8004ab4:	4639      	mov	r1, r7
 8004ab6:	4680      	mov	r8, r0
 8004ab8:	4630      	mov	r0, r6
 8004aba:	f7ff fe47 	bl	800474c <_Bfree>
 8004abe:	4647      	mov	r7, r8
 8004ac0:	106d      	asrs	r5, r5, #1
 8004ac2:	d00b      	beq.n	8004adc <__pow5mult+0xa0>
 8004ac4:	6820      	ldr	r0, [r4, #0]
 8004ac6:	b938      	cbnz	r0, 8004ad8 <__pow5mult+0x9c>
 8004ac8:	4622      	mov	r2, r4
 8004aca:	4621      	mov	r1, r4
 8004acc:	4630      	mov	r0, r6
 8004ace:	f7ff ff0f 	bl	80048f0 <__multiply>
 8004ad2:	6020      	str	r0, [r4, #0]
 8004ad4:	f8c0 9000 	str.w	r9, [r0]
 8004ad8:	4604      	mov	r4, r0
 8004ada:	e7e4      	b.n	8004aa6 <__pow5mult+0x6a>
 8004adc:	4638      	mov	r0, r7
 8004ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ae2:	bf00      	nop
 8004ae4:	080055c0 	.word	0x080055c0
 8004ae8:	080053e9 	.word	0x080053e9
 8004aec:	08005470 	.word	0x08005470

08004af0 <__lshift>:
 8004af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004af4:	460c      	mov	r4, r1
 8004af6:	6849      	ldr	r1, [r1, #4]
 8004af8:	6923      	ldr	r3, [r4, #16]
 8004afa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004afe:	68a3      	ldr	r3, [r4, #8]
 8004b00:	4607      	mov	r7, r0
 8004b02:	4691      	mov	r9, r2
 8004b04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004b08:	f108 0601 	add.w	r6, r8, #1
 8004b0c:	42b3      	cmp	r3, r6
 8004b0e:	db0b      	blt.n	8004b28 <__lshift+0x38>
 8004b10:	4638      	mov	r0, r7
 8004b12:	f7ff fddb 	bl	80046cc <_Balloc>
 8004b16:	4605      	mov	r5, r0
 8004b18:	b948      	cbnz	r0, 8004b2e <__lshift+0x3e>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	4b28      	ldr	r3, [pc, #160]	; (8004bc0 <__lshift+0xd0>)
 8004b1e:	4829      	ldr	r0, [pc, #164]	; (8004bc4 <__lshift+0xd4>)
 8004b20:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004b24:	f000 faca 	bl	80050bc <__assert_func>
 8004b28:	3101      	adds	r1, #1
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	e7ee      	b.n	8004b0c <__lshift+0x1c>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f100 0114 	add.w	r1, r0, #20
 8004b34:	f100 0210 	add.w	r2, r0, #16
 8004b38:	4618      	mov	r0, r3
 8004b3a:	4553      	cmp	r3, sl
 8004b3c:	db33      	blt.n	8004ba6 <__lshift+0xb6>
 8004b3e:	6920      	ldr	r0, [r4, #16]
 8004b40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004b44:	f104 0314 	add.w	r3, r4, #20
 8004b48:	f019 091f 	ands.w	r9, r9, #31
 8004b4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004b50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004b54:	d02b      	beq.n	8004bae <__lshift+0xbe>
 8004b56:	f1c9 0e20 	rsb	lr, r9, #32
 8004b5a:	468a      	mov	sl, r1
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	6818      	ldr	r0, [r3, #0]
 8004b60:	fa00 f009 	lsl.w	r0, r0, r9
 8004b64:	4302      	orrs	r2, r0
 8004b66:	f84a 2b04 	str.w	r2, [sl], #4
 8004b6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b6e:	459c      	cmp	ip, r3
 8004b70:	fa22 f20e 	lsr.w	r2, r2, lr
 8004b74:	d8f3      	bhi.n	8004b5e <__lshift+0x6e>
 8004b76:	ebac 0304 	sub.w	r3, ip, r4
 8004b7a:	3b15      	subs	r3, #21
 8004b7c:	f023 0303 	bic.w	r3, r3, #3
 8004b80:	3304      	adds	r3, #4
 8004b82:	f104 0015 	add.w	r0, r4, #21
 8004b86:	4584      	cmp	ip, r0
 8004b88:	bf38      	it	cc
 8004b8a:	2304      	movcc	r3, #4
 8004b8c:	50ca      	str	r2, [r1, r3]
 8004b8e:	b10a      	cbz	r2, 8004b94 <__lshift+0xa4>
 8004b90:	f108 0602 	add.w	r6, r8, #2
 8004b94:	3e01      	subs	r6, #1
 8004b96:	4638      	mov	r0, r7
 8004b98:	612e      	str	r6, [r5, #16]
 8004b9a:	4621      	mov	r1, r4
 8004b9c:	f7ff fdd6 	bl	800474c <_Bfree>
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba6:	f842 0f04 	str.w	r0, [r2, #4]!
 8004baa:	3301      	adds	r3, #1
 8004bac:	e7c5      	b.n	8004b3a <__lshift+0x4a>
 8004bae:	3904      	subs	r1, #4
 8004bb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bb4:	f841 2f04 	str.w	r2, [r1, #4]!
 8004bb8:	459c      	cmp	ip, r3
 8004bba:	d8f9      	bhi.n	8004bb0 <__lshift+0xc0>
 8004bbc:	e7ea      	b.n	8004b94 <__lshift+0xa4>
 8004bbe:	bf00      	nop
 8004bc0:	0800545f 	.word	0x0800545f
 8004bc4:	08005470 	.word	0x08005470

08004bc8 <__mcmp>:
 8004bc8:	b530      	push	{r4, r5, lr}
 8004bca:	6902      	ldr	r2, [r0, #16]
 8004bcc:	690c      	ldr	r4, [r1, #16]
 8004bce:	1b12      	subs	r2, r2, r4
 8004bd0:	d10e      	bne.n	8004bf0 <__mcmp+0x28>
 8004bd2:	f100 0314 	add.w	r3, r0, #20
 8004bd6:	3114      	adds	r1, #20
 8004bd8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004bdc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004be0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004be4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004be8:	42a5      	cmp	r5, r4
 8004bea:	d003      	beq.n	8004bf4 <__mcmp+0x2c>
 8004bec:	d305      	bcc.n	8004bfa <__mcmp+0x32>
 8004bee:	2201      	movs	r2, #1
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	bd30      	pop	{r4, r5, pc}
 8004bf4:	4283      	cmp	r3, r0
 8004bf6:	d3f3      	bcc.n	8004be0 <__mcmp+0x18>
 8004bf8:	e7fa      	b.n	8004bf0 <__mcmp+0x28>
 8004bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8004bfe:	e7f7      	b.n	8004bf0 <__mcmp+0x28>

08004c00 <__mdiff>:
 8004c00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c04:	460c      	mov	r4, r1
 8004c06:	4606      	mov	r6, r0
 8004c08:	4611      	mov	r1, r2
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	4617      	mov	r7, r2
 8004c0e:	f7ff ffdb 	bl	8004bc8 <__mcmp>
 8004c12:	1e05      	subs	r5, r0, #0
 8004c14:	d110      	bne.n	8004c38 <__mdiff+0x38>
 8004c16:	4629      	mov	r1, r5
 8004c18:	4630      	mov	r0, r6
 8004c1a:	f7ff fd57 	bl	80046cc <_Balloc>
 8004c1e:	b930      	cbnz	r0, 8004c2e <__mdiff+0x2e>
 8004c20:	4b39      	ldr	r3, [pc, #228]	; (8004d08 <__mdiff+0x108>)
 8004c22:	4602      	mov	r2, r0
 8004c24:	f240 2132 	movw	r1, #562	; 0x232
 8004c28:	4838      	ldr	r0, [pc, #224]	; (8004d0c <__mdiff+0x10c>)
 8004c2a:	f000 fa47 	bl	80050bc <__assert_func>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004c34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c38:	bfa4      	itt	ge
 8004c3a:	463b      	movge	r3, r7
 8004c3c:	4627      	movge	r7, r4
 8004c3e:	4630      	mov	r0, r6
 8004c40:	6879      	ldr	r1, [r7, #4]
 8004c42:	bfa6      	itte	ge
 8004c44:	461c      	movge	r4, r3
 8004c46:	2500      	movge	r5, #0
 8004c48:	2501      	movlt	r5, #1
 8004c4a:	f7ff fd3f 	bl	80046cc <_Balloc>
 8004c4e:	b920      	cbnz	r0, 8004c5a <__mdiff+0x5a>
 8004c50:	4b2d      	ldr	r3, [pc, #180]	; (8004d08 <__mdiff+0x108>)
 8004c52:	4602      	mov	r2, r0
 8004c54:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004c58:	e7e6      	b.n	8004c28 <__mdiff+0x28>
 8004c5a:	693e      	ldr	r6, [r7, #16]
 8004c5c:	60c5      	str	r5, [r0, #12]
 8004c5e:	6925      	ldr	r5, [r4, #16]
 8004c60:	f107 0114 	add.w	r1, r7, #20
 8004c64:	f104 0914 	add.w	r9, r4, #20
 8004c68:	f100 0e14 	add.w	lr, r0, #20
 8004c6c:	f107 0210 	add.w	r2, r7, #16
 8004c70:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8004c74:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8004c78:	46f2      	mov	sl, lr
 8004c7a:	2700      	movs	r7, #0
 8004c7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004c80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004c84:	fa1f f883 	uxth.w	r8, r3
 8004c88:	fa17 f78b 	uxtah	r7, r7, fp
 8004c8c:	0c1b      	lsrs	r3, r3, #16
 8004c8e:	eba7 0808 	sub.w	r8, r7, r8
 8004c92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004c96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004c9a:	fa1f f888 	uxth.w	r8, r8
 8004c9e:	141f      	asrs	r7, r3, #16
 8004ca0:	454d      	cmp	r5, r9
 8004ca2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004ca6:	f84a 3b04 	str.w	r3, [sl], #4
 8004caa:	d8e7      	bhi.n	8004c7c <__mdiff+0x7c>
 8004cac:	1b2b      	subs	r3, r5, r4
 8004cae:	3b15      	subs	r3, #21
 8004cb0:	f023 0303 	bic.w	r3, r3, #3
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	3415      	adds	r4, #21
 8004cb8:	42a5      	cmp	r5, r4
 8004cba:	bf38      	it	cc
 8004cbc:	2304      	movcc	r3, #4
 8004cbe:	4419      	add	r1, r3
 8004cc0:	4473      	add	r3, lr
 8004cc2:	469e      	mov	lr, r3
 8004cc4:	460d      	mov	r5, r1
 8004cc6:	4565      	cmp	r5, ip
 8004cc8:	d30e      	bcc.n	8004ce8 <__mdiff+0xe8>
 8004cca:	f10c 0203 	add.w	r2, ip, #3
 8004cce:	1a52      	subs	r2, r2, r1
 8004cd0:	f022 0203 	bic.w	r2, r2, #3
 8004cd4:	3903      	subs	r1, #3
 8004cd6:	458c      	cmp	ip, r1
 8004cd8:	bf38      	it	cc
 8004cda:	2200      	movcc	r2, #0
 8004cdc:	441a      	add	r2, r3
 8004cde:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004ce2:	b17b      	cbz	r3, 8004d04 <__mdiff+0x104>
 8004ce4:	6106      	str	r6, [r0, #16]
 8004ce6:	e7a5      	b.n	8004c34 <__mdiff+0x34>
 8004ce8:	f855 8b04 	ldr.w	r8, [r5], #4
 8004cec:	fa17 f488 	uxtah	r4, r7, r8
 8004cf0:	1422      	asrs	r2, r4, #16
 8004cf2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8004cf6:	b2a4      	uxth	r4, r4
 8004cf8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004cfc:	f84e 4b04 	str.w	r4, [lr], #4
 8004d00:	1417      	asrs	r7, r2, #16
 8004d02:	e7e0      	b.n	8004cc6 <__mdiff+0xc6>
 8004d04:	3e01      	subs	r6, #1
 8004d06:	e7ea      	b.n	8004cde <__mdiff+0xde>
 8004d08:	0800545f 	.word	0x0800545f
 8004d0c:	08005470 	.word	0x08005470

08004d10 <__d2b>:
 8004d10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004d14:	4689      	mov	r9, r1
 8004d16:	2101      	movs	r1, #1
 8004d18:	ec57 6b10 	vmov	r6, r7, d0
 8004d1c:	4690      	mov	r8, r2
 8004d1e:	f7ff fcd5 	bl	80046cc <_Balloc>
 8004d22:	4604      	mov	r4, r0
 8004d24:	b930      	cbnz	r0, 8004d34 <__d2b+0x24>
 8004d26:	4602      	mov	r2, r0
 8004d28:	4b25      	ldr	r3, [pc, #148]	; (8004dc0 <__d2b+0xb0>)
 8004d2a:	4826      	ldr	r0, [pc, #152]	; (8004dc4 <__d2b+0xb4>)
 8004d2c:	f240 310a 	movw	r1, #778	; 0x30a
 8004d30:	f000 f9c4 	bl	80050bc <__assert_func>
 8004d34:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004d38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004d3c:	bb35      	cbnz	r5, 8004d8c <__d2b+0x7c>
 8004d3e:	2e00      	cmp	r6, #0
 8004d40:	9301      	str	r3, [sp, #4]
 8004d42:	d028      	beq.n	8004d96 <__d2b+0x86>
 8004d44:	4668      	mov	r0, sp
 8004d46:	9600      	str	r6, [sp, #0]
 8004d48:	f7ff fd8c 	bl	8004864 <__lo0bits>
 8004d4c:	9900      	ldr	r1, [sp, #0]
 8004d4e:	b300      	cbz	r0, 8004d92 <__d2b+0x82>
 8004d50:	9a01      	ldr	r2, [sp, #4]
 8004d52:	f1c0 0320 	rsb	r3, r0, #32
 8004d56:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5a:	430b      	orrs	r3, r1
 8004d5c:	40c2      	lsrs	r2, r0
 8004d5e:	6163      	str	r3, [r4, #20]
 8004d60:	9201      	str	r2, [sp, #4]
 8004d62:	9b01      	ldr	r3, [sp, #4]
 8004d64:	61a3      	str	r3, [r4, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	bf14      	ite	ne
 8004d6a:	2202      	movne	r2, #2
 8004d6c:	2201      	moveq	r2, #1
 8004d6e:	6122      	str	r2, [r4, #16]
 8004d70:	b1d5      	cbz	r5, 8004da8 <__d2b+0x98>
 8004d72:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004d76:	4405      	add	r5, r0
 8004d78:	f8c9 5000 	str.w	r5, [r9]
 8004d7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004d80:	f8c8 0000 	str.w	r0, [r8]
 8004d84:	4620      	mov	r0, r4
 8004d86:	b003      	add	sp, #12
 8004d88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d90:	e7d5      	b.n	8004d3e <__d2b+0x2e>
 8004d92:	6161      	str	r1, [r4, #20]
 8004d94:	e7e5      	b.n	8004d62 <__d2b+0x52>
 8004d96:	a801      	add	r0, sp, #4
 8004d98:	f7ff fd64 	bl	8004864 <__lo0bits>
 8004d9c:	9b01      	ldr	r3, [sp, #4]
 8004d9e:	6163      	str	r3, [r4, #20]
 8004da0:	2201      	movs	r2, #1
 8004da2:	6122      	str	r2, [r4, #16]
 8004da4:	3020      	adds	r0, #32
 8004da6:	e7e3      	b.n	8004d70 <__d2b+0x60>
 8004da8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004dac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004db0:	f8c9 0000 	str.w	r0, [r9]
 8004db4:	6918      	ldr	r0, [r3, #16]
 8004db6:	f7ff fd35 	bl	8004824 <__hi0bits>
 8004dba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004dbe:	e7df      	b.n	8004d80 <__d2b+0x70>
 8004dc0:	0800545f 	.word	0x0800545f
 8004dc4:	08005470 	.word	0x08005470

08004dc8 <_calloc_r>:
 8004dc8:	b513      	push	{r0, r1, r4, lr}
 8004dca:	434a      	muls	r2, r1
 8004dcc:	4611      	mov	r1, r2
 8004dce:	9201      	str	r2, [sp, #4]
 8004dd0:	f7fd ff70 	bl	8002cb4 <_malloc_r>
 8004dd4:	4604      	mov	r4, r0
 8004dd6:	b118      	cbz	r0, 8004de0 <_calloc_r+0x18>
 8004dd8:	9a01      	ldr	r2, [sp, #4]
 8004dda:	2100      	movs	r1, #0
 8004ddc:	f7fd ff11 	bl	8002c02 <memset>
 8004de0:	4620      	mov	r0, r4
 8004de2:	b002      	add	sp, #8
 8004de4:	bd10      	pop	{r4, pc}

08004de6 <__sfputc_r>:
 8004de6:	6893      	ldr	r3, [r2, #8]
 8004de8:	3b01      	subs	r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	b410      	push	{r4}
 8004dee:	6093      	str	r3, [r2, #8]
 8004df0:	da08      	bge.n	8004e04 <__sfputc_r+0x1e>
 8004df2:	6994      	ldr	r4, [r2, #24]
 8004df4:	42a3      	cmp	r3, r4
 8004df6:	db01      	blt.n	8004dfc <__sfputc_r+0x16>
 8004df8:	290a      	cmp	r1, #10
 8004dfa:	d103      	bne.n	8004e04 <__sfputc_r+0x1e>
 8004dfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e00:	f7fe bcd6 	b.w	80037b0 <__swbuf_r>
 8004e04:	6813      	ldr	r3, [r2, #0]
 8004e06:	1c58      	adds	r0, r3, #1
 8004e08:	6010      	str	r0, [r2, #0]
 8004e0a:	7019      	strb	r1, [r3, #0]
 8004e0c:	4608      	mov	r0, r1
 8004e0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <__sfputs_r>:
 8004e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e16:	4606      	mov	r6, r0
 8004e18:	460f      	mov	r7, r1
 8004e1a:	4614      	mov	r4, r2
 8004e1c:	18d5      	adds	r5, r2, r3
 8004e1e:	42ac      	cmp	r4, r5
 8004e20:	d101      	bne.n	8004e26 <__sfputs_r+0x12>
 8004e22:	2000      	movs	r0, #0
 8004e24:	e007      	b.n	8004e36 <__sfputs_r+0x22>
 8004e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e2a:	463a      	mov	r2, r7
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	f7ff ffda 	bl	8004de6 <__sfputc_r>
 8004e32:	1c43      	adds	r3, r0, #1
 8004e34:	d1f3      	bne.n	8004e1e <__sfputs_r+0xa>
 8004e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004e38 <_vfiprintf_r>:
 8004e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e3c:	460d      	mov	r5, r1
 8004e3e:	b09d      	sub	sp, #116	; 0x74
 8004e40:	4614      	mov	r4, r2
 8004e42:	4698      	mov	r8, r3
 8004e44:	4606      	mov	r6, r0
 8004e46:	b118      	cbz	r0, 8004e50 <_vfiprintf_r+0x18>
 8004e48:	6983      	ldr	r3, [r0, #24]
 8004e4a:	b90b      	cbnz	r3, 8004e50 <_vfiprintf_r+0x18>
 8004e4c:	f7fd fe14 	bl	8002a78 <__sinit>
 8004e50:	4b89      	ldr	r3, [pc, #548]	; (8005078 <_vfiprintf_r+0x240>)
 8004e52:	429d      	cmp	r5, r3
 8004e54:	d11b      	bne.n	8004e8e <_vfiprintf_r+0x56>
 8004e56:	6875      	ldr	r5, [r6, #4]
 8004e58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e5a:	07d9      	lsls	r1, r3, #31
 8004e5c:	d405      	bmi.n	8004e6a <_vfiprintf_r+0x32>
 8004e5e:	89ab      	ldrh	r3, [r5, #12]
 8004e60:	059a      	lsls	r2, r3, #22
 8004e62:	d402      	bmi.n	8004e6a <_vfiprintf_r+0x32>
 8004e64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e66:	f7fd feca 	bl	8002bfe <__retarget_lock_acquire_recursive>
 8004e6a:	89ab      	ldrh	r3, [r5, #12]
 8004e6c:	071b      	lsls	r3, r3, #28
 8004e6e:	d501      	bpl.n	8004e74 <_vfiprintf_r+0x3c>
 8004e70:	692b      	ldr	r3, [r5, #16]
 8004e72:	b9eb      	cbnz	r3, 8004eb0 <_vfiprintf_r+0x78>
 8004e74:	4629      	mov	r1, r5
 8004e76:	4630      	mov	r0, r6
 8004e78:	f7fe fcfe 	bl	8003878 <__swsetup_r>
 8004e7c:	b1c0      	cbz	r0, 8004eb0 <_vfiprintf_r+0x78>
 8004e7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e80:	07dc      	lsls	r4, r3, #31
 8004e82:	d50e      	bpl.n	8004ea2 <_vfiprintf_r+0x6a>
 8004e84:	f04f 30ff 	mov.w	r0, #4294967295
 8004e88:	b01d      	add	sp, #116	; 0x74
 8004e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e8e:	4b7b      	ldr	r3, [pc, #492]	; (800507c <_vfiprintf_r+0x244>)
 8004e90:	429d      	cmp	r5, r3
 8004e92:	d101      	bne.n	8004e98 <_vfiprintf_r+0x60>
 8004e94:	68b5      	ldr	r5, [r6, #8]
 8004e96:	e7df      	b.n	8004e58 <_vfiprintf_r+0x20>
 8004e98:	4b79      	ldr	r3, [pc, #484]	; (8005080 <_vfiprintf_r+0x248>)
 8004e9a:	429d      	cmp	r5, r3
 8004e9c:	bf08      	it	eq
 8004e9e:	68f5      	ldreq	r5, [r6, #12]
 8004ea0:	e7da      	b.n	8004e58 <_vfiprintf_r+0x20>
 8004ea2:	89ab      	ldrh	r3, [r5, #12]
 8004ea4:	0598      	lsls	r0, r3, #22
 8004ea6:	d4ed      	bmi.n	8004e84 <_vfiprintf_r+0x4c>
 8004ea8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004eaa:	f7fd fea9 	bl	8002c00 <__retarget_lock_release_recursive>
 8004eae:	e7e9      	b.n	8004e84 <_vfiprintf_r+0x4c>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8004eb4:	2320      	movs	r3, #32
 8004eb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004eba:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ebe:	2330      	movs	r3, #48	; 0x30
 8004ec0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005084 <_vfiprintf_r+0x24c>
 8004ec4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ec8:	f04f 0901 	mov.w	r9, #1
 8004ecc:	4623      	mov	r3, r4
 8004ece:	469a      	mov	sl, r3
 8004ed0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ed4:	b10a      	cbz	r2, 8004eda <_vfiprintf_r+0xa2>
 8004ed6:	2a25      	cmp	r2, #37	; 0x25
 8004ed8:	d1f9      	bne.n	8004ece <_vfiprintf_r+0x96>
 8004eda:	ebba 0b04 	subs.w	fp, sl, r4
 8004ede:	d00b      	beq.n	8004ef8 <_vfiprintf_r+0xc0>
 8004ee0:	465b      	mov	r3, fp
 8004ee2:	4622      	mov	r2, r4
 8004ee4:	4629      	mov	r1, r5
 8004ee6:	4630      	mov	r0, r6
 8004ee8:	f7ff ff94 	bl	8004e14 <__sfputs_r>
 8004eec:	3001      	adds	r0, #1
 8004eee:	f000 80aa 	beq.w	8005046 <_vfiprintf_r+0x20e>
 8004ef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ef4:	445a      	add	r2, fp
 8004ef6:	9209      	str	r2, [sp, #36]	; 0x24
 8004ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 80a2 	beq.w	8005046 <_vfiprintf_r+0x20e>
 8004f02:	2300      	movs	r3, #0
 8004f04:	f04f 32ff 	mov.w	r2, #4294967295
 8004f08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f0c:	f10a 0a01 	add.w	sl, sl, #1
 8004f10:	9304      	str	r3, [sp, #16]
 8004f12:	9307      	str	r3, [sp, #28]
 8004f14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f18:	931a      	str	r3, [sp, #104]	; 0x68
 8004f1a:	4654      	mov	r4, sl
 8004f1c:	2205      	movs	r2, #5
 8004f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f22:	4858      	ldr	r0, [pc, #352]	; (8005084 <_vfiprintf_r+0x24c>)
 8004f24:	f7fb f994 	bl	8000250 <memchr>
 8004f28:	9a04      	ldr	r2, [sp, #16]
 8004f2a:	b9d8      	cbnz	r0, 8004f64 <_vfiprintf_r+0x12c>
 8004f2c:	06d1      	lsls	r1, r2, #27
 8004f2e:	bf44      	itt	mi
 8004f30:	2320      	movmi	r3, #32
 8004f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f36:	0713      	lsls	r3, r2, #28
 8004f38:	bf44      	itt	mi
 8004f3a:	232b      	movmi	r3, #43	; 0x2b
 8004f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f40:	f89a 3000 	ldrb.w	r3, [sl]
 8004f44:	2b2a      	cmp	r3, #42	; 0x2a
 8004f46:	d015      	beq.n	8004f74 <_vfiprintf_r+0x13c>
 8004f48:	9a07      	ldr	r2, [sp, #28]
 8004f4a:	4654      	mov	r4, sl
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	f04f 0c0a 	mov.w	ip, #10
 8004f52:	4621      	mov	r1, r4
 8004f54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f58:	3b30      	subs	r3, #48	; 0x30
 8004f5a:	2b09      	cmp	r3, #9
 8004f5c:	d94e      	bls.n	8004ffc <_vfiprintf_r+0x1c4>
 8004f5e:	b1b0      	cbz	r0, 8004f8e <_vfiprintf_r+0x156>
 8004f60:	9207      	str	r2, [sp, #28]
 8004f62:	e014      	b.n	8004f8e <_vfiprintf_r+0x156>
 8004f64:	eba0 0308 	sub.w	r3, r0, r8
 8004f68:	fa09 f303 	lsl.w	r3, r9, r3
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	9304      	str	r3, [sp, #16]
 8004f70:	46a2      	mov	sl, r4
 8004f72:	e7d2      	b.n	8004f1a <_vfiprintf_r+0xe2>
 8004f74:	9b03      	ldr	r3, [sp, #12]
 8004f76:	1d19      	adds	r1, r3, #4
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	9103      	str	r1, [sp, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	bfbb      	ittet	lt
 8004f80:	425b      	neglt	r3, r3
 8004f82:	f042 0202 	orrlt.w	r2, r2, #2
 8004f86:	9307      	strge	r3, [sp, #28]
 8004f88:	9307      	strlt	r3, [sp, #28]
 8004f8a:	bfb8      	it	lt
 8004f8c:	9204      	strlt	r2, [sp, #16]
 8004f8e:	7823      	ldrb	r3, [r4, #0]
 8004f90:	2b2e      	cmp	r3, #46	; 0x2e
 8004f92:	d10c      	bne.n	8004fae <_vfiprintf_r+0x176>
 8004f94:	7863      	ldrb	r3, [r4, #1]
 8004f96:	2b2a      	cmp	r3, #42	; 0x2a
 8004f98:	d135      	bne.n	8005006 <_vfiprintf_r+0x1ce>
 8004f9a:	9b03      	ldr	r3, [sp, #12]
 8004f9c:	1d1a      	adds	r2, r3, #4
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	9203      	str	r2, [sp, #12]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	bfb8      	it	lt
 8004fa6:	f04f 33ff 	movlt.w	r3, #4294967295
 8004faa:	3402      	adds	r4, #2
 8004fac:	9305      	str	r3, [sp, #20]
 8004fae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005094 <_vfiprintf_r+0x25c>
 8004fb2:	7821      	ldrb	r1, [r4, #0]
 8004fb4:	2203      	movs	r2, #3
 8004fb6:	4650      	mov	r0, sl
 8004fb8:	f7fb f94a 	bl	8000250 <memchr>
 8004fbc:	b140      	cbz	r0, 8004fd0 <_vfiprintf_r+0x198>
 8004fbe:	2340      	movs	r3, #64	; 0x40
 8004fc0:	eba0 000a 	sub.w	r0, r0, sl
 8004fc4:	fa03 f000 	lsl.w	r0, r3, r0
 8004fc8:	9b04      	ldr	r3, [sp, #16]
 8004fca:	4303      	orrs	r3, r0
 8004fcc:	3401      	adds	r4, #1
 8004fce:	9304      	str	r3, [sp, #16]
 8004fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fd4:	482c      	ldr	r0, [pc, #176]	; (8005088 <_vfiprintf_r+0x250>)
 8004fd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fda:	2206      	movs	r2, #6
 8004fdc:	f7fb f938 	bl	8000250 <memchr>
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	d03f      	beq.n	8005064 <_vfiprintf_r+0x22c>
 8004fe4:	4b29      	ldr	r3, [pc, #164]	; (800508c <_vfiprintf_r+0x254>)
 8004fe6:	bb1b      	cbnz	r3, 8005030 <_vfiprintf_r+0x1f8>
 8004fe8:	9b03      	ldr	r3, [sp, #12]
 8004fea:	3307      	adds	r3, #7
 8004fec:	f023 0307 	bic.w	r3, r3, #7
 8004ff0:	3308      	adds	r3, #8
 8004ff2:	9303      	str	r3, [sp, #12]
 8004ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ff6:	443b      	add	r3, r7
 8004ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8004ffa:	e767      	b.n	8004ecc <_vfiprintf_r+0x94>
 8004ffc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005000:	460c      	mov	r4, r1
 8005002:	2001      	movs	r0, #1
 8005004:	e7a5      	b.n	8004f52 <_vfiprintf_r+0x11a>
 8005006:	2300      	movs	r3, #0
 8005008:	3401      	adds	r4, #1
 800500a:	9305      	str	r3, [sp, #20]
 800500c:	4619      	mov	r1, r3
 800500e:	f04f 0c0a 	mov.w	ip, #10
 8005012:	4620      	mov	r0, r4
 8005014:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005018:	3a30      	subs	r2, #48	; 0x30
 800501a:	2a09      	cmp	r2, #9
 800501c:	d903      	bls.n	8005026 <_vfiprintf_r+0x1ee>
 800501e:	2b00      	cmp	r3, #0
 8005020:	d0c5      	beq.n	8004fae <_vfiprintf_r+0x176>
 8005022:	9105      	str	r1, [sp, #20]
 8005024:	e7c3      	b.n	8004fae <_vfiprintf_r+0x176>
 8005026:	fb0c 2101 	mla	r1, ip, r1, r2
 800502a:	4604      	mov	r4, r0
 800502c:	2301      	movs	r3, #1
 800502e:	e7f0      	b.n	8005012 <_vfiprintf_r+0x1da>
 8005030:	ab03      	add	r3, sp, #12
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	462a      	mov	r2, r5
 8005036:	4b16      	ldr	r3, [pc, #88]	; (8005090 <_vfiprintf_r+0x258>)
 8005038:	a904      	add	r1, sp, #16
 800503a:	4630      	mov	r0, r6
 800503c:	f7fd ff24 	bl	8002e88 <_printf_float>
 8005040:	4607      	mov	r7, r0
 8005042:	1c78      	adds	r0, r7, #1
 8005044:	d1d6      	bne.n	8004ff4 <_vfiprintf_r+0x1bc>
 8005046:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005048:	07d9      	lsls	r1, r3, #31
 800504a:	d405      	bmi.n	8005058 <_vfiprintf_r+0x220>
 800504c:	89ab      	ldrh	r3, [r5, #12]
 800504e:	059a      	lsls	r2, r3, #22
 8005050:	d402      	bmi.n	8005058 <_vfiprintf_r+0x220>
 8005052:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005054:	f7fd fdd4 	bl	8002c00 <__retarget_lock_release_recursive>
 8005058:	89ab      	ldrh	r3, [r5, #12]
 800505a:	065b      	lsls	r3, r3, #25
 800505c:	f53f af12 	bmi.w	8004e84 <_vfiprintf_r+0x4c>
 8005060:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005062:	e711      	b.n	8004e88 <_vfiprintf_r+0x50>
 8005064:	ab03      	add	r3, sp, #12
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	462a      	mov	r2, r5
 800506a:	4b09      	ldr	r3, [pc, #36]	; (8005090 <_vfiprintf_r+0x258>)
 800506c:	a904      	add	r1, sp, #16
 800506e:	4630      	mov	r0, r6
 8005070:	f7fe f996 	bl	80033a0 <_printf_i>
 8005074:	e7e4      	b.n	8005040 <_vfiprintf_r+0x208>
 8005076:	bf00      	nop
 8005078:	08005364 	.word	0x08005364
 800507c:	08005384 	.word	0x08005384
 8005080:	08005344 	.word	0x08005344
 8005084:	080055cc 	.word	0x080055cc
 8005088:	080055d6 	.word	0x080055d6
 800508c:	08002e89 	.word	0x08002e89
 8005090:	08004e15 	.word	0x08004e15
 8005094:	080055d2 	.word	0x080055d2

08005098 <_read_r>:
 8005098:	b538      	push	{r3, r4, r5, lr}
 800509a:	4d07      	ldr	r5, [pc, #28]	; (80050b8 <_read_r+0x20>)
 800509c:	4604      	mov	r4, r0
 800509e:	4608      	mov	r0, r1
 80050a0:	4611      	mov	r1, r2
 80050a2:	2200      	movs	r2, #0
 80050a4:	602a      	str	r2, [r5, #0]
 80050a6:	461a      	mov	r2, r3
 80050a8:	f7fb fdd6 	bl	8000c58 <_read>
 80050ac:	1c43      	adds	r3, r0, #1
 80050ae:	d102      	bne.n	80050b6 <_read_r+0x1e>
 80050b0:	682b      	ldr	r3, [r5, #0]
 80050b2:	b103      	cbz	r3, 80050b6 <_read_r+0x1e>
 80050b4:	6023      	str	r3, [r4, #0]
 80050b6:	bd38      	pop	{r3, r4, r5, pc}
 80050b8:	20000390 	.word	0x20000390

080050bc <__assert_func>:
 80050bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80050be:	4614      	mov	r4, r2
 80050c0:	461a      	mov	r2, r3
 80050c2:	4b09      	ldr	r3, [pc, #36]	; (80050e8 <__assert_func+0x2c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4605      	mov	r5, r0
 80050c8:	68d8      	ldr	r0, [r3, #12]
 80050ca:	b14c      	cbz	r4, 80050e0 <__assert_func+0x24>
 80050cc:	4b07      	ldr	r3, [pc, #28]	; (80050ec <__assert_func+0x30>)
 80050ce:	9100      	str	r1, [sp, #0]
 80050d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80050d4:	4906      	ldr	r1, [pc, #24]	; (80050f0 <__assert_func+0x34>)
 80050d6:	462b      	mov	r3, r5
 80050d8:	f000 f80e 	bl	80050f8 <fiprintf>
 80050dc:	f000 f85f 	bl	800519e <abort>
 80050e0:	4b04      	ldr	r3, [pc, #16]	; (80050f4 <__assert_func+0x38>)
 80050e2:	461c      	mov	r4, r3
 80050e4:	e7f3      	b.n	80050ce <__assert_func+0x12>
 80050e6:	bf00      	nop
 80050e8:	2000000c 	.word	0x2000000c
 80050ec:	080055dd 	.word	0x080055dd
 80050f0:	080055ea 	.word	0x080055ea
 80050f4:	08005618 	.word	0x08005618

080050f8 <fiprintf>:
 80050f8:	b40e      	push	{r1, r2, r3}
 80050fa:	b503      	push	{r0, r1, lr}
 80050fc:	4601      	mov	r1, r0
 80050fe:	ab03      	add	r3, sp, #12
 8005100:	4805      	ldr	r0, [pc, #20]	; (8005118 <fiprintf+0x20>)
 8005102:	f853 2b04 	ldr.w	r2, [r3], #4
 8005106:	6800      	ldr	r0, [r0, #0]
 8005108:	9301      	str	r3, [sp, #4]
 800510a:	f7ff fe95 	bl	8004e38 <_vfiprintf_r>
 800510e:	b002      	add	sp, #8
 8005110:	f85d eb04 	ldr.w	lr, [sp], #4
 8005114:	b003      	add	sp, #12
 8005116:	4770      	bx	lr
 8005118:	2000000c 	.word	0x2000000c

0800511c <_fstat_r>:
 800511c:	b538      	push	{r3, r4, r5, lr}
 800511e:	4d07      	ldr	r5, [pc, #28]	; (800513c <_fstat_r+0x20>)
 8005120:	2300      	movs	r3, #0
 8005122:	4604      	mov	r4, r0
 8005124:	4608      	mov	r0, r1
 8005126:	4611      	mov	r1, r2
 8005128:	602b      	str	r3, [r5, #0]
 800512a:	f000 f88b 	bl	8005244 <_fstat>
 800512e:	1c43      	adds	r3, r0, #1
 8005130:	d102      	bne.n	8005138 <_fstat_r+0x1c>
 8005132:	682b      	ldr	r3, [r5, #0]
 8005134:	b103      	cbz	r3, 8005138 <_fstat_r+0x1c>
 8005136:	6023      	str	r3, [r4, #0]
 8005138:	bd38      	pop	{r3, r4, r5, pc}
 800513a:	bf00      	nop
 800513c:	20000390 	.word	0x20000390

08005140 <_isatty_r>:
 8005140:	b538      	push	{r3, r4, r5, lr}
 8005142:	4d06      	ldr	r5, [pc, #24]	; (800515c <_isatty_r+0x1c>)
 8005144:	2300      	movs	r3, #0
 8005146:	4604      	mov	r4, r0
 8005148:	4608      	mov	r0, r1
 800514a:	602b      	str	r3, [r5, #0]
 800514c:	f000 f88a 	bl	8005264 <_isatty>
 8005150:	1c43      	adds	r3, r0, #1
 8005152:	d102      	bne.n	800515a <_isatty_r+0x1a>
 8005154:	682b      	ldr	r3, [r5, #0]
 8005156:	b103      	cbz	r3, 800515a <_isatty_r+0x1a>
 8005158:	6023      	str	r3, [r4, #0]
 800515a:	bd38      	pop	{r3, r4, r5, pc}
 800515c:	20000390 	.word	0x20000390

08005160 <__ascii_mbtowc>:
 8005160:	b082      	sub	sp, #8
 8005162:	b901      	cbnz	r1, 8005166 <__ascii_mbtowc+0x6>
 8005164:	a901      	add	r1, sp, #4
 8005166:	b142      	cbz	r2, 800517a <__ascii_mbtowc+0x1a>
 8005168:	b14b      	cbz	r3, 800517e <__ascii_mbtowc+0x1e>
 800516a:	7813      	ldrb	r3, [r2, #0]
 800516c:	600b      	str	r3, [r1, #0]
 800516e:	7812      	ldrb	r2, [r2, #0]
 8005170:	1e10      	subs	r0, r2, #0
 8005172:	bf18      	it	ne
 8005174:	2001      	movne	r0, #1
 8005176:	b002      	add	sp, #8
 8005178:	4770      	bx	lr
 800517a:	4610      	mov	r0, r2
 800517c:	e7fb      	b.n	8005176 <__ascii_mbtowc+0x16>
 800517e:	f06f 0001 	mvn.w	r0, #1
 8005182:	e7f8      	b.n	8005176 <__ascii_mbtowc+0x16>

08005184 <__ascii_wctomb>:
 8005184:	b149      	cbz	r1, 800519a <__ascii_wctomb+0x16>
 8005186:	2aff      	cmp	r2, #255	; 0xff
 8005188:	bf85      	ittet	hi
 800518a:	238a      	movhi	r3, #138	; 0x8a
 800518c:	6003      	strhi	r3, [r0, #0]
 800518e:	700a      	strbls	r2, [r1, #0]
 8005190:	f04f 30ff 	movhi.w	r0, #4294967295
 8005194:	bf98      	it	ls
 8005196:	2001      	movls	r0, #1
 8005198:	4770      	bx	lr
 800519a:	4608      	mov	r0, r1
 800519c:	4770      	bx	lr

0800519e <abort>:
 800519e:	b508      	push	{r3, lr}
 80051a0:	2006      	movs	r0, #6
 80051a2:	f000 f82b 	bl	80051fc <raise>
 80051a6:	2001      	movs	r0, #1
 80051a8:	f000 f882 	bl	80052b0 <_exit>

080051ac <_raise_r>:
 80051ac:	291f      	cmp	r1, #31
 80051ae:	b538      	push	{r3, r4, r5, lr}
 80051b0:	4604      	mov	r4, r0
 80051b2:	460d      	mov	r5, r1
 80051b4:	d904      	bls.n	80051c0 <_raise_r+0x14>
 80051b6:	2316      	movs	r3, #22
 80051b8:	6003      	str	r3, [r0, #0]
 80051ba:	f04f 30ff 	mov.w	r0, #4294967295
 80051be:	bd38      	pop	{r3, r4, r5, pc}
 80051c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80051c2:	b112      	cbz	r2, 80051ca <_raise_r+0x1e>
 80051c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80051c8:	b94b      	cbnz	r3, 80051de <_raise_r+0x32>
 80051ca:	4620      	mov	r0, r4
 80051cc:	f000 f830 	bl	8005230 <_getpid_r>
 80051d0:	462a      	mov	r2, r5
 80051d2:	4601      	mov	r1, r0
 80051d4:	4620      	mov	r0, r4
 80051d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051da:	f000 b817 	b.w	800520c <_kill_r>
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d00a      	beq.n	80051f8 <_raise_r+0x4c>
 80051e2:	1c59      	adds	r1, r3, #1
 80051e4:	d103      	bne.n	80051ee <_raise_r+0x42>
 80051e6:	2316      	movs	r3, #22
 80051e8:	6003      	str	r3, [r0, #0]
 80051ea:	2001      	movs	r0, #1
 80051ec:	e7e7      	b.n	80051be <_raise_r+0x12>
 80051ee:	2400      	movs	r4, #0
 80051f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80051f4:	4628      	mov	r0, r5
 80051f6:	4798      	blx	r3
 80051f8:	2000      	movs	r0, #0
 80051fa:	e7e0      	b.n	80051be <_raise_r+0x12>

080051fc <raise>:
 80051fc:	4b02      	ldr	r3, [pc, #8]	; (8005208 <raise+0xc>)
 80051fe:	4601      	mov	r1, r0
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	f7ff bfd3 	b.w	80051ac <_raise_r>
 8005206:	bf00      	nop
 8005208:	2000000c 	.word	0x2000000c

0800520c <_kill_r>:
 800520c:	b538      	push	{r3, r4, r5, lr}
 800520e:	4d07      	ldr	r5, [pc, #28]	; (800522c <_kill_r+0x20>)
 8005210:	2300      	movs	r3, #0
 8005212:	4604      	mov	r4, r0
 8005214:	4608      	mov	r0, r1
 8005216:	4611      	mov	r1, r2
 8005218:	602b      	str	r3, [r5, #0]
 800521a:	f000 f82b 	bl	8005274 <_kill>
 800521e:	1c43      	adds	r3, r0, #1
 8005220:	d102      	bne.n	8005228 <_kill_r+0x1c>
 8005222:	682b      	ldr	r3, [r5, #0]
 8005224:	b103      	cbz	r3, 8005228 <_kill_r+0x1c>
 8005226:	6023      	str	r3, [r4, #0]
 8005228:	bd38      	pop	{r3, r4, r5, pc}
 800522a:	bf00      	nop
 800522c:	20000390 	.word	0x20000390

08005230 <_getpid_r>:
 8005230:	f000 b810 	b.w	8005254 <_getpid>

08005234 <_close>:
 8005234:	4b02      	ldr	r3, [pc, #8]	; (8005240 <_close+0xc>)
 8005236:	2258      	movs	r2, #88	; 0x58
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	f04f 30ff 	mov.w	r0, #4294967295
 800523e:	4770      	bx	lr
 8005240:	20000390 	.word	0x20000390

08005244 <_fstat>:
 8005244:	4b02      	ldr	r3, [pc, #8]	; (8005250 <_fstat+0xc>)
 8005246:	2258      	movs	r2, #88	; 0x58
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	f04f 30ff 	mov.w	r0, #4294967295
 800524e:	4770      	bx	lr
 8005250:	20000390 	.word	0x20000390

08005254 <_getpid>:
 8005254:	4b02      	ldr	r3, [pc, #8]	; (8005260 <_getpid+0xc>)
 8005256:	2258      	movs	r2, #88	; 0x58
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	f04f 30ff 	mov.w	r0, #4294967295
 800525e:	4770      	bx	lr
 8005260:	20000390 	.word	0x20000390

08005264 <_isatty>:
 8005264:	4b02      	ldr	r3, [pc, #8]	; (8005270 <_isatty+0xc>)
 8005266:	2258      	movs	r2, #88	; 0x58
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	2000      	movs	r0, #0
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	20000390 	.word	0x20000390

08005274 <_kill>:
 8005274:	4b02      	ldr	r3, [pc, #8]	; (8005280 <_kill+0xc>)
 8005276:	2258      	movs	r2, #88	; 0x58
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	f04f 30ff 	mov.w	r0, #4294967295
 800527e:	4770      	bx	lr
 8005280:	20000390 	.word	0x20000390

08005284 <_lseek>:
 8005284:	4b02      	ldr	r3, [pc, #8]	; (8005290 <_lseek+0xc>)
 8005286:	2258      	movs	r2, #88	; 0x58
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	f04f 30ff 	mov.w	r0, #4294967295
 800528e:	4770      	bx	lr
 8005290:	20000390 	.word	0x20000390

08005294 <_sbrk>:
 8005294:	4b04      	ldr	r3, [pc, #16]	; (80052a8 <_sbrk+0x14>)
 8005296:	6819      	ldr	r1, [r3, #0]
 8005298:	4602      	mov	r2, r0
 800529a:	b909      	cbnz	r1, 80052a0 <_sbrk+0xc>
 800529c:	4903      	ldr	r1, [pc, #12]	; (80052ac <_sbrk+0x18>)
 800529e:	6019      	str	r1, [r3, #0]
 80052a0:	6818      	ldr	r0, [r3, #0]
 80052a2:	4402      	add	r2, r0
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	4770      	bx	lr
 80052a8:	20000200 	.word	0x20000200
 80052ac:	20000398 	.word	0x20000398

080052b0 <_exit>:
 80052b0:	e7fe      	b.n	80052b0 <_exit>
	...

080052b4 <_init>:
 80052b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b6:	bf00      	nop
 80052b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ba:	bc08      	pop	{r3}
 80052bc:	469e      	mov	lr, r3
 80052be:	4770      	bx	lr

080052c0 <_fini>:
 80052c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c2:	bf00      	nop
 80052c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052c6:	bc08      	pop	{r3}
 80052c8:	469e      	mov	lr, r3
 80052ca:	4770      	bx	lr
