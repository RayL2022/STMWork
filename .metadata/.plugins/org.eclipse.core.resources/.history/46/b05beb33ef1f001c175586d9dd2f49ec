//----------------------------------
// (Lab 02) - Task1.c
//----------------------------------
// Objective:
//   Build a small game that records user's reaction time.
//

//
//
// -- Imports ---------------
//
#include "init.h"

//
//
// -- Prototypes ------------
//
void Init_GPIO();
void EXTI0_IRQHandler();
void EXTI9_5_IRQHandler();
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);

//
//
// -- Code Body -------------
//
volatile uint8_t D0_button = 0;
volatile uint8_t D1_button = 0;


int main() {
	Sys_Init();
	Init_GPIO();
    HAL_Init(); //Initialize HAL

	while (1) {
		if (D0_button == 1){
			printf("D4 button is ON\r\n");
		}
		if (D1_button == 1){
			printf("D5 button is ON\r\n");
		}
		D0_button = 0;
		D1_button = 0;
	}
}

void Init_GPIO() {
	// Enable GPIO clocks?
	// Looks like GPIO reg updates are synced to a base clock.
	//  for any changes to appear the clocks need to be running.
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOJEN;
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
	// Enable clock to SYSCONFIG module to enable writing of EXTICRn registers
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
	// Delay after an RCC peripheral clock enabling
	asm ("nop");
	asm ("nop");

	//Configure D4(PJ0) as input, with pull-up resistors enabled (REG)
	GPIOJ->MODER &= 0xFFFFFFFCU; //Set the MODER pin to input
	GPIOJ->PUPDR |= 0x00000001U; //Set the PUPDR pin to pull-up

    //Configure D5(PC8) as input, with pull-up resistors enabled (HAL)
    GPIO_InitTypeDef D5;
    D5.Pin = GPIO_PIN_8; //On pin 6
	D5.Mode = GPIO_MODE_IT_RISING; //Set
	D5.Pull = GPIO_PULLUP; //Enable pull-up
	HAL_GPIO_Init(GPIOC, &D5); //Configure this to Port C

	// By default pin PA0 will trigger the interrupt, change EXTICR1 to route proper pin
	//SYSCFG->EXTICR[0] // EXTICR1-4 are confusingly an array [0-3].

	//Re-route to GPIOJ pin 0
	SYSCFG->EXTICR[0] &= 0xFFF9; // (1001), set the 0s
	SYSCFG->EXTICR[0] |= 0xFFF9; // (1001), set the 1

	//Set interrupt enable for EXTI0.
	NVIC->ISER[0] |= 0x00000040;

	//Set interrupt enable for EXTI8 (included in 9_5)
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 30, 30);
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

	// Unmask interrupt.
	EXTI->IMR |= 0x00000001;

	// Register for rising edge.
	EXTI->RTSR |= 0x00000001;

}

//
//
// -- ISRs (IRQs) -------------
//

// Non-HAL GPIO/EXTI Handler
void EXTI0_IRQHandler() {
	// Clear Interrupt Bit by setting it to 1.
	EXTI->PR |= 0x00000001;
	D0_button = 1;
	for (int i = 0; i < 50; i++);
}

//HAL - GPIO/EXTI Handler
void EXTI9_5_IRQHandler() {
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	if (GPIO_Pin == GPIO_PIN_8){
		D1_button = 1;
	}
}
