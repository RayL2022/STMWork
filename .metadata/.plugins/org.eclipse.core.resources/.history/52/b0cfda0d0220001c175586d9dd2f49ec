//----------------------------------
// Task1.c
//----------------------------------
// Objective:
//   Build a small game that records user's reaction time.
//

//
//
// -- Imports ---------------
//
#include "init.h"

//
//
// -- Prototypes ------------
//
//void Init_GPIO();
void Init_Timer();
void TIM6_DAC_IRQHandler();

double time_elapsed;
//
//
// -- Code Body -------------
//


int main() {
	Sys_Init();
	Init_Timer();
    HAL_Init(); //Initialize HAL
	time_elapsed = 0;
	while (1) {
	}
}

//
//
// -- Init Functions ----------
//
void Init_Timer() {
	// Enable the TIM6 interrupt.
	// Looks like HAL hid this little gem, this register isn't mentioned in
	//   the STM32F7 ARM Reference Manual....

	//Enable interrupts on NVIC, position 22
	NVIC->ISER[1] |= 0x00400000;

	// Enable TIM6 clock
	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
	// Delay 2 clock cycles
	asm ( "nop" );
	asm ( "nop" );

	// Set pre-scaler to slow down ticks
	TIM6->PSC = 9999; // Chosen Fixed scaler value

	// Set the Auto-reload Value for 10Hz overflow (10Hz -> 100ms -> 0.1s)
	//TIM6->ARR = 0xFFFF - 10799; // 10800 n values to overflow
	TIM6->ARR = 1079; // 10800 n values to overflow

	// Generate update events to auto reload.
	TIM6->EGR |= 0x0001;

	// Enable Update Interrupts.
	TIM6->DIER |= 0x0001;

	// Start the timer, Tim6_ARR registered is buffered
	TIM6->CR1 = 0x0081;
}

void TIM6_DAC_IRQHandler() {
	// Clear Interrupt Bit
	TIM6->SR &= 0x0000;
	time_elapsed += 0.1;
	printf("Time Elapsed: %.1f seconds\r\n", time_elapsed);
}
/*
void Init_GPIO() {
	// Enable GPIO clocks?
	// Looks like GPIO reg updates are synced to a base clock.
	//  for any changes to appear the clocks need to be running.
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
	// Enable clock to SYSCONFIG module to enable writing of EXTICRn registers
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
	asm ("nop");
	asm ("nop");

	//Configure D0 as input, with pull-up resistors enabled (REG)
    GPIOC->MODER &= 0xFFFFCFFFU; //Set the MODER pin to input
    GPIOC->PUPDR |= 0x00001000U; //Set the PUPDR pin to pull-up

    //Configure D1 as input, with pull-up resistors enabled (HAL)
    GPIO_InitTypeDef D1;
    D1.Pin = GPIO_PIN_6; //On pin 6
	D1.Mode = GPIO_MODE_INPUT; //Set to input
	D1.Pull = GPIO_PULLUP; //Enable pull-up
	HAL_GPIO_Init(GPIOC, &D1); //Configure this to Port

	// Set interrupt enable for EXTI0.
	NVIC->ISER0 |= 0x00000040;

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1); //#2
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

	// GPIO Interrupt
	//Route to GPIOC pin 7
	SYSCFG->EXTICR[2] &= 0xDFFF; // (0010), set the 0s
	SYSCFG->EXTICR[2] |= 0x2FFF; // (0010), set the 1

	//Route to GPIOC pin 6
	SYSCFG->EXTICR[2] &= 0xFDFF; // (0010), set the 0s
	SYSCFG->EXTICR[2] |= 0xF2FF; // (0010), set the 1

	// Unmask interrupt.
	EXTI->IMR |= 0x0001;
	EXTI->IMR |= 0x0200;

	// Register for rising edge.
	EXTI->RTSR |= 0x0001;
	EXTI->RTSR |= 0x0200;

	// And register for the falling edge.
	// EXTI->FTSR

// Non-HAL GPIO/EXTI Handler
void XXX_IRQHandler() {
	// Clear Interrupt Bit by setting it to 1.
	EXTI->PR |= 0x0001;

	// Other code here:

}

//HAL - GPIO/EXTI Handler
void xxx_IRQHandler() {
	//HAL_GPIO_EXTI_IRQHandler(???);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	// ISR code here.
}


// For the HAL timer interrupts, all of the associated Callbacks need to exist,
// otherwise during assembly, they will generate compiler errors as missing symbols
// Below are the ones that are not used.

// void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim){};
// void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim){};
*/
