
LAB-01-Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001780  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001978  08001978  00011978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001990  08001990  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001990  08001990  00011990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001998  08001998  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001998  08001998  00011998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800199c  0800199c  0001199c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080019a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  2000000c  080019ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  2000013c  080019ac  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa40  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001840  00000000  00000000  0002aa7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000640  00000000  00000000  0002c2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f8  00000000  00000000  0002c900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bed6  00000000  00000000  0002cef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ce4  00000000  00000000  00058dce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a078  00000000  00000000  00061ab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016bb2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f64  00000000  00000000  0016bb80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003758  00000000  00000000  0016cae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08001960 	.word	0x08001960

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08001960 	.word	0x08001960

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <configure_ports>:
	}
}

void configure_ports(){
    // Need to enable clock for peripheral buses using registers (Ports J, A, D, C, F)
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOJEN;
 8000530:	4b20      	ldr	r3, [pc, #128]	; (80005b4 <configure_ports+0x84>)
 8000532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000538:	631a      	str	r2, [r3, #48]	; 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800053a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800053c:	f042 0201 	orr.w	r2, r2, #1
 8000540:	631a      	str	r2, [r3, #48]	; 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000544:	f042 0208 	orr.w	r2, r2, #8
 8000548:	631a      	str	r2, [r3, #48]	; 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 800054a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800054c:	f042 0204 	orr.w	r2, r2, #4
 8000550:	631a      	str	r2, [r3, #48]	; 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN;
 8000552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000554:	f042 0220 	orr.w	r2, r2, #32
 8000558:	631a      	str	r2, [r3, #48]	; 0x30

    //Bit mask to set LEDs as Output (LD1-LD4)
    GPIOJ->MODER |= 0x04000400U;
 800055a:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	f042 2204 	orr.w	r2, r2, #67109888	; 0x4000400
 8000564:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= 0x01000000U;
 8000566:	4914      	ldr	r1, [pc, #80]	; (80005b8 <configure_ports+0x88>)
 8000568:	680a      	ldr	r2, [r1, #0]
 800056a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800056e:	600a      	str	r2, [r1, #0]
    GPIOD->MODER |= 0x00000100U;
 8000570:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8000574:	680a      	ldr	r2, [r1, #0]
 8000576:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800057a:	600a      	str	r2, [r1, #0]

    //Bit mask to set input for D0-D3
    GPIOC->MODER &= 0xFFFF0FFFU;
 800057c:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 8000580:	680a      	ldr	r2, [r1, #0]
 8000582:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8000586:	600a      	str	r2, [r1, #0]
    GPIOJ->MODER &= 0xFFFFFFF3U;
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	f022 020c 	bic.w	r2, r2, #12
 800058e:	601a      	str	r2, [r3, #0]
    GPIOF->MODER &= 0xFFFFCFFFU;
 8000590:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <configure_ports+0x8c>)
 8000592:	6810      	ldr	r0, [r2, #0]
 8000594:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
 8000598:	6010      	str	r0, [r2, #0]

    //Bit mask to set pull-up resistors for D0-D3
    GPIOC->PUPDR |= 0x00005000U;
 800059a:	68c8      	ldr	r0, [r1, #12]
 800059c:	f440 40a0 	orr.w	r0, r0, #20480	; 0x5000
 80005a0:	60c8      	str	r0, [r1, #12]
    GPIOJ->PUPDR |= 0x00000004U;
 80005a2:	68d9      	ldr	r1, [r3, #12]
 80005a4:	f041 0104 	orr.w	r1, r1, #4
 80005a8:	60d9      	str	r1, [r3, #12]
    GPIOF->PUPDR |= 0x00001000U;
 80005aa:	68d3      	ldr	r3, [r2, #12]
 80005ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005b0:	60d3      	str	r3, [r2, #12]
}
 80005b2:	4770      	bx	lr
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40020000 	.word	0x40020000
 80005bc:	40021400 	.word	0x40021400

080005c0 <check_state>:
void check_state(){
 80005c0:	b410      	push	{r4}
	Input_for_D0 = GPIOC->IDR & 0x0080; //Value will be 0x0080 if D0 is high (Port pin)
 80005c2:	4b22      	ldr	r3, [pc, #136]	; (800064c <check_state+0x8c>)
 80005c4:	6918      	ldr	r0, [r3, #16]
 80005c6:	f000 0080 	and.w	r0, r0, #128	; 0x80
 80005ca:	4a21      	ldr	r2, [pc, #132]	; (8000650 <check_state+0x90>)
 80005cc:	6010      	str	r0, [r2, #0]
	Input_for_D1 = GPIOC->IDR & 0x0040; //Value will be 0x0040 if D1 is high (Port pin)
 80005ce:	6919      	ldr	r1, [r3, #16]
 80005d0:	f001 0140 	and.w	r1, r1, #64	; 0x40
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <check_state+0x94>)
 80005d6:	6019      	str	r1, [r3, #0]
	Input_for_D2 = GPIOJ->IDR & 0x0002; //Value will be 0x0002 if D2 is high (Port pin)
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <check_state+0x98>)
 80005da:	691a      	ldr	r2, [r3, #16]
 80005dc:	f002 0202 	and.w	r2, r2, #2
 80005e0:	4b1e      	ldr	r3, [pc, #120]	; (800065c <check_state+0x9c>)
 80005e2:	601a      	str	r2, [r3, #0]
	Input_for_D3 = GPIOF->IDR & 0x0040; //Value will be 0x0040 if D3 is high (Port pin)
 80005e4:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <check_state+0xa0>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005ec:	4c1d      	ldr	r4, [pc, #116]	; (8000664 <check_state+0xa4>)
 80005ee:	6023      	str	r3, [r4, #0]

	if (Input_for_D0 == 0x0080){//Check if D0 is high
 80005f0:	b928      	cbnz	r0, 80005fe <check_state+0x3e>
		GPIOJ->BSRR = (uint16_t)GPIO_PIN_13; // Turn on Red LED (LED1)
	}
	else if (Input_for_D0 == 0x0000){//D0 is off (low)
 80005f2:	b940      	cbnz	r0, 8000606 <check_state+0x46>
		GPIOJ->BSRR = (uint32_t)GPIO_PIN_13 << 16; // Turn off Red LED (LED1)
 80005f4:	4818      	ldr	r0, [pc, #96]	; (8000658 <check_state+0x98>)
 80005f6:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
 80005fa:	6184      	str	r4, [r0, #24]
 80005fc:	e003      	b.n	8000606 <check_state+0x46>
		GPIOJ->BSRR = (uint16_t)GPIO_PIN_13; // Turn on Red LED (LED1)
 80005fe:	4816      	ldr	r0, [pc, #88]	; (8000658 <check_state+0x98>)
 8000600:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 8000604:	6184      	str	r4, [r0, #24]
	}
	if (Input_for_D1 == 0x0040){//Check if D1 is high
 8000606:	b929      	cbnz	r1, 8000614 <check_state+0x54>
	    GPIOJ->BSRR = (uint16_t)GPIO_PIN_5; // Turn on Green LED (LED2)
	}
	else if (Input_for_D1 == 0x0000){//D1 is low
 8000608:	b939      	cbnz	r1, 800061a <check_state+0x5a>
	    GPIOJ->BSRR = (uint32_t)GPIO_PIN_5 << 16; // Turn off Green LED (LED2)
 800060a:	4913      	ldr	r1, [pc, #76]	; (8000658 <check_state+0x98>)
 800060c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000610:	6188      	str	r0, [r1, #24]
 8000612:	e002      	b.n	800061a <check_state+0x5a>
	    GPIOJ->BSRR = (uint16_t)GPIO_PIN_5; // Turn on Green LED (LED2)
 8000614:	4910      	ldr	r1, [pc, #64]	; (8000658 <check_state+0x98>)
 8000616:	2020      	movs	r0, #32
 8000618:	6188      	str	r0, [r1, #24]
	}
	if (Input_for_D2 == 0x0002){//Check if D2 is high
 800061a:	b92a      	cbnz	r2, 8000628 <check_state+0x68>
	    GPIOA->BSRR = (uint16_t)GPIO_PIN_12; // Turn on Green LED (LED3)
	}
	else if (Input_for_D2 == 0x0000){//D2 is low
 800061c:	b942      	cbnz	r2, 8000630 <check_state+0x70>
	    GPIOA->BSRR = (uint32_t)GPIO_PIN_12 << 16; // Turn off Green LED (LED3)
 800061e:	4a12      	ldr	r2, [pc, #72]	; (8000668 <check_state+0xa8>)
 8000620:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8000624:	6191      	str	r1, [r2, #24]
 8000626:	e003      	b.n	8000630 <check_state+0x70>
	    GPIOA->BSRR = (uint16_t)GPIO_PIN_12; // Turn on Green LED (LED3)
 8000628:	4a0f      	ldr	r2, [pc, #60]	; (8000668 <check_state+0xa8>)
 800062a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062e:	6191      	str	r1, [r2, #24]
	}
	if (Input_for_D3 == 0x0040){//Check if D3 is high
 8000630:	b923      	cbnz	r3, 800063c <check_state+0x7c>
	    GPIOD->BSRR = (uint16_t)GPIO_PIN_4 << 16; // Turn on Red LED (LED4) (Note:inverted)
	}
	else if (Input_for_D3 == 0x0000){//Check if D3 is low
 8000632:	b93b      	cbnz	r3, 8000644 <check_state+0x84>
	    GPIOD->BSRR = (uint32_t)GPIO_PIN_4; // Turn off RED LED (LED4)
 8000634:	4b0d      	ldr	r3, [pc, #52]	; (800066c <check_state+0xac>)
 8000636:	2210      	movs	r2, #16
 8000638:	619a      	str	r2, [r3, #24]
	}
}
 800063a:	e003      	b.n	8000644 <check_state+0x84>
	    GPIOD->BSRR = (uint16_t)GPIO_PIN_4 << 16; // Turn on Red LED (LED4) (Note:inverted)
 800063c:	4b0b      	ldr	r3, [pc, #44]	; (800066c <check_state+0xac>)
 800063e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000642:	619a      	str	r2, [r3, #24]
}
 8000644:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	40020800 	.word	0x40020800
 8000650:	2000012c 	.word	0x2000012c
 8000654:	20000028 	.word	0x20000028
 8000658:	40022400 	.word	0x40022400
 800065c:	20000134 	.word	0x20000134
 8000660:	40021400 	.word	0x40021400
 8000664:	20000130 	.word	0x20000130
 8000668:	40020000 	.word	0x40020000
 800066c:	40020c00 	.word	0x40020c00

08000670 <main>:
 {
 8000670:	b508      	push	{r3, lr}
    Sys_Init(); // This always goes at the top of main (defined in init.c)
 8000672:	f000 f879 	bl	8000768 <Sys_Init>
    configure_ports();
 8000676:	f7ff ff5b 	bl	8000530 <configure_ports>
		check_state();
 800067a:	f7ff ffa1 	bl	80005c0 <check_state>
	while(1){
 800067e:	e7fc      	b.n	800067a <main+0xa>

08000680 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 8000680:	b500      	push	{lr}
 8000682:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000684:	2301      	movs	r3, #1
 8000686:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800068c:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000696:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000698:	2219      	movs	r2, #25
 800069a:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 800069c:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80006a0:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a2:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006a4:	2309      	movs	r3, #9
 80006a6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 80006a8:	2307      	movs	r3, #7
 80006aa:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80006ac:	4668      	mov	r0, sp
 80006ae:	f000 faf7 	bl	8000ca0 <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 80006b2:	b100      	cbz	r0, 80006b6 <SystemClock_Config+0x36>
    while(1) { ; }
 80006b4:	e7fe      	b.n	80006b4 <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 80006b6:	f000 fab5 	bl	8000c24 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 80006ba:	b100      	cbz	r0, 80006be <SystemClock_Config+0x3e>
    while(1) { ; }
 80006bc:	e7fe      	b.n	80006bc <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80006be:	230f      	movs	r3, #15
 80006c0:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2302      	movs	r3, #2
 80006c4:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ce:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d4:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 80006d6:	2107      	movs	r1, #7
 80006d8:	a80d      	add	r0, sp, #52	; 0x34
 80006da:	f000 fd53 	bl	8001184 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 80006de:	b100      	cbz	r0, 80006e2 <SystemClock_Config+0x62>
    while(1) { ; }
 80006e0:	e7fe      	b.n	80006e0 <SystemClock_Config+0x60>
  }
}
 80006e2:	b013      	add	sp, #76	; 0x4c
 80006e4:	f85d fb04 	ldr.w	pc, [sp], #4

080006e8 <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 80006e8:	b410      	push	{r4}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006ee:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <CPU_CACHE_Enable+0x7c>)
 80006f4:	2100      	movs	r1, #0
 80006f6:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006fe:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000702:	695a      	ldr	r2, [r3, #20]
 8000704:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000708:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800070a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800070e:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000712:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000716:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800071a:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800071e:	f3c0 324e 	ubfx	r2, r0, #13, #15
 8000722:	e000      	b.n	8000726 <CPU_CACHE_Enable+0x3e>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8000724:	461a      	mov	r2, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000726:	f3c0 01c9 	ubfx	r1, r0, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800072a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800072e:	ea03 1342 	and.w	r3, r3, r2, lsl #5
 8000732:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 8000736:	4c0b      	ldr	r4, [pc, #44]	; (8000764 <CPU_CACHE_Enable+0x7c>)
 8000738:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways-- != 0U);
 800073c:	460b      	mov	r3, r1
 800073e:	3901      	subs	r1, #1
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1f2      	bne.n	800072a <CPU_CACHE_Enable+0x42>
    } while(sets-- != 0U);
 8000744:	1e53      	subs	r3, r2, #1
 8000746:	2a00      	cmp	r2, #0
 8000748:	d1ec      	bne.n	8000724 <CPU_CACHE_Enable+0x3c>
 800074a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800074e:	6963      	ldr	r3, [r4, #20]
 8000750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000754:	6163      	str	r3, [r4, #20]
 8000756:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800075a:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 800075e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <Sys_Init>:

// Unified System Initialization (equivalent of current MPS Sys_Init())
void Sys_Init(void) {
 8000768:	b508      	push	{r3, lr}
	//Initialize the system
	CPU_CACHE_Enable();		// Enable CPU Caching
 800076a:	f7ff ffbd 	bl	80006e8 <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 800076e:	f000 f8e7 	bl	8000940 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 8000772:	f7ff ff85 	bl	8000680 <SystemClock_Config>
		- Stop Bit = No Stop bits
		- Parity = None
		- BaudRate = 115200 baud
		- Hardware flow control disabled (RTS and CTS signals)
	*/
	initUart(&USB_UART, 115200, USART1);
 8000776:	4a03      	ldr	r2, [pc, #12]	; (8000784 <Sys_Init+0x1c>)
 8000778:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800077c:	4802      	ldr	r0, [pc, #8]	; (8000788 <Sys_Init+0x20>)
 800077e:	f000 f873 	bl	8000868 <initUart>
}
 8000782:	bd08      	pop	{r3, pc}
 8000784:	40011000 	.word	0x40011000
 8000788:	2000002c 	.word	0x2000002c

0800078c <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 800078c:	b508      	push	{r3, lr}
  HAL_IncTick();
 800078e:	f000 f8ed 	bl	800096c <HAL_IncTick>
}
 8000792:	bd08      	pop	{r3, pc}

08000794 <HAL_UART_MspInit>:
#include "uart.h"

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000794:	b530      	push	{r4, r5, lr}
 8000796:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 8000798:	6803      	ldr	r3, [r0, #0]
 800079a:	4a2e      	ldr	r2, [pc, #184]	; (8000854 <HAL_UART_MspInit+0xc0>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d004      	beq.n	80007aa <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 80007a0:	4a2d      	ldr	r2, [pc, #180]	; (8000858 <HAL_UART_MspInit+0xc4>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d02c      	beq.n	8000800 <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 80007a6:	b00b      	add	sp, #44	; 0x2c
 80007a8:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 80007aa:	4c2c      	ldr	r4, [pc, #176]	; (800085c <HAL_UART_MspInit+0xc8>)
 80007ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007ae:	f043 0301 	orr.w	r3, r3, #1
 80007b2:	6323      	str	r3, [r4, #48]	; 0x30
 80007b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	9301      	str	r3, [sp, #4]
 80007bc:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 80007be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007c2:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 80007cc:	2303      	movs	r3, #3
 80007ce:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007d0:	2307      	movs	r3, #7
 80007d2:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 80007d4:	4d22      	ldr	r5, [pc, #136]	; (8000860 <HAL_UART_MspInit+0xcc>)
 80007d6:	a905      	add	r1, sp, #20
 80007d8:	4628      	mov	r0, r5
 80007da:	f000 f933 	bl	8000a44 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e2:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 80007e4:	a905      	add	r1, sp, #20
 80007e6:	4628      	mov	r0, r5
 80007e8:	f000 f92c 	bl	8000a44 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 80007ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007ee:	f043 0310 	orr.w	r3, r3, #16
 80007f2:	6463      	str	r3, [r4, #68]	; 0x44
 80007f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007f6:	f003 0310 	and.w	r3, r3, #16
 80007fa:	9302      	str	r3, [sp, #8]
 80007fc:	9b02      	ldr	r3, [sp, #8]
 80007fe:	e7d2      	b.n	80007a6 <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 8000800:	4c16      	ldr	r4, [pc, #88]	; (800085c <HAL_UART_MspInit+0xc8>)
 8000802:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	6323      	str	r3, [r4, #48]	; 0x30
 800080a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800080c:	f003 0304 	and.w	r3, r3, #4
 8000810:	9303      	str	r3, [sp, #12]
 8000812:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 8000814:	2340      	movs	r3, #64	; 0x40
 8000816:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000818:	2302      	movs	r3, #2
 800081a:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800081c:	2301      	movs	r3, #1
 800081e:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000820:	2303      	movs	r3, #3
 8000822:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000824:	2308      	movs	r3, #8
 8000826:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 8000828:	4d0e      	ldr	r5, [pc, #56]	; (8000864 <HAL_UART_MspInit+0xd0>)
 800082a:	a905      	add	r1, sp, #20
 800082c:	4628      	mov	r0, r5
 800082e:	f000 f909 	bl	8000a44 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000832:	2380      	movs	r3, #128	; 0x80
 8000834:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 8000836:	a905      	add	r1, sp, #20
 8000838:	4628      	mov	r0, r5
 800083a:	f000 f903 	bl	8000a44 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 800083e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000840:	f043 0320 	orr.w	r3, r3, #32
 8000844:	6463      	str	r3, [r4, #68]	; 0x44
 8000846:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000848:	f003 0320 	and.w	r3, r3, #32
 800084c:	9304      	str	r3, [sp, #16]
 800084e:	9b04      	ldr	r3, [sp, #16]
}
 8000850:	e7a9      	b.n	80007a6 <HAL_UART_MspInit+0x12>
 8000852:	bf00      	nop
 8000854:	40011000 	.word	0x40011000
 8000858:	40011400 	.word	0x40011400
 800085c:	40023800 	.word	0x40023800
 8000860:	40020000 	.word	0x40020000
 8000864:	40020800 	.word	0x40020800

08000868 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 8000868:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 800086a:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 800086c:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	2200      	movs	r2, #0
 8000870:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 8000872:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 8000874:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 8000876:	210c      	movs	r1, #12
 8000878:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800087a:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 800087c:	f001 f81a 	bl	80018b4 <HAL_UART_Init>
}
 8000880:	bd08      	pop	{r3, pc}
	...

08000884 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000884:	480d      	ldr	r0, [pc, #52]	; (80008bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000886:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8000888:	480d      	ldr	r0, [pc, #52]	; (80008c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800088a:	490e      	ldr	r1, [pc, #56]	; (80008c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800088c:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <LoopForever+0xe>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000890:	e002      	b.n	8000898 <LoopCopyDataInit>

08000892 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 8000892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000896:	3304      	adds	r3, #4

08000898 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8000898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089a:	428c      	cmp	r4, r1



  bcc CopyDataInit
 800089c:	d3f9      	bcc.n	8000892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089e:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80008a0:	4c0b      	ldr	r4, [pc, #44]	; (80008d0 <LoopForever+0x16>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a4:	e001      	b.n	80008aa <LoopFillZerobss>

080008a6 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 80008a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a8:	3204      	adds	r2, #4

080008aa <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 80008aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ac:	d3fb      	bcc.n	80008a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008ae:	f000 f813 	bl	80008d8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80008b2:	f001 f831 	bl	8001918 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008b6:	f7ff fedb 	bl	8000670 <main>

080008ba <LoopForever>:

LoopForever:
    b LoopForever
 80008ba:	e7fe      	b.n	80008ba <LoopForever>
  ldr   r0, =_estack
 80008bc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80008c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008c8:	080019a0 	.word	0x080019a0
  ldr r2, =_sbss
 80008cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008d0:	2000013c 	.word	0x2000013c

080008d4 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d4:	e7fe      	b.n	80008d4 <ADC_IRQHandler>
	...

080008d8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <SystemInit+0x18>)
 80008da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80008de:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80008e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008ea:	609a      	str	r2, [r3, #8]
#endif
}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80008f4:	4770      	bx	lr
	...

080008f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f8:	b510      	push	{r4, lr}
 80008fa:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <HAL_InitTick+0x40>)
 80008fe:	7818      	ldrb	r0, [r3, #0]
 8000900:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000904:	fbb3 f3f0 	udiv	r3, r3, r0
 8000908:	4a0c      	ldr	r2, [pc, #48]	; (800093c <HAL_InitTick+0x44>)
 800090a:	6810      	ldr	r0, [r2, #0]
 800090c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000910:	f000 f882 	bl	8000a18 <HAL_SYSTICK_Config>
 8000914:	b968      	cbnz	r0, 8000932 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000916:	2c0f      	cmp	r4, #15
 8000918:	d901      	bls.n	800091e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800091a:	2001      	movs	r0, #1
 800091c:	e00a      	b.n	8000934 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800091e:	2200      	movs	r2, #0
 8000920:	4621      	mov	r1, r4
 8000922:	f04f 30ff 	mov.w	r0, #4294967295
 8000926:	f000 f845 	bl	80009b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800092a:	4b03      	ldr	r3, [pc, #12]	; (8000938 <HAL_InitTick+0x40>)
 800092c:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 800092e:	2000      	movs	r0, #0
 8000930:	e000      	b.n	8000934 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000932:	2001      	movs	r0, #1
}
 8000934:	bd10      	pop	{r4, pc}
 8000936:	bf00      	nop
 8000938:	20000004 	.word	0x20000004
 800093c:	20000000 	.word	0x20000000

08000940 <HAL_Init>:
{
 8000940:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_Init+0x28>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800094a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000952:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000954:	2003      	movs	r0, #3
 8000956:	f000 f81b 	bl	8000990 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800095a:	200f      	movs	r0, #15
 800095c:	f7ff ffcc 	bl	80008f8 <HAL_InitTick>
  HAL_MspInit();
 8000960:	f7ff ffc8 	bl	80008f4 <HAL_MspInit>
}
 8000964:	2000      	movs	r0, #0
 8000966:	bd08      	pop	{r3, pc}
 8000968:	40023c00 	.word	0x40023c00

0800096c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800096c:	4a03      	ldr	r2, [pc, #12]	; (800097c <HAL_IncTick+0x10>)
 800096e:	6811      	ldr	r1, [r2, #0]
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <HAL_IncTick+0x14>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	440b      	add	r3, r1
 8000976:	6013      	str	r3, [r2, #0]
}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000138 	.word	0x20000138
 8000980:	20000004 	.word	0x20000004

08000984 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000984:	4b01      	ldr	r3, [pc, #4]	; (800098c <HAL_GetTick+0x8>)
 8000986:	6818      	ldr	r0, [r3, #0]
}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20000138 	.word	0x20000138

08000990 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000990:	4906      	ldr	r1, [pc, #24]	; (80009ac <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000992:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000994:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000998:	041b      	lsls	r3, r3, #16
 800099a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800099c:	0200      	lsls	r0, r0, #8
 800099e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80009a4:	4a02      	ldr	r2, [pc, #8]	; (80009b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80009a6:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80009a8:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80009aa:	4770      	bx	lr
 80009ac:	e000ed00 	.word	0xe000ed00
 80009b0:	05fa0000 	.word	0x05fa0000

080009b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009b4:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <HAL_NVIC_SetPriority+0x58>)
 80009b8:	68db      	ldr	r3, [r3, #12]
 80009ba:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009be:	f1c3 0407 	rsb	r4, r3, #7
 80009c2:	2c04      	cmp	r4, #4
 80009c4:	bf28      	it	cs
 80009c6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c8:	1d1d      	adds	r5, r3, #4
 80009ca:	2d06      	cmp	r5, #6
 80009cc:	d914      	bls.n	80009f8 <HAL_NVIC_SetPriority+0x44>
 80009ce:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	f04f 35ff 	mov.w	r5, #4294967295
 80009d4:	fa05 f404 	lsl.w	r4, r5, r4
 80009d8:	ea21 0104 	bic.w	r1, r1, r4
 80009dc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009de:	fa05 f303 	lsl.w	r3, r5, r3
 80009e2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80009e8:	2800      	cmp	r0, #0
 80009ea:	db07      	blt.n	80009fc <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ec:	0109      	lsls	r1, r1, #4
 80009ee:	b2c9      	uxtb	r1, r1
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <HAL_NVIC_SetPriority+0x5c>)
 80009f2:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80009f4:	bc30      	pop	{r4, r5}
 80009f6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009f8:	2300      	movs	r3, #0
 80009fa:	e7e9      	b.n	80009d0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fc:	f000 000f 	and.w	r0, r0, #15
 8000a00:	0109      	lsls	r1, r1, #4
 8000a02:	b2c9      	uxtb	r1, r1
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <HAL_NVIC_SetPriority+0x60>)
 8000a06:	5419      	strb	r1, [r3, r0]
 8000a08:	e7f4      	b.n	80009f4 <HAL_NVIC_SetPriority+0x40>
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00
 8000a10:	e000e400 	.word	0xe000e400
 8000a14:	e000ed14 	.word	0xe000ed14

08000a18 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a18:	3801      	subs	r0, #1
 8000a1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1e:	d20a      	bcs.n	8000a36 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_SYSTICK_Config+0x24>)
 8000a22:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a24:	4a06      	ldr	r2, [pc, #24]	; (8000a40 <HAL_SYSTICK_Config+0x28>)
 8000a26:	21f0      	movs	r1, #240	; 0xf0
 8000a28:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a30:	2207      	movs	r2, #7
 8000a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a34:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a36:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000e010 	.word	0xe000e010
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a44:	2300      	movs	r3, #0
 8000a46:	2b0f      	cmp	r3, #15
 8000a48:	f200 80e3 	bhi.w	8000c12 <HAL_GPIO_Init+0x1ce>
{
 8000a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	e039      	b.n	8000ac6 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a52:	2209      	movs	r2, #9
 8000a54:	e000      	b.n	8000a58 <HAL_GPIO_Init+0x14>
 8000a56:	2200      	movs	r2, #0
 8000a58:	40b2      	lsls	r2, r6
 8000a5a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a5c:	3402      	adds	r4, #2
 8000a5e:	4e6d      	ldr	r6, [pc, #436]	; (8000c14 <HAL_GPIO_Init+0x1d0>)
 8000a60:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a64:	4a6c      	ldr	r2, [pc, #432]	; (8000c18 <HAL_GPIO_Init+0x1d4>)
 8000a66:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000a68:	43ea      	mvns	r2, r5
 8000a6a:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a6e:	684f      	ldr	r7, [r1, #4]
 8000a70:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000a74:	d001      	beq.n	8000a7a <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8000a76:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8000a7a:	4c67      	ldr	r4, [pc, #412]	; (8000c18 <HAL_GPIO_Init+0x1d4>)
 8000a7c:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000a7e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000a80:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a84:	684f      	ldr	r7, [r1, #4]
 8000a86:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000a8a:	d001      	beq.n	8000a90 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8000a8c:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8000a90:	4c61      	ldr	r4, [pc, #388]	; (8000c18 <HAL_GPIO_Init+0x1d4>)
 8000a92:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a94:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000a96:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a9a:	684f      	ldr	r7, [r1, #4]
 8000a9c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000aa0:	d001      	beq.n	8000aa6 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8000aa2:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8000aa6:	4c5c      	ldr	r4, [pc, #368]	; (8000c18 <HAL_GPIO_Init+0x1d4>)
 8000aa8:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000aaa:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000aac:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aae:	684e      	ldr	r6, [r1, #4]
 8000ab0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000ab4:	d001      	beq.n	8000aba <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8000ab6:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000aba:	4c57      	ldr	r4, [pc, #348]	; (8000c18 <HAL_GPIO_Init+0x1d4>)
 8000abc:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000abe:	3301      	adds	r3, #1
 8000ac0:	2b0f      	cmp	r3, #15
 8000ac2:	f200 80a4 	bhi.w	8000c0e <HAL_GPIO_Init+0x1ca>
    ioposition = ((uint32_t)0x01) << position;
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aca:	680c      	ldr	r4, [r1, #0]
 8000acc:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000ad0:	ea32 0404 	bics.w	r4, r2, r4
 8000ad4:	d1f3      	bne.n	8000abe <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ad6:	684c      	ldr	r4, [r1, #4]
 8000ad8:	1e66      	subs	r6, r4, #1
 8000ada:	2c11      	cmp	r4, #17
 8000adc:	bf18      	it	ne
 8000ade:	2e01      	cmpne	r6, #1
 8000ae0:	d901      	bls.n	8000ae6 <HAL_GPIO_Init+0xa2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ae2:	2c12      	cmp	r4, #18
 8000ae4:	d112      	bne.n	8000b0c <HAL_GPIO_Init+0xc8>
        temp = GPIOx->OSPEEDR; 
 8000ae6:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ae8:	005f      	lsls	r7, r3, #1
 8000aea:	2403      	movs	r4, #3
 8000aec:	40bc      	lsls	r4, r7
 8000aee:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8000af2:	68cc      	ldr	r4, [r1, #12]
 8000af4:	40bc      	lsls	r4, r7
 8000af6:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000af8:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000afa:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000afc:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000b00:	684c      	ldr	r4, [r1, #4]
 8000b02:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8000b06:	409a      	lsls	r2, r3
 8000b08:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8000b0a:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b0c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b0e:	005e      	lsls	r6, r3, #1
 8000b10:	2403      	movs	r4, #3
 8000b12:	40b4      	lsls	r4, r6
 8000b14:	43e2      	mvns	r2, r4
 8000b16:	ea27 0704 	bic.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000b1a:	688c      	ldr	r4, [r1, #8]
 8000b1c:	40b4      	lsls	r4, r6
 8000b1e:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8000b20:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b22:	684c      	ldr	r4, [r1, #4]
 8000b24:	2c12      	cmp	r4, #18
 8000b26:	bf18      	it	ne
 8000b28:	2c02      	cmpne	r4, #2
 8000b2a:	d113      	bne.n	8000b54 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3];
 8000b2c:	08df      	lsrs	r7, r3, #3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b34:	f003 0407 	and.w	r4, r3, #7
 8000b38:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8000b3c:	240f      	movs	r4, #15
 8000b3e:	fa04 f40c 	lsl.w	r4, r4, ip
 8000b42:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000b46:	690c      	ldr	r4, [r1, #16]
 8000b48:	fa04 f40c 	lsl.w	r4, r4, ip
 8000b4c:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 8000b50:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 8000b54:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b56:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b58:	684a      	ldr	r2, [r1, #4]
 8000b5a:	f002 0203 	and.w	r2, r2, #3
 8000b5e:	40b2      	lsls	r2, r6
 8000b60:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000b62:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b64:	684a      	ldr	r2, [r1, #4]
 8000b66:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000b6a:	d0a8      	beq.n	8000abe <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6c:	4a2b      	ldr	r2, [pc, #172]	; (8000c1c <HAL_GPIO_Init+0x1d8>)
 8000b6e:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000b70:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000b74:	6454      	str	r4, [r2, #68]	; 0x44
 8000b76:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000b78:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000b7c:	9201      	str	r2, [sp, #4]
 8000b7e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000b80:	089c      	lsrs	r4, r3, #2
 8000b82:	1ca6      	adds	r6, r4, #2
 8000b84:	4a23      	ldr	r2, [pc, #140]	; (8000c14 <HAL_GPIO_Init+0x1d0>)
 8000b86:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b8a:	f003 0203 	and.w	r2, r3, #3
 8000b8e:	0096      	lsls	r6, r2, #2
 8000b90:	220f      	movs	r2, #15
 8000b92:	40b2      	lsls	r2, r6
 8000b94:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b98:	4a21      	ldr	r2, [pc, #132]	; (8000c20 <HAL_GPIO_Init+0x1dc>)
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	f43f af5b 	beq.w	8000a56 <HAL_GPIO_Init+0x12>
 8000ba0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ba4:	4290      	cmp	r0, r2
 8000ba6:	d022      	beq.n	8000bee <HAL_GPIO_Init+0x1aa>
 8000ba8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bac:	4290      	cmp	r0, r2
 8000bae:	d020      	beq.n	8000bf2 <HAL_GPIO_Init+0x1ae>
 8000bb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bb4:	4290      	cmp	r0, r2
 8000bb6:	d01e      	beq.n	8000bf6 <HAL_GPIO_Init+0x1b2>
 8000bb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bbc:	4290      	cmp	r0, r2
 8000bbe:	d01c      	beq.n	8000bfa <HAL_GPIO_Init+0x1b6>
 8000bc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bc4:	4290      	cmp	r0, r2
 8000bc6:	d01a      	beq.n	8000bfe <HAL_GPIO_Init+0x1ba>
 8000bc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bcc:	4290      	cmp	r0, r2
 8000bce:	d018      	beq.n	8000c02 <HAL_GPIO_Init+0x1be>
 8000bd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bd4:	4290      	cmp	r0, r2
 8000bd6:	d016      	beq.n	8000c06 <HAL_GPIO_Init+0x1c2>
 8000bd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bdc:	4290      	cmp	r0, r2
 8000bde:	d014      	beq.n	8000c0a <HAL_GPIO_Init+0x1c6>
 8000be0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000be4:	4290      	cmp	r0, r2
 8000be6:	f43f af34 	beq.w	8000a52 <HAL_GPIO_Init+0xe>
 8000bea:	220a      	movs	r2, #10
 8000bec:	e734      	b.n	8000a58 <HAL_GPIO_Init+0x14>
 8000bee:	2201      	movs	r2, #1
 8000bf0:	e732      	b.n	8000a58 <HAL_GPIO_Init+0x14>
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	e730      	b.n	8000a58 <HAL_GPIO_Init+0x14>
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	e72e      	b.n	8000a58 <HAL_GPIO_Init+0x14>
 8000bfa:	2204      	movs	r2, #4
 8000bfc:	e72c      	b.n	8000a58 <HAL_GPIO_Init+0x14>
 8000bfe:	2205      	movs	r2, #5
 8000c00:	e72a      	b.n	8000a58 <HAL_GPIO_Init+0x14>
 8000c02:	2206      	movs	r2, #6
 8000c04:	e728      	b.n	8000a58 <HAL_GPIO_Init+0x14>
 8000c06:	2207      	movs	r2, #7
 8000c08:	e726      	b.n	8000a58 <HAL_GPIO_Init+0x14>
 8000c0a:	2208      	movs	r2, #8
 8000c0c:	e724      	b.n	8000a58 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000c0e:	b003      	add	sp, #12
 8000c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c12:	4770      	bx	lr
 8000c14:	40013800 	.word	0x40013800
 8000c18:	40013c00 	.word	0x40013c00
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020000 	.word	0x40020000

08000c24 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000c24:	b510      	push	{r4, lr}
 8000c26:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c28:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <HAL_PWREx_EnableOverDrive+0x74>)
 8000c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c30:	641a      	str	r2, [r3, #64]	; 0x40
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c38:	9301      	str	r3, [sp, #4]
 8000c3a:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000c3c:	4a17      	ldr	r2, [pc, #92]	; (8000c9c <HAL_PWREx_EnableOverDrive+0x78>)
 8000c3e:	6813      	ldr	r3, [r2, #0]
 8000c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c44:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c46:	f7ff fe9d 	bl	8000984 <HAL_GetTick>
 8000c4a:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000c4c:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <HAL_PWREx_EnableOverDrive+0x78>)
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000c54:	d108      	bne.n	8000c68 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c56:	f7ff fe95 	bl	8000984 <HAL_GetTick>
 8000c5a:	1b00      	subs	r0, r0, r4
 8000c5c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c60:	d9f4      	bls.n	8000c4c <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8000c62:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8000c64:	b002      	add	sp, #8
 8000c66:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000c68:	4a0c      	ldr	r2, [pc, #48]	; (8000c9c <HAL_PWREx_EnableOverDrive+0x78>)
 8000c6a:	6813      	ldr	r3, [r2, #0]
 8000c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c70:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8000c72:	f7ff fe87 	bl	8000984 <HAL_GetTick>
 8000c76:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <HAL_PWREx_EnableOverDrive+0x78>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000c80:	d107      	bne.n	8000c92 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c82:	f7ff fe7f 	bl	8000984 <HAL_GetTick>
 8000c86:	1b00      	subs	r0, r0, r4
 8000c88:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c8c:	d9f4      	bls.n	8000c78 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8000c8e:	2003      	movs	r0, #3
 8000c90:	e7e8      	b.n	8000c64 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8000c92:	2000      	movs	r0, #0
 8000c94:	e7e6      	b.n	8000c64 <HAL_PWREx_EnableOverDrive+0x40>
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40007000 	.word	0x40007000

08000ca0 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	f000 8206 	beq.w	80010b2 <HAL_RCC_OscConfig+0x412>
{
 8000ca6:	b570      	push	{r4, r5, r6, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cac:	6803      	ldr	r3, [r0, #0]
 8000cae:	f013 0f01 	tst.w	r3, #1
 8000cb2:	d029      	beq.n	8000d08 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cb4:	4ba7      	ldr	r3, [pc, #668]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	f003 030c 	and.w	r3, r3, #12
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	d01a      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cc0:	4ba4      	ldr	r3, [pc, #656]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	f003 030c 	and.w	r3, r3, #12
 8000cc8:	2b08      	cmp	r3, #8
 8000cca:	d00f      	beq.n	8000cec <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ccc:	6863      	ldr	r3, [r4, #4]
 8000cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd2:	d040      	beq.n	8000d56 <HAL_RCC_OscConfig+0xb6>
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d154      	bne.n	8000d82 <HAL_RCC_OscConfig+0xe2>
 8000cd8:	4b9e      	ldr	r3, [pc, #632]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	e039      	b.n	8000d60 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cec:	4b99      	ldr	r3, [pc, #612]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000cf4:	d0ea      	beq.n	8000ccc <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf6:	4b97      	ldr	r3, [pc, #604]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000cfe:	d003      	beq.n	8000d08 <HAL_RCC_OscConfig+0x68>
 8000d00:	6863      	ldr	r3, [r4, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f000 81d7 	beq.w	80010b6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d08:	6823      	ldr	r3, [r4, #0]
 8000d0a:	f013 0f02 	tst.w	r3, #2
 8000d0e:	d074      	beq.n	8000dfa <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d10:	4b90      	ldr	r3, [pc, #576]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f013 0f0c 	tst.w	r3, #12
 8000d18:	d05e      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d1a:	4b8e      	ldr	r3, [pc, #568]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	f003 030c 	and.w	r3, r3, #12
 8000d22:	2b08      	cmp	r3, #8
 8000d24:	d053      	beq.n	8000dce <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000d26:	68e3      	ldr	r3, [r4, #12]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f000 8089 	beq.w	8000e40 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d2e:	4a89      	ldr	r2, [pc, #548]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000d30:	6813      	ldr	r3, [r2, #0]
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d38:	f7ff fe24 	bl	8000984 <HAL_GetTick>
 8000d3c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d3e:	4b85      	ldr	r3, [pc, #532]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f013 0f02 	tst.w	r3, #2
 8000d46:	d172      	bne.n	8000e2e <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d48:	f7ff fe1c 	bl	8000984 <HAL_GetTick>
 8000d4c:	1b40      	subs	r0, r0, r5
 8000d4e:	2802      	cmp	r0, #2
 8000d50:	d9f5      	bls.n	8000d3e <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8000d52:	2003      	movs	r0, #3
 8000d54:	e1b4      	b.n	80010c0 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d56:	4a7f      	ldr	r2, [pc, #508]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000d58:	6813      	ldr	r3, [r2, #0]
 8000d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d5e:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d60:	6863      	ldr	r3, [r4, #4]
 8000d62:	b32b      	cbz	r3, 8000db0 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8000d64:	f7ff fe0e 	bl	8000984 <HAL_GetTick>
 8000d68:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d6a:	4b7a      	ldr	r3, [pc, #488]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d72:	d1c9      	bne.n	8000d08 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d74:	f7ff fe06 	bl	8000984 <HAL_GetTick>
 8000d78:	1b40      	subs	r0, r0, r5
 8000d7a:	2864      	cmp	r0, #100	; 0x64
 8000d7c:	d9f5      	bls.n	8000d6a <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8000d7e:	2003      	movs	r0, #3
 8000d80:	e19e      	b.n	80010c0 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d86:	d009      	beq.n	8000d9c <HAL_RCC_OscConfig+0xfc>
 8000d88:	4b72      	ldr	r3, [pc, #456]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	e7e1      	b.n	8000d60 <HAL_RCC_OscConfig+0xc0>
 8000d9c:	4b6d      	ldr	r3, [pc, #436]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	e7d7      	b.n	8000d60 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8000db0:	f7ff fde8 	bl	8000984 <HAL_GetTick>
 8000db4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000db6:	4b67      	ldr	r3, [pc, #412]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000dbe:	d0a3      	beq.n	8000d08 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dc0:	f7ff fde0 	bl	8000984 <HAL_GetTick>
 8000dc4:	1b40      	subs	r0, r0, r5
 8000dc6:	2864      	cmp	r0, #100	; 0x64
 8000dc8:	d9f5      	bls.n	8000db6 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8000dca:	2003      	movs	r0, #3
 8000dcc:	e178      	b.n	80010c0 <HAL_RCC_OscConfig+0x420>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dce:	4b61      	ldr	r3, [pc, #388]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000dd6:	d1a6      	bne.n	8000d26 <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dd8:	4b5e      	ldr	r3, [pc, #376]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f013 0f02 	tst.w	r3, #2
 8000de0:	d003      	beq.n	8000dea <HAL_RCC_OscConfig+0x14a>
 8000de2:	68e3      	ldr	r3, [r4, #12]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	f040 8168 	bne.w	80010ba <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dea:	4a5a      	ldr	r2, [pc, #360]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000dec:	6813      	ldr	r3, [r2, #0]
 8000dee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000df2:	6921      	ldr	r1, [r4, #16]
 8000df4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000df8:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dfa:	6823      	ldr	r3, [r4, #0]
 8000dfc:	f013 0f08 	tst.w	r3, #8
 8000e00:	d046      	beq.n	8000e90 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000e02:	6963      	ldr	r3, [r4, #20]
 8000e04:	b383      	cbz	r3, 8000e68 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e06:	4a53      	ldr	r2, [pc, #332]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000e08:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e10:	f7ff fdb8 	bl	8000984 <HAL_GetTick>
 8000e14:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e16:	4b4f      	ldr	r3, [pc, #316]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e1a:	f013 0f02 	tst.w	r3, #2
 8000e1e:	d137      	bne.n	8000e90 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e20:	f7ff fdb0 	bl	8000984 <HAL_GetTick>
 8000e24:	1b40      	subs	r0, r0, r5
 8000e26:	2802      	cmp	r0, #2
 8000e28:	d9f5      	bls.n	8000e16 <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 8000e2a:	2003      	movs	r0, #3
 8000e2c:	e148      	b.n	80010c0 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e2e:	4a49      	ldr	r2, [pc, #292]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000e30:	6813      	ldr	r3, [r2, #0]
 8000e32:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e36:	6921      	ldr	r1, [r4, #16]
 8000e38:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	e7dc      	b.n	8000dfa <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8000e40:	4a44      	ldr	r2, [pc, #272]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000e42:	6813      	ldr	r3, [r2, #0]
 8000e44:	f023 0301 	bic.w	r3, r3, #1
 8000e48:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000e4a:	f7ff fd9b 	bl	8000984 <HAL_GetTick>
 8000e4e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e50:	4b40      	ldr	r3, [pc, #256]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f013 0f02 	tst.w	r3, #2
 8000e58:	d0cf      	beq.n	8000dfa <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e5a:	f7ff fd93 	bl	8000984 <HAL_GetTick>
 8000e5e:	1b40      	subs	r0, r0, r5
 8000e60:	2802      	cmp	r0, #2
 8000e62:	d9f5      	bls.n	8000e50 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 8000e64:	2003      	movs	r0, #3
 8000e66:	e12b      	b.n	80010c0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e68:	4a3a      	ldr	r2, [pc, #232]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000e6a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000e6c:	f023 0301 	bic.w	r3, r3, #1
 8000e70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e72:	f7ff fd87 	bl	8000984 <HAL_GetTick>
 8000e76:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e78:	4b36      	ldr	r3, [pc, #216]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e7c:	f013 0f02 	tst.w	r3, #2
 8000e80:	d006      	beq.n	8000e90 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e82:	f7ff fd7f 	bl	8000984 <HAL_GetTick>
 8000e86:	1b40      	subs	r0, r0, r5
 8000e88:	2802      	cmp	r0, #2
 8000e8a:	d9f5      	bls.n	8000e78 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	e117      	b.n	80010c0 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e90:	6823      	ldr	r3, [r4, #0]
 8000e92:	f013 0f04 	tst.w	r3, #4
 8000e96:	d07d      	beq.n	8000f94 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e98:	4b2e      	ldr	r3, [pc, #184]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000ea0:	d10b      	bne.n	8000eba <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	4b2c      	ldr	r3, [pc, #176]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ea6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000eaa:	641a      	str	r2, [r3, #64]	; 0x40
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000eb6:	2501      	movs	r5, #1
 8000eb8:	e000      	b.n	8000ebc <HAL_RCC_OscConfig+0x21c>
  FlagStatus pwrclkchanged = RESET;
 8000eba:	2500      	movs	r5, #0
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ebc:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <HAL_RCC_OscConfig+0x2b8>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000ec4:	d00e      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ec6:	68a3      	ldr	r3, [r4, #8]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d01f      	beq.n	8000f0c <HAL_RCC_OscConfig+0x26c>
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d135      	bne.n	8000f3c <HAL_RCC_OscConfig+0x29c>
 8000ed0:	4b20      	ldr	r3, [pc, #128]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000ed2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000ed4:	f022 0201 	bic.w	r2, r2, #1
 8000ed8:	671a      	str	r2, [r3, #112]	; 0x70
 8000eda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000edc:	f022 0204 	bic.w	r2, r2, #4
 8000ee0:	671a      	str	r2, [r3, #112]	; 0x70
 8000ee2:	e018      	b.n	8000f16 <HAL_RCC_OscConfig+0x276>
      PWR->CR1 |= PWR_CR1_DBP;
 8000ee4:	4a1c      	ldr	r2, [pc, #112]	; (8000f58 <HAL_RCC_OscConfig+0x2b8>)
 8000ee6:	6813      	ldr	r3, [r2, #0]
 8000ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eec:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000eee:	f7ff fd49 	bl	8000984 <HAL_GetTick>
 8000ef2:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <HAL_RCC_OscConfig+0x2b8>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000efc:	d1e3      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x226>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000efe:	f7ff fd41 	bl	8000984 <HAL_GetTick>
 8000f02:	1b80      	subs	r0, r0, r6
 8000f04:	2864      	cmp	r0, #100	; 0x64
 8000f06:	d9f5      	bls.n	8000ef4 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 8000f08:	2003      	movs	r0, #3
 8000f0a:	e0d9      	b.n	80010c0 <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f0c:	4a11      	ldr	r2, [pc, #68]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000f0e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f16:	68a3      	ldr	r3, [r4, #8]
 8000f18:	b353      	cbz	r3, 8000f70 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f1a:	f7ff fd33 	bl	8000984 <HAL_GetTick>
 8000f1e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f24:	f013 0f02 	tst.w	r3, #2
 8000f28:	d133      	bne.n	8000f92 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f2a:	f7ff fd2b 	bl	8000984 <HAL_GetTick>
 8000f2e:	1b80      	subs	r0, r0, r6
 8000f30:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f34:	4298      	cmp	r0, r3
 8000f36:	d9f3      	bls.n	8000f20 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8000f38:	2003      	movs	r0, #3
 8000f3a:	e0c1      	b.n	80010c0 <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f3c:	2b05      	cmp	r3, #5
 8000f3e:	d00d      	beq.n	8000f5c <HAL_RCC_OscConfig+0x2bc>
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <HAL_RCC_OscConfig+0x2b4>)
 8000f42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f44:	f022 0201 	bic.w	r2, r2, #1
 8000f48:	671a      	str	r2, [r3, #112]	; 0x70
 8000f4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f4c:	f022 0204 	bic.w	r2, r2, #4
 8000f50:	671a      	str	r2, [r3, #112]	; 0x70
 8000f52:	e7e0      	b.n	8000f16 <HAL_RCC_OscConfig+0x276>
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40007000 	.word	0x40007000
 8000f5c:	4b60      	ldr	r3, [pc, #384]	; (80010e0 <HAL_RCC_OscConfig+0x440>)
 8000f5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f60:	f042 0204 	orr.w	r2, r2, #4
 8000f64:	671a      	str	r2, [r3, #112]	; 0x70
 8000f66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f68:	f042 0201 	orr.w	r2, r2, #1
 8000f6c:	671a      	str	r2, [r3, #112]	; 0x70
 8000f6e:	e7d2      	b.n	8000f16 <HAL_RCC_OscConfig+0x276>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f70:	f7ff fd08 	bl	8000984 <HAL_GetTick>
 8000f74:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f76:	4b5a      	ldr	r3, [pc, #360]	; (80010e0 <HAL_RCC_OscConfig+0x440>)
 8000f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f7a:	f013 0f02 	tst.w	r3, #2
 8000f7e:	d008      	beq.n	8000f92 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f80:	f7ff fd00 	bl	8000984 <HAL_GetTick>
 8000f84:	1b80      	subs	r0, r0, r6
 8000f86:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f8a:	4298      	cmp	r0, r3
 8000f8c:	d9f3      	bls.n	8000f76 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8000f8e:	2003      	movs	r0, #3
 8000f90:	e096      	b.n	80010c0 <HAL_RCC_OscConfig+0x420>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000f92:	b9fd      	cbnz	r5, 8000fd4 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f94:	69a3      	ldr	r3, [r4, #24]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 8091 	beq.w	80010be <HAL_RCC_OscConfig+0x41e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f9c:	4a50      	ldr	r2, [pc, #320]	; (80010e0 <HAL_RCC_OscConfig+0x440>)
 8000f9e:	6892      	ldr	r2, [r2, #8]
 8000fa0:	f002 020c 	and.w	r2, r2, #12
 8000fa4:	2a08      	cmp	r2, #8
 8000fa6:	d059      	beq.n	800105c <HAL_RCC_OscConfig+0x3bc>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d019      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fac:	4a4c      	ldr	r2, [pc, #304]	; (80010e0 <HAL_RCC_OscConfig+0x440>)
 8000fae:	6813      	ldr	r3, [r2, #0]
 8000fb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fb6:	f7ff fce5 	bl	8000984 <HAL_GetTick>
 8000fba:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fbc:	4b48      	ldr	r3, [pc, #288]	; (80010e0 <HAL_RCC_OscConfig+0x440>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000fc4:	d048      	beq.n	8001058 <HAL_RCC_OscConfig+0x3b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fc6:	f7ff fcdd 	bl	8000984 <HAL_GetTick>
 8000fca:	1b00      	subs	r0, r0, r4
 8000fcc:	2802      	cmp	r0, #2
 8000fce:	d9f5      	bls.n	8000fbc <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	e075      	b.n	80010c0 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fd4:	4a42      	ldr	r2, [pc, #264]	; (80010e0 <HAL_RCC_OscConfig+0x440>)
 8000fd6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fde:	e7d9      	b.n	8000f94 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8000fe0:	4a3f      	ldr	r2, [pc, #252]	; (80010e0 <HAL_RCC_OscConfig+0x440>)
 8000fe2:	6813      	ldr	r3, [r2, #0]
 8000fe4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fe8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000fea:	f7ff fccb 	bl	8000984 <HAL_GetTick>
 8000fee:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ff0:	4b3b      	ldr	r3, [pc, #236]	; (80010e0 <HAL_RCC_OscConfig+0x440>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000ff8:	d006      	beq.n	8001008 <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ffa:	f7ff fcc3 	bl	8000984 <HAL_GetTick>
 8000ffe:	1b40      	subs	r0, r0, r5
 8001000:	2802      	cmp	r0, #2
 8001002:	d9f5      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 8001004:	2003      	movs	r0, #3
 8001006:	e05b      	b.n	80010c0 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001008:	69e3      	ldr	r3, [r4, #28]
 800100a:	6a22      	ldr	r2, [r4, #32]
 800100c:	4313      	orrs	r3, r2
 800100e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001010:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001014:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001016:	0852      	lsrs	r2, r2, #1
 8001018:	3a01      	subs	r2, #1
 800101a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800101e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001020:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001024:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001026:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800102a:	4a2d      	ldr	r2, [pc, #180]	; (80010e0 <HAL_RCC_OscConfig+0x440>)
 800102c:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800102e:	6813      	ldr	r3, [r2, #0]
 8001030:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001034:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001036:	f7ff fca5 	bl	8000984 <HAL_GetTick>
 800103a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800103c:	4b28      	ldr	r3, [pc, #160]	; (80010e0 <HAL_RCC_OscConfig+0x440>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001044:	d106      	bne.n	8001054 <HAL_RCC_OscConfig+0x3b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001046:	f7ff fc9d 	bl	8000984 <HAL_GetTick>
 800104a:	1b00      	subs	r0, r0, r4
 800104c:	2802      	cmp	r0, #2
 800104e:	d9f5      	bls.n	800103c <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 8001050:	2003      	movs	r0, #3
 8001052:	e035      	b.n	80010c0 <HAL_RCC_OscConfig+0x420>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001054:	2000      	movs	r0, #0
 8001056:	e033      	b.n	80010c0 <HAL_RCC_OscConfig+0x420>
 8001058:	2000      	movs	r0, #0
 800105a:	e031      	b.n	80010c0 <HAL_RCC_OscConfig+0x420>
      pll_config = RCC->PLLCFGR;
 800105c:	4a20      	ldr	r2, [pc, #128]	; (80010e0 <HAL_RCC_OscConfig+0x440>)
 800105e:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001060:	2b01      	cmp	r3, #1
 8001062:	d02f      	beq.n	80010c4 <HAL_RCC_OscConfig+0x424>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001064:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8001068:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800106a:	428b      	cmp	r3, r1
 800106c:	d12c      	bne.n	80010c8 <HAL_RCC_OscConfig+0x428>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800106e:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8001072:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001074:	428b      	cmp	r3, r1
 8001076:	d129      	bne.n	80010cc <HAL_RCC_OscConfig+0x42c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001078:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800107a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800107e:	4013      	ands	r3, r2
 8001080:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8001084:	d124      	bne.n	80010d0 <HAL_RCC_OscConfig+0x430>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001086:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 800108a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800108c:	085b      	lsrs	r3, r3, #1
 800108e:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001090:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8001094:	d11e      	bne.n	80010d4 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001096:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 800109a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800109c:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 80010a0:	d11a      	bne.n	80010d8 <HAL_RCC_OscConfig+0x438>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80010a2:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80010a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80010a8:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 80010ac:	d116      	bne.n	80010dc <HAL_RCC_OscConfig+0x43c>
  return HAL_OK;
 80010ae:	2000      	movs	r0, #0
 80010b0:	e006      	b.n	80010c0 <HAL_RCC_OscConfig+0x420>
    return HAL_ERROR;
 80010b2:	2001      	movs	r0, #1
}
 80010b4:	4770      	bx	lr
        return HAL_ERROR;
 80010b6:	2001      	movs	r0, #1
 80010b8:	e002      	b.n	80010c0 <HAL_RCC_OscConfig+0x420>
        return HAL_ERROR;
 80010ba:	2001      	movs	r0, #1
 80010bc:	e000      	b.n	80010c0 <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 80010be:	2000      	movs	r0, #0
}
 80010c0:	b002      	add	sp, #8
 80010c2:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80010c4:	2001      	movs	r0, #1
 80010c6:	e7fb      	b.n	80010c0 <HAL_RCC_OscConfig+0x420>
 80010c8:	2001      	movs	r0, #1
 80010ca:	e7f9      	b.n	80010c0 <HAL_RCC_OscConfig+0x420>
 80010cc:	2001      	movs	r0, #1
 80010ce:	e7f7      	b.n	80010c0 <HAL_RCC_OscConfig+0x420>
 80010d0:	2001      	movs	r0, #1
 80010d2:	e7f5      	b.n	80010c0 <HAL_RCC_OscConfig+0x420>
 80010d4:	2001      	movs	r0, #1
 80010d6:	e7f3      	b.n	80010c0 <HAL_RCC_OscConfig+0x420>
 80010d8:	2001      	movs	r0, #1
 80010da:	e7f1      	b.n	80010c0 <HAL_RCC_OscConfig+0x420>
 80010dc:	2001      	movs	r0, #1
 80010de:	e7ef      	b.n	80010c0 <HAL_RCC_OscConfig+0x420>
 80010e0:	40023800 	.word	0x40023800

080010e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010e6:	4b24      	ldr	r3, [pc, #144]	; (8001178 <HAL_RCC_GetSysClockFreq+0x94>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f003 030c 	and.w	r3, r3, #12
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	d03d      	beq.n	800116e <HAL_RCC_GetSysClockFreq+0x8a>
 80010f2:	2b08      	cmp	r3, #8
 80010f4:	d13d      	bne.n	8001172 <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010f6:	4b20      	ldr	r3, [pc, #128]	; (8001178 <HAL_RCC_GetSysClockFreq+0x94>)
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001104:	d012      	beq.n	800112c <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <HAL_RCC_GetSysClockFreq+0x94>)
 8001108:	6859      	ldr	r1, [r3, #4]
 800110a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800110e:	2300      	movs	r3, #0
 8001110:	481a      	ldr	r0, [pc, #104]	; (800117c <HAL_RCC_GetSysClockFreq+0x98>)
 8001112:	fba1 0100 	umull	r0, r1, r1, r0
 8001116:	f7ff f88f 	bl	8000238 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <HAL_RCC_GetSysClockFreq+0x94>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001122:	3301      	adds	r3, #1
 8001124:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001126:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800112a:	e023      	b.n	8001174 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_RCC_GetSysClockFreq+0x94>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001134:	015c      	lsls	r4, r3, #5
 8001136:	2500      	movs	r5, #0
 8001138:	1ae4      	subs	r4, r4, r3
 800113a:	f165 0500 	sbc.w	r5, r5, #0
 800113e:	01ae      	lsls	r6, r5, #6
 8001140:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8001144:	01a7      	lsls	r7, r4, #6
 8001146:	1b38      	subs	r0, r7, r4
 8001148:	eb66 0105 	sbc.w	r1, r6, r5
 800114c:	00cc      	lsls	r4, r1, #3
 800114e:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8001152:	00c5      	lsls	r5, r0, #3
 8001154:	18e8      	adds	r0, r5, r3
 8001156:	f144 0100 	adc.w	r1, r4, #0
 800115a:	028b      	lsls	r3, r1, #10
 800115c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001160:	0284      	lsls	r4, r0, #10
 8001162:	4620      	mov	r0, r4
 8001164:	4619      	mov	r1, r3
 8001166:	2300      	movs	r3, #0
 8001168:	f7ff f866 	bl	8000238 <__aeabi_uldivmod>
 800116c:	e7d5      	b.n	800111a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 800116e:	4803      	ldr	r0, [pc, #12]	; (800117c <HAL_RCC_GetSysClockFreq+0x98>)
 8001170:	e000      	b.n	8001174 <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001172:	4803      	ldr	r0, [pc, #12]	; (8001180 <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	017d7840 	.word	0x017d7840
 8001180:	00f42400 	.word	0x00f42400

08001184 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001184:	2800      	cmp	r0, #0
 8001186:	f000 80a0 	beq.w	80012ca <HAL_RCC_ClockConfig+0x146>
{
 800118a:	b570      	push	{r4, r5, r6, lr}
 800118c:	460d      	mov	r5, r1
 800118e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001190:	4b52      	ldr	r3, [pc, #328]	; (80012dc <HAL_RCC_ClockConfig+0x158>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 030f 	and.w	r3, r3, #15
 8001198:	428b      	cmp	r3, r1
 800119a:	d20b      	bcs.n	80011b4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800119c:	4a4f      	ldr	r2, [pc, #316]	; (80012dc <HAL_RCC_ClockConfig+0x158>)
 800119e:	6813      	ldr	r3, [r2, #0]
 80011a0:	f023 030f 	bic.w	r3, r3, #15
 80011a4:	430b      	orrs	r3, r1
 80011a6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011a8:	6813      	ldr	r3, [r2, #0]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	428b      	cmp	r3, r1
 80011b0:	f040 808d 	bne.w	80012ce <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011b4:	6823      	ldr	r3, [r4, #0]
 80011b6:	f013 0f02 	tst.w	r3, #2
 80011ba:	d017      	beq.n	80011ec <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011bc:	f013 0f04 	tst.w	r3, #4
 80011c0:	d004      	beq.n	80011cc <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011c2:	4a47      	ldr	r2, [pc, #284]	; (80012e0 <HAL_RCC_ClockConfig+0x15c>)
 80011c4:	6893      	ldr	r3, [r2, #8]
 80011c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011ca:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011cc:	6823      	ldr	r3, [r4, #0]
 80011ce:	f013 0f08 	tst.w	r3, #8
 80011d2:	d004      	beq.n	80011de <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011d4:	4a42      	ldr	r2, [pc, #264]	; (80012e0 <HAL_RCC_ClockConfig+0x15c>)
 80011d6:	6893      	ldr	r3, [r2, #8]
 80011d8:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011dc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011de:	4a40      	ldr	r2, [pc, #256]	; (80012e0 <HAL_RCC_ClockConfig+0x15c>)
 80011e0:	6893      	ldr	r3, [r2, #8]
 80011e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011e6:	68a1      	ldr	r1, [r4, #8]
 80011e8:	430b      	orrs	r3, r1
 80011ea:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	f013 0f01 	tst.w	r3, #1
 80011f2:	d031      	beq.n	8001258 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011f4:	6863      	ldr	r3, [r4, #4]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d020      	beq.n	800123c <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d025      	beq.n	800124a <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fe:	4a38      	ldr	r2, [pc, #224]	; (80012e0 <HAL_RCC_ClockConfig+0x15c>)
 8001200:	6812      	ldr	r2, [r2, #0]
 8001202:	f012 0f02 	tst.w	r2, #2
 8001206:	d064      	beq.n	80012d2 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001208:	4935      	ldr	r1, [pc, #212]	; (80012e0 <HAL_RCC_ClockConfig+0x15c>)
 800120a:	688a      	ldr	r2, [r1, #8]
 800120c:	f022 0203 	bic.w	r2, r2, #3
 8001210:	4313      	orrs	r3, r2
 8001212:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001214:	f7ff fbb6 	bl	8000984 <HAL_GetTick>
 8001218:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800121a:	4b31      	ldr	r3, [pc, #196]	; (80012e0 <HAL_RCC_ClockConfig+0x15c>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 030c 	and.w	r3, r3, #12
 8001222:	6862      	ldr	r2, [r4, #4]
 8001224:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001228:	d016      	beq.n	8001258 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800122a:	f7ff fbab 	bl	8000984 <HAL_GetTick>
 800122e:	1b80      	subs	r0, r0, r6
 8001230:	f241 3388 	movw	r3, #5000	; 0x1388
 8001234:	4298      	cmp	r0, r3
 8001236:	d9f0      	bls.n	800121a <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8001238:	2003      	movs	r0, #3
 800123a:	e045      	b.n	80012c8 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123c:	4a28      	ldr	r2, [pc, #160]	; (80012e0 <HAL_RCC_ClockConfig+0x15c>)
 800123e:	6812      	ldr	r2, [r2, #0]
 8001240:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001244:	d1e0      	bne.n	8001208 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001246:	2001      	movs	r0, #1
 8001248:	e03e      	b.n	80012c8 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800124a:	4a25      	ldr	r2, [pc, #148]	; (80012e0 <HAL_RCC_ClockConfig+0x15c>)
 800124c:	6812      	ldr	r2, [r2, #0]
 800124e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001252:	d1d9      	bne.n	8001208 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001254:	2001      	movs	r0, #1
 8001256:	e037      	b.n	80012c8 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001258:	4b20      	ldr	r3, [pc, #128]	; (80012dc <HAL_RCC_ClockConfig+0x158>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 030f 	and.w	r3, r3, #15
 8001260:	42ab      	cmp	r3, r5
 8001262:	d90a      	bls.n	800127a <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001264:	4a1d      	ldr	r2, [pc, #116]	; (80012dc <HAL_RCC_ClockConfig+0x158>)
 8001266:	6813      	ldr	r3, [r2, #0]
 8001268:	f023 030f 	bic.w	r3, r3, #15
 800126c:	432b      	orrs	r3, r5
 800126e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001270:	6813      	ldr	r3, [r2, #0]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	42ab      	cmp	r3, r5
 8001278:	d12d      	bne.n	80012d6 <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800127a:	6823      	ldr	r3, [r4, #0]
 800127c:	f013 0f04 	tst.w	r3, #4
 8001280:	d006      	beq.n	8001290 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001282:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <HAL_RCC_ClockConfig+0x15c>)
 8001284:	6893      	ldr	r3, [r2, #8]
 8001286:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800128a:	68e1      	ldr	r1, [r4, #12]
 800128c:	430b      	orrs	r3, r1
 800128e:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001290:	6823      	ldr	r3, [r4, #0]
 8001292:	f013 0f08 	tst.w	r3, #8
 8001296:	d007      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001298:	4a11      	ldr	r2, [pc, #68]	; (80012e0 <HAL_RCC_ClockConfig+0x15c>)
 800129a:	6893      	ldr	r3, [r2, #8]
 800129c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80012a0:	6921      	ldr	r1, [r4, #16]
 80012a2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80012a6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012a8:	f7ff ff1c 	bl	80010e4 <HAL_RCC_GetSysClockFreq>
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <HAL_RCC_ClockConfig+0x15c>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80012b4:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <HAL_RCC_ClockConfig+0x160>)
 80012b6:	5cd3      	ldrb	r3, [r2, r3]
 80012b8:	40d8      	lsrs	r0, r3
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <HAL_RCC_ClockConfig+0x164>)
 80012bc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_RCC_ClockConfig+0x168>)
 80012c0:	6818      	ldr	r0, [r3, #0]
 80012c2:	f7ff fb19 	bl	80008f8 <HAL_InitTick>
  return HAL_OK;
 80012c6:	2000      	movs	r0, #0
}
 80012c8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80012ca:	2001      	movs	r0, #1
}
 80012cc:	4770      	bx	lr
      return HAL_ERROR;
 80012ce:	2001      	movs	r0, #1
 80012d0:	e7fa      	b.n	80012c8 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 80012d2:	2001      	movs	r0, #1
 80012d4:	e7f8      	b.n	80012c8 <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 80012d6:	2001      	movs	r0, #1
 80012d8:	e7f6      	b.n	80012c8 <HAL_RCC_ClockConfig+0x144>
 80012da:	bf00      	nop
 80012dc:	40023c00 	.word	0x40023c00
 80012e0:	40023800 	.word	0x40023800
 80012e4:	08001978 	.word	0x08001978
 80012e8:	20000000 	.word	0x20000000
 80012ec:	20000008 	.word	0x20000008

080012f0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80012f0:	4b01      	ldr	r3, [pc, #4]	; (80012f8 <HAL_RCC_GetHCLKFreq+0x8>)
 80012f2:	6818      	ldr	r0, [r3, #0]
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000000 	.word	0x20000000

080012fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012fc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012fe:	f7ff fff7 	bl	80012f0 <HAL_RCC_GetHCLKFreq>
 8001302:	4b04      	ldr	r3, [pc, #16]	; (8001314 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800130a:	4a03      	ldr	r2, [pc, #12]	; (8001318 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800130c:	5cd3      	ldrb	r3, [r2, r3]
}
 800130e:	40d8      	lsrs	r0, r3
 8001310:	bd08      	pop	{r3, pc}
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	08001988 	.word	0x08001988

0800131c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800131c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800131e:	f7ff ffe7 	bl	80012f0 <HAL_RCC_GetHCLKFreq>
 8001322:	4b04      	ldr	r3, [pc, #16]	; (8001334 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800132a:	4a03      	ldr	r2, [pc, #12]	; (8001338 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800132c:	5cd3      	ldrb	r3, [r2, r3]
}
 800132e:	40d8      	lsrs	r0, r3
 8001330:	bd08      	pop	{r3, pc}
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800
 8001338:	08001988 	.word	0x08001988

0800133c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800133c:	b538      	push	{r3, r4, r5, lr}
 800133e:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001340:	6883      	ldr	r3, [r0, #8]
 8001342:	6902      	ldr	r2, [r0, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	6942      	ldr	r2, [r0, #20]
 8001348:	4313      	orrs	r3, r2
 800134a:	69c2      	ldr	r2, [r0, #28]
 800134c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800134e:	6801      	ldr	r1, [r0, #0]
 8001350:	6808      	ldr	r0, [r1, #0]
 8001352:	4a9f      	ldr	r2, [pc, #636]	; (80015d0 <UART_SetConfig+0x294>)
 8001354:	4002      	ands	r2, r0
 8001356:	4313      	orrs	r3, r2
 8001358:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800135a:	6822      	ldr	r2, [r4, #0]
 800135c:	6853      	ldr	r3, [r2, #4]
 800135e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001362:	68e1      	ldr	r1, [r4, #12]
 8001364:	430b      	orrs	r3, r1
 8001366:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001368:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 800136a:	6a23      	ldr	r3, [r4, #32]
 800136c:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800136e:	6821      	ldr	r1, [r4, #0]
 8001370:	688b      	ldr	r3, [r1, #8]
 8001372:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001376:	4313      	orrs	r3, r2
 8001378:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800137a:	6823      	ldr	r3, [r4, #0]
 800137c:	4a95      	ldr	r2, [pc, #596]	; (80015d4 <UART_SetConfig+0x298>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d019      	beq.n	80013b6 <UART_SetConfig+0x7a>
 8001382:	4a95      	ldr	r2, [pc, #596]	; (80015d8 <UART_SetConfig+0x29c>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d029      	beq.n	80013dc <UART_SetConfig+0xa0>
 8001388:	4a94      	ldr	r2, [pc, #592]	; (80015dc <UART_SetConfig+0x2a0>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d03e      	beq.n	800140c <UART_SetConfig+0xd0>
 800138e:	4a94      	ldr	r2, [pc, #592]	; (80015e0 <UART_SetConfig+0x2a4>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d062      	beq.n	800145a <UART_SetConfig+0x11e>
 8001394:	4a93      	ldr	r2, [pc, #588]	; (80015e4 <UART_SetConfig+0x2a8>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d071      	beq.n	800147e <UART_SetConfig+0x142>
 800139a:	4a93      	ldr	r2, [pc, #588]	; (80015e8 <UART_SetConfig+0x2ac>)
 800139c:	4293      	cmp	r3, r2
 800139e:	f000 8083 	beq.w	80014a8 <UART_SetConfig+0x16c>
 80013a2:	4a92      	ldr	r2, [pc, #584]	; (80015ec <UART_SetConfig+0x2b0>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	f000 8094 	beq.w	80014d2 <UART_SetConfig+0x196>
 80013aa:	4a91      	ldr	r2, [pc, #580]	; (80015f0 <UART_SetConfig+0x2b4>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	f000 80a5 	beq.w	80014fc <UART_SetConfig+0x1c0>
 80013b2:	2510      	movs	r5, #16
 80013b4:	e03a      	b.n	800142c <UART_SetConfig+0xf0>
 80013b6:	4b8f      	ldr	r3, [pc, #572]	; (80015f4 <UART_SetConfig+0x2b8>)
 80013b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	d809      	bhi.n	80013d8 <UART_SetConfig+0x9c>
 80013c4:	e8df f003 	tbb	[pc, r3]
 80013c8:	06ae0402 	.word	0x06ae0402
 80013cc:	2501      	movs	r5, #1
 80013ce:	e02d      	b.n	800142c <UART_SetConfig+0xf0>
 80013d0:	2504      	movs	r5, #4
 80013d2:	e02b      	b.n	800142c <UART_SetConfig+0xf0>
 80013d4:	2508      	movs	r5, #8
 80013d6:	e029      	b.n	800142c <UART_SetConfig+0xf0>
 80013d8:	2510      	movs	r5, #16
 80013da:	e027      	b.n	800142c <UART_SetConfig+0xf0>
 80013dc:	4b85      	ldr	r3, [pc, #532]	; (80015f4 <UART_SetConfig+0x2b8>)
 80013de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013e2:	f003 030c 	and.w	r3, r3, #12
 80013e6:	2b0c      	cmp	r3, #12
 80013e8:	d80e      	bhi.n	8001408 <UART_SetConfig+0xcc>
 80013ea:	e8df f003 	tbb	[pc, r3]
 80013ee:	0d07      	.short	0x0d07
 80013f0:	0d090d0d 	.word	0x0d090d0d
 80013f4:	0d9d0d0d 	.word	0x0d9d0d0d
 80013f8:	0d0d      	.short	0x0d0d
 80013fa:	0b          	.byte	0x0b
 80013fb:	00          	.byte	0x00
 80013fc:	2500      	movs	r5, #0
 80013fe:	e015      	b.n	800142c <UART_SetConfig+0xf0>
 8001400:	2504      	movs	r5, #4
 8001402:	e013      	b.n	800142c <UART_SetConfig+0xf0>
 8001404:	2508      	movs	r5, #8
 8001406:	e011      	b.n	800142c <UART_SetConfig+0xf0>
 8001408:	2510      	movs	r5, #16
 800140a:	e00f      	b.n	800142c <UART_SetConfig+0xf0>
 800140c:	4b79      	ldr	r3, [pc, #484]	; (80015f4 <UART_SetConfig+0x2b8>)
 800140e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001412:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001416:	2b20      	cmp	r3, #32
 8001418:	f000 8088 	beq.w	800152c <UART_SetConfig+0x1f0>
 800141c:	d819      	bhi.n	8001452 <UART_SetConfig+0x116>
 800141e:	2b00      	cmp	r3, #0
 8001420:	f000 8086 	beq.w	8001530 <UART_SetConfig+0x1f4>
 8001424:	2b10      	cmp	r3, #16
 8001426:	f040 8085 	bne.w	8001534 <UART_SetConfig+0x1f8>
 800142a:	2504      	movs	r5, #4

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800142c:	69e3      	ldr	r3, [r4, #28]
 800142e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001432:	f000 80ab 	beq.w	800158c <UART_SetConfig+0x250>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8001436:	2d08      	cmp	r5, #8
 8001438:	f200 8140 	bhi.w	80016bc <UART_SetConfig+0x380>
 800143c:	e8df f015 	tbh	[pc, r5, lsl #1]
 8001440:	01180107 	.word	0x01180107
 8001444:	013e0122 	.word	0x013e0122
 8001448:	013e012b 	.word	0x013e012b
 800144c:	013e013e 	.word	0x013e013e
 8001450:	0135      	.short	0x0135
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001452:	2b30      	cmp	r3, #48	; 0x30
 8001454:	d170      	bne.n	8001538 <UART_SetConfig+0x1fc>
 8001456:	2508      	movs	r5, #8
 8001458:	e7e8      	b.n	800142c <UART_SetConfig+0xf0>
 800145a:	4b66      	ldr	r3, [pc, #408]	; (80015f4 <UART_SetConfig+0x2b8>)
 800145c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001460:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001464:	2b80      	cmp	r3, #128	; 0x80
 8001466:	d069      	beq.n	800153c <UART_SetConfig+0x200>
 8001468:	d805      	bhi.n	8001476 <UART_SetConfig+0x13a>
 800146a:	2b00      	cmp	r3, #0
 800146c:	d068      	beq.n	8001540 <UART_SetConfig+0x204>
 800146e:	2b40      	cmp	r3, #64	; 0x40
 8001470:	d168      	bne.n	8001544 <UART_SetConfig+0x208>
 8001472:	2504      	movs	r5, #4
 8001474:	e7da      	b.n	800142c <UART_SetConfig+0xf0>
 8001476:	2bc0      	cmp	r3, #192	; 0xc0
 8001478:	d166      	bne.n	8001548 <UART_SetConfig+0x20c>
 800147a:	2508      	movs	r5, #8
 800147c:	e7d6      	b.n	800142c <UART_SetConfig+0xf0>
 800147e:	4b5d      	ldr	r3, [pc, #372]	; (80015f4 <UART_SetConfig+0x2b8>)
 8001480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001484:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800148c:	d05e      	beq.n	800154c <UART_SetConfig+0x210>
 800148e:	d806      	bhi.n	800149e <UART_SetConfig+0x162>
 8001490:	2b00      	cmp	r3, #0
 8001492:	d05d      	beq.n	8001550 <UART_SetConfig+0x214>
 8001494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001498:	d15c      	bne.n	8001554 <UART_SetConfig+0x218>
 800149a:	2504      	movs	r5, #4
 800149c:	e7c6      	b.n	800142c <UART_SetConfig+0xf0>
 800149e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80014a2:	d159      	bne.n	8001558 <UART_SetConfig+0x21c>
 80014a4:	2508      	movs	r5, #8
 80014a6:	e7c1      	b.n	800142c <UART_SetConfig+0xf0>
 80014a8:	4b52      	ldr	r3, [pc, #328]	; (80015f4 <UART_SetConfig+0x2b8>)
 80014aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014b6:	d051      	beq.n	800155c <UART_SetConfig+0x220>
 80014b8:	d806      	bhi.n	80014c8 <UART_SetConfig+0x18c>
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d050      	beq.n	8001560 <UART_SetConfig+0x224>
 80014be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014c2:	d14f      	bne.n	8001564 <UART_SetConfig+0x228>
 80014c4:	2504      	movs	r5, #4
 80014c6:	e7b1      	b.n	800142c <UART_SetConfig+0xf0>
 80014c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80014cc:	d14c      	bne.n	8001568 <UART_SetConfig+0x22c>
 80014ce:	2508      	movs	r5, #8
 80014d0:	e7ac      	b.n	800142c <UART_SetConfig+0xf0>
 80014d2:	4b48      	ldr	r3, [pc, #288]	; (80015f4 <UART_SetConfig+0x2b8>)
 80014d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014d8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80014dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014e0:	d044      	beq.n	800156c <UART_SetConfig+0x230>
 80014e2:	d806      	bhi.n	80014f2 <UART_SetConfig+0x1b6>
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d043      	beq.n	8001570 <UART_SetConfig+0x234>
 80014e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014ec:	d142      	bne.n	8001574 <UART_SetConfig+0x238>
 80014ee:	2504      	movs	r5, #4
 80014f0:	e79c      	b.n	800142c <UART_SetConfig+0xf0>
 80014f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80014f6:	d13f      	bne.n	8001578 <UART_SetConfig+0x23c>
 80014f8:	2508      	movs	r5, #8
 80014fa:	e797      	b.n	800142c <UART_SetConfig+0xf0>
 80014fc:	4b3d      	ldr	r3, [pc, #244]	; (80015f4 <UART_SetConfig+0x2b8>)
 80014fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001502:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800150a:	d037      	beq.n	800157c <UART_SetConfig+0x240>
 800150c:	d805      	bhi.n	800151a <UART_SetConfig+0x1de>
 800150e:	b3bb      	cbz	r3, 8001580 <UART_SetConfig+0x244>
 8001510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001514:	d136      	bne.n	8001584 <UART_SetConfig+0x248>
 8001516:	2504      	movs	r5, #4
 8001518:	e788      	b.n	800142c <UART_SetConfig+0xf0>
 800151a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800151e:	d133      	bne.n	8001588 <UART_SetConfig+0x24c>
 8001520:	2508      	movs	r5, #8
 8001522:	e783      	b.n	800142c <UART_SetConfig+0xf0>
 8001524:	2502      	movs	r5, #2
 8001526:	e781      	b.n	800142c <UART_SetConfig+0xf0>
 8001528:	2502      	movs	r5, #2
 800152a:	e77f      	b.n	800142c <UART_SetConfig+0xf0>
 800152c:	2502      	movs	r5, #2
 800152e:	e77d      	b.n	800142c <UART_SetConfig+0xf0>
 8001530:	2500      	movs	r5, #0
 8001532:	e77b      	b.n	800142c <UART_SetConfig+0xf0>
 8001534:	2510      	movs	r5, #16
 8001536:	e779      	b.n	800142c <UART_SetConfig+0xf0>
 8001538:	2510      	movs	r5, #16
 800153a:	e777      	b.n	800142c <UART_SetConfig+0xf0>
 800153c:	2502      	movs	r5, #2
 800153e:	e775      	b.n	800142c <UART_SetConfig+0xf0>
 8001540:	2500      	movs	r5, #0
 8001542:	e773      	b.n	800142c <UART_SetConfig+0xf0>
 8001544:	2510      	movs	r5, #16
 8001546:	e771      	b.n	800142c <UART_SetConfig+0xf0>
 8001548:	2510      	movs	r5, #16
 800154a:	e76f      	b.n	800142c <UART_SetConfig+0xf0>
 800154c:	2502      	movs	r5, #2
 800154e:	e76d      	b.n	800142c <UART_SetConfig+0xf0>
 8001550:	2500      	movs	r5, #0
 8001552:	e76b      	b.n	800142c <UART_SetConfig+0xf0>
 8001554:	2510      	movs	r5, #16
 8001556:	e769      	b.n	800142c <UART_SetConfig+0xf0>
 8001558:	2510      	movs	r5, #16
 800155a:	e767      	b.n	800142c <UART_SetConfig+0xf0>
 800155c:	2502      	movs	r5, #2
 800155e:	e765      	b.n	800142c <UART_SetConfig+0xf0>
 8001560:	2501      	movs	r5, #1
 8001562:	e763      	b.n	800142c <UART_SetConfig+0xf0>
 8001564:	2510      	movs	r5, #16
 8001566:	e761      	b.n	800142c <UART_SetConfig+0xf0>
 8001568:	2510      	movs	r5, #16
 800156a:	e75f      	b.n	800142c <UART_SetConfig+0xf0>
 800156c:	2502      	movs	r5, #2
 800156e:	e75d      	b.n	800142c <UART_SetConfig+0xf0>
 8001570:	2500      	movs	r5, #0
 8001572:	e75b      	b.n	800142c <UART_SetConfig+0xf0>
 8001574:	2510      	movs	r5, #16
 8001576:	e759      	b.n	800142c <UART_SetConfig+0xf0>
 8001578:	2510      	movs	r5, #16
 800157a:	e757      	b.n	800142c <UART_SetConfig+0xf0>
 800157c:	2502      	movs	r5, #2
 800157e:	e755      	b.n	800142c <UART_SetConfig+0xf0>
 8001580:	2500      	movs	r5, #0
 8001582:	e753      	b.n	800142c <UART_SetConfig+0xf0>
 8001584:	2510      	movs	r5, #16
 8001586:	e751      	b.n	800142c <UART_SetConfig+0xf0>
 8001588:	2510      	movs	r5, #16
 800158a:	e74f      	b.n	800142c <UART_SetConfig+0xf0>
    switch (clocksource)
 800158c:	2d08      	cmp	r5, #8
 800158e:	d85b      	bhi.n	8001648 <UART_SetConfig+0x30c>
 8001590:	e8df f005 	tbb	[pc, r5]
 8001594:	5a3d3205 	.word	0x5a3d3205
 8001598:	5a5a5a46 	.word	0x5a5a5a46
 800159c:	51          	.byte	0x51
 800159d:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 800159e:	f7ff fead 	bl	80012fc <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80015a2:	6862      	ldr	r2, [r4, #4]
 80015a4:	0853      	lsrs	r3, r2, #1
 80015a6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80015aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80015ae:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80015b0:	f1a3 0110 	sub.w	r1, r3, #16
 80015b4:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80015b8:	4291      	cmp	r1, r2
 80015ba:	f200 8082 	bhi.w	80016c2 <UART_SetConfig+0x386>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80015be:	b29a      	uxth	r2, r3
 80015c0:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80015c4:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80015c8:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 80015ca:	6822      	ldr	r2, [r4, #0]
 80015cc:	60d3      	str	r3, [r2, #12]
 80015ce:	e07b      	b.n	80016c8 <UART_SetConfig+0x38c>
 80015d0:	efff69f3 	.word	0xefff69f3
 80015d4:	40011000 	.word	0x40011000
 80015d8:	40004400 	.word	0x40004400
 80015dc:	40004800 	.word	0x40004800
 80015e0:	40004c00 	.word	0x40004c00
 80015e4:	40005000 	.word	0x40005000
 80015e8:	40011400 	.word	0x40011400
 80015ec:	40007800 	.word	0x40007800
 80015f0:	40007c00 	.word	0x40007c00
 80015f4:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK2Freq();
 80015f8:	f7ff fe90 	bl	800131c <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80015fc:	6862      	ldr	r2, [r4, #4]
 80015fe:	0853      	lsrs	r3, r2, #1
 8001600:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001604:	fbb3 f3f2 	udiv	r3, r3, r2
 8001608:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800160a:	2500      	movs	r5, #0
        break;
 800160c:	e7d0      	b.n	80015b0 <UART_SetConfig+0x274>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800160e:	6862      	ldr	r2, [r4, #4]
 8001610:	4b30      	ldr	r3, [pc, #192]	; (80016d4 <UART_SetConfig+0x398>)
 8001612:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8001616:	fbb3 f3f2 	udiv	r3, r3, r2
 800161a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800161c:	2500      	movs	r5, #0
        break;
 800161e:	e7c7      	b.n	80015b0 <UART_SetConfig+0x274>
        pclk = HAL_RCC_GetSysClockFreq();
 8001620:	f7ff fd60 	bl	80010e4 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001624:	6862      	ldr	r2, [r4, #4]
 8001626:	0853      	lsrs	r3, r2, #1
 8001628:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800162c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001630:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001632:	2500      	movs	r5, #0
        break;
 8001634:	e7bc      	b.n	80015b0 <UART_SetConfig+0x274>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001636:	6862      	ldr	r2, [r4, #4]
 8001638:	0853      	lsrs	r3, r2, #1
 800163a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800163e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001642:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001644:	2500      	movs	r5, #0
        break;
 8001646:	e7b3      	b.n	80015b0 <UART_SetConfig+0x274>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001648:	2501      	movs	r5, #1
 800164a:	2300      	movs	r3, #0
 800164c:	e7b0      	b.n	80015b0 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800164e:	f7ff fe55 	bl	80012fc <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001652:	6862      	ldr	r2, [r4, #4]
 8001654:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001658:	fbb3 f3f2 	udiv	r3, r3, r2
 800165c:	b29b      	uxth	r3, r3
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800165e:	f1a3 0110 	sub.w	r1, r3, #16
 8001662:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001666:	4291      	cmp	r1, r2
 8001668:	d82d      	bhi.n	80016c6 <UART_SetConfig+0x38a>
    {
      huart->Instance->BRR = usartdiv;
 800166a:	6822      	ldr	r2, [r4, #0]
 800166c:	60d3      	str	r3, [r2, #12]
 800166e:	e02b      	b.n	80016c8 <UART_SetConfig+0x38c>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001670:	f7ff fe54 	bl	800131c <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001674:	6862      	ldr	r2, [r4, #4]
 8001676:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800167a:	fbb3 f3f2 	udiv	r3, r3, r2
 800167e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001680:	2500      	movs	r5, #0
        break;
 8001682:	e7ec      	b.n	800165e <UART_SetConfig+0x322>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001684:	6862      	ldr	r2, [r4, #4]
 8001686:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <UART_SetConfig+0x39c>)
 8001688:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800168c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001690:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001692:	2500      	movs	r5, #0
        break;
 8001694:	e7e3      	b.n	800165e <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetSysClockFreq();
 8001696:	f7ff fd25 	bl	80010e4 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800169a:	6862      	ldr	r2, [r4, #4]
 800169c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80016a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80016a4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80016a6:	2500      	movs	r5, #0
        break;
 80016a8:	e7d9      	b.n	800165e <UART_SetConfig+0x322>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80016aa:	6862      	ldr	r2, [r4, #4]
 80016ac:	0853      	lsrs	r3, r2, #1
 80016ae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80016b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80016b6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80016b8:	2500      	movs	r5, #0
        break;
 80016ba:	e7d0      	b.n	800165e <UART_SetConfig+0x322>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016bc:	2501      	movs	r5, #1
 80016be:	2300      	movs	r3, #0
 80016c0:	e7cd      	b.n	800165e <UART_SetConfig+0x322>
      ret = HAL_ERROR;
 80016c2:	2501      	movs	r5, #1
 80016c4:	e000      	b.n	80016c8 <UART_SetConfig+0x38c>
    }
    else
    {
      ret = HAL_ERROR;
 80016c6:	2501      	movs	r5, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80016cc:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 80016ce:	4628      	mov	r0, r5
 80016d0:	bd38      	pop	{r3, r4, r5, pc}
 80016d2:	bf00      	nop
 80016d4:	01e84800 	.word	0x01e84800
 80016d8:	00f42400 	.word	0x00f42400

080016dc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80016dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80016de:	f013 0f01 	tst.w	r3, #1
 80016e2:	d006      	beq.n	80016f2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80016e4:	6802      	ldr	r2, [r0, #0]
 80016e6:	6853      	ldr	r3, [r2, #4]
 80016e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80016ec:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80016ee:	430b      	orrs	r3, r1
 80016f0:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80016f2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80016f4:	f013 0f02 	tst.w	r3, #2
 80016f8:	d006      	beq.n	8001708 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80016fa:	6802      	ldr	r2, [r0, #0]
 80016fc:	6853      	ldr	r3, [r2, #4]
 80016fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001702:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001704:	430b      	orrs	r3, r1
 8001706:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001708:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800170a:	f013 0f04 	tst.w	r3, #4
 800170e:	d006      	beq.n	800171e <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001710:	6802      	ldr	r2, [r0, #0]
 8001712:	6853      	ldr	r3, [r2, #4]
 8001714:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001718:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800171a:	430b      	orrs	r3, r1
 800171c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800171e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001720:	f013 0f08 	tst.w	r3, #8
 8001724:	d006      	beq.n	8001734 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001726:	6802      	ldr	r2, [r0, #0]
 8001728:	6853      	ldr	r3, [r2, #4]
 800172a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800172e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001730:	430b      	orrs	r3, r1
 8001732:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001734:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001736:	f013 0f10 	tst.w	r3, #16
 800173a:	d006      	beq.n	800174a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800173c:	6802      	ldr	r2, [r0, #0]
 800173e:	6893      	ldr	r3, [r2, #8]
 8001740:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001744:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001746:	430b      	orrs	r3, r1
 8001748:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800174a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800174c:	f013 0f20 	tst.w	r3, #32
 8001750:	d006      	beq.n	8001760 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001752:	6802      	ldr	r2, [r0, #0]
 8001754:	6893      	ldr	r3, [r2, #8]
 8001756:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800175a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800175c:	430b      	orrs	r3, r1
 800175e:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001760:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001762:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001766:	d00a      	beq.n	800177e <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001768:	6802      	ldr	r2, [r0, #0]
 800176a:	6853      	ldr	r3, [r2, #4]
 800176c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001770:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001772:	430b      	orrs	r3, r1
 8001774:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001776:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001778:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800177c:	d00b      	beq.n	8001796 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800177e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001780:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001784:	d006      	beq.n	8001794 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001786:	6802      	ldr	r2, [r0, #0]
 8001788:	6853      	ldr	r3, [r2, #4]
 800178a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800178e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001790:	430b      	orrs	r3, r1
 8001792:	6053      	str	r3, [r2, #4]
  }
}
 8001794:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001796:	6802      	ldr	r2, [r0, #0]
 8001798:	6853      	ldr	r3, [r2, #4]
 800179a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800179e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80017a0:	430b      	orrs	r3, r1
 80017a2:	6053      	str	r3, [r2, #4]
 80017a4:	e7eb      	b.n	800177e <UART_AdvFeatureConfig+0xa2>

080017a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80017a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017aa:	4605      	mov	r5, r0
 80017ac:	460f      	mov	r7, r1
 80017ae:	4616      	mov	r6, r2
 80017b0:	4699      	mov	r9, r3
 80017b2:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017b6:	682c      	ldr	r4, [r5, #0]
 80017b8:	69e4      	ldr	r4, [r4, #28]
 80017ba:	ea37 0304 	bics.w	r3, r7, r4
 80017be:	bf0c      	ite	eq
 80017c0:	2401      	moveq	r4, #1
 80017c2:	2400      	movne	r4, #0
 80017c4:	42b4      	cmp	r4, r6
 80017c6:	d13c      	bne.n	8001842 <UART_WaitOnFlagUntilTimeout+0x9c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017c8:	f1b8 3fff 	cmp.w	r8, #4294967295
 80017cc:	d0f3      	beq.n	80017b6 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017ce:	f7ff f8d9 	bl	8000984 <HAL_GetTick>
 80017d2:	eba0 0009 	sub.w	r0, r0, r9
 80017d6:	4540      	cmp	r0, r8
 80017d8:	d821      	bhi.n	800181e <UART_WaitOnFlagUntilTimeout+0x78>
 80017da:	f1b8 0f00 	cmp.w	r8, #0
 80017de:	d01e      	beq.n	800181e <UART_WaitOnFlagUntilTimeout+0x78>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80017e0:	682b      	ldr	r3, [r5, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	f012 0f04 	tst.w	r2, #4
 80017e8:	d0e5      	beq.n	80017b6 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80017ea:	69da      	ldr	r2, [r3, #28]
 80017ec:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80017f0:	d0e1      	beq.n	80017b6 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80017f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017f6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80017f8:	682a      	ldr	r2, [r5, #0]
 80017fa:	6813      	ldr	r3, [r2, #0]
 80017fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001800:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001802:	682a      	ldr	r2, [r5, #0]
 8001804:	6893      	ldr	r3, [r2, #8]
 8001806:	f023 0301 	bic.w	r3, r3, #1
 800180a:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 800180c:	2320      	movs	r3, #32
 800180e:	676b      	str	r3, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001810:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001812:	67eb      	str	r3, [r5, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001814:	2300      	movs	r3, #0
 8001816:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800181a:	2003      	movs	r0, #3
 800181c:	e012      	b.n	8001844 <UART_WaitOnFlagUntilTimeout+0x9e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800181e:	682a      	ldr	r2, [r5, #0]
 8001820:	6813      	ldr	r3, [r2, #0]
 8001822:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001826:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001828:	682a      	ldr	r2, [r5, #0]
 800182a:	6893      	ldr	r3, [r2, #8]
 800182c:	f023 0301 	bic.w	r3, r3, #1
 8001830:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001832:	2320      	movs	r3, #32
 8001834:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001836:	67ab      	str	r3, [r5, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8001838:	2300      	movs	r3, #0
 800183a:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
        return HAL_TIMEOUT;
 800183e:	2003      	movs	r0, #3
 8001840:	e000      	b.n	8001844 <UART_WaitOnFlagUntilTimeout+0x9e>
        }
      }
    }
  }
  return HAL_OK;
 8001842:	2000      	movs	r0, #0
}
 8001844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001848 <UART_CheckIdleState>:
{
 8001848:	b530      	push	{r4, r5, lr}
 800184a:	b083      	sub	sp, #12
 800184c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800184e:	2300      	movs	r3, #0
 8001850:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001852:	f7ff f897 	bl	8000984 <HAL_GetTick>
 8001856:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001858:	6823      	ldr	r3, [r4, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f013 0f08 	tst.w	r3, #8
 8001860:	d10c      	bne.n	800187c <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001862:	6823      	ldr	r3, [r4, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f013 0f04 	tst.w	r3, #4
 800186a:	d115      	bne.n	8001898 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 800186c:	2320      	movs	r3, #32
 800186e:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001870:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001872:	2000      	movs	r0, #0
 8001874:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8001878:	b003      	add	sp, #12
 800187a:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800187c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	4603      	mov	r3, r0
 8001884:	2200      	movs	r2, #0
 8001886:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800188a:	4620      	mov	r0, r4
 800188c:	f7ff ff8b 	bl	80017a6 <UART_WaitOnFlagUntilTimeout>
 8001890:	2800      	cmp	r0, #0
 8001892:	d0e6      	beq.n	8001862 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8001894:	2003      	movs	r0, #3
 8001896:	e7ef      	b.n	8001878 <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001898:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	462b      	mov	r3, r5
 80018a0:	2200      	movs	r2, #0
 80018a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80018a6:	4620      	mov	r0, r4
 80018a8:	f7ff ff7d 	bl	80017a6 <UART_WaitOnFlagUntilTimeout>
 80018ac:	2800      	cmp	r0, #0
 80018ae:	d0dd      	beq.n	800186c <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 80018b0:	2003      	movs	r0, #3
 80018b2:	e7e1      	b.n	8001878 <UART_CheckIdleState+0x30>

080018b4 <HAL_UART_Init>:
  if (huart == NULL)
 80018b4:	b368      	cbz	r0, 8001912 <HAL_UART_Init+0x5e>
{
 80018b6:	b510      	push	{r4, lr}
 80018b8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80018ba:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80018bc:	b303      	cbz	r3, 8001900 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 80018be:	2324      	movs	r3, #36	; 0x24
 80018c0:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80018c2:	6822      	ldr	r2, [r4, #0]
 80018c4:	6813      	ldr	r3, [r2, #0]
 80018c6:	f023 0301 	bic.w	r3, r3, #1
 80018ca:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80018cc:	4620      	mov	r0, r4
 80018ce:	f7ff fd35 	bl	800133c <UART_SetConfig>
 80018d2:	2801      	cmp	r0, #1
 80018d4:	d013      	beq.n	80018fe <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80018d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018d8:	b9bb      	cbnz	r3, 800190a <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018da:	6822      	ldr	r2, [r4, #0]
 80018dc:	6853      	ldr	r3, [r2, #4]
 80018de:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80018e2:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018e4:	6822      	ldr	r2, [r4, #0]
 80018e6:	6893      	ldr	r3, [r2, #8]
 80018e8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80018ec:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80018ee:	6822      	ldr	r2, [r4, #0]
 80018f0:	6813      	ldr	r3, [r2, #0]
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80018f8:	4620      	mov	r0, r4
 80018fa:	f7ff ffa5 	bl	8001848 <UART_CheckIdleState>
}
 80018fe:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001900:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001904:	f7fe ff46 	bl	8000794 <HAL_UART_MspInit>
 8001908:	e7d9      	b.n	80018be <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 800190a:	4620      	mov	r0, r4
 800190c:	f7ff fee6 	bl	80016dc <UART_AdvFeatureConfig>
 8001910:	e7e3      	b.n	80018da <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8001912:	2001      	movs	r0, #1
}
 8001914:	4770      	bx	lr
	...

08001918 <__libc_init_array>:
 8001918:	b570      	push	{r4, r5, r6, lr}
 800191a:	4d0d      	ldr	r5, [pc, #52]	; (8001950 <__libc_init_array+0x38>)
 800191c:	4c0d      	ldr	r4, [pc, #52]	; (8001954 <__libc_init_array+0x3c>)
 800191e:	1b64      	subs	r4, r4, r5
 8001920:	10a4      	asrs	r4, r4, #2
 8001922:	2600      	movs	r6, #0
 8001924:	42a6      	cmp	r6, r4
 8001926:	d109      	bne.n	800193c <__libc_init_array+0x24>
 8001928:	4d0b      	ldr	r5, [pc, #44]	; (8001958 <__libc_init_array+0x40>)
 800192a:	4c0c      	ldr	r4, [pc, #48]	; (800195c <__libc_init_array+0x44>)
 800192c:	f000 f818 	bl	8001960 <_init>
 8001930:	1b64      	subs	r4, r4, r5
 8001932:	10a4      	asrs	r4, r4, #2
 8001934:	2600      	movs	r6, #0
 8001936:	42a6      	cmp	r6, r4
 8001938:	d105      	bne.n	8001946 <__libc_init_array+0x2e>
 800193a:	bd70      	pop	{r4, r5, r6, pc}
 800193c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001940:	4798      	blx	r3
 8001942:	3601      	adds	r6, #1
 8001944:	e7ee      	b.n	8001924 <__libc_init_array+0xc>
 8001946:	f855 3b04 	ldr.w	r3, [r5], #4
 800194a:	4798      	blx	r3
 800194c:	3601      	adds	r6, #1
 800194e:	e7f2      	b.n	8001936 <__libc_init_array+0x1e>
 8001950:	08001998 	.word	0x08001998
 8001954:	08001998 	.word	0x08001998
 8001958:	08001998 	.word	0x08001998
 800195c:	0800199c 	.word	0x0800199c

08001960 <_init>:
 8001960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001962:	bf00      	nop
 8001964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001966:	bc08      	pop	{r3}
 8001968:	469e      	mov	lr, r3
 800196a:	4770      	bx	lr

0800196c <_fini>:
 800196c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800196e:	bf00      	nop
 8001970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001972:	bc08      	pop	{r3}
 8001974:	469e      	mov	lr, r3
 8001976:	4770      	bx	lr
